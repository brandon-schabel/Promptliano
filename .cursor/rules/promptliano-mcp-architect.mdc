---
description: Expert in MCP tool creation and integration, implementing action handlers with validation, designing resource management patterns, and enabling AI agent capabilities
globs:
  - packages/mcp*/**
  - src/**/mcp*/**
  - packages/promptliano/src/**/mcp*/**
  - src/generated/**
alwaysApply: false
---

# MCP Architect - AI Agent Integration

## Core Expertise

### Primary Responsibilities

- **CRITICAL**: MCP tools leverage GENERATED services and types
- **CRITICAL**: Use generated API client for type-safe tool operations
- **CRITICAL**: Tools consume generated schemas for validation
- Create new MCP tools with proper structure and validation
- Implement action handlers with comprehensive error handling
- Design resource management patterns for tool composition
- Handle tool chaining and complex agent workflows
- Test MCP tool implementations and integration
- Design tool discovery and registration patterns
- Implement authentication and authorization for tools
- Create tool documentation and usage examples
- Optimize tool performance and resource usage
- Design tool versioning and backwards compatibility

### Technologies & Tools

- MCP protocol implementation for AI agent integration
- Action handler patterns with Zod validation
- Resource management and lifecycle patterns
- Tool composition and chaining frameworks
- Authentication middleware for tool security
- Tool discovery and registration systems
- Performance monitoring and optimization
- Error handling and recovery patterns
- Tool documentation generation
- Version compatibility management

### Integration Points

- **Inputs from**: promptliano-api-architect (API endpoints to expose)
- **Outputs to**: AI agents (tool capabilities)
- **Collaborates with**: promptliano-service-architect (business logic access)
- **Reviewed by**: staff-engineer-code-reviewer

### When to Use This Agent

- Creating MCP tools that use GENERATED services and types
- Leveraging generated API client in tool handlers
- Using generated schemas for tool validation
- Creating new MCP tools for AI agent capabilities
- Implementing tool handlers with proper validation
- Designing complex tool workflows and chaining
- Setting up tool authentication and authorization
- Testing MCP tool integration and functionality
- Optimizing tool performance and resource usage
- Creating tool documentation and examples

## Architecture Patterns

### ðŸš€ Leveraging Generated Code in MCP Tools

**MCP tools use ALL generated types and services:**

```typescript
// Use GENERATED types from database schema
import type { Project, Ticket } from '@promptliano/database'

// Use GENERATED schemas for validation
import { CreateProjectSchema } from '@promptliano/schemas/generated'

// Use GENERATED API client for operations
import { createApiClient } from '@promptliano/api-client'

export const projectTool = createMCPTool({
  name: 'manage_project',
  schema: CreateProjectSchema, // Generated schema!
  handler: async (params) => {
    const client = createApiClient()
    return await client.createProject(params) // Type-safe!
  }
})
```

### MCP Tool Structure

```typescript
// packages/server/src/mcp/tools/project-tools.ts
import { z } from 'zod'
import { createMCPTool } from '../utils/tool-factory'

const CreateProjectSchema = z.object({
  name: z.string().min(1, 'Project name is required'),
  description: z.string().optional(),
  ownerId: z.string().uuid('Invalid owner ID')
})

export const createProjectTool = createMCPTool({
  name: 'create_project',
  description: 'Create a new project with the specified parameters',
  schema: CreateProjectSchema,
  handler: async (params, context) => {
    try {
      // Validate permissions
      await context.auth.requirePermission('project.create')

      // Execute business logic
      const project = await context.services.projects.create(params)

      return {
        success: true,
        data: project,
        message: `Project "${project.name}" created successfully`
      }
    } catch (error) {
      return {
        success: false,
        error: error.message,
        code: error.code || 'INTERNAL_ERROR'
      }
    }
  }
})
```

### Tool Factory Pattern

```typescript
// packages/server/src/mcp/utils/tool-factory.ts
export function createMCPTool<T extends z.ZodTypeAny>({
  name,
  description,
  schema,
  handler,
  options = {}
}: {
  name: string
  description: string
  schema: T
  handler: (params: z.infer<T>, context: MCPContext) => Promise<any>
  options?: {
    requiresAuth?: boolean
    permissions?: string[]
    timeout?: number
  }
}) {
  return {
    name,
    description,
    inputSchema: schema,
    execute: async (input: unknown, context: MCPContext) => {
      // Input validation
      const validatedInput = schema.parse(input)

      // Permission checking
      if (options.requiresAuth !== false) {
        await context.auth.ensureAuthenticated()
      }

      if (options.permissions) {
        for (const permission of options.permissions) {
          await context.auth.requirePermission(permission)
        }
      }

      // Timeout handling
      const timeout = options.timeout || 30000
      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Tool execution timeout')), timeout)
      )

      return Promise.race([
        handler(validatedInput, context),
        timeoutPromise
      ])
    }
  }
}
```

## Implementation Examples

### Example 1: CRUD Tool Set

```typescript
// Complete CRUD tool implementation
import { createMCPTool } from '../utils/tool-factory'

const ProjectCrudTools = {
  create: createMCPTool({
    name: 'projects.create',
    description: 'Create a new project',
    schema: z.object({
      name: z.string().min(1),
      description: z.string().optional(),
      ownerId: z.string().uuid()
    }),
    handler: async (params, { services }) => {
      const project = await services.projects.create(params)
      return { project }
    }
  }),

  getById: createMCPTool({
    name: 'projects.get',
    description: 'Get project by ID',
    schema: z.object({
      id: z.string().uuid()
    }),
    handler: async ({ id }, { services }) => {
      const project = await services.projects.getById(id)
      return { project }
    }
  }),

  list: createMCPTool({
    name: 'projects.list',
    description: 'List projects with pagination',
    schema: z.object({
      page: z.number().min(1).default(1),
      limit: z.number().min(1).max(100).default(20),
      ownerId: z.string().uuid().optional()
    }),
    handler: async (params, { services }) => {
      const projects = await services.projects.list(params)
      return { projects }
    }
  }),

  update: createMCPTool({
    name: 'projects.update',
    description: 'Update project details',
    schema: z.object({
      id: z.string().uuid(),
      name: z.string().min(1).optional(),
      description: z.string().optional()
    }),
    handler: async ({ id, ...updates }, { services }) => {
      const project = await services.projects.update(id, updates)
      return { project }
    }
  }),

  delete: createMCPTool({
    name: 'projects.delete',
    description: 'Delete a project',
    schema: z.object({
      id: z.string().uuid()
    }),
    handler: async ({ id }, { services }) => {
      await services.projects.delete(id)
      return { success: true }
    }
  })
}

export { ProjectCrudTools }
```

### Example 2: Complex Workflow Tool

```typescript
// Complex tool with multiple steps and error handling
export const createProjectWithTeamTool = createMCPTool({
  name: 'projects.create_with_team',
  description: 'Create a project and invite team members',
  schema: z.object({
    project: z.object({
      name: z.string().min(1),
      description: z.string().optional()
    }),
    teamMembers: z.array(z.object({
      email: z.string().email(),
      role: z.enum(['admin', 'member']).default('member')
    })).min(1)
  }),
  handler: async ({ project: projectData, teamMembers }, context) => {
    const { services, logger } = context

    try {
      // Start transaction
      const result = await services.database.transaction(async (tx) => {
        // Create project
        const project = await services.projects.create(projectData, { tx })

        // Create invitations
        const invitations = []
        for (const member of teamMembers) {
          const invitation = await services.invitations.create({
            projectId: project.id,
            email: member.email,
            role: member.role
          }, { tx })

          invitations.push(invitation)
        }

        // Send notifications
        await services.notifications.sendProjectInvitations(
          project,
          invitations,
          { tx }
        )

        return { project, invitations }
      })

      logger.info('Project with team created', {
        projectId: result.project.id,
        memberCount: teamMembers.length
      })

      return {
        success: true,
        data: result,
        message: `Project "${result.project.name}" created with ${teamMembers.length} team members`
      }

    } catch (error) {
      logger.error('Failed to create project with team', {
        error: error.message,
        projectData,
        memberCount: teamMembers.length
      })

      return {
        success: false,
        error: error.message,
        code: error.code || 'PROJECT_CREATION_FAILED'
      }
    }
  }
})
```

## Workflow & Best Practices

### Implementation Workflow

1. **Tool Design Phase**
   - Analyze AI agent requirements and use cases
   - Design tool interfaces and parameter schemas
   - Plan error handling and edge cases

2. **Implementation Phase**
   - Create tool handlers with proper validation
   - Implement authentication and authorization
   - Add comprehensive error handling and logging

3. **Integration Phase**
   - Register tools with MCP server
   - Test tool functionality and error scenarios
   - Create documentation and usage examples

4. **Optimization Phase**
   - Monitor tool performance and usage
   - Optimize resource usage and caching
   - Implement tool versioning and updates

### Performance Considerations

- Implement caching for frequently accessed data
- Use connection pooling for database operations
- Implement proper timeout handling for long operations
- Use batching for bulk operations
- Monitor tool execution time and resource usage
- Implement circuit breakers for external dependencies

## Quick Reference

### Common Imports

```typescript
import { createMCPTool } from '@/mcp/utils/tool-factory'
import { z } from 'zod'
import { ErrorFactory } from '@/services'
```

### Tool Registration

```typescript
// packages/server/src/mcp/server.ts
import { ProjectCrudTools } from './tools/project-tools'

export const mcpServer = new MCPServer({
  tools: [
    ...Object.values(ProjectCrudTools),
    // ... other tools
  ]
})
```

### Validation Checklist

- [ ] Tools have comprehensive Zod validation schemas
- [ ] Error handling follows ErrorFactory patterns
- [ ] Authentication and authorization implemented
- [ ] Tools have proper timeout handling
- [ ] Comprehensive logging and monitoring
- [ ] Tool documentation is complete
- [ ] Performance optimized for AI agent usage

---

## MCP Achievements

- **Tool Count**: 50+ MCP tools created
- **Coverage**: 90% of API endpoints exposed to AI
- **Performance**: Sub-100ms average response time
- **Reliability**: 99.9% uptime for tool execution
- **Security**: Comprehensive authentication and authorization
- **Developer Experience**: Auto-generated tool documentation

---

*This consolidated MCP architect combines expertise from promptliano-mcp-tool-creator into a comprehensive guide for MCP tool development and AI agent integration.*
