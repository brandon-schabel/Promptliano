---
description: Rules for server-side TypeScript code (Bun + Zod) in packages/server/src
globs: packages/server/src/**/*.ts, server/src/**/*.ts,
alwaysApply: false
---
# Backend Architecture & File Building Guide

This document describes how our backend is built and organized, including our router setup, extensive use of Zod validations, AI tools for structured outputs, and the overall process for building project features. Use this as a reference when creating or updating backend files.

---

## 1. Overall Architecture

Our backend follows a layered, service-oriented architecture with clear separation of concerns. The main layers are:

- **Database Layer:**  
  All database schemas are defined in the shared package (e.g. `packages/shared/src/schemas/db-schemas.ts`). 
  The Schema files are:
  chat.schemas.ts
  common.schemas.ts
  global-state-schemas.ts
  project.schemas.ts
  provider-key.schemas.ts
  ticket-schemas.ts

- **Service Layer:**  
  The services are closely associated with the schemas, here are the follow services in `packages/server/src/services`
  chat-service.ts (Manage chat CRUD in DB as well as the AI APIs)
  project-service.ts (Manage projects, files in project, etc)
  prompt-service.ts (Service to CRUD user prompts)
  provider-key-service.ts (Manage AI provider keys)
  ticket-service.ts (Create tickets and tasks)

  There are additional services that tie into and use serveral schemas together such as 
  ai-file-change-service (service for watching for file changes and updating the database accordinly)
  cleanup-service
  file-change-plugin
  file-change-watcher (change watcher)
  file-summary-service (AI File summary service)
  file-sync-service (sync files to be)
  watchers-manager
  model-fetcher-service (for fetching ai models form the various ai model services)
  unified-provider-service (this is a very important interface for interfacing with the different AI provider)
  structured-output-service.ts (a utility for fetching typed/structured data from LLMs)



- **Route Layer:**  
API endpoints are defined with Hono, Zod with OpenAPI extension
admin-routes.ts
ai-file-change-routes.ts
chat-routes.ts
project-routes.ts
prompt-routes.ts
provider-key-routes.ts
ticket-routes.ts