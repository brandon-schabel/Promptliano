---
description: Rules for server-side TypeScript code (Bun + Zod) in packages/server/src
globs: packages/server/src/**/*.ts, server/src/**/*.ts,
alwaysApply: false
---
# Backend Architecture & File Building Guide

This document describes how our backend is built and organized, including our router setup, extensive use of Zod validations, AI tools for structured outputs, and the overall process for building project features. Use this as a reference when creating or updating backend files.

---

## 1. Overall Architecture

Our backend follows a layered, service-oriented architecture with clear separation of concerns. The main layers are:

- **Database Layer:**  
  All database schemas are defined in the shared package (e.g. `packages/shared/src/utilts/database/db-schemas.ts`). Any change in business data (like projects, files, prompts, etc.) starts by updating these schemas.  
- **Service Layer:**  
  Business logic is encapsulated in services (e.g. `ProjectService`, `FileSyncService`, `FileSummaryService`). These services perform database operations, file synchronization, summarization, and other domain-specific tasks.
- **Route Layer:**  
API endpoints are defined with Hono
- **WebSocket Integration:**  
  For real-time state updates, our backend integrates with BNK WebSocket. Global state is managed via an adapter (in `packages/server/src/utils/websocket/websocket-state-adapter.ts`) that loads and broadcasts state changes over WebSocket.
- **AI & Structured Outputs:**  
  AI tools are integrated to generate structured outputs. On the server side, the structured output fetcher (found in `packages/server/src/utils/structured-output-fetcher.ts`) converts Zod schemas to JSON schemas, streams responses from the AI model, and validates them with Zod. On the client, the `useGenerateStructuredOutput` hook leverages these capabilities to return strongly typed structured data.

