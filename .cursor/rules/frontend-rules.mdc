---
description: It's helpful for building features on the client.
globs: packages/client/src/**/*.tsx, client/src/**/*.tsx
---
# Frontend Cursor Rules: Extended Guidelines

This document expands upon our **React + TypeScript** ruleset, adding details on **TanStack Router**, **TanStack Query**, and **BNK WebSocket Manager** usage. It also references our existing frontend code structure (e.g., `main.tsx`, `projects.tsx`, etc.).  

Below is a comprehensive guide to writing maintainable, modern, and real-time-capable React code in our client application.

---

## 1. Functional Components & Hooks

1. **Only Functional Components**  
   - No class components. React 19’s concurrency features and modern hooks let us keep things purely functional (`function MyComponent() {}`).  
   - Use hooks (`useState`, `useReducer`, `useMemo`, etc.) for local state and side effects; avoid storing server data in local state.  

2. **Minimal `useEffect`**  
   - For server data fetching, rely on **React Query** or **TanStack Router** loader patterns.  
   - Avoid complicated manual `useEffect` for data fetch/invalidate. Let the library handle caching, refetch intervals, and concurrency.

3. **React 19 Features**  
   - If available in your environment, use concurrency features like `useOptimistic`, `useFormStatus`, etc. for transitional states.  
   - The client is built on React 19 (per `package.json`), so concurrency is turned on by default.  

---

## 2. Type-Strict Props & States

1. **Prop Interfaces**  
   - Define `type` or `interface` for every component’s props:
     ```ts
     type MyComponentProps = {
       items: string[]
       onSelect?: (item: string) => void
     }
     export function MyComponent({ items, onSelect }: MyComponentProps) { ... }
     ```
   - Never allow untyped or implicit `any`.

2. **No Implicit `any`**  
   - All local states, refs, or context values must be explicitly typed or properly inferred by TS.  
   - Turn on `strict` in `tsconfig`.

3. **Zod & Shared Types**  
   - For server data shapes, rely on the **Zod schemas** in `packages/shared/`.  
   - Use `.parse` or `.safeParse` to validate any data from the server (e.g., React Query responses).  
   - This ensures your front-end data structures match the domain models exactly and consistently.

---

## 3. Composition & Organization

1. **Break Down Large Components**  
   - If a file nears ~200 lines, break it into sub-components or custom hooks. Keep a single file from becoming unmanageable.

2. **Custom Hooks**  
   - Encapsulate domain logic or repeated UI logic in `useXyz` hooks.  
   - Example: `useProjectFiles(projectId)` might handle the logic of fetching files from the server, hooking up WebSocket events, etc.  

3. **Utility Modules**  
   - If logic is repeated across multiple components, factor it out into a shared utility function or a custom hook in `client/src/hooks/ui`.  
   - Keep consistent naming: `use-*` for hooks, `*-utils.ts` for small helpers.

---

## 4. ShadCN/UI Integration

1. **ShadCN + Radix**  
   - Use ShadCN-wrapped Radix components (`@/components/ui/*`) for consistent, accessible UI.  
   - Examples: `Dialog`, `AlertDialog`, `Popover`, `Select`, `Tabs`, etc.

2. **Tailwind Utility Classes**  
   - Follow the design tokens in `tailwind.config.js` (colors, spacing, animation).  
   - For layout & spacing, rely on utility classes (`flex`, `mt-4`, `p-2`, etc.).  
   - Keep custom or inline styles minimal—prefer existing **class-variance-authority** variants for consistent theming.

3. **Variant & Theming**  
   - Where possible, define `variant="destructive"`, `variant="outline"`, etc. so everything stays consistent.  
   - For instance, if you have a `Button`, use the existing color variants from ShadCN’s config.

---

## 5. Global State & Data Fetching

1. **TanStack Router**  
   - All routing is done via **TanStack Router** (`@tanstack/react-router`).  
   - Each route can define a `loader()` function to fetch data; or you can do it with React Query hooks within the component.  
   - Use route definitions in `routeTree.gen` or manually in `createFileRoute()`.  

2. **React Query**  
   - For any server data fetch or mutation, define a custom React Query hook (e.g., `useGetProjects`) that calls your server’s API (`fetch` or Axios) and returns the typed response.  
   - Let React Query handle caching, invalidation, refetch intervals, and concurrency safety.  

3. **Zustand for UI State**  
   - For ephemeral UI toggles (like “prompt panel open or closed”), use a small Zustand slice.  
   - Do **not** store large server-sourced lists in Zustand. That belongs in React Query.  

---

## 6. Testing & Accessibility

1. **React Testing Library**  
   - Write tests for significant components and interactions.  
   - Focus on user-facing behavior: rendering the correct UI, responding to clicks, keyboard nav, etc.

2. **Accessibility**  
   - Let Radix handle focus management for modals, popovers, etc.  
   - Provide `aria-*` attributes or roles for custom widgets.  
   - Test with keyboard navigation or screen readers to confirm everything is accessible.

---

## 7. BNK WebSocket Manager Usage

We utilize **BNK WebSocket** libraries (`@bnk/client-websocket-manager` and `@bnk/react-websocket-manager`) to handle real-time state synchronization. Below are key guidelines:

1. **Single WebSocket Connection**  
   - Our code typically sets up **one** WebSocket in `main.tsx` or a dedicated provider (e.g., `GlobalStateProvider`) so we have a shared real-time channel.  
   - If you need multiple websockets, be sure to manage them carefully (e.g. separate contexts or addresses).

2. **Typed Messages**  
   - For each front-end message shape, define a TypeScript type or interface. Example:
     ```ts
     interface OutgoingClientMessage {
       type: "increment"
       amount: number
     }
     ```
   - For each server → client message, define a separate type or a union for multiple message types:
     ```ts
     interface IncomingServerMessage {
       type: "state_update"
       data: {
         counter: number
       }
     }
     ```
3. **Centralized Manager**  
   - We typically create a `BNKClientManager` (or `ClientWebSocketManager`) in a shared hook—like `useWebSocketManager()`—that all components can consume.  
   - Alternatively, use the provided hook `useClientWebSocket<Incoming, Outgoing>()` from `@bnk/react-websocket-manager` directly in top-level components or route code.

4. **Broadcasting & Updates**  
   - On the server side, whenever the BNK manager’s state changes, it broadcasts new state. We interpret those “state_update” messages in the client.  
   - On the client, ensure you handle the relevant message type in your `messageHandlers`. For example:
     ```ts
     messageHandlers: {
       state_update: (msg) => {
         setCounter(msg.data.counter)
       }
     }
     ```

5. **React Query + BNK**  
   - Combine React Query and BNK WebSocket by invalidating queries or directly updating React Query cache in response to WebSocket events.  
   - For example, if you get a “project_updated” message, you could do:
     ```ts
     const queryClient = useQueryClient()
     messageHandlers: {
       project_updated: (msg) => {
         queryClient.invalidateQueries(['projects', msg.projectId])
       }
     }
     ```
   - This keeps your client data in sync automatically.

6. **Zustand + BNK**  
   - If you keep ephemeral UI states in Zustand, it’s possible to react to BNK WebSocket messages to update them.  
   - Example: a “sidebar is open on all clients” scenario, or “active tab changed externally.” Evaluate carefully if these states truly need real-time sync.

7. **Error Handling & Offline**  
   - Listen for socket closure or error events.  
   - Provide a fallback or a re-connect strategy in the manager config (e.g., `reconnectDelayMs`).  
   - Keep the UI robust if the WebSocket is temporarily disconnected—React Query can still serve cached data in the meantime.

### Example BNK Integration in `main.tsx`

```tsx
import ReactDOM from "react-dom/client"
import { RouterProvider, createRouter } from "@tanstack/react-router"
import { QueryClient, QueryClientProvider } from "@tanstack/react-query"
import { BNKWebSocketProvider } from "@bnk/react-websocket-manager" // hypothetical provider
import { routeTree } from "./routeTree.gen"
import { GlobalStateProvider } from "./zustand/global-state-provider"

// 1. Create Query Client
const queryClient = new QueryClient()

// 2. Create the router
const router = createRouter({
  routeTree,
  defaultPreload: "intent",
})

// 3. BNK config for client messages
// (We can also define message shapes in a separate file)
const bnkConfig = {
  url: "ws://localhost:3000/ws",
  debug: true,
  messageHandlers: {
    state_update: (msg) => {
      // handle global state updates
      // e.g. store in Zustand, or React Query invalidation
    },
    // ...other message types
  },
}

ReactDOM.createRoot(document.getElementById("root")!).render(
  <QueryClientProvider client={queryClient}>
    <BNKWebSocketProvider config={bnkConfig}>
      <GlobalStateProvider>
        <RouterProvider router={router} />
      </GlobalStateProvider>
    </BNKWebSocketProvider>
  </QueryClientProvider>
)
```

**Notes**:  
- Here, we wrap the entire app in `BNKWebSocketProvider` so any child component can use the `useClientWebSocket()` hook or read from the context directly.  
- Alternatively, you can call `useClientWebSocket` at the top-level instead of using a dedicated provider.

---

## 8. Example Feature Flow (Projects Page)

The `projects.tsx` file (shown in your code snippet) demonstrates how we integrate:

- **React Query** (`useGetProjects()`) to fetch project data.  
- **Zustand** store slices to manage “active tab” or ephemeral states.  
- The user can easily incorporate BNK WebSocket events to reflect real-time changes in the projects list. For instance:
  ```ts
  // Add a "project_created" message handler:
  messageHandlers: {
    project_created: (msg) => {
      // Invalidate the React Query for projects, or push new project into the cache
      queryClient.invalidateQueries(['projects'])
    },
  }
  ```
- The `ProjectsTabManager` uses local state for tab navigation but *could* also respond to real-time events if multiple clients share the same workspace.

---

## 9. Putting It All Together

When adding or refactoring features:

1. **Define** your domain types in `packages/shared` (Zod + TS).  
2. **Create** or update your server route (via Bun + BNK server manager) if real-time is needed.  
3. **Write** a React Query hook or TanStack Router loader for data fetching (`useGetXYZ()`).  
4. **Integrate** BNK for real-time events if the feature has shared state or real-time updates.  
5. **Use** ShadCN + Radix UI for consistent, accessible components.  
6. **Keep** ephemeral UI states in Zustand if multiple components share a simple toggle, or local state if only used in one component.  
7. **Test** everything with React Testing Library or `bun test`, focusing on user flows and accessibility.

---

## 10. Final Thoughts

- **Single Source of Truth**: For server-sourced data, prefer React Query. For ephemeral UI toggles or concurrency among components, use Zustand With BNK WebSocket
- **Leverage TanStack Router** for route-level data and seamless code-splitting.  
- **Aim for Composability**: break large components into smaller, domain-specific hooks and presentational sub-components.  
- **Keep Accessibility** in mind with ShadCN/Radix: you get robust defaults, but do sanity checks.  
- **Validate** all data with Zod to keep your client safe from unexpected shapes.  

By following these rules, we maintain a **lean**, **type-safe**, **real-time-enabled** React + TypeScript frontend. Your code will be consistent with our shared guidelines, easier to test, and more robust against errors. Happy coding!