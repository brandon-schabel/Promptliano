---
description: It's helpful for building features on the client.
globs: packages/client/src/**/*.tsx
alwaysApply: false
---
# Frontend Cursor Rules: Extended Guidelines

This document expands upon our **React + TypeScript** ruleset, adding details on **TanStack Router**, **TanStack Query**, and **BNK Sync Engine** usage. It also references our existing frontend code structure (e.g., `main.tsx`, `projects.tsx`, etc.).  

Below is a comprehensive guide to writing maintainable, modern, and real-time-capable React code in our client application.

---

## 1. Functional Components & Hooks

1. **Only Functional Components**  
   - No class components. React 19’s concurrency features and modern hooks let us keep things purely functional (`function MyComponent() {}`).  
   - Use hooks (`useState`, `useReducer`, `useMemo`, etc.) for local state and side effects; avoid storing server data in local state.  

2. **Minimal `useEffect`**  
   - For server data fetching, rely on **React Query** or **TanStack Router** loader patterns.  
   - Avoid complicated manual `useEffect` for data fetch/invalidate. Let the library handle caching, refetch intervals, and concurrency.

3. **React 19 Features**  
   - If available in your environment, use concurrency features like `useOptimistic`, `useFormStatus`, etc. for transitional states.  
   - The client is built on React 19 (per `package.json`), so concurrency is turned on by default.  

---

## 2. Type-Strict Props & States

1. **Prop Interfaces**  
   - Define `type` or `interface` for every component’s props:
     ```ts
     type MyComponentProps = {
       items: string[]
       onSelect?: (item: string) => void
     }
     export function MyComponent({ items, onSelect }: MyComponentProps) { ... }
     ```
   - Never allow untyped or implicit `any`.

2. **No Implicit `any`**  
   - All local states, refs, or context values must be explicitly typed or properly inferred by TS.  
   - Turn on `strict` in `tsconfig`.

3. **Zod & Shared Types**  
   - For server data shapes, rely on the **Zod schemas** in `packages/shared/`.  
   - Use `.parse` or `.safeParse` to validate any data from the server (e.g., React Query responses).  
   - This ensures your front-end data structures match the domain models exactly and consistently.

---

## 3. Composition & Organization

1. **Break Down Large Components**  
   - If a component nears ~200 lines, break it into sub-components or custom hooks. Keep a single file from becoming unmanageable.

2. **Custom Hooks**  
   - Encapsulate domain logic or repeated UI logic in `useXyz` hooks.  
   - Example: `useProjectFiles(projectId)` might handle the logic of fetching files from the server, hooking up WebSocket events, etc.  

3. **Utility Modules**  
   - If logic is repeated across multiple components, factor it out into a shared utility function or a custom hook in `client/src/hooks/ui`.  
   - Keep consistent naming: `use-*` for hooks, `*-utils.ts` for small helpers.

---

## 4. ShadCN/UI Integration

1. **ShadCN + Radix**  
   - Use ShadCN-wrapped Radix components (`@ui`) for consistent, accessible UI.  
    Available Components:
alert
alert-dialog
avatar
badge
button
card
checkbox
collapsible
command
context-menu
dialog
drawer
dropdown-menu
form
icons
input
textarea
tooltip
button'
label
menubar
popover
progress
resizable-panel
scroll-area
select
separator
sheet
skeleton
slider
sonner
switch
table
tabs
textarea
tooltip
vertical-resizable-panel

2. **Tailwind Utility Classes**  
   - Follow the design tokens in `tailwind.config.js` (colors, spacing, animation).  
   - For layout & spacing, rely on utility classes (`flex`, `mt-4`, `p-2`, etc.).  
   - Keep custom or inline styles minimal—prefer existing **class-variance-authority** variants for consistent theming.

3. **Variant & Theming**  
   - Where possible, define `variant="destructive"`, `variant="outline"`, etc. so everything stays consistent.  
   - For instance, if you have a `Button`, use the existing color variants from ShadCN’s config.

---

## 5. Global State & Data Fetching

1. **TanStack Router**  
   - All routing is done via **TanStack Router** (`@tanstack/react-router`).  
   - Each route can define a `loader()` function to fetch data; or you can do it with React Query hooks within the component.  
   - Use route definitions in `routeTree.gen` or manually in `createFileRoute()`.  

2. **React Query**  
   - Uses `@hey-api/client-fetch` to generate the types and API client fetcher functions to be used with react query.
   - In `packages/client/hooks/generated` there is `client.gen.ts`, `index.ts`, `sdk.gen.ts`, `types.gen`, and `@tanstack/react-query.gen.ts`
   - For any server data fetch or mutation, define a custom React Query hook (e.g., `useGetProjects`) that calls your server’s API (`fetch` or Axios) and returns the typed response.  
   - Let React Query handle caching, invalidation, refetch intervals, and concurrency safety.  
---

## 6. Testing & Accessibility

1. **React Testing Library**  
   - Write tests for significant components and interactions.  
   - Focus on user-facing behavior: rendering the correct UI, responding to clicks, keyboard nav, etc.

2. **Accessibility**  
   - Let Radix handle focus management for modals, popovers, etc.  
   - Provide `aria-*` attributes or roles for custom widgets.  
   - Test with keyboard navigation or screen readers to confirm everything is accessible.

---

## 8. Example Feature Flow (Projects Page)

The `projects.tsx` file (shown in your code snippet) demonstrates how we integrate:

- **React Query** (`useGetProjects()`) to fetch project data from `packages/client/hooks/api/use-projects-api.ts`.  

---

## 9. Putting It All Together

When adding or refactoring features:

1. **Define** if required define db table in `packages/server/src/utils/database.ts` and schema in the shared schema `packages/shared/src/schemas` (Zod + OpenAPI + TS), the schemas serve at the source of truth for all data. When the server is running you can view the entire server API and Schemas with [Swagger UI](mdc:http:/localhost:3147/swagger)  or retrieve the OpenAPI spec from `http://localhost:3147/doc`
2. **Create** or update your Bun Hono Server route in `packages/server/src/routes`
3. **Generate Client** Generate the API client run `bun run openapi-ts` in the root of the repo to generate the client types based on the schema/route Open API Specs
4. **Write** a React Query hook based on the generated types and query client from `packages/client/src/hooks/generated/types.gen` and `packages/client/src/hooks/generated/@tanstack/react-query.gen`
5. **UI Implementation** Using the project components, create a UI page or component using the apps component library and the created API
6. **Testing** Perform unit tests on everything that can be isolate and are pure, create react component test using React Testing Library

---

## 10. Final Thoughts

- **Single Source of Truth**: 
- **Leverage TanStack Router** for route-level data and seamless code-splitting.  
- **Aim for Composability**: break large components into smaller, domain-specific hooks and presentational sub-components.  
- **Keep Accessibility** in mind with ShadCN/Radix: you get robust defaults, but do sanity checks.  
- **Validate** all data with Zod to keep your client safe from unexpected shapes.  

By following these rules, we maintain a **lean**, **type-safe**, **real-time-enabled** React + TypeScript frontend. Your code will be consistent with our shared guidelines, easier to test, and more robust against errors. Happy coding!