{
  "openapi": "3.1.1",
  "info": {
    "description": "Promptliano OpenAPI Server Spec",
    "version": "0.11.0",
    "title": "@promptliano/server"
  },
  "components": {
    "schemas": {
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "path",
          "createdAt",
          "updatedAt"
        ]
      },
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "An error occurred"
              },
              "code": {
                "type": "string",
                "example": "ERROR_CODE"
              },
              "details": {
                "type": "object",
                "additionalProperties": {
                  "nullable": true
                }
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "CreateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "OperationSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "QueueListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "title": {
            "type": "string"
          },
          "overview": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ]
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "queueId": {
            "type": "number",
            "nullable": true
          },
          "queuePosition": {
            "type": "number",
            "nullable": true
          },
          "queueStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "queuePriority": {
            "type": "number",
            "nullable": true
          },
          "queuedAt": {
            "type": "number",
            "nullable": true
          },
          "queueStartedAt": {
            "type": "number",
            "nullable": true
          },
          "queueCompletedAt": {
            "type": "number",
            "nullable": true
          },
          "queueAgentId": {
            "type": "string",
            "nullable": true
          },
          "queueErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "estimatedProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "actualProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "overview",
          "status",
          "priority",
          "suggestedFileIds",
          "suggestedAgentIds",
          "suggestedPromptIds",
          "queueId",
          "queuePosition",
          "queueStatus",
          "queuePriority",
          "queuedAt",
          "queueStartedAt",
          "queueCompletedAt",
          "queueAgentId",
          "queueErrorMessage",
          "estimatedProcessingTime",
          "actualProcessingTime",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateTicket": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ],
            "default": "open"
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ],
            "default": "normal"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "suggestedAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "default": []
          }
        },
        "required": [
          "projectId",
          "title"
        ]
      },
      "UpdateTicket": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ]
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "TicketTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "ticketId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "content": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "done": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "cancelled"
            ]
          },
          "orderIndex": {
            "type": "number"
          },
          "estimatedHours": {
            "type": "number",
            "nullable": true
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agentId": {
            "type": "string",
            "nullable": true
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "queueId": {
            "type": "number",
            "nullable": true
          },
          "queuePosition": {
            "type": "number",
            "nullable": true
          },
          "queueStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "queuePriority": {
            "type": "number",
            "nullable": true
          },
          "queuedAt": {
            "type": "number",
            "nullable": true
          },
          "queueStartedAt": {
            "type": "number",
            "nullable": true
          },
          "queueCompletedAt": {
            "type": "number",
            "nullable": true
          },
          "queueAgentId": {
            "type": "string",
            "nullable": true
          },
          "queueErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "estimatedProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "actualProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "ticketId",
          "content",
          "description",
          "suggestedFileIds",
          "done",
          "status",
          "orderIndex",
          "estimatedHours",
          "dependencies",
          "tags",
          "agentId",
          "suggestedPromptIds",
          "queueId",
          "queuePosition",
          "queueStatus",
          "queuePriority",
          "queuedAt",
          "queueStartedAt",
          "queueCompletedAt",
          "queueAgentId",
          "queueErrorMessage",
          "estimatedProcessingTime",
          "actualProcessingTime",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateTicketTask": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "done": {
            "type": "boolean",
            "default": false
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "cancelled"
            ],
            "default": "pending"
          },
          "orderIndex": {
            "type": "number",
            "default": 0
          },
          "estimatedHours": {
            "type": "number"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "default": []
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "agentId": {
            "type": "string"
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "default": []
          }
        },
        "required": [
          "ticketId",
          "content"
        ]
      },
      "UpdateTicketTask": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "done": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "cancelled"
            ]
          },
          "orderIndex": {
            "type": "number"
          },
          "estimatedHours": {
            "type": "number"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agentId": {
            "type": "string"
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "Chat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "projectId": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "title": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateChat": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "title"
        ]
      },
      "UpdateChat": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        }
      },
      "ChatMessageResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "chatId": {
                "type": "number"
              },
              "role": {
                "type": "string",
                "enum": [
                  "user",
                  "assistant",
                  "system"
                ]
              },
              "content": {
                "type": "string"
              },
              "metadata": {
                "type": "object",
                "nullable": true,
                "additionalProperties": {
                  "nullable": true
                }
              },
              "createdAt": {
                "type": "number"
              }
            },
            "required": [
              "id",
              "chatId",
              "role",
              "content",
              "metadata",
              "createdAt"
            ],
            "description": "ChatMessage"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ChatMessageCreate": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system"
            ]
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "default": {}
          }
        },
        "required": [
          "chatId",
          "role",
          "content"
        ]
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "chatId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system"
            ]
          },
          "content": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "chatId",
          "role",
          "content",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateChatMessage": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system"
            ]
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "chatId",
          "role",
          "content"
        ]
      },
      "UpdateChatMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system"
            ]
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        }
      },
      "Prompt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "content",
          "description",
          "tags",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreatePromptRequestBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "example": "My New Prompt"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "example": "Translate this text: {text}"
          },
          "projectId": {
            "type": "integer",
            "description": "Optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "UpdatePromptRequestBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "example": "My New Prompt"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "example": "Translate this text: {text}"
          }
        }
      },
      "ClaudeAgent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "instructions": {
            "type": "string",
            "nullable": true
          },
          "model": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "instructions",
          "model",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateClaudeAgent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "instructions": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "minLength": 1
          },
          "isActive": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "name",
          "model"
        ]
      },
      "UpdateClaudeAgent": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "instructions": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "minLength": 1
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "ClaudeCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "tags": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "content",
          "description",
          "category",
          "projectId",
          "tags",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateClaudeCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "tags": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "content"
        ]
      },
      "UpdateClaudeCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "tags": {
            "type": "string"
          }
        }
      },
      "ClaudeHook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "projectId": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "event",
          "command",
          "enabled",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateClaudeHook": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "event": {
            "type": "string",
            "minLength": 1
          },
          "command": {
            "type": "string",
            "minLength": 1
          },
          "enabled": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "name",
          "event",
          "command"
        ]
      },
      "UpdateClaudeHook": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "event": {
            "type": "string",
            "minLength": 1
          },
          "command": {
            "type": "string",
            "minLength": 1
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ProviderKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "provider": {
            "type": "string"
          },
          "keyName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "encryptedValue": {
            "type": "string"
          },
          "encrypted": {
            "type": "boolean"
          },
          "iv": {
            "type": "string",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "salt": {
            "type": "string",
            "nullable": true
          },
          "baseUrl": {
            "type": "string",
            "nullable": true
          },
          "customHeaders": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "isDefault": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "expiresAt": {
            "type": "number",
            "nullable": true
          },
          "lastUsed": {
            "type": "number",
            "nullable": true
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "provider",
          "keyName",
          "name",
          "encryptedValue",
          "encrypted",
          "iv",
          "tag",
          "salt",
          "baseUrl",
          "customHeaders",
          "isDefault",
          "isActive",
          "environment",
          "description",
          "expiresAt",
          "lastUsed",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateProviderKey": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "minLength": 1
          },
          "keyName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "encryptedValue": {
            "type": "string"
          },
          "encrypted": {
            "type": "boolean",
            "default": true
          },
          "iv": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isDefault": {
            "type": "boolean",
            "default": false
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "environment": {
            "type": "string",
            "default": "production"
          },
          "description": {
            "type": "string"
          },
          "expiresAt": {
            "type": "number"
          },
          "lastUsed": {
            "type": "number"
          }
        },
        "required": [
          "provider"
        ]
      },
      "UpdateProviderKey": {
        "type": "object",
        "properties": {
          "keyName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "encryptedValue": {
            "type": "string"
          },
          "encrypted": {
            "type": "boolean"
          },
          "iv": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "salt": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isDefault": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiresAt": {
            "type": "number"
          },
          "lastUsed": {
            "type": "number"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "projectId": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "path": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "file",
              "directory"
            ]
          },
          "size": {
            "type": "number",
            "nullable": true
          },
          "lastModified": {
            "type": "number",
            "nullable": true
          },
          "permissions": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "projectId",
          "path",
          "type",
          "size",
          "lastModified",
          "permissions",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateFile": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "path": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "file",
              "directory"
            ]
          },
          "size": {
            "type": "number"
          },
          "lastModified": {
            "type": "number"
          },
          "permissions": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "path",
          "type"
        ]
      },
      "UpdateFile": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "file",
              "directory"
            ]
          },
          "size": {
            "type": "number"
          },
          "lastModified": {
            "type": "number"
          },
          "permissions": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        }
      },
      "SelectedFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "fileId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "projectId": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "selectionType": {
            "type": "string",
            "enum": [
              "manual",
              "auto",
              "suggested"
            ]
          },
          "relevanceScore": {
            "type": "number",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "fileId",
          "projectId",
          "selectionType",
          "relevanceScore",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateSelectedFile": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "selectionType": {
            "type": "string",
            "enum": [
              "manual",
              "auto",
              "suggested"
            ],
            "default": "manual"
          },
          "relevanceScore": {
            "type": "number"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "fileId"
        ]
      },
      "UpdateSelectedFile": {
        "type": "object",
        "properties": {
          "selectionType": {
            "type": "string",
            "enum": [
              "manual",
              "auto",
              "suggested"
            ]
          },
          "relevanceScore": {
            "type": "number"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        }
      },
      "ActiveTab": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "tabId": {
            "type": "integer",
            "minimum": 0
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "tabMetadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "tabId",
          "clientId",
          "tabMetadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateActiveTab": {
        "type": "object",
        "properties": {
          "tabId": {
            "type": "integer",
            "minimum": 0
          },
          "clientId": {
            "type": "string"
          },
          "tabMetadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "tabId"
        ]
      },
      "UpdateActiveTab": {
        "type": "object",
        "properties": {
          "tabId": {
            "type": "integer",
            "minimum": 0
          },
          "clientId": {
            "type": "string"
          },
          "tabMetadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        }
      },
      "SuggestPromptsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "prompts": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Prompt"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      }
                    }
                  ]
                },
                "description": "Array of suggested prompts ordered by relevance (most relevant first)"
              }
            },
            "required": [
              "prompts"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestPromptsRequest": {
        "type": "object",
        "properties": {
          "userInput": {
            "type": "string",
            "minLength": 1,
            "description": "The user input describing what they want to accomplish",
            "example": "help me implement authentication"
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "maximum": 10,
            "default": 5,
            "description": "Maximum number of prompts to suggest (default: 5, max: 10)",
            "example": 5
          }
        },
        "required": [
          "userInput"
        ]
      },
      "ExportedFile": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Generated filename for the exported prompt",
            "example": "code-refactoring-prompt.md"
          },
          "content": {
            "type": "string",
            "description": "The markdown content of the exported prompt"
          },
          "promptId": {
            "type": "integer",
            "description": "ID of the source prompt",
            "format": "int64",
            "example": 1716537600000
          },
          "promptName": {
            "type": "string",
            "description": "Name of the source prompt",
            "example": "Code Refactoring Prompt"
          }
        },
        "required": [
          "fileName",
          "content",
          "promptId",
          "promptName"
        ]
      },
      "MarkdownExportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the export operation succeeded"
          },
          "format": {
            "type": "string",
            "enum": [
              "single-file",
              "multi-file"
            ],
            "description": "The export format used"
          },
          "promptCount": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of prompts exported",
            "example": 5
          },
          "fileName": {
            "type": "string",
            "description": "Filename for single-file export",
            "example": "exported-prompts.md"
          },
          "content": {
            "type": "string",
            "description": "The markdown content for single-file export"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportedFile"
            },
            "description": "Array of exported files for multi-file export"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "exportedAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 datetime when export was generated",
                "example": "2024-01-01T12:00:00Z"
              },
              "totalSize": {
                "type": "integer",
                "minimum": 0,
                "description": "Total size of exported content in bytes",
                "example": 15432
              },
              "settings": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "integer",
                    "description": "Optional project ID to filter prompts by project",
                    "format": "int64",
                    "example": 1716537600000
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "single-file",
                      "multi-file"
                    ],
                    "default": "single-file",
                    "description": "Export format: single file with all prompts or separate files per prompt",
                    "example": "single-file"
                  },
                  "includeFrontmatter": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include frontmatter with metadata",
                    "example": true
                  },
                  "includeCreatedDate": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include created date in frontmatter",
                    "example": true
                  },
                  "includeUpdatedDate": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include updated date in frontmatter",
                    "example": true
                  },
                  "includeTags": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include tags in frontmatter (if available)",
                    "example": true
                  },
                  "sanitizeContent": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to sanitize content for safe markdown export",
                    "example": true
                  },
                  "sortBy": {
                    "type": "string",
                    "enum": [
                      "name",
                      "created",
                      "updated"
                    ],
                    "default": "name",
                    "description": "How to sort the exported prompts",
                    "example": "name"
                  },
                  "sortOrder": {
                    "type": "string",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "default": "asc",
                    "description": "Sort order for exported prompts",
                    "example": "asc"
                  }
                },
                "description": "Export settings used"
              }
            },
            "required": [
              "exportedAt",
              "totalSize",
              "settings"
            ],
            "description": "Export metadata and settings"
          }
        },
        "required": [
          "success",
          "format",
          "promptCount",
          "metadata"
        ]
      },
      "MarkdownExportResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MarkdownExportResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BatchExportRequest": {
        "type": "object",
        "properties": {
          "promptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            },
            "description": "Array of prompt IDs to export",
            "example": [
              1716537600000,
              1716537600001
            ]
          },
          "format": {
            "type": "string",
            "enum": [
              "single-file",
              "multi-file"
            ],
            "default": "single-file",
            "description": "Export format: single file with all prompts or separate files per prompt",
            "example": "single-file"
          },
          "includeFrontmatter": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include frontmatter with metadata",
            "example": true
          },
          "includeCreatedDate": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include created date in frontmatter",
            "example": true
          },
          "includeUpdatedDate": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include updated date in frontmatter",
            "example": true
          },
          "includeTags": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include tags in frontmatter (if available)",
            "example": true
          },
          "sanitizeContent": {
            "type": "boolean",
            "default": true,
            "description": "Whether to sanitize content for safe markdown export",
            "example": true
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "name",
              "created",
              "updated"
            ],
            "default": "name",
            "description": "How to sort the exported prompts",
            "example": "name"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "asc",
            "description": "Sort order for exported prompts",
            "example": "asc"
          }
        },
        "required": [
          "promptIds"
        ]
      },
      "PromptImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether this individual prompt import succeeded"
          },
          "promptName": {
            "type": "string",
            "description": "The name of the prompt being imported",
            "example": "Code Refactoring Prompt"
          },
          "promptId": {
            "type": "integer",
            "description": "ID of the created/updated prompt (only present on success)",
            "format": "int64",
            "example": 1716537600000
          },
          "error": {
            "type": "string",
            "description": "Error message if import failed",
            "example": "Prompt with this name already exists"
          },
          "warning": {
            "type": "string",
            "description": "Warning message for non-fatal issues",
            "example": "Missing frontmatter field: created"
          },
          "action": {
            "type": "string",
            "enum": [
              "created",
              "updated",
              "skipped"
            ],
            "description": "Action taken for this prompt"
          }
        },
        "required": [
          "success",
          "promptName",
          "action"
        ]
      },
      "MarkdownImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Overall success status of the import operation"
          },
          "fileName": {
            "type": "string",
            "description": "Name of the imported file",
            "example": "my-prompts.md"
          },
          "promptsProcessed": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of prompts found in the file",
            "example": 3
          },
          "promptsImported": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of prompts successfully imported",
            "example": 2
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromptImportResult"
            },
            "description": "Detailed results for each prompt"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Global errors that affected the entire file",
            "example": [
              "Invalid frontmatter format"
            ]
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Global warnings for the import operation",
            "example": [
              "File contains no valid prompts"
            ]
          }
        },
        "required": [
          "success",
          "fileName",
          "promptsProcessed",
          "promptsImported",
          "results"
        ]
      },
      "BulkImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Overall success status (true if at least one prompt imported)"
          },
          "totalFiles": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of files processed",
            "example": 5
          },
          "filesProcessed": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of files successfully processed",
            "example": 4
          },
          "totalPrompts": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of prompts found across all files",
            "example": 15
          },
          "promptsImported": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of prompts successfully imported",
            "example": 12
          },
          "fileResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkdownImportResult"
            },
            "description": "Results for each file processed"
          },
          "summary": {
            "type": "object",
            "properties": {
              "created": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of new prompts created",
                "example": 8
              },
              "updated": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of existing prompts updated",
                "example": 4
              },
              "skipped": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of prompts skipped",
                "example": 3
              },
              "failed": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of prompts that failed to import",
                "example": 0
              }
            },
            "required": [
              "created",
              "updated",
              "skipped",
              "failed"
            ]
          }
        },
        "required": [
          "success",
          "totalFiles",
          "filesProcessed",
          "totalPrompts",
          "promptsImported",
          "fileResults",
          "summary"
        ]
      },
      "BulkImportResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BulkImportResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProviderKeyResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "provider": {
                "type": "string"
              },
              "keyName": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "nullable": true
              },
              "encryptedValue": {
                "type": "string"
              },
              "key": {
                "type": "string",
                "nullable": true
              },
              "encrypted": {
                "type": "boolean"
              },
              "iv": {
                "type": "string",
                "nullable": true
              },
              "tag": {
                "type": "string",
                "nullable": true
              },
              "salt": {
                "type": "string",
                "nullable": true
              },
              "baseUrl": {
                "type": "string",
                "nullable": true
              },
              "customHeaders": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    }
                  },
                  {
                    "nullable": true
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "isDefault": {
                "type": "boolean"
              },
              "isActive": {
                "type": "boolean"
              },
              "environment": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "expiresAt": {
                "type": "number",
                "nullable": true
              },
              "lastUsed": {
                "type": "number",
                "nullable": true
              },
              "createdAt": {
                "type": "number"
              },
              "updatedAt": {
                "type": "number"
              }
            },
            "required": [
              "id",
              "provider",
              "keyName",
              "name",
              "encryptedValue",
              "key",
              "encrypted",
              "iv",
              "tag",
              "salt",
              "baseUrl",
              "customHeaders",
              "isDefault",
              "isActive",
              "environment",
              "description",
              "expiresAt",
              "lastUsed",
              "createdAt",
              "updatedAt"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProviderKeyListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "provider": {
                  "type": "string"
                },
                "keyName": {
                  "type": "string"
                },
                "name": {
                  "type": "string",
                  "nullable": true
                },
                "encryptedValue": {
                  "type": "string"
                },
                "key": {
                  "type": "string",
                  "nullable": true
                },
                "encrypted": {
                  "type": "boolean"
                },
                "iv": {
                  "type": "string",
                  "nullable": true
                },
                "tag": {
                  "type": "string",
                  "nullable": true
                },
                "salt": {
                  "type": "string",
                  "nullable": true
                },
                "baseUrl": {
                  "type": "string",
                  "nullable": true
                },
                "customHeaders": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "additionalProperties": {
                        "nullable": true
                      }
                    },
                    {
                      "nullable": true
                    },
                    {
                      "nullable": true
                    }
                  ]
                },
                "isDefault": {
                  "type": "boolean"
                },
                "isActive": {
                  "type": "boolean"
                },
                "environment": {
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "expiresAt": {
                  "type": "number",
                  "nullable": true
                },
                "lastUsed": {
                  "type": "number",
                  "nullable": true
                },
                "createdAt": {
                  "type": "number"
                },
                "updatedAt": {
                  "type": "number"
                }
              },
              "required": [
                "id",
                "provider",
                "keyName",
                "name",
                "encryptedValue",
                "key",
                "encrypted",
                "iv",
                "tag",
                "salt",
                "baseUrl",
                "customHeaders",
                "isDefault",
                "isActive",
                "environment",
                "description",
                "expiresAt",
                "lastUsed",
                "createdAt",
                "updatedAt"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TestProviderApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              },
              "providerId": {
                "type": "number"
              },
              "provider": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "latency": {
                "type": "number"
              },
              "error": {
                "type": "string"
              },
              "response": {
                "type": "string"
              }
            },
            "required": [
              "success",
              "providerId",
              "provider",
              "latency"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BatchTestProviderApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "providerId": {
                      "type": "number"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "model": {
                      "type": "string"
                    },
                    "latency": {
                      "type": "number"
                    },
                    "error": {
                      "type": "string"
                    },
                    "response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "providerId",
                    "provider",
                    "latency"
                  ]
                }
              },
              "summary": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "number"
                  },
                  "successful": {
                    "type": "number"
                  },
                  "failed": {
                    "type": "number"
                  },
                  "averageLatency": {
                    "type": "number"
                  }
                },
                "required": [
                  "total",
                  "successful",
                  "failed"
                ]
              }
            },
            "required": [
              "results",
              "summary"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProviderHealthStatusListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "healthy",
                    "degraded",
                    "down",
                    "unknown"
                  ]
                },
                "latency": {
                  "type": "number"
                },
                "lastChecked": {
                  "type": "number"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": [
                "status",
                "lastChecked"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AgentSuggestionsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "relevanceScore": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "description",
                "path",
                "relevanceScore"
              ],
              "description": "AgentSuggestion"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeCommandResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "content": {
                "type": "string"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "category": {
                "type": "string",
                "nullable": true
              },
              "projectId": {
                "type": "number",
                "nullable": true
              },
              "tags": {
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "type": "number"
              },
              "updatedAt": {
                "type": "number"
              }
            },
            "required": [
              "id",
              "name",
              "content",
              "description",
              "category",
              "projectId",
              "tags",
              "createdAt",
              "updatedAt"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeCommandListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "name": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "category": {
                  "type": "string",
                  "nullable": true
                },
                "projectId": {
                  "type": "number",
                  "nullable": true
                },
                "tags": {
                  "type": "string",
                  "nullable": true
                },
                "createdAt": {
                  "type": "number"
                },
                "updatedAt": {
                  "type": "number"
                }
              },
              "required": [
                "id",
                "name",
                "content",
                "description",
                "category",
                "projectId",
                "tags",
                "createdAt",
                "updatedAt"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommandExecutionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "result": {
                "type": "string"
              },
              "usage": {
                "type": "object",
                "properties": {
                  "inputTokens": {
                    "type": "number"
                  },
                  "outputTokens": {
                    "type": "number"
                  },
                  "totalTokens": {
                    "type": "number"
                  }
                },
                "required": [
                  "inputTokens",
                  "outputTokens",
                  "totalTokens"
                ]
              },
              "model": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              }
            },
            "required": [
              "result"
            ],
            "description": "CommandExecution"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommandSuggestionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "suggestions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "useCase": {
                      "type": "string"
                    },
                    "difficulty": {
                      "type": "string",
                      "enum": [
                        "easy",
                        "medium",
                        "hard"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "description",
                    "content",
                    "category",
                    "useCase",
                    "difficulty"
                  ],
                  "description": "CommandSuggestion"
                }
              },
              "reasoning": {
                "type": "string"
              }
            },
            "required": [
              "suggestions",
              "reasoning"
            ],
            "description": "CommandSuggestions"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ActiveTabResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "nullable": true,
            "properties": {
              "projectId": {
                "type": "number"
              },
              "activeTabId": {
                "type": "number"
              },
              "clientId": {
                "type": "string"
              },
              "tabMetadata": {
                "nullable": true
              }
            },
            "required": [
              "projectId",
              "activeTabId"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ActiveTabResponseRequired": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "number"
              },
              "activeTabId": {
                "type": "number"
              },
              "clientId": {
                "type": "string"
              },
              "tabMetadata": {
                "nullable": true
              }
            },
            "required": [
              "projectId",
              "activeTabId"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectResponseMultiStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectResponse"
          },
          {
            "type": "object",
            "properties": {
              "warning": {
                "type": "string"
              },
              "error": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ProjectSummaryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "summary": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "summary"
        ]
      },
      "ImportInfo": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "specifiers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "default",
                    "named",
                    "namespace"
                  ]
                },
                "imported": {
                  "type": "string"
                },
                "local": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "local"
              ]
            }
          }
        },
        "required": [
          "source",
          "specifiers"
        ]
      },
      "ExportInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "default",
              "named",
              "all"
            ]
          },
          "source": {
            "type": "string"
          },
          "specifiers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "exported": {
                  "type": "string"
                },
                "local": {
                  "type": "string"
                }
              },
              "required": [
                "exported"
              ]
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "ProjectFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "projectId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "summaryLastUpdated": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "meta": {
            "type": "string",
            "nullable": true
          },
          "checksum": {
            "type": "string",
            "nullable": true
          },
          "imports": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ImportInfo"
            },
            "default": null
          },
          "exports": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExportInfo"
            },
            "default": null
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "path",
          "extension",
          "size",
          "content",
          "summary",
          "summaryLastUpdated",
          "meta",
          "checksum",
          "created",
          "updated"
        ]
      },
      "HookListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "projectId": {
                  "type": "number",
                  "nullable": true
                },
                "name": {
                  "type": "string"
                },
                "event": {
                  "type": "string"
                },
                "command": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "createdAt": {
                  "type": "number"
                },
                "updatedAt": {
                  "type": "number"
                }
              },
              "required": [
                "id",
                "projectId",
                "name",
                "event",
                "command",
                "enabled",
                "createdAt",
                "updatedAt"
              ],
              "description": "Hook"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "projectId": {
                "type": "number",
                "nullable": true
              },
              "name": {
                "type": "string"
              },
              "event": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean"
              },
              "createdAt": {
                "type": "number"
              },
              "updatedAt": {
                "type": "number"
              }
            },
            "required": [
              "id",
              "projectId",
              "name",
              "event",
              "command",
              "enabled",
              "createdAt",
              "updatedAt"
            ],
            "description": "Hook"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookEvent": {
        "type": "string",
        "enum": [
          "user-prompt-submit",
          "tool-call",
          "file-change"
        ]
      },
      "CreateHookRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "event": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "projectId": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "name",
          "event",
          "command"
        ]
      },
      "UpdateHookRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "event": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "HookGenerationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "command",
              "description"
            ],
            "description": "HookGeneration"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookGenerationRequest": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/HookEvent"
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "projectId": {
            "type": "number"
          }
        },
        "required": [
          "event",
          "description"
        ]
      },
      "HookTestResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "exitCode": {
                "type": "number"
              },
              "stdout": {
                "type": "string"
              },
              "stderr": {
                "type": "string"
              },
              "executionTime": {
                "type": "number"
              }
            },
            "required": [
              "exitCode",
              "stdout",
              "stderr",
              "executionTime"
            ],
            "description": "HookTest"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookTestRequest": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string"
          },
          "testData": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "command"
        ]
      },
      "Queue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "maxConcurrency": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "default": 1
          },
          "retryConfig": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "retryConfig",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "AiSdkChatRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Chat/session identifier (maps to chatId)"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant",
                    "system"
                  ]
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "role",
                "content"
              ]
            },
            "minItems": 1
          },
          "provider": {
            "type": "string",
            "default": "openai"
          },
          "model": {
            "type": "string"
          },
          "temperature": {
            "type": "number"
          },
          "maxTokens": {
            "type": "integer"
          },
          "topP": {
            "type": "number"
          }
        },
        "required": [
          "messages",
          "model"
        ]
      },
      "ProvidersListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "isCustom": {
                  "type": "boolean"
                },
                "baseUrl": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiSdkOptions": {
        "type": "object",
        "properties": {
          "ollamaUrl": {
            "type": "string",
            "format": "uri",
            "description": "Custom Ollama server URL to use instead of the default.",
            "example": "http://192.168.1.100:11434"
          },
          "lmstudioUrl": {
            "type": "string",
            "format": "uri",
            "description": "Custom LMStudio server URL to use instead of the default.",
            "example": "http://localhost:1234"
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "description": "Controls the randomness of the output. Lower values (e.g., 0.2) make the output more focused, deterministic, and suitable for factual tasks. Higher values (e.g., 0.8) increase randomness and creativity, useful for brainstorming or creative writing. A value of 0 typically means greedy decoding (always picking the most likely token).",
            "example": 0.7
          },
          "maxTokens": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "The maximum number of tokens (words or parts of words) the model is allowed to generate in the response. This limits the output length and can affect cost. Note: This limit usually applies only to the *generated* tokens, not the input prompt tokens.",
            "example": 4000
          },
          "topP": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Controls diversity via nucleus sampling. It defines a probability threshold (e.g., 0.9). The model considers only the smallest set of most probable tokens whose cumulative probability exceeds this threshold for the next token selection. Lower values (e.g., 0.5) restrict choices more, leading to less random outputs. A value of 1 considers all tokens. It's often recommended to alter *either* `temperature` *or* `topP`, not both.",
            "example": 1
          },
          "frequencyPenalty": {
            "type": "number",
            "minimum": -2,
            "maximum": 2,
            "description": "Applies a penalty to tokens based on how frequently they have already appeared in the generated text *and* the prompt. Positive values (e.g., 0.5) decrease the likelihood of the model repeating the same words or phrases verbatim, making the output less repetitive. Negative values encourage repetition.",
            "example": 0.2
          },
          "presencePenalty": {
            "type": "number",
            "minimum": -2,
            "maximum": 2,
            "description": "Applies a penalty to tokens based on whether they have appeared *at all* in the generated text *and* the prompt so far (regardless of frequency). Positive values (e.g., 0.5) encourage the model to introduce new concepts and topics, reducing the likelihood of repeating *any* previously mentioned word. Negative values encourage staying on topic.",
            "example": 0.1
          },
          "topK": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Restricts the model's choices for the next token to the `k` most likely candidates. For example, if `topK` is 40, the model will only consider the top 40 most probable tokens at each step. A lower value restricts choices more. Setting `topK` to 1 is equivalent to greedy decoding (same as `temperature: 0`). Less commonly used than `topP`.",
            "example": 40
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Specifies one or more sequences of text where the AI should stop generating. Once the model generates a stop sequence, it will halt output immediately, even if `maxTokens` hasn't been reached. Useful for structured output or controlling conversational turns.",
            "example": [
              "\nHuman:",
              "\n---"
            ]
          },
          "response_format": {
            "nullable": true,
            "description": "Specifies the desired format for the model's response. This is highly provider-specific. A common use case is enforcing JSON output, often requiring specific model versions.",
            "example": {
              "type": "json_object"
            }
          },
          "provider": {
            "type": "string",
            "description": "The provider to use for the AI request.",
            "example": "openai"
          },
          "model": {
            "type": "string",
            "description": "The model to use for the AI request.",
            "example": "gpt-4o-mini"
          }
        },
        "description": "Optional parameters to override default model behavior (temperature, maxTokens, etc.)."
      },
      "AiGenerateTextRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "minLength": 1,
            "description": "The text prompt for the AI.",
            "example": "Suggest 5 suitable filenames for a typescript utility file containing helper functions for string manipulation."
          },
          "options": {
            "$ref": "#/components/schemas/AiSdkOptions"
          },
          "systemMessage": {
            "type": "string",
            "description": "Optional system message to guide the AI behavior and persona.",
            "example": "You are an expert programmer. Provide concise and relevant suggestions."
          }
        },
        "required": [
          "prompt"
        ]
      },
      "AiGenerateTextResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The generated text response from the AI."
              }
            },
            "required": [
              "text"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiGenerateStructuredResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "output": {
                "nullable": true,
                "description": "The generated structured data, validated against the schema defined by the 'schemaKey'."
              }
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiGenerateStructuredRequest": {
        "type": "object",
        "properties": {
          "schemaKey": {
            "type": "string",
            "minLength": 1,
            "description": "The key identifying the predefined structured task configuration.",
            "example": "filenameSuggestion"
          },
          "userInput": {
            "type": "string",
            "minLength": 1,
            "description": "The user's input or context for the structured generation task.",
            "example": "A react component for displaying user profiles"
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AiSdkOptions"
              },
              {
                "description": "Optional: Override default model options (temperature, etc.) defined in the task configuration."
              }
            ]
          }
        },
        "required": [
          "schemaKey",
          "userInput"
        ]
      },
      "UnifiedModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Model identifier",
            "example": "gpt-4o-mini"
          },
          "name": {
            "type": "string",
            "description": "User-friendly model name",
            "example": "GPT-4o Mini"
          },
          "provider": {
            "type": "string",
            "description": "Provider ID",
            "example": "openai"
          },
          "context_length": {
            "type": "number",
            "description": "Context window size in tokens",
            "example": 128000
          }
        },
        "required": [
          "id",
          "name",
          "provider"
        ]
      },
      "ModelsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnifiedModel"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateProviderSettings": {
        "type": "object",
        "properties": {
          "ollamaUrl": {
            "type": "string",
            "format": "uri"
          },
          "lmstudioUrl": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "BrowseDirectoryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "currentPath": {
                "type": "string"
              },
              "parentPath": {
                "type": "string",
                "nullable": true
              },
              "entries": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "isDirectory": {
                      "type": "boolean"
                    },
                    "isHidden": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "name",
                    "path",
                    "isDirectory",
                    "isHidden"
                  ]
                }
              }
            },
            "required": [
              "currentPath",
              "parentPath",
              "entries"
            ],
            "description": "BrowseDirectoryData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MCPServerConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unique identifier for the MCP server configuration",
            "example": 1234567890
          },
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the project this MCP server belongs to",
            "example": 1234567890
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name for the MCP server",
            "example": "File System Tools"
          },
          "command": {
            "type": "string",
            "minLength": 1,
            "description": "Command to start the MCP server",
            "example": "npx @modelcontextprotocol/server-filesystem"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Command line arguments for the server",
            "example": [
              "--root",
              "/path/to/project"
            ]
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Environment variables for the server",
            "example": {
              "NODE_ENV": "production"
            }
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the server is enabled",
            "example": true
          },
          "autoStart": {
            "type": "boolean",
            "default": false,
            "description": "Whether to auto-start the server when project opens",
            "example": false
          },
          "created": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "format": "int64",
            "example": 1756396309228
          },
          "updated": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "format": "int64",
            "example": 1756396309228
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "command",
          "created",
          "updated"
        ]
      },
      "MCPServerConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/MCPServerConfig"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MCPServerConfigListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCPServerConfig"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateMCPServerConfigBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the project this MCP server belongs to",
            "example": 1234567890
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name for the MCP server",
            "example": "File System Tools"
          },
          "command": {
            "type": "string",
            "minLength": 1,
            "description": "Command to start the MCP server",
            "example": "npx @modelcontextprotocol/server-filesystem"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Command line arguments for the server",
            "example": [
              "--root",
              "/path/to/project"
            ]
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Environment variables for the server",
            "example": {
              "NODE_ENV": "production"
            }
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the server is enabled",
            "example": true
          },
          "autoStart": {
            "type": "boolean",
            "default": false,
            "description": "Whether to auto-start the server when project opens",
            "example": false
          }
        }
      },
      "MCPToolExecutionResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for this execution",
            "example": "exec_123456"
          },
          "toolId": {
            "type": "string"
          },
          "serverId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "running",
              "success",
              "error"
            ],
            "description": "Status of the execution",
            "example": "success"
          },
          "result": {
            "nullable": true,
            "description": "Result from the tool execution"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if execution failed"
          },
          "startedAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "format": "int64",
            "example": 1756396309228
          },
          "completedAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "format": "int64",
            "example": 1756396309228
          }
        },
        "required": [
          "id",
          "toolId",
          "serverId",
          "status",
          "error",
          "startedAt",
          "completedAt"
        ]
      },
      "MCPToolExecutionResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/MCPToolExecutionResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MCPToolExecutionRequest": {
        "type": "object",
        "properties": {
          "toolId": {
            "type": "string",
            "description": "ID of the tool to execute",
            "example": "read_file"
          },
          "serverId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the MCP server to execute the tool on"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "default": {},
            "description": "Parameters to pass to the tool",
            "example": {
              "path": "/path/to/file.txt"
            }
          }
        },
        "required": [
          "toolId",
          "serverId"
        ]
      },
      "MCPResource": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "URI of the resource",
            "example": "file:///path/to/file.txt"
          },
          "name": {
            "type": "string",
            "description": "Display name for the resource",
            "example": "file.txt"
          },
          "description": {
            "type": "string",
            "description": "Description of the resource"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the resource",
            "example": "text/plain"
          },
          "serverId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the MCP server providing this resource"
          }
        },
        "required": [
          "uri",
          "name",
          "serverId"
        ]
      },
      "MCPResourceListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCPResource"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitStatusResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "isRepo": {
                "type": "boolean",
                "description": "Whether the directory is a git repository"
              },
              "current": {
                "type": "string",
                "nullable": true,
                "description": "The current branch name"
              },
              "tracking": {
                "type": "string",
                "nullable": true,
                "description": "The tracking branch name"
              },
              "ahead": {
                "type": "number",
                "description": "Number of commits ahead of tracking branch"
              },
              "behind": {
                "type": "number",
                "description": "Number of commits behind tracking branch"
              },
              "files": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "The file path relative to the repository root"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "added",
                        "modified",
                        "deleted",
                        "renamed",
                        "copied",
                        "untracked",
                        "ignored",
                        "unchanged"
                      ],
                      "description": "The git status of the file"
                    },
                    "staged": {
                      "type": "boolean",
                      "description": "Whether the file is staged for commit"
                    },
                    "index": {
                      "type": "string",
                      "nullable": true,
                      "description": "The index status code from git"
                    },
                    "workingDir": {
                      "type": "string",
                      "nullable": true,
                      "description": "The working directory status code from git"
                    }
                  },
                  "required": [
                    "path",
                    "status",
                    "staged",
                    "index",
                    "workingDir"
                  ]
                },
                "description": "List of files with git status"
              },
              "staged": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of staged file paths"
              },
              "modified": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of modified file paths"
              },
              "created": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of created file paths"
              },
              "deleted": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of deleted file paths"
              },
              "renamed": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of renamed file paths"
              },
              "conflicted": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of conflicted file paths"
              }
            },
            "required": [
              "isRepo",
              "current",
              "tracking",
              "ahead",
              "behind",
              "files",
              "staged",
              "modified",
              "created",
              "deleted",
              "renamed",
              "conflicted"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GitStatusResultResponse"
              },
              {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "enum": [
                      false
                    ]
                  },
                  "error": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "not_a_repo",
                          "git_not_installed",
                          "permission_denied",
                          "unknown"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "message"
                    ]
                  }
                },
                "required": [
                  "success",
                  "error"
                ]
              }
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommitLogResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "hash": {
                  "type": "string",
                  "description": "Commit hash"
                },
                "message": {
                  "type": "string",
                  "description": "Commit message"
                },
                "author": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "description": "ISO date string"
                    }
                  },
                  "required": [
                    "name",
                    "email",
                    "date"
                  ]
                },
                "committer": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "description": "ISO date string"
                    }
                  },
                  "required": [
                    "name",
                    "email",
                    "date"
                  ]
                },
                "parents": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Parent commit hashes"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Files changed in this commit"
                }
              },
              "required": [
                "hash",
                "message",
                "author",
                "committer",
                "parents"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommitLogEnhancedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              },
              "data": {
                "type": "object",
                "properties": {
                  "commits": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "hash": {
                          "type": "string",
                          "description": "Full SHA-1 commit hash"
                        },
                        "abbreviatedHash": {
                          "type": "string",
                          "description": "Abbreviated commit hash (7-8 chars)"
                        },
                        "subject": {
                          "type": "string",
                          "description": "First line of commit message"
                        },
                        "body": {
                          "type": "string",
                          "description": "Full commit message including subject"
                        },
                        "author": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "avatarUrl": {
                              "type": "string",
                              "format": "uri",
                              "description": "Gravatar or other avatar URL"
                            }
                          },
                          "required": [
                            "name",
                            "email"
                          ],
                          "description": "Commit author information"
                        },
                        "committer": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "avatarUrl": {
                              "type": "string",
                              "format": "uri",
                              "description": "Gravatar or other avatar URL"
                            }
                          },
                          "required": [
                            "name",
                            "email"
                          ],
                          "description": "Committer information (may differ from author)"
                        },
                        "authoredDate": {
                          "type": "string",
                          "description": "ISO 8601 timestamp when authored"
                        },
                        "committedDate": {
                          "type": "string",
                          "description": "ISO 8601 timestamp when committed"
                        },
                        "relativeTime": {
                          "type": "string",
                          "description": "Human-readable relative time (e.g., \"2 hours ago\")"
                        },
                        "parents": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Parent commit hashes"
                        },
                        "refs": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Branch and tag references pointing to this commit"
                        },
                        "stats": {
                          "type": "object",
                          "properties": {
                            "filesChanged": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Total number of files changed"
                            },
                            "additions": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Total lines added"
                            },
                            "deletions": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Total lines removed"
                            }
                          },
                          "required": [
                            "filesChanged",
                            "additions",
                            "deletions"
                          ],
                          "description": "Summary statistics for the commit"
                        },
                        "fileStats": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "File path relative to repository root"
                              },
                              "additions": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Number of lines added"
                              },
                              "deletions": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Number of lines removed"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "added",
                                  "modified",
                                  "deleted",
                                  "renamed",
                                  "copied"
                                ],
                                "description": "Change type"
                              },
                              "oldPath": {
                                "type": "string",
                                "description": "Previous path for renamed/moved files"
                              }
                            },
                            "required": [
                              "path",
                              "additions",
                              "deletions",
                              "status"
                            ]
                          },
                          "description": "Per-file change statistics"
                        }
                      },
                      "required": [
                        "hash",
                        "abbreviatedHash",
                        "subject",
                        "body",
                        "author",
                        "committer",
                        "authoredDate",
                        "committedDate",
                        "relativeTime",
                        "parents",
                        "refs",
                        "stats"
                      ]
                    }
                  },
                  "pagination": {
                    "type": "object",
                    "properties": {
                      "page": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Current page number (1-based)"
                      },
                      "perPage": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "description": "Number of items per page"
                      },
                      "totalCount": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Total number of items if available"
                      },
                      "hasMore": {
                        "type": "boolean",
                        "description": "Whether more items are available"
                      },
                      "cursor": {
                        "type": "string",
                        "description": "Cursor for cursor-based pagination"
                      }
                    },
                    "required": [
                      "page",
                      "perPage",
                      "hasMore"
                    ]
                  },
                  "branch": {
                    "type": "string",
                    "description": "Branch name these commits are from"
                  }
                },
                "required": [
                  "commits",
                  "pagination",
                  "branch"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "success"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommitDetailResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              },
              "data": {
                "type": "object",
                "properties": {
                  "commit": {
                    "type": "object",
                    "properties": {
                      "hash": {
                        "type": "string",
                        "description": "Full SHA-1 commit hash"
                      },
                      "abbreviatedHash": {
                        "type": "string",
                        "description": "Abbreviated commit hash (7-8 chars)"
                      },
                      "subject": {
                        "type": "string",
                        "description": "First line of commit message"
                      },
                      "body": {
                        "type": "string",
                        "description": "Full commit message including subject"
                      },
                      "author": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "avatarUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "Gravatar or other avatar URL"
                          }
                        },
                        "required": [
                          "name",
                          "email"
                        ],
                        "description": "Commit author information"
                      },
                      "committer": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "avatarUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "Gravatar or other avatar URL"
                          }
                        },
                        "required": [
                          "name",
                          "email"
                        ],
                        "description": "Committer information (may differ from author)"
                      },
                      "authoredDate": {
                        "type": "string",
                        "description": "ISO 8601 timestamp when authored"
                      },
                      "committedDate": {
                        "type": "string",
                        "description": "ISO 8601 timestamp when committed"
                      },
                      "relativeTime": {
                        "type": "string",
                        "description": "Human-readable relative time (e.g., \"2 hours ago\")"
                      },
                      "parents": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Parent commit hashes"
                      },
                      "refs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Branch and tag references pointing to this commit"
                      },
                      "stats": {
                        "type": "object",
                        "properties": {
                          "filesChanged": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Total number of files changed"
                          },
                          "additions": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Total lines added"
                          },
                          "deletions": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Total lines removed"
                          }
                        },
                        "required": [
                          "filesChanged",
                          "additions",
                          "deletions"
                        ],
                        "description": "Summary statistics for the commit"
                      },
                      "fileStats": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "File path relative to repository root"
                            },
                            "additions": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Number of lines added"
                            },
                            "deletions": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Number of lines removed"
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "added",
                                "modified",
                                "deleted",
                                "renamed",
                                "copied"
                              ],
                              "description": "Change type"
                            },
                            "oldPath": {
                              "type": "string",
                              "description": "Previous path for renamed/moved files"
                            }
                          },
                          "required": [
                            "path",
                            "additions",
                            "deletions",
                            "status"
                          ]
                        },
                        "description": "Per-file change statistics"
                      }
                    },
                    "required": [
                      "hash",
                      "abbreviatedHash",
                      "subject",
                      "body",
                      "author",
                      "committer",
                      "authoredDate",
                      "committedDate",
                      "relativeTime",
                      "parents",
                      "refs",
                      "stats"
                    ]
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "added",
                            "modified",
                            "deleted",
                            "renamed",
                            "copied"
                          ]
                        },
                        "additions": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "deletions": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "binary": {
                          "type": "boolean"
                        },
                        "oldPath": {
                          "type": "string"
                        },
                        "diff": {
                          "type": "string",
                          "description": "Unified diff content if requested"
                        }
                      },
                      "required": [
                        "path",
                        "status",
                        "additions",
                        "deletions",
                        "binary"
                      ]
                    },
                    "description": "Detailed file changes"
                  },
                  "totalDiff": {
                    "type": "string",
                    "description": "Full unified diff if requested"
                  }
                },
                "required": [
                  "commit",
                  "files"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "success"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "DiffResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "files": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "added",
                        "modified",
                        "deleted",
                        "renamed"
                      ]
                    },
                    "additions": {
                      "type": "number"
                    },
                    "deletions": {
                      "type": "number"
                    },
                    "binary": {
                      "type": "boolean"
                    },
                    "oldPath": {
                      "type": "string",
                      "description": "For renamed files"
                    }
                  },
                  "required": [
                    "path",
                    "type",
                    "additions",
                    "deletions",
                    "binary"
                  ]
                }
              },
              "additions": {
                "type": "number",
                "description": "Total additions"
              },
              "deletions": {
                "type": "number",
                "description": "Total deletions"
              },
              "content": {
                "type": "string",
                "description": "Diff content for single file"
              }
            },
            "required": [
              "files",
              "additions",
              "deletions"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BranchListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Branch name"
                },
                "current": {
                  "type": "boolean",
                  "description": "Whether this is the current branch"
                },
                "isRemote": {
                  "type": "boolean",
                  "description": "Whether this is a remote branch"
                },
                "commit": {
                  "type": "string",
                  "description": "Latest commit hash"
                },
                "tracking": {
                  "type": "string",
                  "nullable": true,
                  "description": "Tracking branch name"
                },
                "ahead": {
                  "type": "number",
                  "description": "Commits ahead of tracking branch"
                },
                "behind": {
                  "type": "number",
                  "description": "Commits behind tracking branch"
                }
              },
              "required": [
                "name",
                "current",
                "isRemote",
                "commit",
                "tracking",
                "ahead",
                "behind"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BranchListEnhancedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              },
              "data": {
                "type": "object",
                "properties": {
                  "branches": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Branch name"
                        },
                        "current": {
                          "type": "boolean",
                          "description": "Whether this is the currently checked out branch"
                        },
                        "isRemote": {
                          "type": "boolean",
                          "description": "Whether this is a remote branch"
                        },
                        "isProtected": {
                          "type": "boolean",
                          "description": "Whether the branch is protected"
                        },
                        "latestCommit": {
                          "type": "object",
                          "properties": {
                            "hash": {
                              "type": "string"
                            },
                            "abbreviatedHash": {
                              "type": "string"
                            },
                            "subject": {
                              "type": "string"
                            },
                            "author": {
                              "type": "string",
                              "description": "Author name"
                            },
                            "relativeTime": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "hash",
                            "abbreviatedHash",
                            "subject",
                            "author",
                            "relativeTime"
                          ],
                          "description": "Summary of the latest commit on this branch"
                        },
                        "tracking": {
                          "type": "string",
                          "nullable": true,
                          "description": "Remote tracking branch"
                        },
                        "ahead": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Commits ahead of tracking/main branch"
                        },
                        "behind": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Commits behind tracking/main branch"
                        },
                        "lastActivity": {
                          "type": "string",
                          "description": "ISO 8601 timestamp of last activity"
                        }
                      },
                      "required": [
                        "name",
                        "current",
                        "isRemote",
                        "latestCommit",
                        "tracking",
                        "ahead",
                        "behind"
                      ]
                    }
                  },
                  "current": {
                    "type": "string",
                    "nullable": true,
                    "description": "Name of current branch"
                  },
                  "defaultBranch": {
                    "type": "string",
                    "description": "Default branch name (e.g., main, master)"
                  }
                },
                "required": [
                  "branches",
                  "current",
                  "defaultBranch"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "success"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "StashListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                },
                "branch": {
                  "type": "string",
                  "description": "Branch where stash was created"
                },
                "date": {
                  "type": "string"
                }
              },
              "required": [
                "index",
                "message",
                "branch",
                "date"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "WorktreeListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Absolute path to the worktree"
                },
                "branch": {
                  "type": "string",
                  "description": "Branch checked out in this worktree"
                },
                "commit": {
                  "type": "string",
                  "description": "Current commit hash"
                },
                "isMain": {
                  "type": "boolean",
                  "description": "Whether this is the main worktree"
                },
                "isLocked": {
                  "type": "boolean",
                  "description": "Whether the worktree is locked"
                },
                "lockReason": {
                  "type": "string",
                  "description": "Reason for locking if locked"
                },
                "prunable": {
                  "type": "boolean",
                  "description": "Whether the worktree can be pruned"
                }
              },
              "required": [
                "path",
                "branch",
                "commit",
                "isMain",
                "isLocked"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "PruneWorktreesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "RemotesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "fetch": {
                  "type": "string",
                  "description": "Fetch URL"
                },
                "push": {
                  "type": "string",
                  "description": "Push URL"
                }
              },
              "required": [
                "name",
                "fetch",
                "push"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TagsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "commit": {
                  "type": "string",
                  "description": "Commit hash"
                },
                "annotation": {
                  "type": "string",
                  "description": "Tag message for annotated tags"
                },
                "tagger": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "description": "ISO date string"
                    }
                  },
                  "required": [
                    "name",
                    "email",
                    "date"
                  ],
                  "description": "Tagger info for annotated tags"
                }
              },
              "required": [
                "name",
                "commit"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MCPStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "claudeDesktop": {
                "type": "object",
                "properties": {
                  "installed": {
                    "type": "boolean"
                  },
                  "configExists": {
                    "type": "boolean"
                  },
                  "hasPromptliano": {
                    "type": "boolean"
                  },
                  "configPath": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  }
                },
                "required": [
                  "installed",
                  "configExists",
                  "hasPromptliano"
                ]
              },
              "claudeCode": {
                "type": "object",
                "properties": {
                  "globalConfigExists": {
                    "type": "boolean"
                  },
                  "globalHasPromptliano": {
                    "type": "boolean"
                  },
                  "globalConfigPath": {
                    "type": "string"
                  },
                  "projectConfigExists": {
                    "type": "boolean"
                  },
                  "projectHasPromptliano": {
                    "type": "boolean"
                  },
                  "projectConfigPath": {
                    "type": "string"
                  },
                  "localConfigExists": {
                    "type": "boolean"
                  },
                  "localHasPromptliano": {
                    "type": "boolean"
                  },
                  "localConfigPath": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  }
                },
                "required": [
                  "globalConfigExists",
                  "globalHasPromptliano",
                  "projectConfigExists",
                  "projectHasPromptliano",
                  "localConfigExists",
                  "localHasPromptliano"
                ]
              },
              "projectId": {
                "type": "string"
              },
              "installCommand": {
                "type": "string"
              }
            },
            "required": [
              "claudeDesktop",
              "claudeCode",
              "projectId",
              "installCommand"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeSessionsMetadataResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sessionId": {
                  "type": "string"
                },
                "projectPath": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "string"
                },
                "messageCount": {
                  "type": "number"
                },
                "fileSize": {
                  "type": "number"
                },
                "hasGitBranch": {
                  "type": "boolean"
                },
                "hasCwd": {
                  "type": "boolean"
                },
                "firstMessagePreview": {
                  "type": "string"
                },
                "lastMessagePreview": {
                  "type": "string"
                }
              },
              "required": [
                "sessionId",
                "projectPath",
                "startTime",
                "lastUpdate",
                "messageCount",
                "fileSize",
                "hasGitBranch",
                "hasCwd"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "hasMore": {
                "type": "boolean"
              },
              "nextCursor": {
                "type": "string"
              },
              "total": {
                "type": "number"
              }
            },
            "required": [
              "hasMore"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeSessionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sessionId": {
                  "type": "string"
                },
                "projectPath": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "string"
                },
                "messageCount": {
                  "type": "number"
                },
                "gitBranch": {
                  "type": "string"
                },
                "cwd": {
                  "type": "string"
                },
                "tokenUsage": {
                  "type": "object",
                  "properties": {
                    "totalInputTokens": {
                      "type": "number"
                    },
                    "totalCacheCreationTokens": {
                      "type": "number"
                    },
                    "totalCacheReadTokens": {
                      "type": "number"
                    },
                    "totalOutputTokens": {
                      "type": "number"
                    },
                    "totalTokens": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "totalInputTokens",
                    "totalCacheCreationTokens",
                    "totalCacheReadTokens",
                    "totalOutputTokens",
                    "totalTokens"
                  ]
                },
                "serviceTiers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "totalTokensUsed": {
                  "type": "number"
                },
                "totalCostUsd": {
                  "type": "number"
                }
              },
              "required": [
                "sessionId",
                "projectPath",
                "startTime",
                "lastUpdate",
                "messageCount"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeSessionsPaginatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sessionId": {
                  "type": "string"
                },
                "projectPath": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "string"
                },
                "messageCount": {
                  "type": "number"
                },
                "gitBranch": {
                  "type": "string"
                },
                "cwd": {
                  "type": "string"
                },
                "tokenUsage": {
                  "type": "object",
                  "properties": {
                    "totalInputTokens": {
                      "type": "number"
                    },
                    "totalCacheCreationTokens": {
                      "type": "number"
                    },
                    "totalCacheReadTokens": {
                      "type": "number"
                    },
                    "totalOutputTokens": {
                      "type": "number"
                    },
                    "totalTokens": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "totalInputTokens",
                    "totalCacheCreationTokens",
                    "totalCacheReadTokens",
                    "totalOutputTokens",
                    "totalTokens"
                  ]
                },
                "serviceTiers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "totalTokensUsed": {
                  "type": "number"
                },
                "totalCostUsd": {
                  "type": "number"
                }
              },
              "required": [
                "sessionId",
                "projectPath",
                "startTime",
                "lastUpdate",
                "messageCount"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "hasMore": {
                "type": "boolean"
              },
              "nextCursor": {
                "type": "string"
              },
              "total": {
                "type": "number"
              }
            },
            "required": [
              "hasMore"
            ]
          }
        },
        "required": [
          "success",
          "data",
          "pagination"
        ]
      },
      "ClaudeFullSessionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "nullable": true,
            "properties": {
              "sessionId": {
                "type": "string"
              },
              "projectPath": {
                "type": "string"
              },
              "startTime": {
                "type": "string"
              },
              "lastUpdate": {
                "type": "string"
              },
              "messageCount": {
                "type": "number"
              },
              "gitBranch": {
                "type": "string"
              },
              "cwd": {
                "type": "string"
              },
              "tokenUsage": {
                "type": "object",
                "properties": {
                  "totalInputTokens": {
                    "type": "number"
                  },
                  "totalCacheCreationTokens": {
                    "type": "number"
                  },
                  "totalCacheReadTokens": {
                    "type": "number"
                  },
                  "totalOutputTokens": {
                    "type": "number"
                  },
                  "totalTokens": {
                    "type": "number"
                  }
                },
                "required": [
                  "totalInputTokens",
                  "totalCacheCreationTokens",
                  "totalCacheReadTokens",
                  "totalOutputTokens",
                  "totalTokens"
                ]
              },
              "serviceTiers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "totalTokensUsed": {
                "type": "number"
              },
              "totalCostUsd": {
                "type": "number"
              }
            },
            "required": [
              "sessionId",
              "projectPath",
              "startTime",
              "lastUpdate",
              "messageCount"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeMessagesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant",
                    "result",
                    "system",
                    "summary"
                  ]
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "enum": [
                        "user",
                        "assistant",
                        "system"
                      ]
                    },
                    "content": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "text"
                                    ]
                                  },
                                  "text": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "text"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "image"
                                    ]
                                  },
                                  "source": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "base64"
                                        ]
                                      },
                                      "media_type": {
                                        "type": "string"
                                      },
                                      "data": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "media_type",
                                      "data"
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "source"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "tool_result"
                                    ]
                                  },
                                  "tool_use_id": {
                                    "type": "string"
                                  },
                                  "content": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "nullable": true
                                        }
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "tool_use_id",
                                  "content"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "tool_use"
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "input": {
                                    "nullable": true
                                  }
                                },
                                "required": [
                                  "type",
                                  "id",
                                  "name"
                                ]
                              },
                              {
                                "type": "string"
                              }
                            ]
                          }
                        },
                        {
                          "nullable": true
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "id": {
                      "type": "string",
                      "nullable": true
                    },
                    "model": {
                      "type": "string",
                      "nullable": true
                    },
                    "stop_reason": {
                      "type": "string",
                      "nullable": true
                    },
                    "stop_sequence": {
                      "type": "string",
                      "nullable": true
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "input_tokens": {
                          "type": "number",
                          "nullable": true
                        },
                        "cache_creation_input_tokens": {
                          "type": "number",
                          "nullable": true
                        },
                        "cache_read_input_tokens": {
                          "type": "number",
                          "nullable": true
                        },
                        "output_tokens": {
                          "type": "number",
                          "nullable": true
                        },
                        "service_tier": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "role",
                    "content"
                  ]
                },
                "timestamp": {
                  "type": "string"
                },
                "sessionId": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string",
                  "nullable": true
                },
                "parentUuid": {
                  "type": "string",
                  "nullable": true
                },
                "requestId": {
                  "type": "string",
                  "nullable": true
                },
                "userType": {
                  "type": "string",
                  "nullable": true
                },
                "isSidechain": {
                  "type": "boolean"
                },
                "cwd": {
                  "type": "string",
                  "nullable": true
                },
                "version": {
                  "type": "string",
                  "nullable": true
                },
                "gitBranch": {
                  "type": "string",
                  "nullable": true
                },
                "toolUseResult": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "oldTodos": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        },
                        "newTodos": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        }
                      }
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    },
                    {
                      "nullable": true
                    },
                    {
                      "nullable": true
                    }
                  ]
                },
                "content": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "text"
                                ]
                              },
                              "text": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "text"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "image"
                                ]
                              },
                              "source": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "base64"
                                    ]
                                  },
                                  "media_type": {
                                    "type": "string"
                                  },
                                  "data": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "media_type",
                                  "data"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "source"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "tool_result"
                                ]
                              },
                              "tool_use_id": {
                                "type": "string"
                              },
                              "content": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "nullable": true
                                    }
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "tool_use_id",
                              "content"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "tool_use"
                                ]
                              },
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "input": {
                                "nullable": true
                              }
                            },
                            "required": [
                              "type",
                              "id",
                              "name"
                            ]
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    {
                      "nullable": true
                    },
                    {
                      "nullable": true
                    }
                  ]
                },
                "isMeta": {
                  "type": "boolean"
                },
                "toolUseID": {
                  "type": "string",
                  "nullable": true
                },
                "level": {
                  "type": "string"
                },
                "tokensUsed": {
                  "type": "number",
                  "nullable": true
                },
                "costUsd": {
                  "type": "number",
                  "nullable": true
                },
                "durationMs": {
                  "type": "number",
                  "nullable": true
                },
                "model": {
                  "type": "string",
                  "nullable": true
                }
              },
              "required": [
                "type",
                "timestamp",
                "sessionId"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeSessionsEnhancedResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClaudeSessionsResponse"
          },
          {
            "type": "object",
            "properties": {
              "pagination": {
                "type": "object",
                "properties": {
                  "hasMore": {
                    "type": "boolean"
                  },
                  "nextCursor": {
                    "type": "string"
                  },
                  "total": {
                    "type": "number"
                  }
                },
                "required": [
                  "hasMore"
                ]
              }
            }
          }
        ]
      },
      "ClaudeProjectDataResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "projectPath": {
                "type": "string"
              },
              "encodedPath": {
                "type": "string"
              },
              "sessions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "sessionId": {
                      "type": "string"
                    },
                    "projectPath": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string"
                    },
                    "lastUpdate": {
                      "type": "string"
                    },
                    "messageCount": {
                      "type": "number"
                    },
                    "gitBranch": {
                      "type": "string"
                    },
                    "cwd": {
                      "type": "string"
                    },
                    "tokenUsage": {
                      "type": "object",
                      "properties": {
                        "totalInputTokens": {
                          "type": "number"
                        },
                        "totalCacheCreationTokens": {
                          "type": "number"
                        },
                        "totalCacheReadTokens": {
                          "type": "number"
                        },
                        "totalOutputTokens": {
                          "type": "number"
                        },
                        "totalTokens": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "totalInputTokens",
                        "totalCacheCreationTokens",
                        "totalCacheReadTokens",
                        "totalOutputTokens",
                        "totalTokens"
                      ]
                    },
                    "serviceTiers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "totalTokensUsed": {
                      "type": "number"
                    },
                    "totalCostUsd": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "sessionId",
                    "projectPath",
                    "startTime",
                    "lastUpdate",
                    "messageCount"
                  ]
                }
              },
              "totalMessages": {
                "type": "number"
              },
              "firstMessageTime": {
                "type": "string"
              },
              "lastMessageTime": {
                "type": "string"
              },
              "branches": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "workingDirectories": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "projectPath",
              "encodedPath",
              "sessions",
              "totalMessages",
              "branches",
              "workingDirectories"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "projectId": {
                "type": "number"
              },
              "title": {
                "type": "string"
              },
              "createdAt": {
                "type": "number"
              },
              "updatedAt": {
                "type": "number"
              }
            },
            "required": [
              "id",
              "projectId",
              "title",
              "createdAt",
              "updatedAt"
            ],
            "description": "Chat"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "DetectToolsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "tools": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "tool": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "installed": {
                      "type": "boolean"
                    },
                    "configPath": {
                      "type": "string"
                    },
                    "configExists": {
                      "type": "boolean"
                    },
                    "hasPromptliano": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "tool",
                    "name",
                    "installed"
                  ]
                }
              },
              "platform": {
                "type": "string"
              }
            },
            "required": [
              "tools",
              "platform"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "InstallationStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "projectConfig": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "mcpEnabled": {
                    "type": "boolean"
                  },
                  "installedTools": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "tool": {
                          "type": "string"
                        },
                        "installedAt": {
                          "type": "number"
                        },
                        "configPath": {
                          "type": "string"
                        },
                        "serverName": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "tool",
                        "installedAt",
                        "serverName"
                      ]
                    }
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "projectName",
                  "mcpEnabled",
                  "installedTools"
                ]
              },
              "connectionStatus": {
                "type": "object",
                "properties": {
                  "connected": {
                    "type": "boolean"
                  },
                  "sessionId": {
                    "type": "string"
                  },
                  "lastActivity": {
                    "type": "number"
                  },
                  "projectId": {
                    "type": "number"
                  }
                },
                "required": [
                  "connected"
                ]
              }
            },
            "required": [
              "projectConfig",
              "connectionStatus"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "InstallResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "configPath": {
                "type": "string"
              },
              "backedUp": {
                "type": "boolean"
              },
              "backupPath": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UninstallResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      }
    },
    "parameters": {}
  },
  "paths": {
    "/api/projects": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a new project and sync its files",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "path": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created and initial sync started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "path": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "description",
                    "path",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "207": {
            "description": "Project created, but post-creation steps encountered issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseMultiStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Projects",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "path": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "path",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project by ID",
        "description": "Retrieve a specific Project by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update Project",
        "description": "Update an existing Project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Project"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete Project",
        "description": "Delete a Project by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/queues": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Queue for Project",
        "description": "Retrieve all Queue associated with this Project",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Create Ticket",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  },
                  "overview": {
                    "type": "string",
                    "nullable": true
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "in_progress",
                      "closed"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "low",
                      "normal",
                      "high"
                    ]
                  },
                  "suggestedFileIds": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "suggestedAgentIds": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "suggestedPromptIds": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "queueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "queuePosition": {
                    "type": "number",
                    "nullable": true
                  },
                  "queueStatus": {
                    "type": "string",
                    "nullable": true,
                    "enum": [
                      "queued",
                      "in_progress",
                      "completed",
                      "failed",
                      "cancelled"
                    ]
                  },
                  "queuePriority": {
                    "type": "number",
                    "nullable": true
                  },
                  "queuedAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "queueStartedAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "queueCompletedAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "queueAgentId": {
                    "type": "string",
                    "nullable": true
                  },
                  "queueErrorMessage": {
                    "type": "string",
                    "nullable": true
                  },
                  "estimatedProcessingTime": {
                    "type": "number",
                    "nullable": true
                  },
                  "actualProcessingTime": {
                    "type": "number",
                    "nullable": true
                  }
                },
                "required": [
                  "projectId",
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ticket created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "overview": {
                          "type": "string",
                          "nullable": true
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "open",
                            "in_progress",
                            "closed"
                          ]
                        },
                        "priority": {
                          "type": "string",
                          "enum": [
                            "low",
                            "normal",
                            "high"
                          ]
                        },
                        "suggestedFileIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "suggestedAgentIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "suggestedPromptIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "queueId": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuePosition": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStatus": {
                          "type": "string",
                          "nullable": true,
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStartedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueCompletedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueAgentId": {
                          "type": "string",
                          "nullable": true
                        },
                        "queueErrorMessage": {
                          "type": "string",
                          "nullable": true
                        },
                        "estimatedProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "actualProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "overview",
                        "status",
                        "priority",
                        "suggestedFileIds",
                        "suggestedAgentIds",
                        "suggestedPromptIds",
                        "queueId",
                        "queuePosition",
                        "queueStatus",
                        "queuePriority",
                        "queuedAt",
                        "queueStartedAt",
                        "queueCompletedAt",
                        "queueAgentId",
                        "queueErrorMessage",
                        "estimatedProcessingTime",
                        "actualProcessingTime",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "List Tickets",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Tickets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "projectId": {
                            "type": "number"
                          },
                          "title": {
                            "type": "string"
                          },
                          "overview": {
                            "type": "string",
                            "nullable": true
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "open",
                              "in_progress",
                              "closed"
                            ]
                          },
                          "priority": {
                            "type": "string",
                            "enum": [
                              "low",
                              "normal",
                              "high"
                            ]
                          },
                          "suggestedFileIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "suggestedAgentIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "suggestedPromptIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "queueId": {
                            "type": "number",
                            "nullable": true
                          },
                          "queuePosition": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueStatus": {
                            "type": "string",
                            "nullable": true,
                            "enum": [
                              "queued",
                              "in_progress",
                              "completed",
                              "failed",
                              "cancelled"
                            ]
                          },
                          "queuePriority": {
                            "type": "number",
                            "nullable": true
                          },
                          "queuedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueStartedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueCompletedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueAgentId": {
                            "type": "string",
                            "nullable": true
                          },
                          "queueErrorMessage": {
                            "type": "string",
                            "nullable": true
                          },
                          "estimatedProcessingTime": {
                            "type": "number",
                            "nullable": true
                          },
                          "actualProcessingTime": {
                            "type": "number",
                            "nullable": true
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "projectId",
                          "title",
                          "overview",
                          "status",
                          "priority",
                          "suggestedFileIds",
                          "suggestedAgentIds",
                          "suggestedPromptIds",
                          "queueId",
                          "queuePosition",
                          "queueStatus",
                          "queuePriority",
                          "queuedAt",
                          "queueStartedAt",
                          "queueCompletedAt",
                          "queueAgentId",
                          "queueErrorMessage",
                          "estimatedProcessingTime",
                          "actualProcessingTime",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "pageSize": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        },
                        "totalItems": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        },
                        "hasPrevious": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "pageSize",
                        "totalPages",
                        "totalItems",
                        "hasMore",
                        "hasPrevious"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}": {
      "get": {
        "tags": [
          "Ticket"
        ],
        "summary": "Get Ticket by ID",
        "description": "Retrieve a specific Ticket by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Ticket"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Ticket"
        ],
        "summary": "Update Ticket",
        "description": "Update an existing Ticket",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Ticket"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ticket"
        ],
        "summary": "Delete Ticket",
        "description": "Delete a Ticket by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickettasks": {
      "post": {
        "tags": [
          "TicketTask"
        ],
        "summary": "Create TicketTask",
        "description": "Create a new TicketTask instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTicketTask"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TicketTask created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TicketTask"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TicketTask"
        ],
        "summary": "List tickettasks",
        "description": "Get all tickettasks with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TicketTask"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickettasks/{tickettaskId}": {
      "get": {
        "tags": [
          "TicketTask"
        ],
        "summary": "Get TicketTask by ID",
        "description": "Retrieve a specific TicketTask by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "tickettaskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TicketTask"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TicketTask"
        ],
        "summary": "Update TicketTask",
        "description": "Update an existing TicketTask",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "tickettaskId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketTask"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TicketTask"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TicketTask"
        ],
        "summary": "Delete TicketTask",
        "description": "Delete a TicketTask by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "tickettaskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Create Chat",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "List Chats",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Chats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "projectId": {
                            "type": "number"
                          },
                          "title": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "projectId",
                          "title",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get Chat by ID",
        "description": "Retrieve a specific Chat by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Chat"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Chat"
        ],
        "summary": "Update Chat",
        "description": "Update an existing Chat",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChat"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Chat"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Chat"
        ],
        "summary": "Delete Chat",
        "description": "Delete a Chat by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/messages": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Add message",
        "description": "Send a new message to the chat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatMessageCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Get messages for a specific chat",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "chatId": {
                            "type": "number"
                          },
                          "role": {
                            "type": "string",
                            "enum": [
                              "user",
                              "assistant",
                              "system"
                            ]
                          },
                          "content": {
                            "type": "string"
                          },
                          "metadata": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "additionalProperties": {
                                  "nullable": true
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "createdAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "chatId",
                          "role",
                          "content",
                          "metadata",
                          "createdAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatmessages": {
      "post": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Create ChatMessage",
        "description": "Create a new ChatMessage instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatMessage"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ChatMessage created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChatMessage"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "List chatmessages",
        "description": "Get all chatmessages with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatMessage"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatmessages/{chatmessageId}": {
      "get": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Get ChatMessage by ID",
        "description": "Retrieve a specific ChatMessage by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatmessageId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChatMessage"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Update ChatMessage",
        "description": "Update an existing ChatMessage",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatmessageId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChatMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChatMessage"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChatMessage"
        ],
        "summary": "Delete ChatMessage",
        "description": "Delete a ChatMessage by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatmessageId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts": {
      "post": {
        "tags": [
          "Prompts"
        ],
        "summary": "Create Prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "tags": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  }
                },
                "required": [
                  "projectId",
                  "title",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Prompt created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "content",
                        "description",
                        "tags",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Prompts"
        ],
        "summary": "List Prompts",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Prompts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "projectId": {
                            "type": "number"
                          },
                          "title": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "tags": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "projectId",
                          "title",
                          "content",
                          "description",
                          "tags",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "pageSize": {
                          "type": "number"
                        },
                        "totalPages": {
                          "type": "number"
                        },
                        "totalItems": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        },
                        "hasPrevious": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "pageSize",
                        "totalPages",
                        "totalItems",
                        "hasMore",
                        "hasPrevious"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/{promptId}": {
      "get": {
        "tags": [
          "Prompt"
        ],
        "summary": "Get Prompt by ID",
        "description": "Retrieve a specific Prompt by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Prompt"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Prompt"
        ],
        "summary": "Update Prompt",
        "description": "Update an existing Prompt",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Prompt"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Prompt"
        ],
        "summary": "Delete Prompt",
        "description": "Delete a Prompt by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claudeagents": {
      "post": {
        "tags": [
          "ClaudeAgent"
        ],
        "summary": "Create ClaudeAgent",
        "description": "Create a new ClaudeAgent instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClaudeAgent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ClaudeAgent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeAgent"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ClaudeAgent"
        ],
        "summary": "List claudeagents",
        "description": "Get all claudeagents with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "filter",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ClaudeAgent"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claudeagents/{claudeagentId}": {
      "get": {
        "tags": [
          "ClaudeAgent"
        ],
        "summary": "Get ClaudeAgent by ID",
        "description": "Retrieve a specific ClaudeAgent by its ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "claudeagentId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeAgent"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ClaudeAgent"
        ],
        "summary": "Update ClaudeAgent",
        "description": "Update an existing ClaudeAgent",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "claudeagentId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClaudeAgent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeAgent"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClaudeAgent"
        ],
        "summary": "Delete ClaudeAgent",
        "description": "Delete a ClaudeAgent by ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "claudeagentId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claudecommands": {
      "post": {
        "tags": [
          "ClaudeCommand"
        ],
        "summary": "Create ClaudeCommand",
        "description": "Create a new ClaudeCommand instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClaudeCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ClaudeCommand created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeCommand"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ClaudeCommand"
        ],
        "summary": "List claudecommands",
        "description": "Get all claudecommands with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ClaudeCommand"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claudecommands/{claudecommandId}": {
      "get": {
        "tags": [
          "ClaudeCommand"
        ],
        "summary": "Get ClaudeCommand by ID",
        "description": "Retrieve a specific ClaudeCommand by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "claudecommandId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeCommand"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ClaudeCommand"
        ],
        "summary": "Update ClaudeCommand",
        "description": "Update an existing ClaudeCommand",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "claudecommandId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClaudeCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeCommand"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClaudeCommand"
        ],
        "summary": "Delete ClaudeCommand",
        "description": "Delete a ClaudeCommand by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "claudecommandId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claudehooks": {
      "post": {
        "tags": [
          "ClaudeHook"
        ],
        "summary": "Create ClaudeHook",
        "description": "Create a new ClaudeHook instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClaudeHook"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ClaudeHook created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeHook"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ClaudeHook"
        ],
        "summary": "List claudehooks",
        "description": "Get all claudehooks with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ClaudeHook"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claudehooks/{claudehookId}": {
      "get": {
        "tags": [
          "ClaudeHook"
        ],
        "summary": "Get ClaudeHook by ID",
        "description": "Retrieve a specific ClaudeHook by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "claudehookId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeHook"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ClaudeHook"
        ],
        "summary": "Update ClaudeHook",
        "description": "Update an existing ClaudeHook",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "claudehookId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClaudeHook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClaudeHook"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClaudeHook"
        ],
        "summary": "Delete ClaudeHook",
        "description": "Delete a ClaudeHook by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "claudehookId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providerkeies": {
      "post": {
        "tags": [
          "ProviderKey"
        ],
        "summary": "Create ProviderKey",
        "description": "Create a new ProviderKey instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderKey"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ProviderKey created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProviderKey"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ProviderKey"
        ],
        "summary": "List providerkeies",
        "description": "Get all providerkeies with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProviderKey"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providerkeies/{providerkeyId}": {
      "get": {
        "tags": [
          "ProviderKey"
        ],
        "summary": "Get ProviderKey by ID",
        "description": "Retrieve a specific ProviderKey by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "providerkeyId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProviderKey"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProviderKey"
        ],
        "summary": "Update ProviderKey",
        "description": "Update an existing ProviderKey",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "providerkeyId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProviderKey"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProviderKey"
        ],
        "summary": "Delete ProviderKey",
        "description": "Delete a ProviderKey by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "providerkeyId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/files": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Create File",
        "description": "Create a new File instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/File"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "File"
        ],
        "summary": "List files",
        "description": "Get all files with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/File"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/files/{fileId}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get File by ID",
        "description": "Retrieve a specific File by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "fileId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/File"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Update File",
        "description": "Update an existing File",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "fileId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/File"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete File",
        "description": "Delete a File by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "fileId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/selectedfiles": {
      "post": {
        "tags": [
          "SelectedFile"
        ],
        "summary": "Create SelectedFile",
        "description": "Create a new SelectedFile instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSelectedFile"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "SelectedFile created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/SelectedFile"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "SelectedFile"
        ],
        "summary": "List selectedfiles",
        "description": "Get all selectedfiles with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SelectedFile"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/selectedfiles/{selectedfileId}": {
      "get": {
        "tags": [
          "SelectedFile"
        ],
        "summary": "Get SelectedFile by ID",
        "description": "Retrieve a specific SelectedFile by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "selectedfileId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/SelectedFile"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SelectedFile"
        ],
        "summary": "Update SelectedFile",
        "description": "Update an existing SelectedFile",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "selectedfileId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSelectedFile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/SelectedFile"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SelectedFile"
        ],
        "summary": "Delete SelectedFile",
        "description": "Delete a SelectedFile by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "selectedfileId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/activetabs": {
      "post": {
        "tags": [
          "ActiveTab"
        ],
        "summary": "Create ActiveTab",
        "description": "Create a new ActiveTab instance",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActiveTab"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ActiveTab created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ActiveTab"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ActiveTab"
        ],
        "summary": "List activetabs",
        "description": "Get all activetabs with optional pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ActiveTab"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "page",
                        "limit",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/activetabs/{activetabId}": {
      "get": {
        "tags": [
          "ActiveTab"
        ],
        "summary": "Get ActiveTab by ID",
        "description": "Retrieve a specific ActiveTab by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "activetabId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ActiveTab"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ActiveTab"
        ],
        "summary": "Update ActiveTab",
        "description": "Update an existing ActiveTab",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "activetabId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActiveTab"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ActiveTab"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ActiveTab"
        ],
        "summary": "Delete ActiveTab",
        "description": "Delete a ActiveTab by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "activetabId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{id}": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Get Chat by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Chats"
        ],
        "summary": "Update Chat",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Chats"
        ],
        "summary": "Delete Chat",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/fork": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Fork a chat to create a new branch",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "includeMessages": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/messages/{messageId}/fork": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Fork a chat from a specific message point",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "messageId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/messages/{messageId}": {
      "delete": {
        "tags": [
          "Chats"
        ],
        "summary": "Delete a message from a chat",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "messageId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/{id}": {
      "get": {
        "tags": [
          "Prompts"
        ],
        "summary": "Get Prompt by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "content",
                        "description",
                        "tags",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Prompts"
        ],
        "summary": "Update Prompt",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "tags": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "content",
                        "description",
                        "tags",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Prompts"
        ],
        "summary": "Delete Prompt",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Prompts"
        ],
        "summary": "Update Prompt (PATCH alias)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "tags": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "tags": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "content",
                        "description",
                        "tags",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/prompts": {
      "get": {
        "tags": [
          "Projects",
          "Prompts"
        ],
        "summary": "List prompts associated with a specific project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "List of project prompts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "projectId": {
                            "type": "number"
                          },
                          "title": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "tags": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "projectId",
                          "title",
                          "content",
                          "description",
                          "tags",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/suggest-prompts": {
      "post": {
        "tags": [
          "Projects",
          "Prompts",
          "AI"
        ],
        "summary": "Get AI-suggested prompts based on user input",
        "description": "Uses AI to analyze user input and suggest the most relevant prompts from the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestPromptsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suggested prompts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestPromptsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/{promptId}/export": {
      "get": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Export a single prompt as markdown",
        "description": "Download a prompt as a markdown file with frontmatter",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Markdown file content",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "default": "text/plain; charset=utf-8"
                },
                "required": false
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/export-batch": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Export multiple prompts as markdown",
        "description": "Export multiple prompts to markdown format",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkdownExportResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/import": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Import prompts from markdown files",
        "description": "Upload and import one or more markdown files containing prompts with frontmatter",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "nullable": true
                  },
                  "projectId": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true
                  },
                  "overwriteExisting": {
                    "type": "boolean",
                    "nullable": true,
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkImportResponse"
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/validate-markdown": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Validate markdown content for prompt import",
        "description": "Validates markdown content structure and frontmatter for prompt import",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Validation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{id}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get Ticket by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "overview": {
                          "type": "string",
                          "nullable": true
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "open",
                            "in_progress",
                            "closed"
                          ]
                        },
                        "priority": {
                          "type": "string",
                          "enum": [
                            "low",
                            "normal",
                            "high"
                          ]
                        },
                        "suggestedFileIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "suggestedAgentIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "suggestedPromptIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "queueId": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuePosition": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStatus": {
                          "type": "string",
                          "nullable": true,
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStartedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueCompletedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueAgentId": {
                          "type": "string",
                          "nullable": true
                        },
                        "queueErrorMessage": {
                          "type": "string",
                          "nullable": true
                        },
                        "estimatedProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "actualProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "overview",
                        "status",
                        "priority",
                        "suggestedFileIds",
                        "suggestedAgentIds",
                        "suggestedPromptIds",
                        "queueId",
                        "queuePosition",
                        "queueStatus",
                        "queuePriority",
                        "queuedAt",
                        "queueStartedAt",
                        "queueCompletedAt",
                        "queueAgentId",
                        "queueErrorMessage",
                        "estimatedProcessingTime",
                        "actualProcessingTime",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tickets"
        ],
        "summary": "Update Ticket",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  },
                  "overview": {
                    "type": "string",
                    "nullable": true
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "in_progress",
                      "closed"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "low",
                      "normal",
                      "high"
                    ]
                  },
                  "suggestedFileIds": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "suggestedAgentIds": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "suggestedPromptIds": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "queueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "queuePosition": {
                    "type": "number",
                    "nullable": true
                  },
                  "queueStatus": {
                    "type": "string",
                    "nullable": true,
                    "enum": [
                      "queued",
                      "in_progress",
                      "completed",
                      "failed",
                      "cancelled"
                    ]
                  },
                  "queuePriority": {
                    "type": "number",
                    "nullable": true
                  },
                  "queuedAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "queueStartedAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "queueCompletedAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "queueAgentId": {
                    "type": "string",
                    "nullable": true
                  },
                  "queueErrorMessage": {
                    "type": "string",
                    "nullable": true
                  },
                  "estimatedProcessingTime": {
                    "type": "number",
                    "nullable": true
                  },
                  "actualProcessingTime": {
                    "type": "number",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ticket updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "overview": {
                          "type": "string",
                          "nullable": true
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "open",
                            "in_progress",
                            "closed"
                          ]
                        },
                        "priority": {
                          "type": "string",
                          "enum": [
                            "low",
                            "normal",
                            "high"
                          ]
                        },
                        "suggestedFileIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "suggestedAgentIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "suggestedPromptIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "queueId": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuePosition": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStatus": {
                          "type": "string",
                          "nullable": true,
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStartedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueCompletedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueAgentId": {
                          "type": "string",
                          "nullable": true
                        },
                        "queueErrorMessage": {
                          "type": "string",
                          "nullable": true
                        },
                        "estimatedProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "actualProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "overview",
                        "status",
                        "priority",
                        "suggestedFileIds",
                        "suggestedAgentIds",
                        "suggestedPromptIds",
                        "queueId",
                        "queuePosition",
                        "queueStatus",
                        "queuePriority",
                        "queuedAt",
                        "queueStartedAt",
                        "queueCompletedAt",
                        "queueAgentId",
                        "queueErrorMessage",
                        "estimatedProcessingTime",
                        "actualProcessingTime",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Delete Ticket",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/tickets": {
      "get": {
        "tags": [
          "Projects",
          "Tickets"
        ],
        "summary": "List tickets for a specific project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "List of project tickets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "projectId": {
                            "type": "number"
                          },
                          "title": {
                            "type": "string"
                          },
                          "overview": {
                            "type": "string",
                            "nullable": true
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "open",
                              "in_progress",
                              "closed"
                            ]
                          },
                          "priority": {
                            "type": "string",
                            "enum": [
                              "low",
                              "normal",
                              "high"
                            ]
                          },
                          "suggestedFileIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "suggestedAgentIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "suggestedPromptIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "queueId": {
                            "type": "number",
                            "nullable": true
                          },
                          "queuePosition": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueStatus": {
                            "type": "string",
                            "nullable": true,
                            "enum": [
                              "queued",
                              "in_progress",
                              "completed",
                              "failed",
                              "cancelled"
                            ]
                          },
                          "queuePriority": {
                            "type": "number",
                            "nullable": true
                          },
                          "queuedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueStartedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueCompletedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueAgentId": {
                            "type": "string",
                            "nullable": true
                          },
                          "queueErrorMessage": {
                            "type": "string",
                            "nullable": true
                          },
                          "estimatedProcessingTime": {
                            "type": "number",
                            "nullable": true
                          },
                          "actualProcessingTime": {
                            "type": "number",
                            "nullable": true
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "projectId",
                          "title",
                          "overview",
                          "status",
                          "priority",
                          "suggestedFileIds",
                          "suggestedAgentIds",
                          "suggestedPromptIds",
                          "queueId",
                          "queuePosition",
                          "queueStatus",
                          "queuePriority",
                          "queuedAt",
                          "queueStartedAt",
                          "queueCompletedAt",
                          "queueAgentId",
                          "queueErrorMessage",
                          "estimatedProcessingTime",
                          "actualProcessingTime",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/tasks": {
      "get": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Get tasks for a specific ticket",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ticket tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "ticketId": {
                            "type": "number"
                          },
                          "content": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "suggestedFileIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "done": {
                            "type": "boolean"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "pending",
                              "in_progress",
                              "completed",
                              "cancelled"
                            ]
                          },
                          "orderIndex": {
                            "type": "number"
                          },
                          "estimatedHours": {
                            "type": "number",
                            "nullable": true
                          },
                          "dependencies": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "tags": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "agentId": {
                            "type": "string",
                            "nullable": true
                          },
                          "suggestedPromptIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "queueId": {
                            "type": "number",
                            "nullable": true
                          },
                          "queuePosition": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueStatus": {
                            "type": "string",
                            "nullable": true,
                            "enum": [
                              "queued",
                              "in_progress",
                              "completed",
                              "failed",
                              "cancelled"
                            ]
                          },
                          "queuePriority": {
                            "type": "number",
                            "nullable": true
                          },
                          "queuedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueStartedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueCompletedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueAgentId": {
                            "type": "string",
                            "nullable": true
                          },
                          "queueErrorMessage": {
                            "type": "string",
                            "nullable": true
                          },
                          "estimatedProcessingTime": {
                            "type": "number",
                            "nullable": true
                          },
                          "actualProcessingTime": {
                            "type": "number",
                            "nullable": true
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "ticketId",
                          "content",
                          "description",
                          "suggestedFileIds",
                          "done",
                          "status",
                          "orderIndex",
                          "estimatedHours",
                          "dependencies",
                          "tags",
                          "agentId",
                          "suggestedPromptIds",
                          "queueId",
                          "queuePosition",
                          "queueStatus",
                          "queuePriority",
                          "queuedAt",
                          "queueStartedAt",
                          "queueCompletedAt",
                          "queueAgentId",
                          "queueErrorMessage",
                          "estimatedProcessingTime",
                          "actualProcessingTime",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Create a new task for a ticket",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "in_progress",
                      "completed",
                      "cancelled"
                    ],
                    "default": "pending"
                  },
                  "suggestedFileIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "suggestedPromptIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "default": []
                  },
                  "dependencies": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "default": []
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "estimatedHours": {
                    "type": "number",
                    "nullable": true
                  },
                  "agentId": {
                    "type": "string",
                    "nullable": true
                  },
                  "done": {
                    "type": "boolean"
                  },
                  "orderIndex": {
                    "type": "number"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "ticketId": {
                          "type": "number"
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "suggestedFileIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "done": {
                          "type": "boolean"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "in_progress",
                            "completed",
                            "cancelled"
                          ]
                        },
                        "orderIndex": {
                          "type": "number"
                        },
                        "estimatedHours": {
                          "type": "number",
                          "nullable": true
                        },
                        "dependencies": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "tags": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "agentId": {
                          "type": "string",
                          "nullable": true
                        },
                        "suggestedPromptIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "queueId": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuePosition": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStatus": {
                          "type": "string",
                          "nullable": true,
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStartedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueCompletedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueAgentId": {
                          "type": "string",
                          "nullable": true
                        },
                        "queueErrorMessage": {
                          "type": "string",
                          "nullable": true
                        },
                        "estimatedProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "actualProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "ticketId",
                        "content",
                        "description",
                        "suggestedFileIds",
                        "done",
                        "status",
                        "orderIndex",
                        "estimatedHours",
                        "dependencies",
                        "tags",
                        "agentId",
                        "suggestedPromptIds",
                        "queueId",
                        "queuePosition",
                        "queueStatus",
                        "queuePriority",
                        "queuedAt",
                        "queueStartedAt",
                        "queueCompletedAt",
                        "queueAgentId",
                        "queueErrorMessage",
                        "estimatedProcessingTime",
                        "actualProcessingTime",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/suggest-tasks": {
      "post": {
        "tags": [
          "Tickets",
          "Tasks",
          "AI"
        ],
        "summary": "Get AI-suggested tasks for a ticket",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Suggested tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "suggestedTasks": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "suggestedTasks"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/auto-generate-tasks": {
      "post": {
        "tags": [
          "Tickets",
          "Tasks",
          "AI"
        ],
        "summary": "Auto-generate tasks from overview",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Generated tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "ticketId": {
                            "type": "number"
                          },
                          "content": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "suggestedFileIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "done": {
                            "type": "boolean"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "pending",
                              "in_progress",
                              "completed",
                              "cancelled"
                            ]
                          },
                          "orderIndex": {
                            "type": "number"
                          },
                          "estimatedHours": {
                            "type": "number",
                            "nullable": true
                          },
                          "dependencies": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "tags": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "agentId": {
                            "type": "string",
                            "nullable": true
                          },
                          "suggestedPromptIds": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "queueId": {
                            "type": "number",
                            "nullable": true
                          },
                          "queuePosition": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueStatus": {
                            "type": "string",
                            "nullable": true,
                            "enum": [
                              "queued",
                              "in_progress",
                              "completed",
                              "failed",
                              "cancelled"
                            ]
                          },
                          "queuePriority": {
                            "type": "number",
                            "nullable": true
                          },
                          "queuedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueStartedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueCompletedAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "queueAgentId": {
                            "type": "string",
                            "nullable": true
                          },
                          "queueErrorMessage": {
                            "type": "string",
                            "nullable": true
                          },
                          "estimatedProcessingTime": {
                            "type": "number",
                            "nullable": true
                          },
                          "actualProcessingTime": {
                            "type": "number",
                            "nullable": true
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "ticketId",
                          "content",
                          "description",
                          "suggestedFileIds",
                          "done",
                          "status",
                          "orderIndex",
                          "estimatedHours",
                          "dependencies",
                          "tags",
                          "agentId",
                          "suggestedPromptIds",
                          "queueId",
                          "queuePosition",
                          "queueStatus",
                          "queuePriority",
                          "queuedAt",
                          "queueStartedAt",
                          "queueCompletedAt",
                          "queueAgentId",
                          "queueErrorMessage",
                          "estimatedProcessingTime",
                          "actualProcessingTime",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/suggest-files": {
      "post": {
        "tags": [
          "Tickets",
          "Files",
          "AI"
        ],
        "summary": "Get AI-suggested files for a ticket",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suggested files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "suggestedFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string"
                              },
                              "relevance": {
                                "type": "number"
                              },
                              "reason": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "path",
                              "relevance",
                              "reason"
                            ]
                          }
                        }
                      },
                      "required": [
                        "suggestedFiles"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/complete": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Mark a ticket as completed",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "projectId": {
                          "type": "number"
                        },
                        "title": {
                          "type": "string"
                        },
                        "overview": {
                          "type": "string",
                          "nullable": true
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "open",
                            "in_progress",
                            "closed"
                          ]
                        },
                        "priority": {
                          "type": "string",
                          "enum": [
                            "low",
                            "normal",
                            "high"
                          ]
                        },
                        "suggestedFileIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "suggestedAgentIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "suggestedPromptIds": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "queueId": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuePosition": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStatus": {
                          "type": "string",
                          "nullable": true,
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": "number",
                          "nullable": true
                        },
                        "queuedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueStartedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueCompletedAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "queueAgentId": {
                          "type": "string",
                          "nullable": true
                        },
                        "queueErrorMessage": {
                          "type": "string",
                          "nullable": true
                        },
                        "estimatedProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "actualProcessingTime": {
                          "type": "number",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "projectId",
                        "title",
                        "overview",
                        "status",
                        "priority",
                        "suggestedFileIds",
                        "suggestedAgentIds",
                        "suggestedPromptIds",
                        "queueId",
                        "queuePosition",
                        "queueStatus",
                        "queuePriority",
                        "queuedAt",
                        "queueStartedAt",
                        "queueCompletedAt",
                        "queueAgentId",
                        "queueErrorMessage",
                        "estimatedProcessingTime",
                        "actualProcessingTime",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/provider-keys": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "List Provider Keys",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sort",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "required": false,
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Provider Keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number"
                          },
                          "provider": {
                            "type": "string"
                          },
                          "keyName": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string",
                            "nullable": true
                          },
                          "encryptedValue": {
                            "type": "string"
                          },
                          "key": {
                            "type": "string",
                            "nullable": true
                          },
                          "encrypted": {
                            "type": "boolean"
                          },
                          "iv": {
                            "type": "string",
                            "nullable": true
                          },
                          "tag": {
                            "type": "string",
                            "nullable": true
                          },
                          "salt": {
                            "type": "string",
                            "nullable": true
                          },
                          "baseUrl": {
                            "type": "string",
                            "nullable": true
                          },
                          "customHeaders": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "object",
                                "additionalProperties": {
                                  "nullable": true
                                }
                              },
                              {
                                "nullable": true
                              },
                              {
                                "nullable": true
                              }
                            ]
                          },
                          "isDefault": {
                            "type": "boolean"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "environment": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "expiresAt": {
                            "type": "number",
                            "nullable": true
                          },
                          "lastUsed": {
                            "type": "number",
                            "nullable": true
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "provider",
                          "keyName",
                          "name",
                          "encryptedValue",
                          "key",
                          "encrypted",
                          "iv",
                          "tag",
                          "salt",
                          "baseUrl",
                          "customHeaders",
                          "isDefault",
                          "isActive",
                          "environment",
                          "description",
                          "expiresAt",
                          "lastUsed",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Providers"
        ],
        "summary": "Create Provider Key",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string"
                  },
                  "keyName": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "encryptedValue": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string",
                    "nullable": true
                  },
                  "encrypted": {
                    "type": "boolean"
                  },
                  "iv": {
                    "type": "string",
                    "nullable": true
                  },
                  "tag": {
                    "type": "string",
                    "nullable": true
                  },
                  "salt": {
                    "type": "string",
                    "nullable": true
                  },
                  "baseUrl": {
                    "type": "string",
                    "nullable": true
                  },
                  "customHeaders": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "additionalProperties": {
                          "nullable": true
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "environment": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "expiresAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "lastUsed": {
                    "type": "number",
                    "nullable": true
                  }
                },
                "required": [
                  "provider",
                  "keyName",
                  "encryptedValue"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider Key created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "provider": {
                          "type": "string"
                        },
                        "keyName": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "encryptedValue": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string",
                          "nullable": true
                        },
                        "encrypted": {
                          "type": "boolean"
                        },
                        "iv": {
                          "type": "string",
                          "nullable": true
                        },
                        "tag": {
                          "type": "string",
                          "nullable": true
                        },
                        "salt": {
                          "type": "string",
                          "nullable": true
                        },
                        "baseUrl": {
                          "type": "string",
                          "nullable": true
                        },
                        "customHeaders": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": {
                                "nullable": true
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "isDefault": {
                          "type": "boolean"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "environment": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "expiresAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "lastUsed": {
                          "type": "number",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "provider",
                        "keyName",
                        "name",
                        "encryptedValue",
                        "key",
                        "encrypted",
                        "iv",
                        "tag",
                        "salt",
                        "baseUrl",
                        "customHeaders",
                        "isDefault",
                        "isActive",
                        "environment",
                        "description",
                        "expiresAt",
                        "lastUsed",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/provider-keys/{id}": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Get Provider Key by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider Key details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "provider": {
                          "type": "string"
                        },
                        "keyName": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "encryptedValue": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string",
                          "nullable": true
                        },
                        "encrypted": {
                          "type": "boolean"
                        },
                        "iv": {
                          "type": "string",
                          "nullable": true
                        },
                        "tag": {
                          "type": "string",
                          "nullable": true
                        },
                        "salt": {
                          "type": "string",
                          "nullable": true
                        },
                        "baseUrl": {
                          "type": "string",
                          "nullable": true
                        },
                        "customHeaders": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": {
                                "nullable": true
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "isDefault": {
                          "type": "boolean"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "environment": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "expiresAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "lastUsed": {
                          "type": "number",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "provider",
                        "keyName",
                        "name",
                        "encryptedValue",
                        "key",
                        "encrypted",
                        "iv",
                        "tag",
                        "salt",
                        "baseUrl",
                        "customHeaders",
                        "isDefault",
                        "isActive",
                        "environment",
                        "description",
                        "expiresAt",
                        "lastUsed",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Provider Key not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Providers"
        ],
        "summary": "Update Provider Key",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string"
                  },
                  "keyName": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "encryptedValue": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string",
                    "nullable": true
                  },
                  "encrypted": {
                    "type": "boolean"
                  },
                  "iv": {
                    "type": "string",
                    "nullable": true
                  },
                  "tag": {
                    "type": "string",
                    "nullable": true
                  },
                  "salt": {
                    "type": "string",
                    "nullable": true
                  },
                  "baseUrl": {
                    "type": "string",
                    "nullable": true
                  },
                  "customHeaders": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "additionalProperties": {
                          "nullable": true
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "environment": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "expiresAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "lastUsed": {
                    "type": "number",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider Key updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "provider": {
                          "type": "string"
                        },
                        "keyName": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string",
                          "nullable": true
                        },
                        "encryptedValue": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string",
                          "nullable": true
                        },
                        "encrypted": {
                          "type": "boolean"
                        },
                        "iv": {
                          "type": "string",
                          "nullable": true
                        },
                        "tag": {
                          "type": "string",
                          "nullable": true
                        },
                        "salt": {
                          "type": "string",
                          "nullable": true
                        },
                        "baseUrl": {
                          "type": "string",
                          "nullable": true
                        },
                        "customHeaders": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": {
                                "nullable": true
                              }
                            },
                            {
                              "nullable": true
                            },
                            {
                              "nullable": true
                            }
                          ]
                        },
                        "isDefault": {
                          "type": "boolean"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "environment": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "expiresAt": {
                          "type": "number",
                          "nullable": true
                        },
                        "lastUsed": {
                          "type": "number",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "provider",
                        "keyName",
                        "name",
                        "encryptedValue",
                        "key",
                        "encrypted",
                        "iv",
                        "tag",
                        "salt",
                        "baseUrl",
                        "customHeaders",
                        "isDefault",
                        "isActive",
                        "environment",
                        "description",
                        "expiresAt",
                        "lastUsed",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Provider Key not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Providers"
        ],
        "summary": "Delete Provider Key",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Provider Key deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Provider Key not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/provider-keys/{providerKeyId}/test": {
      "post": {
        "tags": [
          "Providers"
        ],
        "summary": "Test provider key connection",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "providerKeyId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "testPrompt": {
                    "type": "string",
                    "default": "Say \"Hello, World!\""
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "success",
                            "failed"
                          ]
                        },
                        "message": {
                          "type": "string"
                        },
                        "response": {
                          "type": "string"
                        },
                        "error": {
                          "type": "string"
                        },
                        "latency": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "status",
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/provider-keys/types": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Get available provider types",
        "responses": {
          "200": {
            "description": "Provider types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "displayName": {
                            "type": "string"
                          },
                          "supportsStreaming": {
                            "type": "boolean"
                          },
                          "supportsTools": {
                            "type": "boolean"
                          },
                          "models": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "name",
                          "displayName",
                          "supportsStreaming",
                          "supportsTools",
                          "models"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/keys": {
      "post": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Add a new API key for an AI provider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string"
                  },
                  "keyName": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "encryptedValue": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string",
                    "nullable": true
                  },
                  "encrypted": {
                    "type": "boolean"
                  },
                  "iv": {
                    "type": "string",
                    "nullable": true
                  },
                  "tag": {
                    "type": "string",
                    "nullable": true
                  },
                  "salt": {
                    "type": "string",
                    "nullable": true
                  },
                  "baseUrl": {
                    "type": "string",
                    "nullable": true
                  },
                  "customHeaders": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "additionalProperties": {
                          "nullable": true
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "environment": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "expiresAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "lastUsed": {
                    "type": "number",
                    "nullable": true
                  }
                },
                "required": [
                  "provider",
                  "keyName",
                  "encryptedValue"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider key created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "List all configured provider keys (excluding secrets)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/keys/{id}": {
      "get": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Get a specific provider key by ID (including secret)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Update a provider key's details",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string"
                  },
                  "keyName": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "encryptedValue": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string",
                    "nullable": true
                  },
                  "encrypted": {
                    "type": "boolean"
                  },
                  "iv": {
                    "type": "string",
                    "nullable": true
                  },
                  "tag": {
                    "type": "string",
                    "nullable": true
                  },
                  "salt": {
                    "type": "string",
                    "nullable": true
                  },
                  "baseUrl": {
                    "type": "string",
                    "nullable": true
                  },
                  "customHeaders": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "object",
                        "additionalProperties": {
                          "nullable": true
                        }
                      },
                      {
                        "nullable": true
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "isDefault": {
                    "type": "boolean"
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "environment": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "expiresAt": {
                    "type": "number",
                    "nullable": true
                  },
                  "lastUsed": {
                    "type": "number",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Delete a provider key",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/test": {
      "post": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Test a single provider connection",
        "description": "Test the connection to a specific AI provider and retrieve available models",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "providerId": {
                    "type": "number"
                  },
                  "model": {
                    "type": "string"
                  },
                  "testPrompt": {
                    "type": "string",
                    "default": "Hello, this is a test message."
                  }
                },
                "required": [
                  "providerId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestProviderApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/batch-test": {
      "post": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Test multiple providers at once",
        "description": "Test connections to multiple AI providers in parallel or sequentially",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "providerIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "testPrompt": {
                    "type": "string",
                    "default": "Hello, this is a test message."
                  },
                  "includeInactive": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchTestProviderApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/health": {
      "get": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Get health status of all configured providers",
        "description": "Retrieve health status information for all configured AI providers",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "true"
            },
            "required": false,
            "description": "Force fresh health check instead of using cached data",
            "name": "refresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderHealthStatusListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/settings": {
      "put": {
        "tags": [
          "Provider Settings"
        ],
        "summary": "Update provider settings (URLs for local providers)",
        "description": "Update custom URLs for local AI providers like Ollama and LMStudio",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ollamaUrl": {
                    "type": "string"
                  },
                  "lmstudioUrl": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/keys/validate-custom": {
      "post": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Validate a custom OpenAI-compatible provider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "baseUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "apiKey": {
                    "type": "string"
                  },
                  "customHeaders": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "baseUrl",
                  "apiKey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "compatible": {
                          "type": "boolean"
                        },
                        "models": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "provider": {
                                "type": "string"
                              },
                              "contextLength": {
                                "type": "number"
                              },
                              "maxTokens": {
                                "type": "number"
                              },
                              "capabilities": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "provider"
                            ]
                          }
                        },
                        "features": {
                          "type": "object",
                          "properties": {
                            "streaming": {
                              "type": "boolean"
                            },
                            "functionCalling": {
                              "type": "boolean"
                            },
                            "structuredOutput": {
                              "type": "boolean"
                            },
                            "vision": {
                              "type": "boolean"
                            },
                            "embeddings": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "streaming",
                            "functionCalling",
                            "structuredOutput",
                            "vision",
                            "embeddings"
                          ]
                        },
                        "baseUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "compatible",
                        "models",
                        "features",
                        "baseUrl"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents": {
      "get": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "List ClaudeAgents",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of ClaudeAgents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "instructions": {
                            "type": "string",
                            "nullable": true
                          },
                          "model": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "instructions",
                          "model",
                          "isActive",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "Create ClaudeAgent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "instructions": {
                    "type": "string",
                    "nullable": true
                  },
                  "model": {
                    "type": "string"
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "model"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ClaudeAgent created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "instructions": {
                          "type": "string",
                          "nullable": true
                        },
                        "model": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "instructions",
                        "model",
                        "isActive",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/{id}": {
      "get": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "Get ClaudeAgent by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ClaudeAgent details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "instructions": {
                          "type": "string",
                          "nullable": true
                        },
                        "model": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "instructions",
                        "model",
                        "isActive",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "ClaudeAgent not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "Update ClaudeAgent",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "instructions": {
                    "type": "string",
                    "nullable": true
                  },
                  "model": {
                    "type": "string"
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ClaudeAgent updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "instructions": {
                          "type": "string",
                          "nullable": true
                        },
                        "model": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "instructions",
                        "model",
                        "isActive",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "ClaudeAgent not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "Delete ClaudeAgent",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ClaudeAgent deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "ClaudeAgent not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agents": {
      "get": {
        "tags": [
          "Projects",
          "Claude Agents"
        ],
        "summary": "List Claude agents associated with a specific project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "instructions": {
                            "type": "string",
                            "nullable": true
                          },
                          "model": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "description",
                          "instructions",
                          "model",
                          "isActive",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/suggest-agents": {
      "post": {
        "tags": [
          "Projects",
          "Claude Agents",
          "AI"
        ],
        "summary": "Get AI-suggested Claude agents based on user input",
        "description": "Uses AI to analyze user input and suggest the most relevant agents for the task",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userContext": {
                    "type": "string",
                    "minLength": 1
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 10,
                    "default": 5
                  }
                },
                "required": [
                  "userContext"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSuggestionsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands": {
      "post": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Create a new Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string"
                  },
                  "command": {
                    "type": "string",
                    "minLength": 1
                  },
                  "args": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    },
                    "default": {}
                  },
                  "isActive": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": [
                  "name",
                  "command"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Command created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "List Claude commands for a project",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "query",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "global",
                "project",
                "file"
              ]
            },
            "required": false,
            "name": "scope",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": true
            },
            "required": false,
            "name": "includeGlobal",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeCommandListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands/{commandName}": {
      "get": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Get a specific Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commandName",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Update a Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commandName",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string"
                  },
                  "command": {
                    "type": "string",
                    "minLength": 1
                  },
                  "args": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    }
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Delete a Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commandName",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands/{commandName}/execute": {
      "post": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Execute a Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commandName",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "arguments": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    },
                    "default": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands/generate": {
      "post": {
        "tags": [
          "Claude Commands",
          "AI"
        ],
        "summary": "Generate a new Claude command using AI",
        "description": "Uses AI to generate a complete slash command based on user requirements and project context",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[a-z0-9-]+$"
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1
                  },
                  "userIntent": {
                    "type": "string",
                    "minLength": 1
                  },
                  "category": {
                    "type": "string",
                    "default": "general"
                  },
                  "scope": {
                    "type": "string",
                    "enum": [
                      "global",
                      "project",
                      "file"
                    ],
                    "default": "project"
                  },
                  "context": {
                    "type": "object",
                    "properties": {
                      "includeProjectSummary": {
                        "type": "boolean",
                        "default": true
                      },
                      "includeFileStructure": {
                        "type": "boolean",
                        "default": true
                      },
                      "includeTechStack": {
                        "type": "boolean",
                        "default": true
                      },
                      "selectedFiles": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "additionalContext": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "name",
                  "description",
                  "userIntent"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        },
                        "category": {
                          "type": "string"
                        },
                        "reasoning": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "description",
                        "content",
                        "category",
                        "reasoning"
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands/suggest": {
      "post": {
        "tags": [
          "Claude Commands",
          "AI"
        ],
        "summary": "Get AI-powered command suggestions",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "string"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 10,
                    "default": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandSuggestionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/active-tab": {
      "get": {
        "tags": [
          "Active Tab"
        ],
        "summary": "Get the currently active tab",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "clientId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveTabResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Active Tab"
        ],
        "summary": "Set the active tab",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "activeTabId": {
                    "type": "number"
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "tabMetadata": {
                    "nullable": true
                  }
                },
                "required": [
                  "projectId",
                  "activeTabId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveTabResponseRequired"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Active Tab"
        ],
        "summary": "Clear the active tab",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "clientId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Project details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "path": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "path",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "path": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "path": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "description",
                        "path",
                        "createdAt",
                        "updatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success",
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project and its associated data",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/sync": {
      "post": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Manually trigger a full file sync for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Project sync initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/sync-stream": {
      "get": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Trigger a file sync with real-time progress updates via SSE",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync progress stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-sent events stream with sync progress updates"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/files": {
      "get": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Get the list of files associated with a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            },
            "required": false,
            "name": "includeAllVersions",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Files retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/statistics": {
      "get": {
        "tags": [
          "Projects",
          "Statistics"
        ],
        "summary": "Get comprehensive statistics for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Project statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/refresh": {
      "post": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Refresh project files (sync) optionally limited to a folder",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "folder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Project refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/files/{fileId}": {
      "put": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Update the content of a specific file",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "fileId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File content updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "404": {
            "description": "Project or file not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/suggest-files": {
      "post": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Suggest relevant files based on user input and project context",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt": {
                    "type": "string",
                    "minLength": 1
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "default": 10
                  }
                },
                "required": [
                  "prompt"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Suggested files returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectFile"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}": {
      "get": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "List all hooks for a project",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Create new hook",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}/{eventName}/{matcherIndex}": {
      "get": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Get specific hook configuration",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/HookEvent"
            },
            "required": true,
            "name": "eventName",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            },
            "required": false,
            "name": "matcherIndex",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Update hook configuration",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/HookEvent"
            },
            "required": true,
            "name": "eventName",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            },
            "required": false,
            "name": "matcherIndex",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Delete hook configuration",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/HookEvent"
            },
            "required": true,
            "name": "eventName",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0
            },
            "required": false,
            "name": "matcherIndex",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}/generate": {
      "post": {
        "tags": [
          "Claude Hooks",
          "AI"
        ],
        "summary": "Generate hook from description",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HookGenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}/test": {
      "post": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Test hook (placeholder)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HookTestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookTestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}/search": {
      "get": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Search hooks",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/config": {
      "get": {
        "tags": [
          "MCP Global"
        ],
        "summary": "Get global MCP configuration",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "servers": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "stdio",
                                  "http"
                                ],
                                "default": "stdio"
                              },
                              "command": {
                                "type": "string"
                              },
                              "args": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "env": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "timeout": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "command"
                            ]
                          }
                        },
                        "defaultServerUrl": {
                          "type": "string",
                          "default": "http://localhost:3147/api/mcp"
                        },
                        "debugMode": {
                          "type": "boolean",
                          "default": false
                        },
                        "defaultTimeout": {
                          "type": "number"
                        },
                        "globalEnv": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "servers"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "MCP Global"
        ],
        "summary": "Update global MCP configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "defaultServerUrl": {
                    "type": "string"
                  },
                  "debugMode": {
                    "type": "boolean"
                  },
                  "defaultTimeout": {
                    "type": "number"
                  },
                  "globalEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "servers": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "stdio",
                                  "http"
                                ],
                                "default": "stdio"
                              },
                              "command": {
                                "type": "string"
                              },
                              "args": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "env": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "timeout": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "command"
                            ]
                          }
                        },
                        "defaultServerUrl": {
                          "type": "string",
                          "default": "http://localhost:3147/api/mcp"
                        },
                        "debugMode": {
                          "type": "boolean",
                          "default": false
                        },
                        "defaultTimeout": {
                          "type": "number"
                        },
                        "globalEnv": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "servers"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/installations": {
      "get": {
        "tags": [
          "MCP Global"
        ],
        "summary": "Get all global MCP installations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "installations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tool": {
                                "type": "string"
                              },
                              "installedAt": {
                                "type": "number"
                              },
                              "configPath": {
                                "type": "string"
                              },
                              "serverName": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "tool",
                              "installedAt",
                              "configPath",
                              "serverName"
                            ]
                          }
                        },
                        "toolStatuses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tool": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "installed": {
                                "type": "boolean"
                              },
                              "hasGlobalPromptliano": {
                                "type": "boolean"
                              },
                              "configPath": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "tool",
                              "name",
                              "installed",
                              "hasGlobalPromptliano"
                            ]
                          }
                        }
                      },
                      "required": [
                        "installations",
                        "toolStatuses"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/install": {
      "post": {
        "tags": [
          "MCP Global"
        ],
        "summary": "Install Promptliano MCP globally for a tool",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "debug": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "configPath": {
                          "type": "string"
                        },
                        "backedUp": {
                          "type": "boolean"
                        },
                        "backupPath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/uninstall": {
      "post": {
        "tags": [
          "MCP Global"
        ],
        "summary": "Uninstall global Promptliano MCP for a tool",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/status": {
      "get": {
        "tags": [
          "MCP Global"
        ],
        "summary": "Get global MCP installation status",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "configExists": {
                          "type": "boolean"
                        },
                        "configPath": {
                          "type": "string"
                        },
                        "lastModified": {
                          "type": "number"
                        },
                        "totalInstallations": {
                          "type": "number"
                        },
                        "installedTools": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "installation": {
                          "type": "object",
                          "properties": {
                            "supported": {
                              "type": "boolean"
                            },
                            "scriptPath": {
                              "type": "string"
                            },
                            "scriptExists": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "supported",
                            "scriptPath",
                            "scriptExists"
                          ]
                        }
                      },
                      "required": [
                        "configExists",
                        "configPath",
                        "totalInstallations",
                        "installedTools",
                        "installation"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config/locations": {
      "get": {
        "tags": [
          "MCP Project"
        ],
        "summary": "Get project MCP configuration locations",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "locations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string"
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "priority": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "path",
                              "exists",
                              "priority"
                            ]
                          }
                        }
                      },
                      "required": [
                        "locations"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config/merged": {
      "get": {
        "tags": [
          "MCP Project"
        ],
        "summary": "Get merged project MCP configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "config": {
                          "type": "object",
                          "properties": {
                            "mcpServers": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "stdio",
                                      "http"
                                    ],
                                    "default": "stdio"
                                  },
                                  "command": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "env": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "timeout": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "command"
                                ]
                              }
                            },
                            "inputs": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "promptString",
                                      "promptNumber",
                                      "promptBoolean"
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "default": {
                                    "nullable": true
                                  },
                                  "password": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "type",
                                  "id",
                                  "description"
                                ]
                              }
                            },
                            "extends": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "config"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config": {
      "get": {
        "tags": [
          "MCP Project"
        ],
        "summary": "Get project-specific MCP configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "config": {
                          "type": "object",
                          "nullable": true,
                          "properties": {
                            "mcpServers": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "stdio",
                                      "http"
                                    ],
                                    "default": "stdio"
                                  },
                                  "command": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "env": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "timeout": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "command"
                                ]
                              }
                            },
                            "inputs": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "promptString",
                                      "promptNumber",
                                      "promptBoolean"
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "default": {
                                    "nullable": true
                                  },
                                  "password": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "type",
                                  "id",
                                  "description"
                                ]
                              }
                            },
                            "extends": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              ]
                            }
                          }
                        },
                        "source": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "config"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "MCP Project"
        ],
        "summary": "Update project-specific MCP configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mcpServers": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "stdio",
                            "http"
                          ],
                          "default": "stdio"
                        },
                        "command": {
                          "type": "string"
                        },
                        "args": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "env": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "timeout": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "command"
                      ]
                    }
                  },
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "promptString",
                            "promptNumber",
                            "promptBoolean"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "default": {
                          "nullable": true
                        },
                        "password": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "type",
                        "id",
                        "description"
                      ]
                    }
                  },
                  "extends": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "config": {
                          "type": "object",
                          "properties": {
                            "mcpServers": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "stdio",
                                      "http"
                                    ],
                                    "default": "stdio"
                                  },
                                  "command": {
                                    "type": "string"
                                  },
                                  "args": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "env": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "timeout": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "command"
                                ]
                              }
                            },
                            "inputs": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "promptString",
                                      "promptNumber",
                                      "promptBoolean"
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "default": {
                                    "nullable": true
                                  },
                                  "password": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "type",
                                  "id",
                                  "description"
                                ]
                              }
                            },
                            "extends": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              ]
                            }
                          }
                        },
                        "source": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "config",
                        "source"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MCP Project"
        ],
        "summary": "Delete project-specific MCP configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Update project MCP configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mcpEnabled": {
                    "type": "boolean"
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated config",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "projectConfig": {
                          "type": "object",
                          "properties": {
                            "projectId": {
                              "type": "number"
                            },
                            "projectName": {
                              "type": "string"
                            },
                            "mcpEnabled": {
                              "type": "boolean"
                            },
                            "installedTools": {
                              "type": "array",
                              "items": {
                                "nullable": true
                              }
                            },
                            "customInstructions": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "projectId",
                            "projectName",
                            "mcpEnabled",
                            "installedTools"
                          ]
                        }
                      },
                      "required": [
                        "projectConfig"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/flow": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get complete flow data for a project",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unqueued": {
                      "type": "object",
                      "properties": {
                        "tickets": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Ticket"
                          }
                        },
                        "tasks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TicketTask"
                          }
                        }
                      },
                      "required": [
                        "tickets",
                        "tasks"
                      ]
                    },
                    "queues": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "queue": {
                            "$ref": "#/components/schemas/Queue"
                          },
                          "tickets": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Ticket"
                            }
                          },
                          "tasks": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TicketTask"
                            }
                          }
                        },
                        "required": [
                          "queue",
                          "tickets",
                          "tasks"
                        ]
                      }
                    }
                  },
                  "required": [
                    "unqueued",
                    "queues"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/flow/items": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get all flow items as a flat list",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "ticket",
                          "task"
                        ]
                      },
                      "title": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "ticket": {
                        "$ref": "#/components/schemas/Ticket"
                      },
                      "task": {
                        "$ref": "#/components/schemas/TicketTask"
                      },
                      "queueId": {
                        "type": "number",
                        "nullable": true
                      },
                      "queuePosition": {
                        "type": "number",
                        "nullable": true
                      },
                      "queueStatus": {
                        "type": "string",
                        "nullable": true
                      },
                      "queuePriority": {
                        "type": "number"
                      },
                      "created": {
                        "type": "number"
                      },
                      "updated": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "id",
                      "type",
                      "title",
                      "created",
                      "updated"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/flow/unqueued": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get all unqueued tickets and tasks",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tickets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ticket"
                      }
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TicketTask"
                      }
                    }
                  },
                  "required": [
                    "tickets",
                    "tasks"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/queues": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a queue (Flow)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number",
                    "nullable": true
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string"
                  },
                  "maxParallelItems": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 10
                  }
                },
                "required": [
                  "projectId",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/flow/queues": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "List queues for a project (Flow)",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "nullable": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/flow/queues-with-stats": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get queues with stats (Flow)",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "nullable": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/queues/{queueId}/items": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get items in a queue (Flow)",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "queueId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tickets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ticket"
                      }
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TicketTask"
                      }
                    }
                  },
                  "required": [
                    "tickets",
                    "tasks"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/queues/{queueId}/stats": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get queue statistics (Flow)",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalItems": {
                      "type": "number"
                    },
                    "queuedItems": {
                      "type": "number"
                    },
                    "inProgressItems": {
                      "type": "number"
                    },
                    "completedItems": {
                      "type": "number"
                    },
                    "failedItems": {
                      "type": "number"
                    },
                    "currentAgents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "totalItems",
                    "queuedItems",
                    "inProgressItems",
                    "completedItems",
                    "failedItems",
                    "currentAgents"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/queues/{queueId}": {
      "patch": {
        "tags": [
          "Flow"
        ],
        "summary": "Update queue (Flow)",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "maxParallelItems": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 10
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "summary": "Delete queue (Flow)",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "deleted"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tickets/{ticketId}/enqueue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Enqueue a ticket to a queue",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  },
                  "includeTasks": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tasks/{taskId}/enqueue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Enqueue a task to a queue",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "taskId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTask"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tickets/{ticketId}/dequeue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Remove a ticket from its queue",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "includeTasks",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tasks/{taskId}/dequeue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Remove a task from its queue",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "taskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTask"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/move": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Move an item between queues or to unqueued",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": "number",
                    "nullable": true
                  },
                  "targetQueueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  },
                  "includeTasks": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "targetQueueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "ticket",
                        "task"
                      ]
                    },
                    "title": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "ticket": {
                      "$ref": "#/components/schemas/Ticket"
                    },
                    "task": {
                      "$ref": "#/components/schemas/TicketTask"
                    },
                    "queueId": {
                      "type": "number",
                      "nullable": true
                    },
                    "queuePosition": {
                      "type": "number",
                      "nullable": true
                    },
                    "queueStatus": {
                      "type": "string",
                      "nullable": true
                    },
                    "queuePriority": {
                      "type": "number"
                    },
                    "created": {
                      "type": "number"
                    },
                    "updated": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "type",
                    "title",
                    "created",
                    "updated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/reorder": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Persist new order for items in a queue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "itemType": {
                          "type": "string",
                          "enum": [
                            "ticket",
                            "task"
                          ]
                        },
                        "itemId": {
                          "type": "number",
                          "nullable": true
                        },
                        "ticketId": {
                          "type": "number",
                          "nullable": true
                        }
                      },
                      "required": [
                        "itemType",
                        "itemId"
                      ]
                    }
                  }
                },
                "required": [
                  "queueId",
                  "items"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/start": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as being processed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": "number",
                    "nullable": true
                  },
                  "agentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "agentId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/complete": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as completed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": "number",
                    "nullable": true
                  },
                  "processingTime": {
                    "type": "number"
                  }
                },
                "required": [
                  "itemType",
                  "itemId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/fail": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as failed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": "number",
                    "nullable": true
                  },
                  "errorMessage": {
                    "type": "string"
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "errorMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/bulk-move": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Move multiple items to a queue or unqueued",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "itemType": {
                          "type": "string",
                          "enum": [
                            "ticket",
                            "task"
                          ]
                        },
                        "itemId": {
                          "type": "number",
                          "nullable": true
                        }
                      },
                      "required": [
                        "itemType",
                        "itemId"
                      ]
                    }
                  },
                  "targetQueueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  }
                },
                "required": [
                  "items",
                  "targetQueueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "movedCount": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "success",
                    "movedCount"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/chat": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Chat completion (Vercel AI SDK compatible, streaming)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiSdkChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers": {
      "get": {
        "tags": [
          "AI"
        ],
        "summary": "Get all available providers including custom ones",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvidersListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/stream": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate text using a specified model and prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated AI response stream.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Stream of response tokens (Vercel AI SDK format)"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/text": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate text using a specified model and prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateTextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/structured": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate structured data based on a predefined schema key and user input",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateStructuredRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateStructuredResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/models": {
      "get": {
        "tags": [
          "AI"
        ],
        "summary": "List available AI models for a provider",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Filter models by provider",
              "example": "openai"
            },
            "required": false,
            "name": "provider",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "description": "Include disabled models in the response",
              "example": false
            },
            "required": false,
            "name": "includeDisabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/generate/text": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Generate text (one-off, non-streaming)",
        "description": "Generates text based on a prompt using the specified provider and model. Does not use chat history or save messages.",
        "requestBody": {
          "required": true,
          "description": "Prompt, provider, model, and options for text generation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateTextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/provider-settings": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Update provider settings",
        "description": "Updates custom URLs for local AI providers like Ollama and LMStudio",
        "requestBody": {
          "required": true,
          "description": "Provider settings to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/OperationSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UpdateProviderSettings"
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/browse-directory": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Browse directories on the file system",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The directory path to browse. If not provided, defaults to home directory"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseDirectoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/servers": {
      "post": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Create MCP server configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Display name for the MCP server",
                    "example": "File System Tools"
                  },
                  "command": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Command to start the MCP server",
                    "example": "npx @modelcontextprotocol/server-filesystem"
                  },
                  "args": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Command line arguments for the server",
                    "example": [
                      "--root",
                      "/path/to/project"
                    ]
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "default": {},
                    "description": "Environment variables for the server",
                    "example": {
                      "NODE_ENV": "production"
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether the server is enabled",
                    "example": true
                  },
                  "autoStart": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to auto-start the server when project opens",
                    "example": false
                  }
                },
                "required": [
                  "name",
                  "command"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "201": {
            "description": "MCP server configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "List all MCP server configurations for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/servers/{serverId}": {
      "get": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Get MCP server configuration by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Update MCP server configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMCPServerConfigBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Delete MCP server configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools": {
      "get": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "List available MCP tools",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "serverId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "description"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools/execute": {
      "post": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "Execute an MCP tool",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MCPToolExecutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPToolExecutionResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources": {
      "get": {
        "tags": [
          "MCP",
          "Resources"
        ],
        "summary": "List available MCP resources",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPResourceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources/read": {
      "post": {
        "tags": [
          "MCP",
          "Resources"
        ],
        "summary": "Read MCP resource content",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uri": {
                    "type": "string"
                  },
                  "serverId": {
                    "type": "string"
                  }
                },
                "required": [
                  "uri"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "uri": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "mimeType": {
                          "type": "string"
                        },
                        "content": {
                          "nullable": true
                        }
                      },
                      "required": [
                        "uri",
                        "name",
                        "description",
                        "mimeType"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/builtin-tools": {
      "get": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "Get list of built-in MCP tools",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "category": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "description",
                          "category"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/start": {
      "post": {
        "tags": [
          "MCP",
          "Execution"
        ],
        "summary": "Start an MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/stop": {
      "post": {
        "tags": [
          "MCP",
          "Execution"
        ],
        "summary": "Stop an MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP usage analytics",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "start",
                            "end"
                          ]
                        },
                        "servers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "serverId": {
                                "type": "string"
                              },
                              "totalRequests": {
                                "type": "number"
                              },
                              "successRate": {
                                "type": "number"
                              },
                              "avgResponseTime": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "serverId",
                              "totalRequests",
                              "successRate",
                              "avgResponseTime"
                            ]
                          }
                        },
                        "tools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "executions": {
                                "type": "number"
                              },
                              "avgDuration": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "name",
                              "executions",
                              "avgDuration"
                            ]
                          }
                        },
                        "totalRequests": {
                          "type": "number"
                        },
                        "totalErrors": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "servers",
                        "tools",
                        "totalRequests",
                        "totalErrors"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get statistics for a specific MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "serverId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "connected",
                            "disconnected",
                            "error"
                          ]
                        },
                        "uptime": {
                          "type": "number"
                        },
                        "totalRequests": {
                          "type": "number"
                        },
                        "successRate": {
                          "type": "number"
                        },
                        "avgResponseTime": {
                          "type": "number"
                        },
                        "lastActivity": {
                          "type": "string"
                        },
                        "capabilities": {
                          "nullable": true
                        }
                      },
                      "required": [
                        "serverId",
                        "status",
                        "uptime",
                        "totalRequests",
                        "successRate",
                        "avgResponseTime",
                        "lastActivity"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get tool usage statistics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ],
              "default": "day"
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "string"
                        },
                        "topTools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "count": {
                                "type": "number"
                              },
                              "avgExecutionTime": {
                                "type": "number"
                              },
                              "successRate": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "name",
                              "count",
                              "avgExecutionTime",
                              "successRate"
                            ]
                          }
                        },
                        "totalExecutions": {
                          "type": "number"
                        },
                        "totalErrors": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "topTools",
                        "totalExecutions",
                        "totalErrors"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get resource access statistics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ],
              "default": "day"
            },
            "required": false,
            "name": "period",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "string"
                        },
                        "topResources": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "uri": {
                                "type": "string"
                              },
                              "accessCount": {
                                "type": "number"
                              },
                              "avgResponseTime": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "uri",
                              "accessCount",
                              "avgResponseTime"
                            ]
                          }
                        },
                        "totalAccesses": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "topResources",
                        "totalAccesses"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics/report": {
      "post": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Generate MCP usage report",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "json",
                      "csv",
                      "pdf"
                    ],
                    "default": "json"
                  },
                  "includeServerDetails": {
                    "type": "boolean",
                    "default": true
                  },
                  "includeToolDetails": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": [
                  "startDate",
                  "endDate"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "reportId": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string"
                        },
                        "period": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "start",
                            "end"
                          ]
                        },
                        "format": {
                          "type": "string"
                        },
                        "content": {
                          "nullable": true
                        },
                        "downloadUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "reportId",
                        "generatedAt",
                        "period",
                        "format"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP session statistics",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activeSessions": {
                          "type": "number"
                        },
                        "totalSessionsToday": {
                          "type": "number"
                        },
                        "avgSessionDuration": {
                          "type": "number"
                        },
                        "peakConcurrentSessions": {
                          "type": "number"
                        },
                        "sessionsByServer": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "activeSessions",
                        "totalSessionsToday",
                        "avgSessionDuration",
                        "peakConcurrentSessions",
                        "sessionsByServer"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics/performance": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP performance metrics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "latency",
                "throughput",
                "error_rate"
              ]
            },
            "required": false,
            "name": "metricType",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "avg",
                "min",
                "max",
                "p50",
                "p95",
                "p99"
              ],
              "default": "avg"
            },
            "required": false,
            "name": "aggregation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "metrics": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string"
                              },
                              "value": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "timestamp",
                              "value",
                              "type"
                            ]
                          }
                        },
                        "aggregation": {
                          "type": "string"
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "current": {
                              "type": "number"
                            },
                            "trend": {
                              "type": "string",
                              "enum": [
                                "up",
                                "down",
                                "stable"
                              ]
                            },
                            "changePercent": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "current",
                            "trend",
                            "changePercent"
                          ]
                        }
                      },
                      "required": [
                        "metrics",
                        "aggregation",
                        "summary"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/overview": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP analytics overview for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalExecutions": {
                          "type": "number"
                        },
                        "uniqueTools": {
                          "type": "number"
                        },
                        "overallSuccessRate": {
                          "type": "number"
                        },
                        "avgExecutionTime": {
                          "type": "number"
                        },
                        "topTools": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        },
                        "recentErrors": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        },
                        "executionTrend": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        }
                      },
                      "required": [
                        "totalExecutions",
                        "uniqueTools",
                        "overallSuccessRate",
                        "avgExecutionTime",
                        "topTools",
                        "recentErrors",
                        "executionTrend"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/statistics": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP tool statistics for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/timeline": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP execution timeline for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/error-patterns": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP error patterns for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/executions": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP tool executions for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolName",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "success",
                "error",
                "timeout"
              ]
            },
            "required": false,
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "startedAt",
                "duration",
                "toolName"
              ]
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "executions": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        },
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "pageSize": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "executions",
                        "total",
                        "page",
                        "pageSize"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/connection": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP server connection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "MCP server URL to test"
                  },
                  "timeout": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "default": 5000
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "connected": {
                          "type": "boolean"
                        },
                        "responseTime": {
                          "type": "number"
                        },
                        "error": {
                          "type": "string"
                        },
                        "serverInfo": {
                          "nullable": true
                        }
                      },
                      "required": [
                        "connected",
                        "responseTime"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/initialize": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP initialize handshake",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "MCP server URL to test"
                  },
                  "capabilities": {
                    "type": "object",
                    "properties": {
                      "tools": {
                        "type": "boolean",
                        "default": true
                      },
                      "resources": {
                        "type": "boolean",
                        "default": true
                      },
                      "prompts": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "initialized": {
                          "type": "boolean"
                        },
                        "sessionId": {
                          "type": "string"
                        },
                        "capabilities": {
                          "nullable": true
                        },
                        "serverInfo": {
                          "nullable": true
                        },
                        "error": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "initialized"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/tool": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP tool execution",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "toolName": {
                    "type": "string"
                  },
                  "arguments": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    },
                    "default": {}
                  },
                  "validateOnly": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "toolName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "executed": {
                          "type": "boolean"
                        },
                        "result": {
                          "nullable": true
                        },
                        "executionTime": {
                          "type": "number"
                        },
                        "error": {
                          "type": "string"
                        },
                        "validationErrors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "executed",
                        "executionTime"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/validate-config": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Validate MCP server configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "checkConnectivity": {
                    "type": "boolean",
                    "default": true
                  },
                  "checkCapabilities": {
                    "type": "boolean",
                    "default": true
                  },
                  "checkTools": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": [
                  "serverId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "valid": {
                          "type": "boolean"
                        },
                        "checks": {
                          "type": "object",
                          "properties": {
                            "connectivity": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "passed"
                              ]
                            },
                            "capabilities": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "details": {
                                  "nullable": true
                                }
                              },
                              "required": [
                                "passed"
                              ]
                            },
                            "tools": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "availableTools": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "passed"
                              ]
                            }
                          }
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "warnings": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "valid",
                        "checks"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/debug": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Debug MCP communication",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "list-tools",
                      "list-resources",
                      "get-capabilities",
                      "raw-request"
                    ]
                  },
                  "rawRequest": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string"
                      },
                      "params": {
                        "nullable": true
                      }
                    },
                    "required": [
                      "method"
                    ]
                  }
                },
                "required": [
                  "serverId",
                  "action"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "request": {
                          "nullable": true
                        },
                        "response": {
                          "nullable": true
                        },
                        "timing": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            },
                            "duration": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "start",
                            "end",
                            "duration"
                          ]
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "serverId": {
                              "type": "string"
                            },
                            "action": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "serverId",
                            "action"
                          ]
                        }
                      },
                      "required": [
                        "timing",
                        "metadata"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Create a new MCP session",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "clientInfo": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "version"
                    ]
                  },
                  "capabilities": {
                    "type": "object",
                    "properties": {
                      "tools": {
                        "type": "boolean"
                      },
                      "resources": {
                        "type": "boolean"
                      },
                      "prompts": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "required": [
                  "serverId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "serverId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "idle",
                        "disconnected"
                      ]
                    },
                    "startedAt": {
                      "type": "string"
                    },
                    "lastActivity": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "clientInfo": {
                          "nullable": true
                        },
                        "serverInfo": {
                          "nullable": true
                        },
                        "capabilities": {
                          "nullable": true
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "serverId",
                    "status",
                    "startedAt",
                    "lastActivity"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "serverId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "idle",
                            "disconnected"
                          ]
                        },
                        "startedAt": {
                          "type": "string"
                        },
                        "lastActivity": {
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "clientInfo": {
                              "nullable": true
                            },
                            "serverInfo": {
                              "nullable": true
                            },
                            "capabilities": {
                              "nullable": true
                            }
                          }
                        }
                      },
                      "required": [
                        "id",
                        "serverId",
                        "status",
                        "startedAt",
                        "lastActivity"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "List all MCP sessions",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "idle",
                "disconnected",
                "all"
              ],
              "default": "active"
            },
            "required": false,
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "serverId": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "active",
                              "idle",
                              "disconnected"
                            ]
                          },
                          "startedAt": {
                            "type": "string"
                          },
                          "lastActivity": {
                            "type": "string"
                          },
                          "metadata": {
                            "type": "object",
                            "properties": {
                              "clientInfo": {
                                "nullable": true
                              },
                              "serverInfo": {
                                "nullable": true
                              },
                              "capabilities": {
                                "nullable": true
                              }
                            }
                          }
                        },
                        "required": [
                          "id",
                          "serverId",
                          "status",
                          "startedAt",
                          "lastActivity"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}": {
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Get MCP session by ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "serverId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "idle",
                        "disconnected"
                      ]
                    },
                    "startedAt": {
                      "type": "string"
                    },
                    "lastActivity": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "clientInfo": {
                          "nullable": true
                        },
                        "serverInfo": {
                          "nullable": true
                        },
                        "capabilities": {
                          "nullable": true
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "serverId",
                    "status",
                    "startedAt",
                    "lastActivity"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/close": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Close an MCP session",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string"
                  },
                  "force": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/refresh": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Refresh/keep-alive an MCP session",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "serverId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "idle",
                        "disconnected"
                      ]
                    },
                    "startedAt": {
                      "type": "string"
                    },
                    "lastActivity": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "clientInfo": {
                          "nullable": true
                        },
                        "serverInfo": {
                          "nullable": true
                        },
                        "capabilities": {
                          "nullable": true
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "serverId",
                    "status",
                    "startedAt",
                    "lastActivity"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/history": {
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Get session command history",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionId": {
                          "type": "string"
                        },
                        "history": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "request",
                                  "response",
                                  "notification"
                                ]
                              },
                              "method": {
                                "type": "string"
                              },
                              "params": {
                                "nullable": true
                              },
                              "result": {
                                "nullable": true
                              },
                              "error": {
                                "nullable": true
                              }
                            },
                            "required": [
                              "timestamp",
                              "type"
                            ]
                          }
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "sessionId",
                        "history",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/cleanup": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Cleanup idle MCP sessions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "idleThresholdMinutes": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "default": 30
                  },
                  "dryRun": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionsChecked": {
                          "type": "number"
                        },
                        "sessionsClosed": {
                          "type": "number"
                        },
                        "sessionIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dryRun": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "sessionsChecked",
                        "sessionsClosed",
                        "sessionIds",
                        "dryRun"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/status": {
      "get": {
        "tags": [
          "Git",
          "Status"
        ],
        "summary": "Get git status for a project",
        "description": "Retrieves the current git status including staged, unstaged, and untracked files",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Force refresh the git status (bypass cache)"
            },
            "required": false,
            "name": "refresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stage": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Stage files for commit",
        "description": "Stages specified files or patterns for the next commit",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of file paths to stage"
                  }
                },
                "required": [
                  "filePaths"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/unstage": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Unstage files from commit",
        "description": "Removes specified files from the staging area",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of file paths to unstage"
                  }
                },
                "required": [
                  "filePaths"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stage-all": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Stage all changes",
        "description": "Stages all modified and untracked files for commit",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All changes staged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/unstage-all": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Unstage all changes",
        "description": "Removes all files from the staging area",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All changes unstaged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/commit": {
      "post": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Create a new commit",
        "description": "Creates a new commit with staged changes",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/log": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get commit history",
        "description": "Retrieves the commit history for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 50
            },
            "required": false,
            "name": "maxCount",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 0
            },
            "required": false,
            "name": "skip",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "author",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "since",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "until",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "grep",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitLogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/log-enhanced": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get enhanced commit history",
        "description": "Retrieves detailed commit history with additional metadata",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 50
            },
            "required": false,
            "name": "maxCount",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 0
            },
            "required": false,
            "name": "skip",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "author",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "since",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "until",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "grep",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitLogEnhancedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/commits/{commitHash}": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get commit details",
        "description": "Retrieves detailed information about a specific commit",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commitHash",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/diff": {
      "get": {
        "tags": [
          "Git",
          "Diff"
        ],
        "summary": "Get file diff",
        "description": "Retrieves the diff for a specific file",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Path to the file to diff"
            },
            "required": true,
            "name": "filePath",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Whether to get the cached/staged diff"
            },
            "required": false,
            "name": "cached",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiffResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/branches": {
      "get": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "List all branches",
        "description": "Retrieves all local and remote branches for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Create a new branch",
        "description": "Creates a new branch from the specified starting point",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "startPoint": {
                    "type": "string",
                    "description": "Branch or commit to start from"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "201": {
            "description": "Branch created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/branches-enhanced": {
      "get": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "List branches with enhanced information",
        "description": "Retrieves branches with additional metadata like ahead/behind counts",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchListEnhancedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/branches/switch": {
      "post": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Switch to a different branch",
        "description": "Switches the working directory to the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "createIfNotExists": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/branches/{branchName}": {
      "delete": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Delete a branch",
        "description": "Deletes the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "branchName",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Force delete even if branch has unmerged changes"
            },
            "required": false,
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stash": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get list of all stashes",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StashListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Stash current changes",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Git",
          "Stash"
        ],
        "summary": "Drop a stash",
        "description": "Removes the specified stash from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stashRef": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stash/apply": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Apply a stash without removing it from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stash/pop": {
      "post": {
        "tags": [
          "Git",
          "Stash"
        ],
        "summary": "Pop a stash",
        "description": "Applies the specified stash and removes it from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stashRef": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/worktrees": {
      "get": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "List all worktrees",
        "description": "Retrieves the list of all worktrees for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorktreeListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Add a new worktree",
        "description": "Creates a new worktree for the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Path where to create the worktree"
                  },
                  "branch": {
                    "type": "string",
                    "description": "Branch to check out"
                  },
                  "newBranch": {
                    "type": "string",
                    "description": "Create new branch with this name"
                  },
                  "commitish": {
                    "type": "string",
                    "description": "Commit/tag to check out"
                  },
                  "detach": {
                    "type": "boolean",
                    "description": "Detach HEAD at specified commit"
                  }
                },
                "required": [
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Worktree added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Remove a worktree",
        "description": "Removes the specified worktree",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Path of the worktree to remove"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Force removal even with uncommitted changes"
                  }
                },
                "required": [
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/worktrees/lock": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Lock a worktree",
        "description": "Locks the specified worktree to prevent deletion",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Path of the worktree to lock"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for locking"
                  }
                },
                "required": [
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree locked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/worktrees/unlock": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Unlock a worktree",
        "description": "Unlocks the specified worktree",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "worktreePath": {
                    "type": "string"
                  }
                },
                "required": [
                  "worktreePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree unlocked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/worktrees/prune": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Prune worktrees",
        "description": "Removes worktree entries that no longer exist",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Perform a dry run without actually pruning"
            },
            "required": false,
            "name": "dryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PruneWorktreesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/remotes": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get all configured remotes for a git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/push": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Push changes to a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remote": {
                    "type": "string",
                    "default": "origin"
                  },
                  "branch": {
                    "type": "string",
                    "description": "Current branch if not specified"
                  },
                  "force": {
                    "type": "boolean"
                  },
                  "setUpstream": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/fetch": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Fetch updates from a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remote": {
                    "type": "string",
                    "default": "origin"
                  },
                  "prune": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/pull": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Pull changes from a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remote": {
                    "type": "string",
                    "default": "origin"
                  },
                  "branch": {
                    "type": "string"
                  },
                  "rebase": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/tags": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get all tags for a git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Create a new tag in the git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "ref": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/reset": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Reset current HEAD to a specified state",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": {
                    "type": "string",
                    "description": "Commit reference to reset to"
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "soft",
                      "mixed",
                      "hard"
                    ],
                    "default": "mixed"
                  }
                },
                "required": [
                  "ref"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/project-tabs/{tabId}/generate-name": {
      "post": {
        "tags": [
          "Project Tabs"
        ],
        "operationId": "generateProjectTabName",
        "summary": "Generate an AI-powered name for a project tab",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "tabId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "tabData": {
                    "type": "object",
                    "properties": {
                      "selectedFiles": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "userPrompt": {
                        "type": "string"
                      }
                    }
                  },
                  "existingNames": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "projectId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "success"
                          ]
                        },
                        "generatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "status",
                        "generatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/detect": {
      "get": {
        "tags": [
          "Agent Files"
        ],
        "description": "Detect agent instruction files for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "projectFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "global",
                                  "project"
                                ]
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "writable": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "metadata": {
                                "type": "object",
                                "additionalProperties": {
                                  "nullable": true
                                }
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "path",
                              "scope",
                              "exists",
                              "writable"
                            ]
                          }
                        },
                        "globalFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "global",
                                  "project"
                                ]
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "writable": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "metadata": {
                                "type": "object",
                                "additionalProperties": {
                                  "nullable": true
                                }
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "path",
                              "scope",
                              "exists",
                              "writable"
                            ]
                          }
                        },
                        "suggestedFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "suggestedPath": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "suggestedPath"
                            ]
                          }
                        }
                      },
                      "required": [
                        "projectFiles",
                        "globalFiles",
                        "suggestedFiles"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/update": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Update an agent file with Promptliano instructions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string"
                  },
                  "includeExamples": {
                    "type": "boolean"
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "backedUp": {
                          "type": "boolean"
                        },
                        "filePath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "filePath"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/remove-instructions": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Remove Promptliano instructions from an agent file",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/status": {
      "get": {
        "tags": [
          "Agent Files"
        ],
        "description": "Check status of agent files and instruction versions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "string"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string"
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "isOutdated": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "path",
                              "exists",
                              "hasInstructions",
                              "isOutdated"
                            ]
                          }
                        }
                      },
                      "required": [
                        "currentVersion",
                        "files"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/create": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Create a new agent file with instructions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "includeExamples": {
                    "type": "boolean"
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "filePath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "filePath"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/mcp-status/{projectId}": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get MCP installation status for Claude Code and Claude Desktop",
        "description": "Checks MCP configuration status across Claude Desktop and Claude Code CLI",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/metadata": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get lightweight session metadata for a project",
        "description": "Retrieves session metadata without full message content for fast loading",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeSessionsMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/recent": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get recent Claude Code sessions",
        "description": "Retrieves the most recent sessions for fast access (default 10 sessions)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 50,
              "default": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeSessionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/paginated": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get sessions with cursor-based pagination",
        "description": "Retrieves sessions with efficient cursor-based pagination for large datasets",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "cursor",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "lastUpdate",
                "startTime",
                "messageCount",
                "fileSize"
              ],
              "default": "lastUpdate"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeSessionsPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/{sessionId}/full": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get complete Claude Code session with full message data",
        "description": "Retrieves a complete session including all messages and token usage data",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeFullSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/{sessionId}": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get messages for a specific Claude Code session",
        "description": "Retrieves all messages from a specific chat session",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "assistant",
                "all"
              ],
              "default": "all"
            },
            "required": false,
            "name": "role",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get all Claude Code chat sessions for a project",
        "description": "Retrieves all chat sessions from Claude Code local storage with optional cursor-based pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 50
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            },
            "required": false,
            "name": "useCursor",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "cursor",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "lastUpdate",
                "startTime",
                "messageCount"
              ],
              "default": "lastUpdate"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeSessionsEnhancedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/project-data/{projectId}": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get Claude Code project metadata",
        "description": "Retrieves project-level data including branches, working directories, and statistics",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeProjectDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/import-session/{projectId}/{sessionId}": {
      "post": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Import a Claude Code session into a Promptliano chat",
        "description": "Imports all messages from a Claude Code session into a new Promptliano chat",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/installation/detect": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Detect installed MCP-compatible tools",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectToolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/installation/status": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Get MCP installation and connection status for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstallationStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/installation/install": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install Promptliano MCP for a specific tool",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "debug": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstallResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/installation/uninstall": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Uninstall Promptliano MCP for a specific tool",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UninstallResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/status": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Get global MCP connection status",
        "responses": {
          "200": {
            "description": "Global MCP status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalSessions": {
                          "type": "number"
                        },
                        "projectSessions": {
                          "type": "number"
                        },
                        "projectStatuses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "projectId": {
                                "type": "number"
                              },
                              "connected": {
                                "type": "boolean"
                              },
                              "sessionId": {
                                "type": "string"
                              },
                              "lastActivity": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "projectId",
                              "connected"
                            ]
                          }
                        }
                      },
                      "required": [
                        "totalSessions",
                        "projectSessions",
                        "projectStatuses"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/installation/batch-install": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install Promptliano MCP for multiple tools at once",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tools": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "claude-desktop",
                        "vscode",
                        "cursor",
                        "continue",
                        "claude-code",
                        "windsurf"
                      ]
                    }
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "debug": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "tools"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Batch installation results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tool": {
                                "type": "string"
                              },
                              "success": {
                                "type": "boolean"
                              },
                              "message": {
                                "type": "string"
                              },
                              "configPath": {
                                "type": "string"
                              },
                              "backedUp": {
                                "type": "boolean"
                              },
                              "backupPath": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "tool",
                              "success",
                              "message"
                            ]
                          }
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number"
                            },
                            "succeeded": {
                              "type": "number"
                            },
                            "failed": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "total",
                            "succeeded",
                            "failed"
                          ]
                        }
                      },
                      "required": [
                        "results",
                        "summary"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/install-project-config": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install MCP configuration at the project level (.mcp.json)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverUrl": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project MCP configuration installed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "configPath": {
                          "type": "string"
                        },
                        "backedUp": {
                          "type": "boolean"
                        },
                        "backupPath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "configPath",
                        "backedUp"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}
