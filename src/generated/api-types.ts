/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/projects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Projects */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of Projects */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                name: string
                description: string | null
                path: string
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    put?: never
    /** Create a new project and sync its files */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name: string
            description?: string | null
            path: string
          }
        }
      }
      responses: {
        /** @description Project created and initial sync started */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              id: number
              name: string
              description: string | null
              path: string
              createdAt: number
              updatedAt: number
            }
          }
        }
        /** @description Project created, but post-creation steps encountered issues */
        207: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ProjectResponseMultiStatus']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Project by ID
     * @description Retrieve a specific Project by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['Project']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update Project
     * @description Update an existing Project
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateProject']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['Project']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete Project
     * @description Delete a Project by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/queues': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Queue for Project
     * @description Retrieve all Queue associated with this Project
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['QueueListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Tickets */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of Tickets */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                overview: string | null
                /** @enum {string} */
                status: 'open' | 'in_progress' | 'closed'
                /** @enum {string} */
                priority: 'low' | 'normal' | 'high'
                suggestedFileIds: string | string[] | unknown | unknown
                suggestedAgentIds: string | string[] | unknown | unknown
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }[]
              pagination: {
                page: number
                pageSize: number
                totalPages: number
                totalItems: number
                hasMore: boolean
                hasPrevious: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    put?: never
    /** Create Ticket */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            projectId: number
            title: string
            overview?: string | null
            /** @enum {string} */
            status?: 'open' | 'in_progress' | 'closed'
            /** @enum {string} */
            priority?: 'low' | 'normal' | 'high'
            suggestedFileIds?: string | string[] | unknown | unknown
            suggestedAgentIds?: string | string[] | unknown | unknown
            suggestedPromptIds?: string | number[] | unknown | unknown
            queueId?: number | null
            queuePosition?: number | null
            /** @enum {string|null} */
            queueStatus?: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
            queuePriority?: number | null
            queuedAt?: number | null
            queueStartedAt?: number | null
            queueCompletedAt?: number | null
            queueAgentId?: string | null
            queueErrorMessage?: string | null
            estimatedProcessingTime?: number | null
            actualProcessingTime?: number | null
          }
        }
      }
      responses: {
        /** @description Ticket created */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                overview: string | null
                /** @enum {string} */
                status: 'open' | 'in_progress' | 'closed'
                /** @enum {string} */
                priority: 'low' | 'normal' | 'high'
                suggestedFileIds: string | string[] | unknown | unknown
                suggestedAgentIds: string | string[] | unknown | unknown
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickets/{ticketId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Ticket by ID
     * @description Retrieve a specific Ticket by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['Ticket']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update Ticket
     * @description Update an existing Ticket
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateTicket']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['Ticket']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete Ticket
     * @description Delete a Ticket by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickettasks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List tickettasks
     * @description Get all tickettasks with optional pagination
     */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['TicketTask'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create TicketTask
     * @description Create a new TicketTask instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateTicketTask']
        }
      }
      responses: {
        /** @description TicketTask created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['TicketTask']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickettasks/{tickettaskId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get TicketTask by ID
     * @description Retrieve a specific TicketTask by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          tickettaskId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['TicketTask']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update TicketTask
     * @description Update an existing TicketTask
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          tickettaskId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateTicketTask']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['TicketTask']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete TicketTask
     * @description Delete a TicketTask by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          tickettaskId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Chats */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of Chats */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    put?: never
    /** Create Chat */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            projectId: number
            title: string
          }
        }
      }
      responses: {
        /** @description Chat created */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chats/{chatId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Chat by ID
     * @description Retrieve a specific Chat by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['Chat']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update Chat
     * @description Update an existing Chat
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateChat']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['Chat']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete Chat
     * @description Delete a Chat by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chats/{chatId}/messages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get messages for a specific chat */
    get: {
      parameters: {
        query?: {
          limit?: number
          offset?: number | null
        }
        header?: never
        path: {
          chatId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                chatId: number
                /** @enum {string} */
                role: 'user' | 'assistant' | 'system'
                content: string
                metadata:
                  | string
                  | {
                      [key: string]: unknown
                    }
                  | unknown
                  | unknown
                createdAt: number
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Add message
     * @description Send a new message to the chat
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': components['schemas']['ChatMessageCreate']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ChatMessageResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chatmessages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List chatmessages
     * @description Get all chatmessages with optional pagination
     */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ChatMessage'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create ChatMessage
     * @description Create a new ChatMessage instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateChatMessage']
        }
      }
      responses: {
        /** @description ChatMessage created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ChatMessage']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chatmessages/{chatmessageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get ChatMessage by ID
     * @description Retrieve a specific ChatMessage by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatmessageId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ChatMessage']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update ChatMessage
     * @description Update an existing ChatMessage
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatmessageId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateChatMessage']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ChatMessage']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete ChatMessage
     * @description Delete a ChatMessage by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatmessageId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prompts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Prompts */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of Prompts */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                content: string
                description: string | null
                tags: string | string[] | unknown | unknown
                createdAt: number
                updatedAt: number
              }[]
              pagination: {
                page: number
                pageSize: number
                totalPages: number
                totalItems: number
                hasMore: boolean
                hasPrevious: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    put?: never
    /** Create Prompt */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            projectId: number
            title: string
            content: string
            description?: string | null
            tags?: string | string[] | unknown | unknown
          }
        }
      }
      responses: {
        /** @description Prompt created */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                content: string
                description: string | null
                tags: string | string[] | unknown | unknown
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prompts/{promptId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Prompt by ID
     * @description Retrieve a specific Prompt by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          promptId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['Prompt']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update Prompt
     * @description Update an existing Prompt
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          promptId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdatePromptRequestBody']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['Prompt']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete Prompt
     * @description Delete a Prompt by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          promptId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claudeagents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List claudeagents
     * @description Get all claudeagents with optional pagination
     */
    get: {
      parameters: {
        query?: {
          search?: string
          filter?: string
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeAgent'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create ClaudeAgent
     * @description Create a new ClaudeAgent instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateClaudeAgent']
        }
      }
      responses: {
        /** @description ClaudeAgent created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeAgent']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claudeagents/{claudeagentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get ClaudeAgent by ID
     * @description Retrieve a specific ClaudeAgent by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudeagentId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeAgent']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update ClaudeAgent
     * @description Update an existing ClaudeAgent
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudeagentId: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateClaudeAgent']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeAgent']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete ClaudeAgent
     * @description Delete a ClaudeAgent by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudeagentId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claudecommands': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List claudecommands
     * @description Get all claudecommands with optional pagination
     */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeCommand'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create ClaudeCommand
     * @description Create a new ClaudeCommand instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateClaudeCommand']
        }
      }
      responses: {
        /** @description ClaudeCommand created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeCommand']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claudecommands/{claudecommandId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get ClaudeCommand by ID
     * @description Retrieve a specific ClaudeCommand by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudecommandId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeCommand']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update ClaudeCommand
     * @description Update an existing ClaudeCommand
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudecommandId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateClaudeCommand']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeCommand']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete ClaudeCommand
     * @description Delete a ClaudeCommand by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudecommandId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claudehooks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List claudehooks
     * @description Get all claudehooks with optional pagination
     */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeHook'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create ClaudeHook
     * @description Create a new ClaudeHook instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateClaudeHook']
        }
      }
      responses: {
        /** @description ClaudeHook created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeHook']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claudehooks/{claudehookId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get ClaudeHook by ID
     * @description Retrieve a specific ClaudeHook by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudehookId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeHook']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update ClaudeHook
     * @description Update an existing ClaudeHook
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudehookId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateClaudeHook']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ClaudeHook']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete ClaudeHook
     * @description Delete a ClaudeHook by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          claudehookId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/providerkeies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List providerkeies
     * @description Get all providerkeies with optional pagination
     */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ProviderKey'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create ProviderKey
     * @description Create a new ProviderKey instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateProviderKey']
        }
      }
      responses: {
        /** @description ProviderKey created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ProviderKey']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/providerkeies/{providerkeyId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get ProviderKey by ID
     * @description Retrieve a specific ProviderKey by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          providerkeyId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ProviderKey']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update ProviderKey
     * @description Update an existing ProviderKey
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          providerkeyId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateProviderKey']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ProviderKey']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete ProviderKey
     * @description Delete a ProviderKey by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          providerkeyId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List files
     * @description Get all files with optional pagination
     */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['File'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create File
     * @description Create a new File instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateFile']
        }
      }
      responses: {
        /** @description File created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['File']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/files/{fileId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get File by ID
     * @description Retrieve a specific File by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          fileId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['File']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update File
     * @description Update an existing File
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          fileId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateFile']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['File']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete File
     * @description Delete a File by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          fileId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/selectedfiles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List selectedfiles
     * @description Get all selectedfiles with optional pagination
     */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['SelectedFile'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create SelectedFile
     * @description Create a new SelectedFile instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateSelectedFile']
        }
      }
      responses: {
        /** @description SelectedFile created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['SelectedFile']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/selectedfiles/{selectedfileId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get SelectedFile by ID
     * @description Retrieve a specific SelectedFile by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          selectedfileId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['SelectedFile']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update SelectedFile
     * @description Update an existing SelectedFile
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          selectedfileId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateSelectedFile']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['SelectedFile']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete SelectedFile
     * @description Delete a SelectedFile by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          selectedfileId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/activetabs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List activetabs
     * @description Get all activetabs with optional pagination
     */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ActiveTab'][]
              pagination?: {
                page: number
                limit: number
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create ActiveTab
     * @description Create a new ActiveTab instance
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateActiveTab']
        }
      }
      responses: {
        /** @description ActiveTab created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ActiveTab']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/activetabs/{activetabId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get ActiveTab by ID
     * @description Retrieve a specific ActiveTab by its ID
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          activetabId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ActiveTab']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Update ActiveTab
     * @description Update an existing ActiveTab
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          activetabId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateActiveTab']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ActiveTab']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /**
     * Delete ActiveTab
     * @description Delete a ActiveTab by ID
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          activetabId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chats/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Chat by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Chat details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Chat not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    /** Update Chat */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            projectId?: number
            title?: string
          }
        }
      }
      responses: {
        /** @description Chat updated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Chat not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    post?: never
    /** Delete Chat */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Chat deleted */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Chat not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chats/{chatId}/fork': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Fork a chat to create a new branch */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            title?: string
            /** @default true */
            includeMessages?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chats/{chatId}/messages/{messageId}/fork': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Fork a chat from a specific message point */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatId: number
          messageId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/chats/{chatId}/messages/{messageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete a message from a chat */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          chatId: number
          messageId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prompts/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Prompt by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Prompt details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                content: string
                description: string | null
                tags: string | string[] | unknown | unknown
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Prompt not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    /** Update Prompt */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            projectId?: number
            title?: string
            content?: string
            description?: string | null
            tags?: string | string[] | unknown | unknown
          }
        }
      }
      responses: {
        /** @description Prompt updated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                content: string
                description: string | null
                tags: string | string[] | unknown | unknown
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Prompt not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    post?: never
    /** Delete Prompt */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Prompt deleted */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Prompt not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    options?: never
    head?: never
    /** Update Prompt (PATCH alias) */
    patch: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            projectId?: number
            title?: string
            content?: string
            description?: string | null
            tags?: string | string[] | unknown | unknown
          }
        }
      }
      responses: {
        /** @description Prompt updated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                content: string
                description: string | null
                tags: string | string[] | unknown | unknown
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Prompt not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error?: unknown
            }
          }
        }
      }
    }
    trace?: never
  }
  '/api/projects/{projectId}/prompts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List prompts associated with a specific project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of project prompts */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                content: string
                description: string | null
                tags: string | string[] | unknown | unknown
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/suggest-prompts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get AI-suggested prompts based on user input
     * @description Uses AI to analyze user input and suggest the most relevant prompts from the project
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['SuggestPromptsRequest']
        }
      }
      responses: {
        /** @description Suggested prompts */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['SuggestPromptsResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prompts/{promptId}/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Export a single prompt as markdown
     * @description Download a prompt as a markdown file with frontmatter
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          promptId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Markdown file content */
        200: {
          headers: {
            'Content-Type'?: string
            'Content-Disposition': string
            [name: string]: unknown
          }
          content: {
            'application/octet-stream': string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prompts/export-batch': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Export multiple prompts as markdown
     * @description Export multiple prompts to markdown format
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['BatchExportRequest']
        }
      }
      responses: {
        /** @description Export result */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MarkdownExportResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prompts/import': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Import prompts from markdown files
     * @description Upload and import one or more markdown files containing prompts with frontmatter
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'multipart/form-data': {
            files?: unknown
            projectId?: number
            /** @default false */
            overwriteExisting?: boolean | null
          }
        }
      }
      responses: {
        /** @description Import result */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BulkImportResponse']
          }
        }
        /** @description File too large */
        413: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prompts/validate-markdown': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Validate markdown content for prompt import
     * @description Validates markdown content structure and frontmatter for prompt import
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            content: string
          }
        }
      }
      responses: {
        /** @description Validation result */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data?: unknown
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickets/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Ticket by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Ticket details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                overview: string | null
                /** @enum {string} */
                status: 'open' | 'in_progress' | 'closed'
                /** @enum {string} */
                priority: 'low' | 'normal' | 'high'
                suggestedFileIds: string | string[] | unknown | unknown
                suggestedAgentIds: string | string[] | unknown | unknown
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Ticket not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    /** Update Ticket */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            projectId?: number
            title?: string
            overview?: string | null
            /** @enum {string} */
            status?: 'open' | 'in_progress' | 'closed'
            /** @enum {string} */
            priority?: 'low' | 'normal' | 'high'
            suggestedFileIds?: string | string[] | unknown | unknown
            suggestedAgentIds?: string | string[] | unknown | unknown
            suggestedPromptIds?: string | number[] | unknown | unknown
            queueId?: number | null
            queuePosition?: number | null
            /** @enum {string|null} */
            queueStatus?: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
            queuePriority?: number | null
            queuedAt?: number | null
            queueStartedAt?: number | null
            queueCompletedAt?: number | null
            queueAgentId?: string | null
            queueErrorMessage?: string | null
            estimatedProcessingTime?: number | null
            actualProcessingTime?: number | null
          }
        }
      }
      responses: {
        /** @description Ticket updated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                overview: string | null
                /** @enum {string} */
                status: 'open' | 'in_progress' | 'closed'
                /** @enum {string} */
                priority: 'low' | 'normal' | 'high'
                suggestedFileIds: string | string[] | unknown | unknown
                suggestedAgentIds: string | string[] | unknown | unknown
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Ticket not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    post?: never
    /** Delete Ticket */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Ticket deleted */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Ticket not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/tickets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List tickets for a specific project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of project tickets */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                overview: string | null
                /** @enum {string} */
                status: 'open' | 'in_progress' | 'closed'
                /** @enum {string} */
                priority: 'low' | 'normal' | 'high'
                suggestedFileIds: string | string[] | unknown | unknown
                suggestedAgentIds: string | string[] | unknown | unknown
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickets/{ticketId}/tasks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get tasks for a specific ticket */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of ticket tasks */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                ticketId: number
                content: string
                description: string | null
                suggestedFileIds: string | string[] | unknown | unknown
                done: boolean
                /** @enum {string} */
                status: 'pending' | 'in_progress' | 'completed' | 'cancelled'
                orderIndex: number
                estimatedHours: number | null
                dependencies: string | number[] | unknown | unknown
                tags: string | string[] | unknown | unknown
                agentId: string | null
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
      }
    }
    put?: never
    /** Create a new task for a ticket */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            content: string
            description?: string | null
            /**
             * @default pending
             * @enum {string}
             */
            status?: 'pending' | 'in_progress' | 'completed' | 'cancelled'
            /** @default [] */
            suggestedFileIds?: string[]
            /** @default [] */
            suggestedPromptIds?: number[]
            /** @default [] */
            dependencies?: number[]
            /** @default [] */
            tags?: string[]
            estimatedHours?: number | null
            agentId?: string | null
            done?: boolean
            orderIndex?: number
          }
        }
      }
      responses: {
        /** @description Task created */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                ticketId: number
                content: string
                description: string | null
                suggestedFileIds: string | string[] | unknown | unknown
                done: boolean
                /** @enum {string} */
                status: 'pending' | 'in_progress' | 'completed' | 'cancelled'
                orderIndex: number
                estimatedHours: number | null
                dependencies: string | number[] | unknown | unknown
                tags: string | string[] | unknown | unknown
                agentId: string | null
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickets/{ticketId}/suggest-tasks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Get AI-suggested tasks for a ticket */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Suggested tasks */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                suggestedTasks: string[]
              }
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickets/{ticketId}/auto-generate-tasks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Auto-generate tasks from overview */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Generated tasks */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                ticketId: number
                content: string
                description: string | null
                suggestedFileIds: string | string[] | unknown | unknown
                done: boolean
                /** @enum {string} */
                status: 'pending' | 'in_progress' | 'completed' | 'cancelled'
                orderIndex: number
                estimatedHours: number | null
                dependencies: string | number[] | unknown | unknown
                tags: string | string[] | unknown | unknown
                agentId: string | null
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickets/{ticketId}/suggest-files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Get AI-suggested files for a ticket */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default 10 */
            limit?: number
          }
        }
      }
      responses: {
        /** @description Suggested files */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                suggestedFiles: {
                  path: string
                  relevance: number
                  reason: string
                }[]
              }
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/tickets/{ticketId}/complete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark a ticket as completed */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Ticket completed */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                projectId: number
                title: string
                overview: string | null
                /** @enum {string} */
                status: 'open' | 'in_progress' | 'closed'
                /** @enum {string} */
                priority: 'low' | 'normal' | 'high'
                suggestedFileIds: string | string[] | unknown | unknown
                suggestedAgentIds: string | string[] | unknown | unknown
                suggestedPromptIds: string | number[] | unknown | unknown
                queueId: number | null
                queuePosition: number | null
                /** @enum {string|null} */
                queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
                queuePriority: number | null
                queuedAt: number | null
                queueStartedAt: number | null
                queueCompletedAt: number | null
                queueAgentId: string | null
                queueErrorMessage: string | null
                estimatedProcessingTime: number | null
                actualProcessingTime: number | null
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/provider-keys': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Provider Keys */
    get: {
      parameters: {
        query?: {
          page?: number
          limit?: number
          sort?: string
          order?: 'asc' | 'desc'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of Provider Keys */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                provider: string
                keyName: string
                name: string | null
                encryptedValue: string
                key: string | null
                encrypted: boolean
                iv: string | null
                tag: string | null
                salt: string | null
                baseUrl: string | null
                customHeaders:
                  | string
                  | {
                      [key: string]: unknown
                    }
                  | unknown
                  | unknown
                isDefault: boolean
                isActive: boolean
                environment: string
                description: string | null
                expiresAt: number | null
                lastUsed: number | null
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    put?: never
    /** Create Provider Key */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            provider: string
            keyName: string
            name?: string | null
            encryptedValue: string
            key?: string | null
            encrypted?: boolean
            iv?: string | null
            tag?: string | null
            salt?: string | null
            baseUrl?: string | null
            customHeaders?:
              | string
              | {
                  [key: string]: unknown
                }
              | unknown
              | unknown
            isDefault?: boolean
            isActive?: boolean
            environment?: string
            description?: string | null
            expiresAt?: number | null
            lastUsed?: number | null
          }
        }
      }
      responses: {
        /** @description Provider Key created */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                provider: string
                keyName: string
                name: string | null
                encryptedValue: string
                key: string | null
                encrypted: boolean
                iv: string | null
                tag: string | null
                salt: string | null
                baseUrl: string | null
                customHeaders:
                  | string
                  | {
                      [key: string]: unknown
                    }
                  | unknown
                  | unknown
                isDefault: boolean
                isActive: boolean
                environment: string
                description: string | null
                expiresAt: number | null
                lastUsed: number | null
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/provider-keys/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Provider Key by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Provider Key details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                provider: string
                keyName: string
                name: string | null
                encryptedValue: string
                key: string | null
                encrypted: boolean
                iv: string | null
                tag: string | null
                salt: string | null
                baseUrl: string | null
                customHeaders:
                  | string
                  | {
                      [key: string]: unknown
                    }
                  | unknown
                  | unknown
                isDefault: boolean
                isActive: boolean
                environment: string
                description: string | null
                expiresAt: number | null
                lastUsed: number | null
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Provider Key not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    /** Update Provider Key */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            provider?: string
            keyName?: string
            name?: string | null
            encryptedValue?: string
            key?: string | null
            encrypted?: boolean
            iv?: string | null
            tag?: string | null
            salt?: string | null
            baseUrl?: string | null
            customHeaders?:
              | string
              | {
                  [key: string]: unknown
                }
              | unknown
              | unknown
            isDefault?: boolean
            isActive?: boolean
            environment?: string
            description?: string | null
            expiresAt?: number | null
            lastUsed?: number | null
          }
        }
      }
      responses: {
        /** @description Provider Key updated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                provider: string
                keyName: string
                name: string | null
                encryptedValue: string
                key: string | null
                encrypted: boolean
                iv: string | null
                tag: string | null
                salt: string | null
                baseUrl: string | null
                customHeaders:
                  | string
                  | {
                      [key: string]: unknown
                    }
                  | unknown
                  | unknown
                isDefault: boolean
                isActive: boolean
                environment: string
                description: string | null
                expiresAt: number | null
                lastUsed: number | null
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Provider Key not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    post?: never
    /** Delete Provider Key */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Provider Key deleted */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Provider Key not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/provider-keys/{providerKeyId}/test': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Test provider key connection */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          providerKeyId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default Say "Hello, World!" */
            testPrompt?: string
          }
        }
      }
      responses: {
        /** @description Test result */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                /** @enum {string} */
                status: 'success' | 'failed'
                message: string
                response?: string
                error?: string
                latency?: number
              }
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/provider-keys/types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get available provider types */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Provider types */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                name: string
                displayName: string
                supportsStreaming: boolean
                supportsTools: boolean
                models: string[]
              }[]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/keys': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List all configured provider keys (excluding secrets) */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ProviderKeyListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** Add a new API key for an AI provider */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            provider: string
            keyName: string
            name?: string | null
            encryptedValue: string
            key?: string | null
            encrypted?: boolean
            iv?: string | null
            tag?: string | null
            salt?: string | null
            baseUrl?: string | null
            customHeaders?:
              | string
              | {
                  [key: string]: unknown
                }
              | unknown
              | unknown
            isDefault?: boolean
            isActive?: boolean
            environment?: string
            description?: string | null
            expiresAt?: number | null
            lastUsed?: number | null
          }
        }
      }
      responses: {
        /** @description Provider key created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ProviderKeyResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/keys/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a specific provider key by ID (including secret) */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ProviderKeyResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    /** Delete a provider key */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    /** Update a provider key's details */
    patch: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            provider?: string
            keyName?: string
            name?: string | null
            encryptedValue?: string
            key?: string | null
            encrypted?: boolean
            iv?: string | null
            tag?: string | null
            salt?: string | null
            baseUrl?: string | null
            customHeaders?:
              | string
              | {
                  [key: string]: unknown
                }
              | unknown
              | unknown
            isDefault?: boolean
            isActive?: boolean
            environment?: string
            description?: string | null
            expiresAt?: number | null
            lastUsed?: number | null
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ProviderKeyResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    trace?: never
  }
  '/api/providers/test': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Test a single provider connection
     * @description Test the connection to a specific AI provider and retrieve available models
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            providerId: number
            model?: string
            /** @default Hello, this is a test message. */
            testPrompt?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['TestProviderApiResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/providers/batch-test': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Test multiple providers at once
     * @description Test connections to multiple AI providers in parallel or sequentially
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            providerIds?: number[]
            /** @default Hello, this is a test message. */
            testPrompt?: string
            /** @default false */
            includeInactive?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BatchTestProviderApiResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/providers/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get health status of all configured providers
     * @description Retrieve health status information for all configured AI providers
     */
    get: {
      parameters: {
        query?: {
          /** @description Force fresh health check instead of using cached data */
          refresh?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ProviderHealthStatusListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/providers/settings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update provider settings (URLs for local providers)
     * @description Update custom URLs for local AI providers like Ollama and LMStudio
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            ollamaUrl?: string
            lmstudioUrl?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/keys/validate-custom': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Validate a custom OpenAI-compatible provider */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** Format: uri */
            baseUrl: string
            apiKey: string
            customHeaders?: {
              [key: string]: string
            }
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              data: {
                compatible: boolean
                models: {
                  id: string
                  name: string
                  description?: string
                  provider: string
                  contextLength?: number
                  maxTokens?: number
                  capabilities?: string[]
                }[]
                features: {
                  streaming: boolean
                  functionCalling: boolean
                  structuredOutput: boolean
                  vision: boolean
                  embeddings: boolean
                }
                baseUrl: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List ClaudeAgents */
    get: {
      parameters: {
        query?: {
          projectId?: number | null
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of ClaudeAgents */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: string
                name: string
                description: string | null
                instructions: string | null
                model: string
                isActive: boolean
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    put?: never
    /** Create ClaudeAgent */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name: string
            description?: string | null
            instructions?: string | null
            model: string
            isActive?: boolean
          }
        }
      }
      responses: {
        /** @description ClaudeAgent created */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: string
                name: string
                description: string | null
                instructions: string | null
                model: string
                isActive: boolean
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agents/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get ClaudeAgent by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description ClaudeAgent details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: string
                name: string
                description: string | null
                instructions: string | null
                model: string
                isActive: boolean
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description ClaudeAgent not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    /** Update ClaudeAgent */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name?: string
            description?: string | null
            instructions?: string | null
            model?: string
            isActive?: boolean
          }
        }
      }
      responses: {
        /** @description ClaudeAgent updated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: string
                name: string
                description: string | null
                instructions: string | null
                model: string
                isActive: boolean
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description ClaudeAgent not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    post?: never
    /** Delete ClaudeAgent */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description ClaudeAgent deleted */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description ClaudeAgent not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/agents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Claude agents associated with a specific project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: string
                name: string
                description: string | null
                instructions: string | null
                model: string
                isActive: boolean
                createdAt: number
                updatedAt: number
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/suggest-agents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get AI-suggested Claude agents based on user input
     * @description Uses AI to analyze user input and suggest the most relevant agents for the task
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            userContext: string
            /** @default 5 */
            limit?: number
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['AgentSuggestionsListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/commands': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List Claude commands for a project */
    get: {
      parameters: {
        query?: {
          query?: string
          scope?: 'global' | 'project' | 'file'
          includeGlobal?: boolean
          limit?: number
          offset?: number
        }
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeCommandListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** Create a new Claude command */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name: string
            description?: string
            command: string
            /** @default {} */
            args?: {
              [key: string]: unknown
            }
            /** @default true */
            isActive?: boolean
          }
        }
      }
      responses: {
        /** @description Command created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeCommandResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/commands/{commandName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a specific Claude command */
    get: {
      parameters: {
        query?: {
          namespace?: string
        }
        header?: never
        path: {
          projectId: number | null
          commandName: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeCommandResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /** Update a Claude command */
    put: {
      parameters: {
        query?: {
          namespace?: string
        }
        header?: never
        path: {
          projectId: number | null
          commandName: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name?: string
            description?: string
            command?: string
            args?: {
              [key: string]: unknown
            }
            isActive?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeCommandResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /** Delete a Claude command */
    delete: {
      parameters: {
        query?: {
          namespace?: string
        }
        header?: never
        path: {
          projectId: number | null
          commandName: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/commands/{commandName}/execute': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Execute a Claude command */
    post: {
      parameters: {
        query?: {
          namespace?: string
        }
        header?: never
        path: {
          projectId: number | null
          commandName: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default {} */
            arguments?: {
              [key: string]: unknown
            }
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommandExecutionResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/commands/generate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Generate a new Claude command using AI
     * @description Uses AI to generate a complete slash command based on user requirements and project context
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name: string
            description: string
            userIntent: string
            /** @default general */
            category?: string
            /**
             * @default project
             * @enum {string}
             */
            scope?: 'global' | 'project' | 'file'
            context?: {
              /** @default true */
              includeProjectSummary?: boolean
              /** @default true */
              includeFileStructure?: boolean
              /** @default true */
              includeTechStack?: boolean
              selectedFiles?: string[]
              additionalContext?: string
            }
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
              data: {
                name: string
                description: string
                content: string
                category: string
                reasoning: string
              }
              error?: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/commands/suggest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Get AI-powered command suggestions */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            context?: string
            /** @default 5 */
            limit?: number
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommandSuggestionsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/active-tab': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get the currently active tab */
    get: {
      parameters: {
        query?: {
          projectId?: number | null
          clientId?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ActiveTabResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** Set the active tab */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            projectId: number
            activeTabId: number
            clientId?: string
            tabMetadata?: unknown
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ActiveTabResponseRequired']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /** Clear the active tab */
    delete: {
      parameters: {
        query?: {
          projectId?: number | null
          clientId?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get Project by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Project details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                name: string
                description: string | null
                path: string
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    /** Update Project */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name?: string
            description?: string | null
            path?: string
          }
        }
      }
      responses: {
        /** @description Project updated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: number
                name: string
                description: string | null
                path: string
                createdAt: number
                updatedAt: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Validation error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: false
              error: string
              code?: string
              details?: unknown
            }
          }
        }
      }
    }
    post?: never
    /** Delete a project and its associated data */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Project deleted successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/sync': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Manually trigger a full file sync for a project */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Project sync initiated successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/sync-stream': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Trigger a file sync with real-time progress updates via SSE */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Sync progress stream */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/event-stream': string
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get the list of files associated with a project */
    get: {
      parameters: {
        query?: {
          includeAllVersions?: boolean | null
          limit?: number
          offset?: number | null
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Files retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: unknown[]
            }
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a combined summary of all files in the project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Project summary retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ProjectSummaryResponse']
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/files/summarize': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Summarize specified files in a project */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            fileIds: string[]
            /** @default false */
            force?: boolean
          }
        }
      }
      responses: {
        /** @description Files summarized successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                included: number
                skipped: number
                updatedFiles: unknown[]
                skippedReasons?: {
                  empty: number
                  tooLarge: number
                  errors: number
                }
              }
            }
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get comprehensive statistics for a project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Project statistics retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data?: unknown
            }
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Refresh project files (sync) optionally limited to a folder */
    post: {
      parameters: {
        query?: {
          folder?: string
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Project refreshed successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: unknown[]
            }
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/files/{fileId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update the content of a specific file */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
          fileId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            content: string
          }
        }
      }
      responses: {
        /** @description File content updated successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': unknown
          }
        }
        /** @description Project or file not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{id}/suggest-files': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Suggest relevant files based on user input and project context */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            prompt: string
            /** @default 10 */
            limit?: number
          }
        }
      }
      responses: {
        /** @description Suggested files returned successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: components['schemas']['ProjectFile'][]
            }
          }
        }
        /** @description Project not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-hooks/{projectPath}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List all hooks for a project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectPath: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['HookListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** Create new hook */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectPath: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateHookRequest']
        }
      }
      responses: {
        /** @description Hook created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['HookApiResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-hooks/{projectPath}/{eventName}/{matcherIndex}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get specific hook configuration */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectPath: string
          eventName: components['schemas']['HookEvent']
          matcherIndex: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['HookApiResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /** Update hook configuration */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectPath: string
          eventName: components['schemas']['HookEvent']
          matcherIndex: number | null
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateHookRequest']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['HookApiResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    post?: never
    /** Delete hook configuration */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectPath: string
          eventName: components['schemas']['HookEvent']
          matcherIndex: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-hooks/{projectPath}/generate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Generate hook from description */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectPath: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['HookGenerationRequest']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['HookGenerationResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-hooks/{projectPath}/test': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Test hook (placeholder) */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectPath: string
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['HookTestRequest']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['HookTestResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-hooks/{projectPath}/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Search hooks */
    get: {
      parameters: {
        query?: {
          q?: string
        }
        header?: never
        path: {
          projectPath: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['HookListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/global/config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get global MCP configuration */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                servers: {
                  [key: string]: {
                    /**
                     * @default stdio
                     * @enum {string}
                     */
                    type: 'stdio' | 'http'
                    command: string
                    args?: string[]
                    env?: {
                      [key: string]: string
                    }
                    timeout?: number
                  }
                }
                /** @default http://localhost:3147/api/mcp */
                defaultServerUrl: string
                /** @default false */
                debugMode: boolean
                defaultTimeout?: number
                globalEnv?: {
                  [key: string]: string
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** Update global MCP configuration */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            defaultServerUrl?: string
            debugMode?: boolean
            defaultTimeout?: number
            globalEnv?: {
              [key: string]: string
            }
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                servers: {
                  [key: string]: {
                    /**
                     * @default stdio
                     * @enum {string}
                     */
                    type: 'stdio' | 'http'
                    command: string
                    args?: string[]
                    env?: {
                      [key: string]: string
                    }
                    timeout?: number
                  }
                }
                /** @default http://localhost:3147/api/mcp */
                defaultServerUrl: string
                /** @default false */
                debugMode: boolean
                defaultTimeout?: number
                globalEnv?: {
                  [key: string]: string
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/global/installations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all global MCP installations */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                installations: {
                  tool: string
                  installedAt: number
                  configPath: string
                  serverName: string
                  version?: string
                }[]
                toolStatuses: {
                  tool: string
                  name: string
                  installed: boolean
                  hasGlobalPromptliano: boolean
                  configPath?: string
                }[]
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/global/install': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Install Promptliano MCP globally for a tool */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @enum {string} */
            tool: 'claude-desktop' | 'vscode' | 'cursor' | 'continue' | 'claude-code' | 'windsurf'
            serverUrl?: string
            debug?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                message: string
                configPath?: string
                backedUp?: boolean
                backupPath?: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/global/uninstall': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Uninstall global Promptliano MCP for a tool */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @enum {string} */
            tool: 'claude-desktop' | 'vscode' | 'cursor' | 'continue' | 'claude-code' | 'windsurf'
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                message: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/global/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get global MCP installation status */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                configExists: boolean
                configPath: string
                lastModified?: number
                totalInstallations: number
                installedTools: string[]
                installation: {
                  supported: boolean
                  scriptPath: string
                  scriptExists: boolean
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/config/locations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get project MCP configuration locations */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                locations: {
                  path: string
                  exists: boolean
                  priority: number
                }[]
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/config/merged': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get merged project MCP configuration */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                config: {
                  mcpServers?: {
                    [key: string]: {
                      /**
                       * @default stdio
                       * @enum {string}
                       */
                      type: 'stdio' | 'http'
                      command: string
                      args?: string[]
                      env?: {
                        [key: string]: string
                      }
                      timeout?: number
                    }
                  }
                  inputs?: {
                    /** @enum {string} */
                    type: 'promptString' | 'promptNumber' | 'promptBoolean'
                    id: string
                    description: string
                    default?: unknown
                    password?: boolean
                  }[]
                  extends?: string | string[]
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get project-specific MCP configuration */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                config: {
                  mcpServers?: {
                    [key: string]: {
                      /**
                       * @default stdio
                       * @enum {string}
                       */
                      type: 'stdio' | 'http'
                      command: string
                      args?: string[]
                      env?: {
                        [key: string]: string
                      }
                      timeout?: number
                    }
                  }
                  inputs?: {
                    /** @enum {string} */
                    type: 'promptString' | 'promptNumber' | 'promptBoolean'
                    id: string
                    description: string
                    default?: unknown
                    password?: boolean
                  }[]
                  extends?: string | string[]
                } | null
                source?: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /** Update project-specific MCP configuration */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            mcpServers?: {
              [key: string]: {
                /**
                 * @default stdio
                 * @enum {string}
                 */
                type?: 'stdio' | 'http'
                command: string
                args?: string[]
                env?: {
                  [key: string]: string
                }
                timeout?: number
              }
            }
            inputs?: {
              /** @enum {string} */
              type: 'promptString' | 'promptNumber' | 'promptBoolean'
              id: string
              description: string
              default?: unknown
              password?: boolean
            }[]
            extends?: string | string[]
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                config: {
                  mcpServers?: {
                    [key: string]: {
                      /**
                       * @default stdio
                       * @enum {string}
                       */
                      type: 'stdio' | 'http'
                      command: string
                      args?: string[]
                      env?: {
                        [key: string]: string
                      }
                      timeout?: number
                    }
                  }
                  inputs?: {
                    /** @enum {string} */
                    type: 'promptString' | 'promptNumber' | 'promptBoolean'
                    id: string
                    description: string
                    default?: unknown
                    password?: boolean
                  }[]
                  extends?: string | string[]
                }
                source: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /** @description Update project MCP configuration */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            mcpEnabled?: boolean
            customInstructions?: string
          }
        }
      }
      responses: {
        /** @description Updated config */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
              data: {
                projectConfig: {
                  projectId: number
                  projectName: string
                  mcpEnabled: boolean
                  installedTools: unknown[]
                  customInstructions?: string
                }
              }
            }
          }
        }
      }
    }
    /** Delete project-specific MCP configuration */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/flow': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get complete flow data for a project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              unqueued: {
                tickets: components['schemas']['Ticket'][]
                tasks: components['schemas']['TicketTask'][]
              }
              queues: {
                [key: string]: {
                  queue: components['schemas']['Queue']
                  tickets: components['schemas']['Ticket'][]
                  tasks: components['schemas']['TicketTask'][]
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/flow/items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all flow items as a flat list */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              id: string
              /** @enum {string} */
              type: 'ticket' | 'task'
              title: string
              description?: string
              ticket?: components['schemas']['Ticket']
              task?: components['schemas']['TicketTask']
              queueId?: number | null
              queuePosition?: number | null
              queueStatus?: string | null
              queuePriority?: number
              created: number
              updated: number
            }[]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/flow/unqueued': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all unqueued tickets and tasks */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              tickets: components['schemas']['Ticket'][]
              tasks: components['schemas']['TicketTask'][]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/queues': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create a queue (Flow) */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            projectId: number | null
            name: string
            description?: string
            maxParallelItems?: number
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data?: unknown
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/flow/queues': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List queues for a project (Flow) */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': unknown[]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/flow/queues-with-stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get queues with stats (Flow) */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': unknown[]
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/queues/{queueId}/items': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get items in a queue (Flow) */
    get: {
      parameters: {
        query?: {
          status?: string
        }
        header?: never
        path: {
          queueId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              tickets: components['schemas']['Ticket'][]
              tasks: components['schemas']['TicketTask'][]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/queues/{queueId}/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get queue statistics (Flow) */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          queueId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              totalItems: number
              queuedItems: number
              inProgressItems: number
              completedItems: number
              failedItems: number
              currentAgents: string[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/queues/{queueId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete queue (Flow) */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          queueId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              deleted: boolean
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    /** Update queue (Flow) */
    patch: {
      parameters: {
        query?: never
        header?: never
        path: {
          queueId: number | null
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            name?: string
            description?: string
            maxParallelItems?: number
            isActive?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': unknown
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    trace?: never
  }
  '/api/flow/tickets/{ticketId}/enqueue': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Enqueue a ticket to a queue */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          ticketId: number | null
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            queueId: number | null
            /** @default 0 */
            priority?: number
            /** @default false */
            includeTasks?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Ticket']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/tasks/{taskId}/enqueue': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Enqueue a task to a queue */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          taskId: number | null
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            queueId: number | null
            /** @default 0 */
            priority?: number
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['TicketTask']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/tickets/{ticketId}/dequeue': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Remove a ticket from its queue */
    post: {
      parameters: {
        query?: {
          includeTasks?: string
        }
        header?: never
        path: {
          ticketId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Ticket']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/tasks/{taskId}/dequeue': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Remove a task from its queue */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          taskId: number | null
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['TicketTask']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/move': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Move an item between queues or to unqueued */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            itemType: 'ticket' | 'task'
            itemId: number | null
            targetQueueId: number | null
            /** @default 0 */
            priority?: number
            /** @default false */
            includeTasks?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              id: string
              /** @enum {string} */
              type: 'ticket' | 'task'
              title: string
              description?: string
              ticket?: components['schemas']['Ticket']
              task?: components['schemas']['TicketTask']
              queueId?: number | null
              queuePosition?: number | null
              queueStatus?: string | null
              queuePriority?: number
              created: number
              updated: number
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/reorder': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Persist new order for items in a queue */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            queueId: number | null
            items: {
              /** @enum {string} */
              itemType: 'ticket' | 'task'
              itemId: number | null
              ticketId?: number | null
            }[]
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/process/start': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark an item as being processed */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            itemType: 'ticket' | 'task'
            itemId: number | null
            agentId: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/process/complete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark an item as completed */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            itemType: 'ticket' | 'task'
            itemId: number | null
            processingTime?: number
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/process/fail': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Mark an item as failed */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            itemType: 'ticket' | 'task'
            itemId: number | null
            errorMessage: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/flow/bulk-move': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Move multiple items to a queue or unqueued */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            items: {
              /** @enum {string} */
              itemType: 'ticket' | 'task'
              itemId: number | null
            }[]
            targetQueueId: number | null
            /** @default 0 */
            priority?: number
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
              movedCount: number
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/ai/chat': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Chat completion (Vercel AI SDK compatible, streaming) */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['AiSdkChatRequest']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/providers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all available providers including custom ones */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ProvidersListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/gen-ai/stream': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Generate text using a specified model and prompt */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['AiGenerateTextRequest']
        }
      }
      responses: {
        /** @description Successfully initiated AI response stream. */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/event-stream': string
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/gen-ai/text': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Generate text using a specified model and prompt */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['AiGenerateTextRequest']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['AiGenerateTextResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/gen-ai/structured': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Generate structured data based on a predefined schema key and user input */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['AiGenerateStructuredRequest']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['AiGenerateStructuredResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/models': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List available AI models for a provider */
    get: {
      parameters: {
        query?: {
          provider?: string
          includeDisabled?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ModelsListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/ai/generate/text': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Generate text (one-off, non-streaming)
     * @description Generates text based on a prompt using the specified provider and model. Does not use chat history or save messages.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Prompt, provider, model, and options for text generation. */
      requestBody: {
        content: {
          'application/json': components['schemas']['AiGenerateTextRequest']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['AiGenerateTextResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/provider-settings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update provider settings
     * @description Updates custom URLs for local AI providers like Ollama and LMStudio
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Provider settings to update */
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateProviderSettings']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse'] & {
              data: components['schemas']['UpdateProviderSettings']
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/browse-directory': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Browse directories on the file system */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @description The directory path to browse. If not provided, defaults to home directory */
            path?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BrowseDirectoryResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/servers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List all MCP server configurations for a project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MCPServerConfigListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** Create MCP server configuration */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Display name for the MCP server
             * @example File System Tools
             */
            name: string
            /**
             * @description Command to start the MCP server
             * @example npx @modelcontextprotocol/server-filesystem
             */
            command: string
            /**
             * @description Command line arguments for the server
             * @default []
             * @example [
             *       "--root",
             *       "/path/to/project"
             *     ]
             */
            args?: string[]
            /**
             * @description Environment variables for the server
             * @default {}
             * @example {
             *       "NODE_ENV": "production"
             *     }
             */
            env?: {
              [key: string]: string
            }
            /**
             * @description Whether the server is enabled
             * @default true
             * @example true
             */
            enabled?: boolean
            /**
             * @description Whether to auto-start the server when project opens
             * @default false
             * @example false
             */
            autoStart?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MCPServerConfigResponse']
          }
        }
        /** @description MCP server configuration created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MCPServerConfigResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/servers/{serverId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP server configuration by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
          serverId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MCPServerConfigResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    /** Delete MCP server configuration */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
          serverId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    /** Update MCP server configuration */
    patch: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
          serverId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateMCPServerConfigBody']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MCPServerConfigResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    trace?: never
  }
  '/api/mcp/tools': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List available MCP tools */
    get: {
      parameters: {
        query?: {
          serverId?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                name: string
                description: string
                serverId?: string
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/tools/execute': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Execute an MCP tool */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['MCPToolExecutionRequest']
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MCPToolExecutionResultResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/resources': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List available MCP resources */
    get: {
      parameters: {
        query?: {
          serverId?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MCPResourceListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/resources/read': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Read MCP resource content */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            uri: string
            serverId?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                uri: string
                name: string
                description: string
                mimeType: string
                content?: unknown
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/builtin-tools': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get list of built-in MCP tools */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                name: string
                description: string
                category: string
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/servers/{serverId}/start': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Start an MCP server */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          serverId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/servers/{serverId}/stop': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Stop an MCP server */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          serverId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/analytics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP usage analytics */
    get: {
      parameters: {
        query?: {
          startDate?: string
          endDate?: string
          serverId?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                period: {
                  start: string
                  end: string
                }
                servers: {
                  serverId: string
                  totalRequests: number
                  successRate: number
                  avgResponseTime: number
                }[]
                tools: {
                  name: string
                  executions: number
                  avgDuration: number
                }[]
                totalRequests: number
                totalErrors: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/servers/{serverId}/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get statistics for a specific MCP server */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          serverId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                serverId: string
                /** @enum {string} */
                status: 'connected' | 'disconnected' | 'error'
                uptime: number
                totalRequests: number
                successRate: number
                avgResponseTime: number
                lastActivity: string
                capabilities?: unknown
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/tools/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get tool usage statistics */
    get: {
      parameters: {
        query?: {
          period?: 'hour' | 'day' | 'week' | 'month'
          limit?: number
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                period: string
                topTools: {
                  name: string
                  count: number
                  avgExecutionTime: number
                  successRate: number
                }[]
                totalExecutions: number
                totalErrors: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/resources/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get resource access statistics */
    get: {
      parameters: {
        query?: {
          period?: 'hour' | 'day' | 'week' | 'month'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                period: string
                topResources: {
                  uri: string
                  accessCount: number
                  avgResponseTime: number
                }[]
                totalAccesses: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/analytics/report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Generate MCP usage report */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            startDate: string
            endDate: string
            /**
             * @default json
             * @enum {string}
             */
            format?: 'json' | 'csv' | 'pdf'
            /** @default true */
            includeServerDetails?: boolean
            /** @default true */
            includeToolDetails?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                reportId: string
                generatedAt: string
                period: {
                  start: string
                  end: string
                }
                format: string
                content?: unknown
                downloadUrl?: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/sessions/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP session statistics */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                activeSessions: number
                totalSessionsToday: number
                avgSessionDuration: number
                peakConcurrentSessions: number
                sessionsByServer: {
                  [key: string]: number
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/analytics/performance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP performance metrics */
    get: {
      parameters: {
        query?: {
          metricType?: 'latency' | 'throughput' | 'error_rate'
          aggregation?: 'avg' | 'min' | 'max' | 'p50' | 'p95' | 'p99'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                metrics: {
                  timestamp: string
                  value: number
                  type: string
                }[]
                aggregation: string
                summary: {
                  current: number
                  /** @enum {string} */
                  trend: 'up' | 'down' | 'stable'
                  changePercent: number
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/analytics/overview': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP analytics overview for a project */
    get: {
      parameters: {
        query?: {
          period?: 'hour' | 'day' | 'week' | 'month'
          toolNames?: string
        }
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                totalExecutions: number
                uniqueTools: number
                overallSuccessRate: number
                avgExecutionTime: number
                topTools: unknown[]
                recentErrors: unknown[]
                executionTrend: unknown[]
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/analytics/statistics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP tool statistics for a project */
    get: {
      parameters: {
        query?: {
          period?: 'hour' | 'day' | 'week' | 'month'
          toolNames?: string
        }
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: unknown[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/analytics/timeline': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP execution timeline for a project */
    get: {
      parameters: {
        query?: {
          period?: 'hour' | 'day' | 'week' | 'month'
          toolNames?: string
        }
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: unknown[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/analytics/error-patterns': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP error patterns for a project */
    get: {
      parameters: {
        query?: {
          period?: 'hour' | 'day' | 'week' | 'month'
          toolNames?: string
        }
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: unknown[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/analytics/executions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP tool executions for a project */
    get: {
      parameters: {
        query?: {
          toolName?: string
          status?: 'success' | 'error' | 'timeout'
          startDate?: string
          endDate?: string
          limit?: string
          offset?: string
          sortBy?: 'startedAt' | 'duration' | 'toolName'
          sortOrder?: 'asc' | 'desc'
        }
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                executions: unknown[]
                total: number
                page: number
                pageSize: number
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/test/connection': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Test MCP server connection */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /**
             * Format: uri
             * @description MCP server URL to test
             */
            url: string
            /** @default 5000 */
            timeout?: number
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                connected: boolean
                responseTime: number
                error?: string
                serverInfo?: unknown
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/test/initialize': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Test MCP initialize handshake */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /**
             * Format: uri
             * @description MCP server URL to test
             */
            url: string
            capabilities?: {
              /** @default true */
              tools?: boolean
              /** @default true */
              resources?: boolean
              /** @default false */
              prompts?: boolean
            }
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                initialized: boolean
                sessionId?: string
                capabilities?: unknown
                serverInfo?: unknown
                error?: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/test/tool': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Test MCP tool execution */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            serverId?: string
            toolName: string
            /** @default {} */
            arguments?: {
              [key: string]: unknown
            }
            /** @default false */
            validateOnly?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                executed: boolean
                result?: unknown
                executionTime: number
                error?: string
                validationErrors?: string[]
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/test/validate-config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Validate MCP server configuration */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            serverId: string
            /** @default true */
            checkConnectivity?: boolean
            /** @default true */
            checkCapabilities?: boolean
            /** @default true */
            checkTools?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                valid: boolean
                checks: {
                  connectivity?: {
                    passed: boolean
                    message?: string
                  }
                  capabilities?: {
                    passed: boolean
                    message?: string
                    details?: unknown
                  }
                  tools?: {
                    passed: boolean
                    message?: string
                    availableTools?: string[]
                  }
                }
                errors?: string[]
                warnings?: string[]
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/test/debug': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Debug MCP communication */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            serverId: string
            /** @enum {string} */
            action: 'list-tools' | 'list-resources' | 'get-capabilities' | 'raw-request'
            rawRequest?: {
              method: string
              params?: unknown
            }
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                request?: unknown
                response?: unknown
                timing: {
                  start: string
                  end: string
                  duration: number
                }
                metadata: {
                  serverId: string
                  action: string
                  protocol?: string
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/sessions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List all MCP sessions */
    get: {
      parameters: {
        query?: {
          status?: 'active' | 'idle' | 'disconnected' | 'all'
          serverId?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: string
                serverId: string
                /** @enum {string} */
                status: 'active' | 'idle' | 'disconnected'
                startedAt: string
                lastActivity: string
                metadata?: {
                  clientInfo?: unknown
                  serverInfo?: unknown
                  capabilities?: unknown
                }
              }[]
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** Create a new MCP session */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            serverId: string
            clientInfo?: {
              name: string
              version: string
            }
            capabilities?: {
              tools?: boolean
              resources?: boolean
              prompts?: boolean
            }
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              id: string
              serverId: string
              /** @enum {string} */
              status: 'active' | 'idle' | 'disconnected'
              startedAt: string
              lastActivity: string
              metadata?: {
                clientInfo?: unknown
                serverInfo?: unknown
                capabilities?: unknown
              }
            }
          }
        }
        /** @description Session created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                id: string
                serverId: string
                /** @enum {string} */
                status: 'active' | 'idle' | 'disconnected'
                startedAt: string
                lastActivity: string
                metadata?: {
                  clientInfo?: unknown
                  serverInfo?: unknown
                  capabilities?: unknown
                }
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/sessions/{sessionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get MCP session by ID */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          sessionId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              id: string
              serverId: string
              /** @enum {string} */
              status: 'active' | 'idle' | 'disconnected'
              startedAt: string
              lastActivity: string
              metadata?: {
                clientInfo?: unknown
                serverInfo?: unknown
                capabilities?: unknown
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/sessions/{sessionId}/close': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Close an MCP session */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          sessionId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            reason?: string
            /** @default false */
            force?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/sessions/{sessionId}/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Refresh/keep-alive an MCP session */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          sessionId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              id: string
              serverId: string
              /** @enum {string} */
              status: 'active' | 'idle' | 'disconnected'
              startedAt: string
              lastActivity: string
              metadata?: {
                clientInfo?: unknown
                serverInfo?: unknown
                capabilities?: unknown
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/sessions/{sessionId}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get session command history */
    get: {
      parameters: {
        query?: {
          limit?: number
          offset?: number
        }
        header?: never
        path: {
          sessionId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                sessionId: string
                history: {
                  timestamp: string
                  /** @enum {string} */
                  type: 'request' | 'response' | 'notification'
                  method?: string
                  params?: unknown
                  result?: unknown
                  error?: unknown
                }[]
                total: number
                hasMore: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/sessions/cleanup': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Cleanup idle MCP sessions */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default 30 */
            idleThresholdMinutes?: number
            /** @default false */
            dryRun?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                sessionsChecked: number
                sessionsClosed: number
                sessionIds: string[]
                dryRun: boolean
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get git status for a project
     * @description Retrieves the current git status including staged, unstaged, and untracked files
     */
    get: {
      parameters: {
        query?: {
          refresh?: boolean | null
        }
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['GitStatusResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/stage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Stage files for commit
     * @description Stages specified files or patterns for the next commit
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @description Array of file paths to stage */
            filePaths: string[]
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/unstage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Unstage files from commit
     * @description Removes specified files from the staging area
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @description Array of file paths to unstage */
            filePaths: string[]
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/stage-all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Stage all changes
     * @description Stages all modified and untracked files for commit
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description All changes staged successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/unstage-all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Unstage all changes
     * @description Removes all files from the staging area
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description All changes unstaged successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/commit': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a new commit
     * @description Creates a new commit with staged changes
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            message: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/log': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get commit history
     * @description Retrieves the commit history for the project
     */
    get: {
      parameters: {
        query?: {
          maxCount?: number | null
          skip?: number | null
          author?: string
          since?: string
          until?: string
          grep?: string
          branch?: string
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommitLogResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/log-enhanced': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get enhanced commit history
     * @description Retrieves detailed commit history with additional metadata
     */
    get: {
      parameters: {
        query?: {
          maxCount?: number | null
          skip?: number | null
          author?: string
          since?: string
          until?: string
          grep?: string
          branch?: string
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommitLogEnhancedResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/commits/{commitHash}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get commit details
     * @description Retrieves detailed information about a specific commit
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number | null
          commitHash: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['CommitDetailResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/diff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get file diff
     * @description Retrieves the diff for a specific file
     */
    get: {
      parameters: {
        query: {
          filePath: string
          cached?: boolean | null
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DiffResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/branches': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List all branches
     * @description Retrieves all local and remote branches for the project
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BranchListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Create a new branch
     * @description Creates a new branch from the specified starting point
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name: string
            /** @description Branch or commit to start from */
            startPoint?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Branch created successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/branches-enhanced': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List branches with enhanced information
     * @description Retrieves branches with additional metadata like ahead/behind counts
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BranchListEnhancedResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/branches/switch': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Switch to a different branch
     * @description Switches the working directory to the specified branch
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name: string
            createIfNotExists?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/branches/{branchName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete a branch
     * @description Deletes the specified branch
     */
    delete: {
      parameters: {
        query?: {
          force?: boolean | null
        }
        header?: never
        path: {
          projectId: number | null
          branchName: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/stash': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get list of all stashes */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['StashListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** @description Stash current changes */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            message?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Drop a stash
     * @description Removes the specified stash from the stash list
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default stash@{0} */
            stashRef?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/stash/apply': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Apply a stash without removing it from the stash list */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default stash@{0} */
            ref?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/stash/pop': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Pop a stash
     * @description Applies the specified stash and removes it from the stash list
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default stash@{0} */
            stashRef?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/worktrees': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List all worktrees
     * @description Retrieves the list of all worktrees for the project
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['WorktreeListResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /**
     * Add a new worktree
     * @description Creates a new worktree for the specified branch
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @description Path where to create the worktree */
            path: string
            /** @description Branch to check out */
            branch?: string
            /** @description Create new branch with this name */
            newBranch?: string
            /** @description Commit/tag to check out */
            commitish?: string
            /** @description Detach HEAD at specified commit */
            detach?: boolean
          }
        }
      }
      responses: {
        /** @description Worktree added successfully */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    /**
     * Remove a worktree
     * @description Removes the specified worktree
     */
    delete: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @description Path of the worktree to remove */
            path: string
            /** @description Force removal even with uncommitted changes */
            force?: boolean
          }
        }
      }
      responses: {
        /** @description Worktree removed successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/worktrees/lock': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Lock a worktree
     * @description Locks the specified worktree to prevent deletion
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @description Path of the worktree to lock */
            path: string
            /** @description Reason for locking */
            reason?: string
          }
        }
      }
      responses: {
        /** @description Worktree locked successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/worktrees/unlock': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Unlock a worktree
     * @description Unlocks the specified worktree
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            worktreePath: string
          }
        }
      }
      responses: {
        /** @description Worktree unlocked successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['OperationSuccessResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/worktrees/prune': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Prune worktrees
     * @description Removes worktree entries that no longer exist
     */
    post: {
      parameters: {
        query?: {
          dryRun?: boolean | null
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['PruneWorktreesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/remotes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get all configured remotes for a git repository */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['RemotesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/push': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Push changes to a remote repository */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default origin */
            remote?: string
            /** @description Current branch if not specified */
            branch?: string
            force?: boolean
            setUpstream?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/fetch': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Fetch updates from a remote repository */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default origin */
            remote?: string
            prune?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/pull': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Pull changes from a remote repository */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @default origin */
            remote?: string
            branch?: string
            rebase?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/tags': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get all tags for a git repository */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['TagsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    /** @description Create a new tag in the git repository */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            name: string
            message?: string
            ref?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/git/reset': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Reset current HEAD to a specified state */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: string
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @description Commit reference to reset to */
            ref: string
            /**
             * @default mixed
             * @enum {string}
             */
            mode?: 'soft' | 'mixed' | 'hard'
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              message: string
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project-tabs/{tabId}/generate-name': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Generate an AI-powered name for a project tab */
    post: operations['generateProjectTabName']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/agent-files/detect': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Detect agent instruction files for a project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                projectFiles: {
                  type: string
                  name: string
                  path: string
                  /** @enum {string} */
                  scope: 'global' | 'project'
                  exists: boolean
                  writable: boolean
                  hasInstructions?: boolean
                  instructionVersion?: string
                  metadata?: {
                    [key: string]: unknown
                  }
                }[]
                globalFiles: {
                  type: string
                  name: string
                  path: string
                  /** @enum {string} */
                  scope: 'global' | 'project'
                  exists: boolean
                  writable: boolean
                  hasInstructions?: boolean
                  instructionVersion?: string
                  metadata?: {
                    [key: string]: unknown
                  }
                }[]
                suggestedFiles: {
                  type: string
                  name: string
                  suggestedPath: string
                }[]
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/agent-files/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Update an agent file with Promptliano instructions */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            filePath: string
            includeExamples?: boolean
            customInstructions?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                message: string
                backedUp?: boolean
                filePath: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/agent-files/remove-instructions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Remove Promptliano instructions from an agent file */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            filePath: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                message: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/agent-files/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Check status of agent files and instruction versions */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                currentVersion: string
                files: {
                  path: string
                  exists: boolean
                  hasInstructions: boolean
                  instructionVersion?: string
                  isOutdated: boolean
                }[]
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/agent-files/create': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Create a new agent file with instructions */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            type: string
            includeExamples?: boolean
            customInstructions?: string
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              /** @enum {boolean} */
              success: true
              data: {
                message: string
                filePath: string
              }
            }
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/mcp-status/{projectId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get MCP installation status for Claude Code and Claude Desktop
     * @description Checks MCP configuration status across Claude Desktop and Claude Code CLI
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['MCPStatusResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/sessions/{projectId}/metadata': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get lightweight session metadata for a project
     * @description Retrieves session metadata without full message content for fast loading
     */
    get: {
      parameters: {
        query?: {
          search?: string
          branch?: string
          startDate?: string
          endDate?: string
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeSessionsMetadataResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/sessions/{projectId}/recent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get recent Claude Code sessions
     * @description Retrieves the most recent sessions for fast access (default 10 sessions)
     */
    get: {
      parameters: {
        query?: {
          limit?: number
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeSessionsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/sessions/{projectId}/paginated': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get sessions with cursor-based pagination
     * @description Retrieves sessions with efficient cursor-based pagination for large datasets
     */
    get: {
      parameters: {
        query?: {
          cursor?: string
          limit?: number
          sortBy?: 'lastUpdate' | 'startTime' | 'messageCount' | 'fileSize'
          sortOrder?: 'asc' | 'desc'
          search?: string
          branch?: string
          startDate?: string
          endDate?: string
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeSessionsPaginatedResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/sessions/{projectId}/{sessionId}/full': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get complete Claude Code session with full message data
     * @description Retrieves a complete session including all messages and token usage data
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
          sessionId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeFullSessionResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/sessions/{projectId}/{sessionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get messages for a specific Claude Code session
     * @description Retrieves all messages from a specific chat session
     */
    get: {
      parameters: {
        query?: {
          search?: string
          role?: 'user' | 'assistant' | 'all'
          limit?: number
          offset?: number | null
        }
        header?: never
        path: {
          projectId: number
          sessionId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeMessagesResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/sessions/{projectId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Claude Code chat sessions for a project
     * @description Retrieves all chat sessions from Claude Code local storage with optional cursor-based pagination
     */
    get: {
      parameters: {
        query?: {
          search?: string
          branch?: string
          startDate?: string
          endDate?: string
          limit?: number
          offset?: number | null
          useCursor?: boolean | null
          cursor?: string
          sortBy?: 'lastUpdate' | 'startTime' | 'messageCount'
          sortOrder?: 'asc' | 'desc'
        }
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeSessionsEnhancedResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/project-data/{projectId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Claude Code project metadata
     * @description Retrieves project-level data including branches, working directories, and statistics
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ClaudeProjectDataResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/claude-code/import-session/{projectId}/{sessionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Import a Claude Code session into a Promptliano chat
     * @description Imports all messages from a Claude Code session into a new Promptliano chat
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
          sessionId: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ChatResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/installation/detect': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Detect installed MCP-compatible tools */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['DetectToolsResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/installation/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get MCP installation and connection status for a project */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['InstallationStatusResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/installation/install': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Install Promptliano MCP for a specific tool */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            tool: 'claude-desktop' | 'vscode' | 'cursor' | 'continue' | 'claude-code' | 'windsurf'
            serverUrl?: string
            debug?: boolean
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['InstallResultResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/installation/uninstall': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Uninstall Promptliano MCP for a specific tool */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            /** @enum {string} */
            tool: 'claude-desktop' | 'vscode' | 'cursor' | 'continue' | 'claude-code' | 'windsurf'
          }
        }
      }
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['UninstallResultResponse']
          }
        }
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Resource Not Found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Validation Error */
        422: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ApiErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/mcp/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Get global MCP connection status */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Global MCP status */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
              data: {
                totalSessions: number
                projectSessions: number
                projectStatuses: {
                  projectId: number
                  connected: boolean
                  sessionId?: string
                  lastActivity?: number
                }[]
              }
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/installation/batch-install': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Install Promptliano MCP for multiple tools at once */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            tools: ('claude-desktop' | 'vscode' | 'cursor' | 'continue' | 'claude-code' | 'windsurf')[]
            serverUrl?: string
            debug?: boolean
          }
        }
      }
      responses: {
        /** @description Batch installation results */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
              data: {
                results: {
                  tool: string
                  success: boolean
                  message: string
                  configPath?: string
                  backedUp?: boolean
                  backupPath?: string
                }[]
                summary: {
                  total: number
                  succeeded: number
                  failed: number
                }
              }
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/projects/{projectId}/mcp/install-project-config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Install MCP configuration at the project level (.mcp.json) */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          projectId: number
        }
        cookie?: never
      }
      requestBody?: {
        content: {
          'application/json': {
            serverUrl?: string
          }
        }
      }
      responses: {
        /** @description Project MCP configuration installed */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              success: boolean
              data: {
                message: string
                configPath: string
                backedUp: boolean
                backupPath?: string
              }
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Project: {
      id: number
      name: string
      description: string | null
      path: string
      createdAt: number
      updatedAt: number
    }
    ApiErrorResponse: {
      /** @enum {boolean} */
      success: false
      error: {
        /** @example An error occurred */
        message: string
        /** @example ERROR_CODE */
        code?: string
        details?: {
          [key: string]: unknown
        }
      }
    }
    CreateProject: {
      name: string
      description?: string
      path?: string
      /** @default false */
      isDefault: boolean
    }
    UpdateProject: {
      name?: string
      description?: string
      path?: string
      isDefault?: boolean
    }
    OperationSuccessResponse: {
      /** @enum {boolean} */
      success: true
      /** @example Operation completed successfully */
      message: string
    }
    QueueListResponse: {
      /** @enum {boolean} */
      success: true
      data: Record<string, never>[]
    }
    Ticket: {
      id: number
      projectId: number
      title: string
      overview: string | null
      /** @enum {string} */
      status: 'open' | 'in_progress' | 'closed'
      /** @enum {string} */
      priority: 'low' | 'normal' | 'high'
      suggestedFileIds: string[]
      suggestedAgentIds: string[]
      suggestedPromptIds: number[]
      queueId: number | null
      queuePosition: number | null
      /** @enum {string|null} */
      queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
      queuePriority: number | null
      queuedAt: number | null
      queueStartedAt: number | null
      queueCompletedAt: number | null
      queueAgentId: string | null
      queueErrorMessage: string | null
      estimatedProcessingTime: number | null
      actualProcessingTime: number | null
      createdAt: number
      updatedAt: number
    }
    CreateTicket: {
      projectId: number
      title: string
      overview?: string
      /**
       * @default open
       * @enum {string}
       */
      status: 'open' | 'in_progress' | 'closed'
      /**
       * @default normal
       * @enum {string}
       */
      priority: 'low' | 'normal' | 'high'
      /** @default [] */
      suggestedFileIds: string[]
      /** @default [] */
      suggestedAgentIds: string[]
      /** @default [] */
      suggestedPromptIds: number[]
    }
    UpdateTicket: {
      title?: string
      overview?: string
      /** @enum {string} */
      status?: 'open' | 'in_progress' | 'closed'
      /** @enum {string} */
      priority?: 'low' | 'normal' | 'high'
      suggestedFileIds?: string[]
      suggestedAgentIds?: string[]
      suggestedPromptIds?: number[]
    }
    TicketTask: {
      id: number
      ticketId: number
      content: string
      description: string | null
      suggestedFileIds: string[]
      done: boolean
      /** @enum {string} */
      status: 'pending' | 'in_progress' | 'completed' | 'cancelled'
      orderIndex: number
      estimatedHours: number | null
      dependencies: number[]
      tags: string[]
      agentId: string | null
      suggestedPromptIds: number[]
      queueId: number | null
      queuePosition: number | null
      /** @enum {string|null} */
      queueStatus: 'queued' | 'in_progress' | 'completed' | 'failed' | 'cancelled' | null
      queuePriority: number | null
      queuedAt: number | null
      queueStartedAt: number | null
      queueCompletedAt: number | null
      queueAgentId: string | null
      queueErrorMessage: string | null
      estimatedProcessingTime: number | null
      actualProcessingTime: number | null
      createdAt: number
      updatedAt: number
    }
    CreateTicketTask: {
      ticketId: number
      content: string
      description?: string
      /** @default [] */
      suggestedFileIds: string[]
      /** @default false */
      done: boolean
      /**
       * @default pending
       * @enum {string}
       */
      status: 'pending' | 'in_progress' | 'completed' | 'cancelled'
      /** @default 0 */
      orderIndex: number
      estimatedHours?: number
      /** @default [] */
      dependencies: number[]
      /** @default [] */
      tags: string[]
      agentId?: string
      /** @default [] */
      suggestedPromptIds: number[]
    }
    UpdateTicketTask: {
      content?: string
      description?: string
      suggestedFileIds?: string[]
      done?: boolean
      /** @enum {string} */
      status?: 'pending' | 'in_progress' | 'completed' | 'cancelled'
      orderIndex?: number
      estimatedHours?: number
      dependencies?: number[]
      tags?: string[]
      agentId?: string
      suggestedPromptIds?: number[]
    }
    Chat: {
      id: number
      projectId: number | null
      title: string
      createdAt: number
      updatedAt: number
    }
    CreateChat: {
      projectId?: number
      title: string
    }
    UpdateChat: {
      title?: string
      projectId?: number
    }
    ChatMessageResponse: {
      /** @enum {boolean} */
      success: true
      /** @description ChatMessage */
      data: {
        id: number
        chatId: number
        /** @enum {string} */
        role: 'user' | 'assistant' | 'system'
        content: string
        metadata: {
          [key: string]: unknown
        } | null
        createdAt: number
      }
    }
    ChatMessageCreate: {
      chatId: number
      /** @enum {string} */
      role: 'user' | 'assistant' | 'system'
      content: string
      /** @default {} */
      metadata: {
        [key: string]: unknown
      }
    }
    ChatMessage: {
      id: number
      chatId: number
      /** @enum {string} */
      role: 'user' | 'assistant' | 'system'
      content: string
      metadata: {
        [key: string]: unknown
      } | null
      createdAt: number
      updatedAt: number
    }
    CreateChatMessage: {
      chatId: number
      /** @enum {string} */
      role: 'user' | 'assistant' | 'system'
      content: string
      metadata?: {
        [key: string]: unknown
      }
    }
    UpdateChatMessage: {
      /** @enum {string} */
      role?: 'user' | 'assistant' | 'system'
      content?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    Prompt: {
      id: number
      projectId: number
      title: string
      content: string
      description: string | null
      tags: string[]
      createdAt: number
      updatedAt: number
    }
    CreatePromptRequestBody: {
      /** @example My New Prompt */
      title: string
      /** @example Translate this text: {text} */
      content: string
      /**
       * Format: int64
       * @description Optional entity ID - positive integer without timestamp conversion
       * @example 1716537600000
       */
      projectId?: number
    }
    UpdatePromptRequestBody: {
      /** @example My New Prompt */
      title?: string
      /** @example Translate this text: {text} */
      content?: string
    }
    ClaudeAgent: {
      id: string
      name: string
      description: string | null
      instructions: string | null
      model: string
      isActive: boolean
      createdAt: number
      updatedAt: number
    }
    CreateClaudeAgent: {
      name: string
      description?: string
      instructions?: string
      model: string
      /** @default true */
      isActive: boolean
    }
    UpdateClaudeAgent: {
      name?: string
      description?: string
      instructions?: string
      model?: string
      isActive?: boolean
    }
    ClaudeCommand: {
      id: number
      name: string
      content: string
      description: string | null
      category: string | null
      projectId: number | null
      tags: string | null
      createdAt: number
      updatedAt: number
    }
    CreateClaudeCommand: {
      name: string
      content: string
      description?: string
      category?: string
      projectId?: number
      tags?: string
    }
    UpdateClaudeCommand: {
      name?: string
      content?: string
      description?: string
      category?: string
      projectId?: number
      tags?: string
    }
    ClaudeHook: {
      id: number
      projectId: number | null
      name: string
      event: string
      command: string
      enabled: boolean
      createdAt: number
      updatedAt: number
    }
    CreateClaudeHook: {
      projectId?: number
      name: string
      event: string
      command: string
      /** @default true */
      enabled: boolean
    }
    UpdateClaudeHook: {
      name?: string
      event?: string
      command?: string
      enabled?: boolean
    }
    ProviderKey: {
      id: number
      provider: string
      keyName: string | null
      name: string | null
      encryptedValue: string
      encrypted: boolean
      iv: string | null
      tag: string | null
      salt: string | null
      baseUrl: string | null
      customHeaders: {
        [key: string]: string
      } | null
      isDefault: boolean
      isActive: boolean
      environment: string
      description: string | null
      expiresAt: number | null
      lastUsed: number | null
      createdAt: number
      updatedAt: number
    }
    CreateProviderKey: {
      provider: string
      keyName?: string
      name?: string
      key?: string
      encryptedValue?: string
      /** @default true */
      encrypted: boolean
      iv?: string
      tag?: string
      salt?: string
      baseUrl?: string
      customHeaders?: {
        [key: string]: string
      }
      /** @default false */
      isDefault: boolean
      /** @default true */
      isActive: boolean
      /** @default production */
      environment: string
      description?: string
      expiresAt?: number
      lastUsed?: number
    }
    UpdateProviderKey: {
      keyName?: string
      name?: string
      key?: string
      encryptedValue?: string
      encrypted?: boolean
      iv?: string
      tag?: string
      salt?: string
      baseUrl?: string
      customHeaders?: {
        [key: string]: string
      }
      isDefault?: boolean
      isActive?: boolean
      environment?: string
      description?: string
      expiresAt?: number
      lastUsed?: number
    }
    File: {
      id: number
      projectId: number | null
      path: string
      /** @enum {string} */
      type: 'file' | 'directory'
      size: number | null
      lastModified: number | null
      permissions: string | null
      metadata: {
        [key: string]: unknown
      } | null
      createdAt: number
      updatedAt: number
    }
    CreateFile: {
      projectId?: number
      path: string
      /** @enum {string} */
      type: 'file' | 'directory'
      size?: number
      lastModified?: number
      permissions?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    UpdateFile: {
      path?: string
      /** @enum {string} */
      type?: 'file' | 'directory'
      size?: number
      lastModified?: number
      permissions?: string
      metadata?: {
        [key: string]: unknown
      }
    }
    SelectedFile: {
      id: number
      fileId: number
      projectId: number | null
      /** @enum {string} */
      selectionType: 'manual' | 'auto' | 'suggested'
      relevanceScore: number | null
      metadata: {
        [key: string]: unknown
      } | null
      createdAt: number
      updatedAt: number
    }
    CreateSelectedFile: {
      fileId: number
      projectId?: number
      /**
       * @default manual
       * @enum {string}
       */
      selectionType: 'manual' | 'auto' | 'suggested'
      relevanceScore?: number
      metadata?: {
        [key: string]: unknown
      }
    }
    UpdateSelectedFile: {
      /** @enum {string} */
      selectionType?: 'manual' | 'auto' | 'suggested'
      relevanceScore?: number
      metadata?: {
        [key: string]: unknown
      }
    }
    ActiveTab: {
      id: number
      tabId: number
      clientId: string | null
      tabMetadata: {
        [key: string]: unknown
      } | null
      createdAt: number
      updatedAt: number
    }
    CreateActiveTab: {
      tabId: number
      clientId?: string
      tabMetadata?: {
        [key: string]: unknown
      }
    }
    UpdateActiveTab: {
      tabId?: number
      clientId?: string
      tabMetadata?: {
        [key: string]: unknown
      }
    }
    SuggestPromptsResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @description Array of suggested prompts ordered by relevance (most relevant first) */
        prompts: (components['schemas']['Prompt'] & {
          id?: number
          projectId?: number
          title?: string
          content?: string
          description?: string | null
          tags?: string[]
          createdAt?: number
          updatedAt?: number
        })[]
      }
    }
    SuggestPromptsRequest: {
      /**
       * @description The user input describing what they want to accomplish
       * @example help me implement authentication
       */
      userInput: string
      /**
       * @description Maximum number of prompts to suggest (default: 5, max: 10)
       * @default 5
       * @example 5
       */
      limit: number
    }
    ExportedFile: {
      /**
       * @description Generated filename for the exported prompt
       * @example code-refactoring-prompt.md
       */
      fileName: string
      /** @description The markdown content of the exported prompt */
      content: string
      /**
       * Format: int64
       * @description ID of the source prompt
       * @example 1716537600000
       */
      promptId: number
      /**
       * @description Name of the source prompt
       * @example Code Refactoring Prompt
       */
      promptName: string
    }
    MarkdownExportResult: {
      /** @description Whether the export operation succeeded */
      success: boolean
      /**
       * @description The export format used
       * @enum {string}
       */
      format: 'single-file' | 'multi-file'
      /**
       * @description Number of prompts exported
       * @example 5
       */
      promptCount: number
      /**
       * @description Filename for single-file export
       * @example exported-prompts.md
       */
      fileName?: string
      /** @description The markdown content for single-file export */
      content?: string
      /** @description Array of exported files for multi-file export */
      files?: components['schemas']['ExportedFile'][]
      /** @description Export metadata and settings */
      metadata: {
        /**
         * Format: date-time
         * @description ISO 8601 datetime when export was generated
         * @example 2024-01-01T12:00:00Z
         */
        exportedAt: string
        /**
         * @description Total size of exported content in bytes
         * @example 15432
         */
        totalSize: number
        /** @description Export settings used */
        settings: {
          /**
           * Format: int64
           * @description Optional project ID to filter prompts by project
           * @example 1716537600000
           */
          projectId?: number
          /**
           * @description Export format: single file with all prompts or separate files per prompt
           * @default single-file
           * @example single-file
           * @enum {string}
           */
          format: 'single-file' | 'multi-file'
          /**
           * @description Whether to include frontmatter with metadata
           * @default true
           * @example true
           */
          includeFrontmatter: boolean
          /**
           * @description Whether to include created date in frontmatter
           * @default true
           * @example true
           */
          includeCreatedDate: boolean
          /**
           * @description Whether to include updated date in frontmatter
           * @default true
           * @example true
           */
          includeUpdatedDate: boolean
          /**
           * @description Whether to include tags in frontmatter (if available)
           * @default true
           * @example true
           */
          includeTags: boolean
          /**
           * @description Whether to sanitize content for safe markdown export
           * @default true
           * @example true
           */
          sanitizeContent: boolean
          /**
           * @description How to sort the exported prompts
           * @default name
           * @example name
           * @enum {string}
           */
          sortBy: 'name' | 'created' | 'updated'
          /**
           * @description Sort order for exported prompts
           * @default asc
           * @example asc
           * @enum {string}
           */
          sortOrder: 'asc' | 'desc'
        }
      }
    }
    MarkdownExportResponse: {
      /** @enum {boolean} */
      success: true
      data: components['schemas']['MarkdownExportResult']
    }
    BatchExportRequest: {
      /**
       * @description Array of prompt IDs to export
       * @example [
       *       1716537600000,
       *       1716537600001
       *     ]
       */
      promptIds: number[]
      /**
       * @description Export format: single file with all prompts or separate files per prompt
       * @default single-file
       * @example single-file
       * @enum {string}
       */
      format: 'single-file' | 'multi-file'
      /**
       * @description Whether to include frontmatter with metadata
       * @default true
       * @example true
       */
      includeFrontmatter: boolean
      /**
       * @description Whether to include created date in frontmatter
       * @default true
       * @example true
       */
      includeCreatedDate: boolean
      /**
       * @description Whether to include updated date in frontmatter
       * @default true
       * @example true
       */
      includeUpdatedDate: boolean
      /**
       * @description Whether to include tags in frontmatter (if available)
       * @default true
       * @example true
       */
      includeTags: boolean
      /**
       * @description Whether to sanitize content for safe markdown export
       * @default true
       * @example true
       */
      sanitizeContent: boolean
      /**
       * @description How to sort the exported prompts
       * @default name
       * @example name
       * @enum {string}
       */
      sortBy: 'name' | 'created' | 'updated'
      /**
       * @description Sort order for exported prompts
       * @default asc
       * @example asc
       * @enum {string}
       */
      sortOrder: 'asc' | 'desc'
    }
    PromptImportResult: {
      /** @description Whether this individual prompt import succeeded */
      success: boolean
      /**
       * @description The name of the prompt being imported
       * @example Code Refactoring Prompt
       */
      promptName: string
      /**
       * Format: int64
       * @description ID of the created/updated prompt (only present on success)
       * @example 1716537600000
       */
      promptId?: number
      /**
       * @description Error message if import failed
       * @example Prompt with this name already exists
       */
      error?: string
      /**
       * @description Warning message for non-fatal issues
       * @example Missing frontmatter field: created
       */
      warning?: string
      /**
       * @description Action taken for this prompt
       * @enum {string}
       */
      action: 'created' | 'updated' | 'skipped'
    }
    MarkdownImportResult: {
      /** @description Overall success status of the import operation */
      success: boolean
      /**
       * @description Name of the imported file
       * @example my-prompts.md
       */
      fileName: string
      /**
       * @description Total number of prompts found in the file
       * @example 3
       */
      promptsProcessed: number
      /**
       * @description Number of prompts successfully imported
       * @example 2
       */
      promptsImported: number
      /** @description Detailed results for each prompt */
      results: components['schemas']['PromptImportResult'][]
      /**
       * @description Global errors that affected the entire file
       * @default []
       * @example [
       *       "Invalid frontmatter format"
       *     ]
       */
      errors: string[]
      /**
       * @description Global warnings for the import operation
       * @default []
       * @example [
       *       "File contains no valid prompts"
       *     ]
       */
      warnings: string[]
    }
    BulkImportResult: {
      /** @description Overall success status (true if at least one prompt imported) */
      success: boolean
      /**
       * @description Total number of files processed
       * @example 5
       */
      totalFiles: number
      /**
       * @description Number of files successfully processed
       * @example 4
       */
      filesProcessed: number
      /**
       * @description Total number of prompts found across all files
       * @example 15
       */
      totalPrompts: number
      /**
       * @description Number of prompts successfully imported
       * @example 12
       */
      promptsImported: number
      /** @description Results for each file processed */
      fileResults: components['schemas']['MarkdownImportResult'][]
      summary: {
        /**
         * @description Number of new prompts created
         * @example 8
         */
        created: number
        /**
         * @description Number of existing prompts updated
         * @example 4
         */
        updated: number
        /**
         * @description Number of prompts skipped
         * @example 3
         */
        skipped: number
        /**
         * @description Number of prompts that failed to import
         * @example 0
         */
        failed: number
      }
    }
    BulkImportResponse: {
      /** @enum {boolean} */
      success: true
      data: components['schemas']['BulkImportResult']
    }
    ProviderKeyResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        id: number
        provider: string
        keyName: string
        name: string | null
        encryptedValue: string
        key: string | null
        encrypted: boolean
        iv: string | null
        tag: string | null
        salt: string | null
        baseUrl: string | null
        customHeaders:
          | string
          | {
              [key: string]: unknown
            }
          | unknown
          | unknown
        isDefault: boolean
        isActive: boolean
        environment: string
        description: string | null
        expiresAt: number | null
        lastUsed: number | null
        createdAt: number
        updatedAt: number
      }
    }
    ProviderKeyListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        id: number
        provider: string
        keyName: string
        name: string | null
        encryptedValue: string
        key: string | null
        encrypted: boolean
        iv: string | null
        tag: string | null
        salt: string | null
        baseUrl: string | null
        customHeaders:
          | string
          | {
              [key: string]: unknown
            }
          | unknown
          | unknown
        isDefault: boolean
        isActive: boolean
        environment: string
        description: string | null
        expiresAt: number | null
        lastUsed: number | null
        createdAt: number
        updatedAt: number
      }[]
    }
    TestProviderApiResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        success: boolean
        providerId: number
        provider: string
        model?: string
        latency: number
        error?: string
        response?: string
      }
    }
    BatchTestProviderApiResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        results: {
          success: boolean
          providerId: number
          provider: string
          model?: string
          latency: number
          error?: string
          response?: string
        }[]
        summary: {
          total: number
          successful: number
          failed: number
          averageLatency?: number
        }
      }
    }
    ProviderHealthStatusListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @enum {string} */
        status: 'healthy' | 'degraded' | 'down' | 'unknown'
        latency?: number
        lastChecked: number
        error?: string
      }[]
    }
    AgentSuggestionsListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        name: string
        description: string
        path: string
        relevanceScore: number
      }[]
    }
    ClaudeCommandResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        id: number
        name: string
        content: string
        description: string | null
        category: string | null
        projectId: number | null
        tags: string | null
        createdAt: number
        updatedAt: number
      }
    }
    ClaudeCommandListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        id: number
        name: string
        content: string
        description: string | null
        category: string | null
        projectId: number | null
        tags: string | null
        createdAt: number
        updatedAt: number
      }[]
    }
    CommandExecutionResponse: {
      /** @enum {boolean} */
      success: true
      /** @description CommandExecution */
      data: {
        result: string
        usage?: {
          inputTokens: number
          outputTokens: number
          totalTokens: number
        }
        model?: string
        sessionId?: string
      }
    }
    CommandSuggestionsResponse: {
      /** @enum {boolean} */
      success: true
      /** @description CommandSuggestions */
      data: {
        suggestions: {
          name: string
          description: string
          content: string
          category: string
          useCase: string
          /** @enum {string} */
          difficulty: 'easy' | 'medium' | 'hard'
        }[]
        reasoning: string
      }
    }
    ActiveTabResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        projectId: number
        activeTabId: number
        clientId?: string
        tabMetadata?: unknown
      } | null
    }
    ActiveTabResponseRequired: {
      /** @enum {boolean} */
      success: true
      data: {
        projectId: number
        activeTabId: number
        clientId?: string
        tabMetadata?: unknown
      }
    }
    ProjectResponse: {
      /** @enum {boolean} */
      success: true
      data: components['schemas']['Project']
    }
    ProjectResponseMultiStatus: components['schemas']['ProjectResponse'] & {
      warning?: string
      error?: string
    }
    ProjectSummaryResponse: {
      /** @enum {boolean} */
      success: true
      summary: string
    }
    ImportInfo: {
      source: string
      specifiers: {
        /** @enum {string} */
        type: 'default' | 'named' | 'namespace'
        imported?: string
        local: string
      }[]
    }
    ExportInfo: {
      /** @enum {string} */
      type: 'default' | 'named' | 'all'
      source?: string
      specifiers?: {
        exported: string
        local?: string
      }[]
    }
    ProjectFile: {
      /**
       * Format: int64
       * @description Entity ID - positive integer without timestamp conversion
       * @example 1716537600000
       */
      id: number
      /**
       * Format: int64
       * @description Entity ID - positive integer without timestamp conversion
       * @example 1716537600000
       */
      projectId: number
      name: string
      path: string
      extension: string
      size: number
      content: string | null
      summary: string | null
      /**
       * @description ID or Timestamp in unix timestamp (milliseconds)
       * @example 1716537600000
       */
      summaryLastUpdated: number | null
      meta: string | null
      checksum: string | null
      /** @default null */
      imports: components['schemas']['ImportInfo'][] | null
      /** @default null */
      exports: components['schemas']['ExportInfo'][] | null
      /**
       * @description ID or Timestamp in unix timestamp (milliseconds)
       * @example 1716537600000
       */
      created: number
      /**
       * @description ID or Timestamp in unix timestamp (milliseconds)
       * @example 1716537600000
       */
      updated: number
    }
    HookListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        id: number
        projectId: number | null
        name: string
        event: string
        command: string
        enabled: boolean
        createdAt: number
        updatedAt: number
      }[]
    }
    HookApiResponse: {
      /** @enum {boolean} */
      success: true
      /** @description Hook */
      data: {
        id: number
        projectId: number | null
        name: string
        event: string
        command: string
        enabled: boolean
        createdAt: number
        updatedAt: number
      }
    }
    /** @enum {string} */
    HookEvent: 'user-prompt-submit' | 'tool-call' | 'file-change'
    CreateHookRequest: {
      name: string
      event: string
      command: string
      /** @default true */
      enabled: boolean
      projectId?: number | null
    }
    UpdateHookRequest: {
      name?: string
      event?: string
      command?: string
      enabled?: boolean
    }
    HookGenerationResponse: {
      /** @enum {boolean} */
      success: true
      /** @description HookGeneration */
      data: {
        name: string
        command: string
        description: string
      }
    }
    HookGenerationRequest: {
      event: components['schemas']['HookEvent']
      description: string
      projectId?: number
    }
    HookTestResponse: {
      /** @enum {boolean} */
      success: true
      /** @description HookTest */
      data: {
        exitCode: number
        stdout: string
        stderr: string
        executionTime: number
      }
    }
    HookTestRequest: {
      command: string
      testData?: {
        [key: string]: unknown
      }
    }
    Queue: {
      id: number
      name: string
      description: string | null
      /** @default true */
      isActive: boolean
      /** @default 1 */
      maxConcurrency: number
      retryConfig: {
        [key: string]: unknown
      } | null
      metadata: {
        [key: string]: unknown
      } | null
      createdAt: number
      updatedAt: number
    }
    AiSdkChatRequest: {
      /** @description Chat/session identifier (maps to chatId) */
      id?: string
      messages: {
        /** @enum {string} */
        role: 'user' | 'assistant' | 'system'
        content: string
      }[]
      /** @default openai */
      provider: string
      model: string
      temperature?: number
      maxTokens?: number
      topP?: number
    }
    ProvidersListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        id: string
        name: string
        isCustom?: boolean
        baseUrl?: string
      }[]
    }
    /** @description Optional parameters to override default model behavior (temperature, maxTokens, etc.). */
    AiSdkOptions: {
      /**
       * Format: uri
       * @description Custom Ollama server URL to use instead of the default.
       * @example http://192.168.1.100:11434
       */
      ollamaUrl?: string
      /**
       * Format: uri
       * @description Custom LMStudio server URL to use instead of the default.
       * @example http://localhost:1234
       */
      lmstudioUrl?: string
      /**
       * @description Controls the randomness of the output. Lower values (e.g., 0.2) make the output more focused, deterministic, and suitable for factual tasks. Higher values (e.g., 0.8) increase randomness and creativity, useful for brainstorming or creative writing. A value of 0 typically means greedy decoding (always picking the most likely token).
       * @example 0.7
       */
      temperature?: number
      /**
       * @description The maximum number of tokens (words or parts of words) the model is allowed to generate in the response. This limits the output length and can affect cost. Note: This limit usually applies only to the *generated* tokens, not the input prompt tokens.
       * @example 4000
       */
      maxTokens?: number
      /**
       * @description Controls diversity via nucleus sampling. It defines a probability threshold (e.g., 0.9). The model considers only the smallest set of most probable tokens whose cumulative probability exceeds this threshold for the next token selection. Lower values (e.g., 0.5) restrict choices more, leading to less random outputs. A value of 1 considers all tokens. It's often recommended to alter *either* `temperature` *or* `topP`, not both.
       * @example 1
       */
      topP?: number
      /**
       * @description Applies a penalty to tokens based on how frequently they have already appeared in the generated text *and* the prompt. Positive values (e.g., 0.5) decrease the likelihood of the model repeating the same words or phrases verbatim, making the output less repetitive. Negative values encourage repetition.
       * @example 0.2
       */
      frequencyPenalty?: number
      /**
       * @description Applies a penalty to tokens based on whether they have appeared *at all* in the generated text *and* the prompt so far (regardless of frequency). Positive values (e.g., 0.5) encourage the model to introduce new concepts and topics, reducing the likelihood of repeating *any* previously mentioned word. Negative values encourage staying on topic.
       * @example 0.1
       */
      presencePenalty?: number
      /**
       * @description Restricts the model's choices for the next token to the `k` most likely candidates. For example, if `topK` is 40, the model will only consider the top 40 most probable tokens at each step. A lower value restricts choices more. Setting `topK` to 1 is equivalent to greedy decoding (same as `temperature: 0`). Less commonly used than `topP`.
       * @example 40
       */
      topK?: number
      /**
       * @description Specifies one or more sequences of text where the AI should stop generating. Once the model generates a stop sequence, it will halt output immediately, even if `maxTokens` hasn't been reached. Useful for structured output or controlling conversational turns.
       * @example [
       *       "\nHuman:",
       *       "\n---"
       *     ]
       */
      stop?: string | string[]
      /**
       * @description Specifies the desired format for the model's response. This is highly provider-specific. A common use case is enforcing JSON output, often requiring specific model versions.
       * @example {
       *       "type": "json_object"
       *     }
       */
      response_format?: unknown
      /**
       * @description The provider to use for the AI request.
       * @example openai
       */
      provider?: string
      /**
       * @description The model to use for the AI request.
       * @example gpt-4o-mini
       */
      model?: string
    }
    AiGenerateTextRequest: {
      /**
       * @description The text prompt for the AI.
       * @example Suggest 5 suitable filenames for a typescript utility file containing helper functions for string manipulation.
       */
      prompt: string
      options?: components['schemas']['AiSdkOptions']
      /**
       * @description Optional system message to guide the AI behavior and persona.
       * @example You are an expert programmer. Provide concise and relevant suggestions.
       */
      systemMessage?: string
    }
    AiGenerateTextResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @description The generated text response from the AI. */
        text: string
      }
    }
    AiGenerateStructuredResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @description The generated structured data, validated against the schema defined by the 'schemaKey'. */
        output?: unknown
      }
    }
    AiGenerateStructuredRequest: {
      /**
       * @description The key identifying the predefined structured task configuration.
       * @example filenameSuggestion
       */
      schemaKey: string
      /**
       * @description The user's input or context for the structured generation task.
       * @example A react component for displaying user profiles
       */
      userInput: string
      options?: components['schemas']['AiSdkOptions'] & unknown
    }
    UnifiedModel: {
      /**
       * @description Model identifier
       * @example gpt-4o-mini
       */
      id: string
      /**
       * @description User-friendly model name
       * @example GPT-4o Mini
       */
      name: string
      /**
       * @description Provider ID
       * @example openai
       */
      provider: string
      /**
       * @description Context window size in tokens
       * @example 128000
       */
      context_length?: number
    }
    ModelsListResponse: {
      /** @enum {boolean} */
      success: true
      data: components['schemas']['UnifiedModel'][]
    }
    UpdateProviderSettings: {
      /** Format: uri */
      ollamaUrl?: string
      /** Format: uri */
      lmstudioUrl?: string
    }
    BrowseDirectoryResponse: {
      /** @enum {boolean} */
      success: true
      /** @description BrowseDirectoryData */
      data: {
        currentPath: string
        parentPath: string | null
        entries: {
          name: string
          path: string
          isDirectory: boolean
          isHidden: boolean
        }[]
      }
    }
    MCPServerConfig: {
      /**
       * @description Unique identifier for the MCP server configuration
       * @example 1234567890
       */
      id: number
      /**
       * @description ID of the project this MCP server belongs to
       * @example 1234567890
       */
      projectId: number
      /**
       * @description Display name for the MCP server
       * @example File System Tools
       */
      name: string
      /**
       * @description Command to start the MCP server
       * @example npx @modelcontextprotocol/server-filesystem
       */
      command: string
      /**
       * @description Command line arguments for the server
       * @default []
       * @example [
       *       "--root",
       *       "/path/to/project"
       *     ]
       */
      args: string[]
      /**
       * @description Environment variables for the server
       * @default {}
       * @example {
       *       "NODE_ENV": "production"
       *     }
       */
      env: {
        [key: string]: string
      }
      /**
       * @description Whether the server is enabled
       * @default true
       * @example true
       */
      enabled: boolean
      /**
       * @description Whether to auto-start the server when project opens
       * @default false
       * @example false
       */
      autoStart: boolean
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
       * @example 1756396309228
       */
      created: number
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
       * @example 1756396309228
       */
      updated: number
    }
    MCPServerConfigResponse: {
      success: boolean
      data: components['schemas']['MCPServerConfig']
    }
    MCPServerConfigListResponse: {
      success: boolean
      data: components['schemas']['MCPServerConfig'][]
    }
    UpdateMCPServerConfigBody: {
      /**
       * @description ID of the project this MCP server belongs to
       * @example 1234567890
       */
      projectId?: number
      /**
       * @description Display name for the MCP server
       * @example File System Tools
       */
      name?: string
      /**
       * @description Command to start the MCP server
       * @example npx @modelcontextprotocol/server-filesystem
       */
      command?: string
      /**
       * @description Command line arguments for the server
       * @default []
       * @example [
       *       "--root",
       *       "/path/to/project"
       *     ]
       */
      args: string[]
      /**
       * @description Environment variables for the server
       * @default {}
       * @example {
       *       "NODE_ENV": "production"
       *     }
       */
      env: {
        [key: string]: string
      }
      /**
       * @description Whether the server is enabled
       * @default true
       * @example true
       */
      enabled: boolean
      /**
       * @description Whether to auto-start the server when project opens
       * @default false
       * @example false
       */
      autoStart: boolean
    }
    MCPToolExecutionResult: {
      /**
       * @description Unique ID for this execution
       * @example exec_123456
       */
      id: string
      toolId: string
      serverId: number
      /**
       * @description Status of the execution
       * @example success
       * @enum {string}
       */
      status: 'pending' | 'running' | 'success' | 'error'
      /** @description Result from the tool execution */
      result?: unknown
      /** @description Error message if execution failed */
      error: string | null
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
       * @example 1756396309228
       */
      startedAt: number
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
       * @example 1756396309228
       */
      completedAt: number
    }
    MCPToolExecutionResultResponse: {
      success: boolean
      data: components['schemas']['MCPToolExecutionResult']
    }
    MCPToolExecutionRequest: {
      /**
       * @description ID of the tool to execute
       * @example read_file
       */
      toolId: string
      /** @description ID of the MCP server to execute the tool on */
      serverId: number
      /**
       * @description Parameters to pass to the tool
       * @default {}
       * @example {
       *       "path": "/path/to/file.txt"
       *     }
       */
      parameters: {
        [key: string]: unknown
      }
    }
    MCPResource: {
      /**
       * @description URI of the resource
       * @example file:///path/to/file.txt
       */
      uri: string
      /**
       * @description Display name for the resource
       * @example file.txt
       */
      name: string
      /** @description Description of the resource */
      description?: string
      /**
       * @description MIME type of the resource
       * @example text/plain
       */
      mimeType?: string
      /** @description ID of the MCP server providing this resource */
      serverId: number
    }
    MCPResourceListResponse: {
      success: boolean
      data: components['schemas']['MCPResource'][]
    }
    GitStatusResultResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @description Whether the directory is a git repository */
        isRepo: boolean
        /** @description The current branch name */
        current: string | null
        /** @description The tracking branch name */
        tracking: string | null
        /** @description Number of commits ahead of tracking branch */
        ahead: number
        /** @description Number of commits behind tracking branch */
        behind: number
        /** @description List of files with git status */
        files: {
          /** @description The file path relative to the repository root */
          path: string
          /**
           * @description The git status of the file
           * @enum {string}
           */
          status: 'added' | 'modified' | 'deleted' | 'renamed' | 'copied' | 'untracked' | 'ignored' | 'unchanged'
          /** @description Whether the file is staged for commit */
          staged: boolean
          /** @description The index status code from git */
          index: string | null
          /** @description The working directory status code from git */
          workingDir: string | null
        }[]
        /** @description List of staged file paths */
        staged: string[]
        /** @description List of modified file paths */
        modified: string[]
        /** @description List of created file paths */
        created: string[]
        /** @description List of deleted file paths */
        deleted: string[]
        /** @description List of renamed file paths */
        renamed: string[]
        /** @description List of conflicted file paths */
        conflicted: string[]
      }
    }
    GitStatusResponse: {
      /** @enum {boolean} */
      success: true
      data:
        | components['schemas']['GitStatusResultResponse']
        | {
            /** @enum {boolean} */
            success: false
            error: {
              /** @enum {string} */
              type: 'not_a_repo' | 'git_not_installed' | 'permission_denied' | 'unknown'
              message: string
            }
          }
    }
    CommitLogResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @description Commit hash */
        hash: string
        /** @description Commit message */
        message: string
        author: {
          name: string
          email: string
          /** @description ISO date string */
          date: string
        }
        committer: {
          name: string
          email: string
          /** @description ISO date string */
          date: string
        }
        /** @description Parent commit hashes */
        parents: string[]
        /** @description Files changed in this commit */
        files?: string[]
      }[]
    }
    CommitLogEnhancedResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        success: boolean
        data?: {
          commits: {
            /** @description Full SHA-1 commit hash */
            hash: string
            /** @description Abbreviated commit hash (7-8 chars) */
            abbreviatedHash: string
            /** @description First line of commit message */
            subject: string
            /** @description Full commit message including subject */
            body: string
            /** @description Commit author information */
            author: {
              name: string
              email: string
              /**
               * Format: uri
               * @description Gravatar or other avatar URL
               */
              avatarUrl?: string
            }
            /** @description Committer information (may differ from author) */
            committer: {
              name: string
              email: string
              /**
               * Format: uri
               * @description Gravatar or other avatar URL
               */
              avatarUrl?: string
            }
            /** @description ISO 8601 timestamp when authored */
            authoredDate: string
            /** @description ISO 8601 timestamp when committed */
            committedDate: string
            /** @description Human-readable relative time (e.g., "2 hours ago") */
            relativeTime: string
            /** @description Parent commit hashes */
            parents: string[]
            /** @description Branch and tag references pointing to this commit */
            refs: string[]
            /** @description Summary statistics for the commit */
            stats: {
              /** @description Total number of files changed */
              filesChanged: number
              /** @description Total lines added */
              additions: number
              /** @description Total lines removed */
              deletions: number
            }
            /** @description Per-file change statistics */
            fileStats?: {
              /** @description File path relative to repository root */
              path: string
              /** @description Number of lines added */
              additions: number
              /** @description Number of lines removed */
              deletions: number
              /**
               * @description Change type
               * @enum {string}
               */
              status: 'added' | 'modified' | 'deleted' | 'renamed' | 'copied'
              /** @description Previous path for renamed/moved files */
              oldPath?: string
            }[]
          }[]
          pagination: {
            /** @description Current page number (1-based) */
            page: number
            /** @description Number of items per page */
            perPage: number
            /** @description Total number of items if available */
            totalCount?: number
            /** @description Whether more items are available */
            hasMore: boolean
            /** @description Cursor for cursor-based pagination */
            cursor?: string
          }
          /** @description Branch name these commits are from */
          branch: string
        }
        message?: string
      }
    }
    CommitDetailResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        success: boolean
        data?: {
          commit: {
            /** @description Full SHA-1 commit hash */
            hash: string
            /** @description Abbreviated commit hash (7-8 chars) */
            abbreviatedHash: string
            /** @description First line of commit message */
            subject: string
            /** @description Full commit message including subject */
            body: string
            /** @description Commit author information */
            author: {
              name: string
              email: string
              /**
               * Format: uri
               * @description Gravatar or other avatar URL
               */
              avatarUrl?: string
            }
            /** @description Committer information (may differ from author) */
            committer: {
              name: string
              email: string
              /**
               * Format: uri
               * @description Gravatar or other avatar URL
               */
              avatarUrl?: string
            }
            /** @description ISO 8601 timestamp when authored */
            authoredDate: string
            /** @description ISO 8601 timestamp when committed */
            committedDate: string
            /** @description Human-readable relative time (e.g., "2 hours ago") */
            relativeTime: string
            /** @description Parent commit hashes */
            parents: string[]
            /** @description Branch and tag references pointing to this commit */
            refs: string[]
            /** @description Summary statistics for the commit */
            stats: {
              /** @description Total number of files changed */
              filesChanged: number
              /** @description Total lines added */
              additions: number
              /** @description Total lines removed */
              deletions: number
            }
            /** @description Per-file change statistics */
            fileStats?: {
              /** @description File path relative to repository root */
              path: string
              /** @description Number of lines added */
              additions: number
              /** @description Number of lines removed */
              deletions: number
              /**
               * @description Change type
               * @enum {string}
               */
              status: 'added' | 'modified' | 'deleted' | 'renamed' | 'copied'
              /** @description Previous path for renamed/moved files */
              oldPath?: string
            }[]
          }
          /** @description Detailed file changes */
          files: {
            path: string
            /** @enum {string} */
            status: 'added' | 'modified' | 'deleted' | 'renamed' | 'copied'
            additions: number
            deletions: number
            binary: boolean
            oldPath?: string
            /** @description Unified diff content if requested */
            diff?: string
          }[]
          /** @description Full unified diff if requested */
          totalDiff?: string
        }
        message?: string
      }
    }
    DiffResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        files: {
          path: string
          /** @enum {string} */
          type: 'added' | 'modified' | 'deleted' | 'renamed'
          additions: number
          deletions: number
          binary: boolean
          /** @description For renamed files */
          oldPath?: string
        }[]
        /** @description Total additions */
        additions: number
        /** @description Total deletions */
        deletions: number
        /** @description Diff content for single file */
        content?: string
      }
    }
    BranchListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @description Branch name */
        name: string
        /** @description Whether this is the current branch */
        current: boolean
        /** @description Whether this is a remote branch */
        isRemote: boolean
        /** @description Latest commit hash */
        commit: string
        /** @description Tracking branch name */
        tracking: string | null
        /** @description Commits ahead of tracking branch */
        ahead: number
        /** @description Commits behind tracking branch */
        behind: number
      }[]
    }
    BranchListEnhancedResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        success: boolean
        data?: {
          branches: {
            /** @description Branch name */
            name: string
            /** @description Whether this is the currently checked out branch */
            current: boolean
            /** @description Whether this is a remote branch */
            isRemote: boolean
            /** @description Whether the branch is protected */
            isProtected?: boolean
            /** @description Summary of the latest commit on this branch */
            latestCommit: {
              hash: string
              abbreviatedHash: string
              subject: string
              /** @description Author name */
              author: string
              relativeTime: string
            }
            /** @description Remote tracking branch */
            tracking: string | null
            /** @description Commits ahead of tracking/main branch */
            ahead: number
            /** @description Commits behind tracking/main branch */
            behind: number
            /** @description ISO 8601 timestamp of last activity */
            lastActivity?: string
          }[]
          /** @description Name of current branch */
          current: string | null
          /** @description Default branch name (e.g., main, master) */
          defaultBranch: string
        }
        message?: string
      }
    }
    StashListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        index: number
        message: string
        /** @description Branch where stash was created */
        branch: string
        date: string
      }[]
    }
    WorktreeListResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @description Absolute path to the worktree */
        path: string
        /** @description Branch checked out in this worktree */
        branch: string
        /** @description Current commit hash */
        commit: string
        /** @description Whether this is the main worktree */
        isMain: boolean
        /** @description Whether the worktree is locked */
        isLocked: boolean
        /** @description Reason for locking if locked */
        lockReason?: string
        /** @description Whether the worktree can be pruned */
        prunable?: boolean
      }[]
    }
    PruneWorktreesResponse: {
      /** @enum {boolean} */
      success: true
      data: string[]
      message: string
    }
    RemotesResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        name: string
        /** @description Fetch URL */
        fetch: string
        /** @description Push URL */
        push: string
      }[]
    }
    TagsResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        name: string
        /** @description Commit hash */
        commit: string
        /** @description Tag message for annotated tags */
        annotation?: string
        /** @description Tagger info for annotated tags */
        tagger?: {
          name: string
          email: string
          /** @description ISO date string */
          date: string
        }
      }[]
    }
    MCPStatusResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        claudeDesktop: {
          installed: boolean
          configExists: boolean
          hasPromptliano: boolean
          configPath?: string
          error?: string
        }
        claudeCode: {
          globalConfigExists: boolean
          globalHasPromptliano: boolean
          globalConfigPath?: string
          projectConfigExists: boolean
          projectHasPromptliano: boolean
          projectConfigPath?: string
          localConfigExists: boolean
          localHasPromptliano: boolean
          localConfigPath?: string
          error?: string
        }
        projectId: string
        installCommand: string
      }
    }
    ClaudeSessionsMetadataResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        sessionId: string
        projectPath: string
        startTime: string
        lastUpdate: string
        messageCount: number
        fileSize: number
        hasGitBranch: boolean
        hasCwd: boolean
        firstMessagePreview?: string
        lastMessagePreview?: string
      }[]
      pagination?: {
        hasMore: boolean
        nextCursor?: string
        total?: number
      }
    }
    ClaudeSessionsResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        sessionId: string
        projectPath: string
        startTime: string
        lastUpdate: string
        messageCount: number
        gitBranch?: string
        cwd?: string
        tokenUsage?: {
          totalInputTokens: number
          totalCacheCreationTokens: number
          totalCacheReadTokens: number
          totalOutputTokens: number
          totalTokens: number
        }
        serviceTiers?: string[]
        totalTokensUsed?: number
        totalCostUsd?: number
      }[]
    }
    ClaudeSessionsPaginatedResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        sessionId: string
        projectPath: string
        startTime: string
        lastUpdate: string
        messageCount: number
        gitBranch?: string
        cwd?: string
        tokenUsage?: {
          totalInputTokens: number
          totalCacheCreationTokens: number
          totalCacheReadTokens: number
          totalOutputTokens: number
          totalTokens: number
        }
        serviceTiers?: string[]
        totalTokensUsed?: number
        totalCostUsd?: number
      }[]
      pagination: {
        hasMore: boolean
        nextCursor?: string
        total?: number
      }
    }
    ClaudeFullSessionResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        sessionId: string
        projectPath: string
        startTime: string
        lastUpdate: string
        messageCount: number
        gitBranch?: string
        cwd?: string
        tokenUsage?: {
          totalInputTokens: number
          totalCacheCreationTokens: number
          totalCacheReadTokens: number
          totalOutputTokens: number
          totalTokens: number
        }
        serviceTiers?: string[]
        totalTokensUsed?: number
        totalCostUsd?: number
      } | null
    }
    ClaudeMessagesResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        /** @enum {string} */
        type: 'user' | 'assistant' | 'result' | 'system' | 'summary'
        message?: {
          /** @enum {string} */
          role: 'user' | 'assistant' | 'system'
          content:
            | string
            | (
                | {
                    /** @enum {string} */
                    type: 'text'
                    text: string
                  }
                | {
                    /** @enum {string} */
                    type: 'image'
                    source: {
                      /** @enum {string} */
                      type: 'base64'
                      media_type: string
                      data: string
                    }
                  }
                | {
                    /** @enum {string} */
                    type: 'tool_result'
                    tool_use_id: string
                    content: string | unknown[]
                  }
                | {
                    /** @enum {string} */
                    type: 'tool_use'
                    id: string
                    name: string
                    input?: unknown
                  }
                | string
              )[]
            | unknown
            | unknown
          id?: string | null
          model?: string | null
          stop_reason?: string | null
          stop_sequence?: string | null
          usage?: {
            input_tokens?: number | null
            cache_creation_input_tokens?: number | null
            cache_read_input_tokens?: number | null
            output_tokens?: number | null
            service_tier?: string
          }
        }
        timestamp: string
        sessionId: string
        uuid?: string | null
        parentUuid?: string | null
        requestId?: string | null
        userType?: string | null
        isSidechain?: boolean
        cwd?: string | null
        version?: string | null
        gitBranch?: string | null
        toolUseResult?:
          | {
              oldTodos?: unknown[]
              newTodos?: unknown[]
            }
          | string
          | unknown[]
          | unknown
          | unknown
        content?:
          | string
          | (
              | {
                  /** @enum {string} */
                  type: 'text'
                  text: string
                }
              | {
                  /** @enum {string} */
                  type: 'image'
                  source: {
                    /** @enum {string} */
                    type: 'base64'
                    media_type: string
                    data: string
                  }
                }
              | {
                  /** @enum {string} */
                  type: 'tool_result'
                  tool_use_id: string
                  content: string | unknown[]
                }
              | {
                  /** @enum {string} */
                  type: 'tool_use'
                  id: string
                  name: string
                  input?: unknown
                }
              | string
            )[]
          | unknown
          | unknown
        isMeta?: boolean
        toolUseID?: string | null
        level?: string
        tokensUsed?: number | null
        costUsd?: number | null
        durationMs?: number | null
        model?: string | null
      }[]
    }
    ClaudeSessionsEnhancedResponse: components['schemas']['ClaudeSessionsResponse'] & {
      pagination?: {
        hasMore: boolean
        nextCursor?: string
        total?: number
      }
    }
    ClaudeProjectDataResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        projectPath: string
        encodedPath: string
        sessions: {
          sessionId: string
          projectPath: string
          startTime: string
          lastUpdate: string
          messageCount: number
          gitBranch?: string
          cwd?: string
          tokenUsage?: {
            totalInputTokens: number
            totalCacheCreationTokens: number
            totalCacheReadTokens: number
            totalOutputTokens: number
            totalTokens: number
          }
          serviceTiers?: string[]
          totalTokensUsed?: number
          totalCostUsd?: number
        }[]
        totalMessages: number
        firstMessageTime?: string
        lastMessageTime?: string
        branches: string[]
        workingDirectories: string[]
      }
    }
    ChatResponse: {
      /** @enum {boolean} */
      success: true
      /** @description Chat */
      data: {
        id: number
        projectId: number
        title: string
        createdAt: number
        updatedAt: number
      }
    }
    DetectToolsResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        tools: {
          tool: string
          name: string
          installed: boolean
          configPath?: string
          configExists?: boolean
          hasPromptliano?: boolean
        }[]
        platform: string
      }
    }
    InstallationStatusResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        projectConfig: {
          projectId: number
          projectName: string
          mcpEnabled: boolean
          installedTools: {
            tool: string
            installedAt: number
            configPath?: string
            serverName: string
          }[]
          customInstructions?: string
        } | null
        connectionStatus: {
          connected: boolean
          sessionId?: string
          lastActivity?: number
          projectId?: number
        }
      }
    }
    InstallResultResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        message: string
        configPath?: string
        backedUp?: boolean
        backupPath?: string
      }
    }
    UninstallResultResponse: {
      /** @enum {boolean} */
      success: true
      data: {
        message: string
      }
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  generateProjectTabName: {
    parameters: {
      query?: never
      header?: never
      path: {
        tabId: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          projectId: number
          tabData?: {
            selectedFiles?: number[]
            userPrompt?: string
          }
          existingNames?: string[]
        }
      }
    }
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @enum {boolean} */
            success: true
            data: {
              name: string
              /** @enum {string} */
              status: 'success'
              generatedAt: string
            }
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiErrorResponse']
        }
      }
      /** @description Resource Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiErrorResponse']
        }
      }
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiErrorResponse']
        }
      }
    }
  }
}
