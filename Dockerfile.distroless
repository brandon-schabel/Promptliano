# Stage 1: Dependencies - Install all dependencies
FROM oven/bun:1-slim AS deps
WORKDIR /app

# Copy package files
COPY package.json bun.lock* ./

# Copy each workspace package.json explicitly to maintain structure for Bun workspaces
COPY packages/api-client/package.json ./packages/api-client/
COPY packages/brand-kit/package.json ./packages/brand-kit/
COPY packages/client/package.json ./packages/client/
COPY packages/config/package.json ./packages/config/
COPY packages/mcp-client/package.json ./packages/mcp-client/
COPY packages/prompt-engineer/package.json ./packages/prompt-engineer/
COPY packages/promptliano/package.json ./packages/promptliano/
COPY packages/schemas/package.json ./packages/schemas/
COPY packages/server/package.json ./packages/server/
COPY packages/services/package.json ./packages/services/
COPY packages/shared/package.json ./packages/shared/
COPY packages/storage/package.json ./packages/storage/
COPY packages/ui/package.json ./packages/ui/
COPY packages/website/package.json ./packages/website/

# Install dependencies with frozen lockfile
RUN bun install --frozen-lockfile

# Stage 2: Builder - Build the application
FROM oven/bun:1-slim AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/packages/*/node_modules ./packages/*/node_modules

# Copy source code
COPY . .

# Build all packages
RUN bun run build:all:bun || bun run build:all

# Stage 3: Compiler - Create standalone binary
FROM oven/bun:1-slim AS compiler
WORKDIR /app

# Copy built application
COPY --from=builder /app ./

# Compile to standalone binary with Bun runtime included
RUN bun build ./packages/server/server.ts \
    --compile \
    --target=bun-linux-x64-modern \
    --outfile promptliano

# Ensure binary has execute permissions before copying to distroless
RUN chmod +x promptliano

# Stage 4: Runtime - Ultra-minimal Distroless image for maximum security
# This image has NO shell, package manager, or other utilities
FROM gcr.io/distroless/base-debian12:nonroot

# Set working directory
WORKDIR /app

# Copy the compiled binary and client assets from previous stages
# The nonroot user has UID 65532
COPY --from=compiler --chown=65532:65532 /app/promptliano /app/promptliano
COPY --from=builder --chown=65532:65532 /app/packages/server/client-dist /app/client-dist

# Note: /data directory must be created via volume mount as distroless cannot create directories
# Example: docker run -v promptliano-data:/data promptliano:distroless

# Environment variables
ENV NODE_ENV=production \
    SERVER_PORT=3147 \
    DATABASE_PATH=/data/promptliano.db \
    PROMPTLIANO_DATA_DIR=/data \
    CLIENT_PATH=/app/client-dist

# The nonroot user is already set in the base image
USER nonroot

# Expose the application port
EXPOSE 3147

# Note: Distroless doesn't support HEALTHCHECK
# Use Kubernetes/Docker Compose health probes instead
# Health endpoint: GET http://localhost:3147/api/health

# Run the application
# Using ENTRYPOINT for immutability
ENTRYPOINT ["/app/promptliano"]

# Optional: Add CMD for flexibility in passing arguments
# CMD []