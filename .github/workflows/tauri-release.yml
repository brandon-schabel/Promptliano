name: Build and Release Tauri App

on:
  push:
    tags:
      - 'app-v*'
  workflow_dispatch:
    inputs:
      draft:
        description: 'Create as draft release'
        required: false
        default: true
        type: boolean

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
        
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './packages/client/src-tauri -> target'
          
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build server binaries
        run: bun run build-binaries
        
      - name: Prepare Tauri sidecars
        run: bun run prepare-tauri-sidecars
        
      - name: Import Apple Certificate (macOS only)
        if: matrix.platform == 'macos-latest' && env.APPLE_CERTIFICATE != ''
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "🔐 Importing Apple certificate..."
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p actions temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p actions temp.keychain
          security import certificate.p12 -k temp.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions temp.keychain
          rm -f certificate.p12
          
      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: ./packages/client
          tagName: ${{ github.ref_name }}
          releaseName: 'OctoPrompt ${{ github.ref_name }}'
          releaseBody: |
            ## What's New
            
            See the [changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
            
            ## Download Instructions
            
            ### macOS
            - **Intel**: Download `OctoPrompt_x64.dmg`
            - **Apple Silicon**: Download `OctoPrompt_aarch64.dmg`
            - **Universal**: Download `OctoPrompt_universal.dmg` (works on both)
            
            ### Windows
            - Download `OctoPrompt_x64-setup.exe`
            
            ### Linux
            - **AppImage**: Download `octoprompt_amd64.AppImage`
            - **Debian/Ubuntu**: Download `octoprompt_amd64.deb`
            
            ## Verification
            
            All macOS builds are signed and notarized. Windows and Linux builds include update signatures.
          releaseDraft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.draft == 'true' || true }}
          prerelease: false
          args: ${{ matrix.args }}
          
      - name: Upload build artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}
          path: |
            packages/client/src-tauri/target/release/bundle/
            packages/client/src-tauri/target/release/*.log