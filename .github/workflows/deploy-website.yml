name: Deploy Website to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'packages/website/**'
      - '.github/workflows/deploy-website.yml'
      - 'bun.lockb'
      - 'package.json'
  pull_request:
    branches:
      - main
    paths:
      - 'packages/website/**'
      - '.github/workflows/deploy-website.yml'
      - 'bun.lockb'
      - 'package.json'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: 'pages-${{ github.ref }}'
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  build:
    name: Build Website
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build website
        run: bun run build:website
        env:
          NODE_ENV: production
          VITE_BASE_URL: ${{ github.event_name == 'pull_request' && format('/pr-preview/pr-{0}', github.event.pull_request.number) || '/' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: packages/website/dist
          retention-days: 30

      - name: Upload Pages artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-pages-artifact@v3
        with:
          path: packages/website/dist

  deploy-production:
    name: Deploy to GitHub Pages
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-preview:
    name: Deploy PR Preview
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: ./pr-preview

      - name: Deploy PR Preview
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pr-preview
          destination_dir: pr-preview/pr-${{ github.event.pull_request.number }}
          keep_files: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const preview_url = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-preview/pr-${issue_number}`;

            const comment = `### 🚀 Preview Deployment

            Your PR preview has been deployed to: ${preview_url}

            **Build Details:**
            - Commit: \`${context.sha.substring(0, 7)}\`
            - Build Time: ${new Date().toISOString()}
            - Status: ✅ Success

            This preview will be automatically updated when you push new commits.`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: comment
              });
            }

  cleanup-preview:
    name: Cleanup PR Preview
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Remove PR Preview
        run: |
          rm -rf pr-preview/pr-${{ github.event.pull_request.number }}

      - name: Commit cleanup
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          keep_files: true
          commit_message: 'cleanup: Remove preview for PR #${{ github.event.pull_request.number }}'

  validate:
    name: Post-deployment Validation
    needs: [deploy-production]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check site availability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://promptliano.com)
          if [ $response -eq 200 ]; then
            echo "✅ Site is available (HTTP $response)"
          else
            echo "❌ Site returned HTTP $response"
            exit 1
          fi

      - name: Validate critical paths
        run: |
          # Check main page
          curl -f -s https://promptliano.com > /dev/null || exit 1
          echo "✅ Main page is accessible"

          # Check docs page
          curl -f -s https://promptliano.com/docs > /dev/null || exit 1
          echo "✅ Docs page is accessible"

          # Check static assets
          curl -f -s https://promptliano.com/favicon.svg > /dev/null || exit 1
          echo "✅ Static assets are accessible"

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://promptliano.com
            https://promptliano.com/docs
          uploadArtifacts: true
          temporaryPublicStorage: true
