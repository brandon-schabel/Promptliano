name: Monorepo CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths:
      - 'packages/**'
      - 'package.json'
      - 'bun.lock*'
      - '.github/workflows/monorepo-ci.yml'
      - '.github/actions/**'
      - '.github/workflows/reusable-*.yml'

# Prevent concurrent runs for the same PR
concurrency:
  group: monorepo-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # Global environment variables
  NODE_ENV: test
  CI: true

jobs:
  # Detect which packages have changes
  detect-changes:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
      changed-count: ${{ steps.changes.outputs.changed-count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Detect changed packages
        id: changes
        uses: ./.github/actions/detect-changes
        with:
          base-ref: ${{ github.base_ref || 'main' }}
          config-file: '.github/package-configs.yml'

  # Global setup job for better caching
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Bun and install dependencies
        uses: ./.github/actions/setup-bun
        with:
          bun-version: 'latest'
          cache-key-suffix: -monorepo-ci

      - name: Cache build artifacts
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  # Test packages in parallel
  test-packages:
    name: Test ${{ matrix.package }}
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.has-changes == 'true'
    timeout-minutes: ${{ fromJson(matrix.timeout) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Bun and dependencies
        uses: ./.github/actions/setup-bun
        with:
          bun-version: 'latest'
          cache-key-suffix: -${{ matrix.package }}

      - name: Restore build cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Run TypeScript type checking
        id: typecheck
        if: fromJson(matrix.typecheck)
        working-directory: ${{ matrix.path }}
        run: |
          echo "📝 Running TypeScript type checking for ${{ matrix.package }}..."
          if bun run typecheck; then
            echo "✅ Type checking passed"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Type checking failed"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        continue-on-error: false

      - name: Run tests
        id: tests
        working-directory: ${{ matrix.path }}
        run: |
          echo "🧪 Running tests for ${{ matrix.package }}..."
          if ${{ matrix.test-command }}; then
            echo "✅ Tests passed"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Tests failed"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Run build
        id: build
        if: matrix.build-command != ''
        working-directory: ${{ matrix.path }}
        run: |
          echo "🏗️ Building ${{ matrix.package }}..."
          if ${{ matrix.build-command }}; then
            echo "✅ Build successful"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Build failed"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload test artifacts
        uses: ./.github/actions/optimized-artifact-upload
        with:
          artifact-name: ${{ matrix.package }}-test-results-${{ github.run_number }}
          artifact-path: |
            ${{ matrix.path }}/**/*.log
            ${{ matrix.path }}/coverage/
          upload-condition: on-failure
          retention-days: ${{ github.event_name == 'pull_request' && '3' || '7' }}
          max-size-mb: 25
          compress: auto
        continue-on-error: true

      - name: Generate test summary
        if: always()
        uses: ./.github/actions/test-summary
        with:
          test-name: ${{ matrix.package }}
          test-status: ${{ steps.tests.outputs.status || 'skipped' }}
          typecheck-status: ${{ steps.typecheck.outputs.status || 'skipped' }}
          build-status: ${{ steps.build.outputs.status || 'skipped' }}
          working-directory: ${{ matrix.path }}

  # Integration tests for services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, test-packages]
    if: needs.detect-changes.outputs.has-changes == 'true' && contains(needs.detect-changes.outputs.packages, 'services')
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Bun and dependencies
        uses: ./.github/actions/setup-bun
        with:
          bun-version: 'latest'
          cache-key-suffix: -integration

      - name: Run integration tests
        working-directory: packages/services
        run: |
          echo "🔄 Running Services Integration Tests..."
          # Run integration tests if they exist
          if ls src/**/*.integration.test.ts 1> /dev/null 2>&1; then
            bun test src/**/*.integration.test.ts --timeout 10000
          else
            echo "No integration tests found, skipping..."
          fi

      # - name: Run E2E queue tests
      #   working-directory: packages/services
      #   run: |
      #     echo "📦 Running Queue System Tests..."
      #     # Run queue tests specifically
      #     if ls src/queue-*.test.ts 1> /dev/null 2>&1; then
      #       bun test src/queue-*.test.ts --timeout 10000
      #     else
      #       echo "No queue tests found, skipping..."
      #     fi

  # Summary job
  ci-summary:
    name: CI Summary
    if: always()
    needs: [detect-changes, test-packages, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Generate CI summary
        run: |
          echo "## 🚀 Monorepo CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.has-changes }}" = "false" ]; then
            echo "### ⏭️ No Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "No package changes detected - CI skipped" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "### 📦 Tested Packages (${{ needs.detect-changes.outputs.changed-count }} changed)" >> $GITHUB_STEP_SUMMARY
          PACKAGES='${{ needs.detect-changes.outputs.packages }}'
          echo "$PACKAGES" | jq -r '.[]' | while read pkg; do
            echo "- \`$pkg\`" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY

          # Check package test results
          if [ "${{ needs.test-packages.result }}" = "success" ]; then
            echo "- ✅ **Package Tests**: All passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-packages.result }}" = "failure" ]; then
            echo "- ❌ **Package Tests**: Some failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ **Package Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # Check integration test results
          if [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "- ✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.integration-tests.result }}" = "failure" ]; then
            echo "- ❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ **Integration Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-packages.result }}" = "success" ] && [ "${{ needs.integration-tests.result }}" != "failure" ]; then
            echo "✅ All checks passed - ready to merge!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some checks failed - please review the errors above" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check overall status
        run: |
          if [ "${{ needs.test-packages.result }}" = "failure" ] || [ "${{ needs.integration-tests.result }}" = "failure" ]; then
            echo "CI failed - some tests did not pass"
            exit 1
          fi
