name: Publish CLI Package

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main]
    paths:
      - 'packages/promptliano/**'
      - '.github/workflows/publish-cli.yml'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  test-and-publish:
    name: ${{ github.event_name == 'pull_request' && 'Test CLI Package (Dry Run)' || 'Build and Publish to NPM' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # For npm provenance

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Extract version from tag
        if: github.event_name != 'pull_request'
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=$VERSION" >> $GITHUB_ENV

      - name: Validate version matches package.json
        if: github.event_name != 'pull_request'
        working-directory: packages/promptliano
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
            echo "Error: Tag version (${{ steps.version.outputs.VERSION }}) does not match package.json version ($PACKAGE_VERSION)"
            echo "Please ensure the version in package.json is updated before creating a tag"
            exit 1
          fi
          echo "âœ… Version validation passed: $PACKAGE_VERSION"

      - name: Run tests
        working-directory: packages/promptliano
        run: bun test

      - name: Build package
        working-directory: packages/promptliano
        run: |
          echo "Building CLI package..."
          bun run build
          echo "Generating TypeScript declarations..."
          bun run build:types

          # Verify build output
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found after build"
            exit 1
          fi

          if [ ! -f "dist/index.js" ]; then
            echo "Error: dist/index.js not found after build"
            exit 1
          fi

          echo "âœ… Build completed successfully"
          ls -la dist/

      - name: Dry run - Pack package
        if: github.event_name == 'pull_request'
        working-directory: packages/promptliano
        run: |
          echo "ðŸ“¦ Running npm pack (dry run)..."
          npm pack --dry-run

          # Also test the actual pack to ensure it creates the tarball
          npm pack

          # Check the tarball contents
          echo ""
          echo "ðŸ“‹ Package contents:"
          tar -tzf promptliano-*.tgz | head -20
          echo "..."

          # Check package size
          echo ""
          echo "ðŸ“Š Package size:"
          ls -lh promptliano-*.tgz

          echo ""
          echo "âœ… Dry run completed successfully!"

      - name: Configure npm authentication
        if: github.event_name != 'pull_request'
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        if: github.event_name != 'pull_request'
        working-directory: packages/promptliano
        run: |
          # Check if version already exists
          if npm view promptliano@${{ steps.version.outputs.VERSION }} > /dev/null 2>&1; then
            echo "Version ${{ steps.version.outputs.VERSION }} already exists on npm"
            exit 1
          fi

          # Publish with provenance
          npm publish --access public --provenance

          echo "âœ… Successfully published promptliano@${{ steps.version.outputs.VERSION }} to npm"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create PR summary
        if: github.event_name == 'pull_request' && success()
        run: |
          echo "## âœ… CLI Package Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The CLI package build and tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What was tested:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Dependencies installation" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Test suite execution" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Package build (JavaScript + TypeScript types)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… NPM package creation (dry run)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Package contents verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This package will be ready to publish when merged." >> $GITHUB_STEP_SUMMARY

      - name: Create release summary
        if: github.event_name != 'pull_request' && success()
        run: |
          echo "## ðŸŽ‰ CLI Package Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: promptliano" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: [npmjs.com/package/promptliano](https://www.npmjs.com/package/promptliano)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npx promptliano@latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
