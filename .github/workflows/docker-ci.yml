name: Docker CI

on:
  pull_request:
    branches: [main]
    paths:
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.dockerignore'
      - 'packages/**'
      - 'scripts/build-binaries.ts'
      - '.github/workflows/docker-*.yml'
  push:
    branches: [main]
    paths:
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - '.dockerignore'
      - 'packages/**'
      - 'scripts/build-binaries.ts'
  workflow_dispatch:
    inputs:
      dockerfile:
        description: 'Dockerfile to build (alpine, distroless, production, all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - alpine
          - distroless
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: brandon-schabel/promptliano

jobs:
  # Lint Dockerfiles for best practices
  lint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Run hadolint on Alpine Dockerfile
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: Dockerfile.alpine
          config: docker/hadolint.yaml
          no-fail: true

      - name: Run hadolint on Distroless Dockerfile
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: Dockerfile.distroless
          config: docker/hadolint.yaml
          no-fail: true

      - name: Run hadolint on Production Dockerfile
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: Dockerfile.production
          config: docker/hadolint.yaml
          no-fail: true

  # Build binaries for Docker images
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Bun and dependencies
        uses: ./.github/actions/setup-bun
        with:
          bun-version: 'latest'
          cache-key-suffix: -docker-binaries

      - name: Build binaries
        run: bun run scripts/build-binaries.ts

      - name: Upload binaries as artifacts
        uses: ./.github/actions/optimized-artifact-upload
        with:
          artifact-name: docker-binaries-${{ github.run_id }}
          artifact-path: dist/
          upload-condition: always  # Needed by downstream Docker builds
          retention-days: 1  # Very short for intermediate artifacts
          max-size-mb: 200
          compress: true
          include-git-info: false  # Skip metadata for intermediate artifacts

  # Build Docker images using reusable workflow
  docker-build-alpine:
    name: Build Alpine Images
    needs: [lint, build-binaries]
    uses: ./.github/workflows/reusable-docker-build.yml
    with:
      dockerfile: alpine
      platforms: linux/amd64,linux/arm64
      push: false
      upload-artifacts: true
      needs-binaries: true
      security-scan: true

  docker-build-distroless:
    name: Build Distroless Images  
    needs: [lint, build-binaries]
    uses: ./.github/workflows/reusable-docker-build.yml
    with:
      dockerfile: distroless
      platforms: linux/amd64,linux/arm64
      push: false
      upload-artifacts: true
      needs-binaries: true
      security-scan: true

  docker-build-production:
    name: Build Production Images
    needs: [lint, build-binaries]
    uses: ./.github/workflows/reusable-docker-build.yml
    with:
      dockerfile: production
      platforms: linux/amd64  # Skip ARM for production to reduce CI time
      push: false
      upload-artifacts: false  # Production images are large
      needs-binaries: false    # Production builds own binaries
      security-scan: true

  # Test Docker containers
  test-containers:
    name: Test ${{ matrix.dockerfile }} Container
    needs: [docker-build-alpine, docker-build-distroless]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: 
          - alpine
          - distroless
          # Skip production for faster CI
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-${{ matrix.dockerfile }}-linux-amd64
          path: /tmp

      - name: Load Docker image
        run: docker load -i /tmp/${{ matrix.dockerfile }}-linux-amd64.tar

      - name: Get image name
        id: image
        run: |
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -1)
          echo "name=$IMAGE" >> $GITHUB_OUTPUT

      - name: Test container startup
        run: |
          # Start container in background
          docker run -d \
            --name test-container \
            -p 3147:3147 \
            -e DATABASE_PATH=/tmp/test.db \
            -e NODE_ENV=production \
            ${{ steps.image.outputs.name }}
          
          # Wait for container to be ready
          sleep 5
          
          # Check if container is still running
          docker ps | grep test-container

      - name: Test health check
        run: |
          # Try health endpoint multiple times
          for i in {1..10}; do
            if curl -f http://localhost:3147/api/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, waiting..."
            sleep 2
          done
          echo "Health check failed after 10 attempts"
          docker logs test-container
          exit 1

      - name: Test non-root user
        if: matrix.dockerfile != 'distroless'  # Can't exec into distroless
        run: |
          # Check that container is not running as root
          USER_ID=$(docker exec test-container id -u)
          if [ "$USER_ID" = "0" ]; then
            echo "ERROR: Container is running as root!"
            exit 1
          fi
          echo "Container running as user ID: $USER_ID"

      - name: Test database persistence
        run: |
          # Create a test volume
          docker volume create test-data
          
          # Stop first container
          docker stop test-container
          docker rm test-container
          
          # Start new container with volume
          docker run -d \
            --name test-persist \
            -p 3148:3147 \
            -v test-data:/data \
            -e DATABASE_PATH=/data/promptliano.db \
            ${{ steps.image.outputs.name }}
          
          sleep 5
          
          # Verify it starts correctly
          docker ps | grep test-persist

      - name: Cleanup
        if: always()
        run: |
          docker stop test-container test-persist || true
          docker rm test-container test-persist || true
          docker volume rm test-data || true

  # Security scanning summary (handled by reusable workflows)
  security-scan:
    name: Security Scan Summary
    needs: [docker-build-alpine, docker-build-distroless, docker-build-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Security scan summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scanning is performed automatically by the reusable Docker build workflows." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scanned Images:" >> $GITHUB_STEP_SUMMARY
          echo "- 🏔️ **Alpine**: ${{ needs.docker-build-alpine.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 **Distroless**: ${{ needs.docker-build-distroless.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏭 **Production**: ${{ needs.docker-build-production.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check individual workflow runs for detailed security scan results." >> $GITHUB_STEP_SUMMARY

  # Summary job
  docker-ci-summary:
    name: Docker CI Summary
    if: always()
    needs: [lint, docker-build-alpine, docker-build-distroless, docker-build-production, test-containers, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## Docker CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "✅ Dockerfile linting passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Dockerfile linting failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check all docker build jobs
          if [ "${{ needs.docker-build-alpine.result }}" == "success" ] && \
             [ "${{ needs.docker-build-distroless.result }}" == "success" ] && \
             [ "${{ needs.docker-build-production.result }}" == "success" ]; then
            echo "✅ All Docker images built successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some Docker image builds failed" >> $GITHUB_STEP_SUMMARY
            echo "  - Alpine: ${{ needs.docker-build-alpine.result }}" >> $GITHUB_STEP_SUMMARY
            echo "  - Distroless: ${{ needs.docker-build-distroless.result }}" >> $GITHUB_STEP_SUMMARY
            echo "  - Production: ${{ needs.docker-build-production.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-containers.result }}" == "success" ]; then
            echo "✅ Container tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Container tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ Security scans passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "- Alpine: Lightweight general-purpose image (~249MB)" >> $GITHUB_STEP_SUMMARY
          echo "- Distroless: Maximum security image (~100MB)" >> $GITHUB_STEP_SUMMARY
          echo "- Production: Full 4-stage build with all features" >> $GITHUB_STEP_SUMMARY