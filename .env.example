# Promptliano Environment Configuration Example
# Copy this file to .env and configure for your environment

# Server Configuration
# NODE_ENV=production
# SERVER_PORT=3147
# SERVER_HOST=0.0.0.0
# HOST=0.0.0.0
# LOG_LEVEL=info
# IDLE_TIMEOUT=255
# API_BASE_PATH=/api
# STATIC_PATH=./client-dist
PROMPTLIANO_DEBUG_STREAM=false
FILE_SYNC_DEBUG_LOGS=false
OPENROUTER_SITE_URL=https://promptliano.com
OPENROUTER_APP_TITLE=Promptliano

# Database Configuration
# DATABASE_PATH=/data/promptliano.db
# PROMPTLIANO_DATA_DIR=/data
# DATABASE_BACKUP_ENABLED=true
# DATABASE_BACKUP_INTERVAL=3600000
# DATABASE_MAX_BACKUPS=10
# DATABASE_WAL_MODE=true
# DATABASE_CACHE_SIZE=64
# DATABASE_TEMP_STORE=memory
# DATABASE_MMAP_SIZE=268435456

# Encryption key for provider API keys (OPTIONAL)
# Promptliano automatically generates and stores an encryption key
# Only set this if you want to use your own key instead
# Generate one with: bun run generate-encryption-key
# PROMPTLIANO_ENCRYPTION_KEY=

# CORS Configuration
# CORS_ORIGIN=http://localhost:3147
# For multiple origins: CORS_ORIGIN=http://localhost:3147,https://app.example.com

# # Rate Limiting
# RATE_LIMIT_ENABLED=true
# RATE_LIMIT_WINDOW_MS=900000
# RATE_LIMIT_MAX_REQUESTS=500

# AI Provider Keys (store in Docker secrets for production)
# OPENAI_API_KEY=sk-...
# ANTHROPIC_API_KEY=sk-ant-...
# GROQ_API_KEY=gsk_...
# TOGETHER_API_KEY=together_...
# XAI_API_KEY=xai-...
# GOOGLE_GENERATIVE_AI_API_KEY=AIza...
# OPENROUTER_API_KEY=sk-or-v1-...
# COPILOT_API_KEY=dummy
#
# Note: For OpenRouter, the server will also include default attribution headers (Referer and X-Title).
# You can override them via environment if desired:


# GitHub Copilot via OpenAI-compatible proxy (copilot-api)
# - Start the upstream proxy: `npx copilot-api@latest start --port 4141 --rate-limit 30`
# - Or run via Docker (see repo)
# - Option A (direct): point Promptliano at the upstream /v1
#     COPILOT_BASE_URL=http://127.0.0.1:4141/v1
# - Option B (built-in reverse proxy):
#     COPILOT_PROXY_UPSTREAM=http://127.0.0.1:4141/v1
#     COPILOT_BASE_URL=http://127.0.0.1:${SERVER_PORT}/api/proxy/copilot/v1
#   The built-in proxy will forward /api/proxy/copilot/v1/* to the upstream and inject Authorization if missing.
## Keyless providers (optional, for dev/testing)
# Set to true to allow fallback to a dummy token when no key is configured
# ALLOW_KEYLESS_COPILOT=true
# ALLOW_KEYLESS_CUSTOM=true

# Authentication
# CRITICAL: JWT_SECRET is REQUIRED in production
# Generate with: openssl rand -base64 64
# NEVER use weak secrets like "secret", "password", or defaults
# Minimum length: 32 characters
# Recommended: 64+ character random base64 string
# JWT_SECRET=<MUST_BE_SET_IN_PRODUCTION>
#
# For development, a secure random secret is auto-generated per session.
# To persist a secret across restarts:
#   openssl rand -base64 64 > .jwt-secret
#   echo "JWT_SECRET=$(cat .jwt-secret)" >> .env
#
# Example strong secret (DO NOT use this exact value):
# JWT_SECRET=dGhpc2lzYW5leGFtcGxlc2VjcmV0dGhhdHlvdXNob3VsZG5vdHVzZTEyMzQ1Njc4OTA=
#
# JWT_ACCESS_EXPIRY=15m
# JWT_REFRESH_EXPIRY=7d
JWT_EXPIRY=7d

# PostgreSQL (if using instead of SQLite)
# POSTGRES_HOST=postgres
# POSTGRES_PORT=5432
# POSTGRES_DB=promptliano
# POSTGRES_USER=promptliano
# POSTGRES_PASSWORD=changeme

# Redis Configuration (for caching/sessions)
# REDIS_HOST=redis
# REDIS_PORT=6379
# REDIS_PASSWORD=changeme

# File Storage
# MAX_FILE_SIZE=10485760
# ALLOWED_FILE_TYPES=.txt,.md,.json,.yaml,.yml,.ts,.tsx,.js,.jsx

# # Runtime Configuration
# DEBUG=false
# MAX_REQUEST_SIZE=50mb
# REQUEST_TIMEOUT=30000
# COMPRESSION_ENABLED=true

# # Feature Flags
# MCP_ENABLED=true
# MCP_TIMEOUT=30000
# WEBSOCKET_ENABLED=true
# JOB_QUEUE_ENABLED=true

# MCP stdio server configuration (advanced)
# Provide a JSON array describing additional MCP servers to launch alongside the
# built-in promptliano MCP. Uncomment one of the examples below—or craft your own
# array—to extend the available tool suite.

# Example 1: rely on the default promptliano tools only
# MCP_STDIO_SERVERS=[]

# Example 2: add a filesystem helper implemented as a local Node script
# MCP_STDIO_SERVERS=[{"name":"fs","command":"node","args":["/absolute/path/to/fs-mcp.js"]}]

# Example 3: run multiple servers (mixing Bun, GitHub MCP, and a Python agent)
# MCP_STDIO_SERVERS=[
#   {"name":"fs","command":"bun","args":["run","fs-mcp"],"cwd":"/Users/you/dev/mcp"},
#   {"name":"github","command":"gh-mcp","args":["--stdio"],"cwd":"/Users/you/.config/gh-mcp"},
#   {"name":"agents","command":"python","args":["-m","agents_mcp","--profile","default"]}
# ]

# Example 4: point to a shell script wrapper that starts a bespoke tool suite
# MCP_STDIO_SERVERS=[{"name":"research","command":"/Users/you/scripts/start-research-mcp.sh"}]

# File Search Backend
# Options: sg | rg | fts | like
# - sg: ast-grep (default) for structural AST search (auto-detect bin: ast-grep or sg)
# - rg: ripgrep fast text search if you prefer text-based
# - fts: minimal SQLite FTS table if present
# - like: SQL LIKE fallback when sg/rg/FTS are unavailable
# FILE_SEARCH_BACKEND=sg
# Optional: custom paths to binaries if not on PATH
# FILE_SEARCH_ASTGREP_PATH=/usr/local/bin/ast-grep
# FILE_SEARCH_RIPGREP_PATH=/usr/local/bin/rg

# Monitoring (optional)
# SENTRY_DSN=https://...@sentry.io/...
# OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318

# Development Only
# HOT_RELOAD=true
# DEBUG=true
# CLIENT_DEV_PORT=5173
# Development tools (disabled by default; set to true and restart dev server to launch automatically)
# DEVTOOLS_ENABLE_DRIZZLE_STUDIO=false
# DEVTOOLS_ENABLE_MCP_INSPECTOR=false
# Optional: override MCP Inspector ports
# MCP_INSPECTOR_CLIENT_PORT=6274
# MCP_INSPECTOR_SERVER_PORT=6277
