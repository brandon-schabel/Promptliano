import { z } from '@hono/zod-openapi'
import { ProjectIdParamsSchema } from './project.schemas'
import {
  unixTSOptionalSchemaSpec,
  unixTSSchemaSpec,
  entityIdSchema,
  entityIdOptionalSchema,
  entityIdCoercibleSchema
} from './schema-utils'

// Import only types from database (not runtime schemas to avoid Vite bundling issues)
import type { Prompt as DatabasePrompt } from '@promptliano/database'

// Recreate schema locally to avoid runtime imports from database package
export const PromptSchema = z.object({
  id: z.number(),
  projectId: z.number(),
  title: z.string(),
  content: z.string(),
  description: z.string().nullable(),
  tags: z.array(z.string()),
  createdAt: z.number(),
  updatedAt: z.number()
}).openapi('Prompt')

// Type verification to ensure schema matches database type
const _promptTypeCheck: z.infer<typeof PromptSchema> = {} as DatabasePrompt

// API Request Body Schemas - derived from database schema
export const CreatePromptBodySchema = PromptSchema.pick({
  title: true,
  content: true,
  projectId: true
}).extend({
  projectId: entityIdOptionalSchema,
  title: z.string().min(1).openapi({ example: 'My New Prompt' }),
  content: z.string().min(1).openapi({ example: 'Translate this text: {text}' })
}).openapi('CreatePromptRequestBody')

export const UpdatePromptBodySchema = CreatePromptBodySchema.pick({
  title: true,
  content: true
}).partial().refine(
  (data) => data.title || data.content,
  {
    message: 'At least one of title or content must be provided for update'
  }
).openapi('UpdatePromptRequestBody')

// --- Request Parameter Schemas ---
export const PromptIdParamsSchema = z
  .object({
    promptId: entityIdCoercibleSchema.openapi({ param: { name: 'promptId', in: 'path' } })
  })
  .openapi('PromptIdParams')

export const ProjectAndPromptIdParamsSchema = z
  .object({
    projectId: entityIdCoercibleSchema.openapi({ param: { name: 'projectId', in: 'path' } }),
    promptId: entityIdCoercibleSchema.openapi({ param: { name: 'promptId', in: 'path' } })
  })
  .openapi('ProjectAndPromptIdParams')

export const PromptResponseSchema = z
  .object({
    success: z.literal(true),
    data: PromptSchema
  })
  .openapi('PromptResponse')

export const PromptListResponseSchema = z
  .object({
    success: z.literal(true),
    data: z.array(PromptSchema)
  })
  .openapi('PromptListResponse')

// Export types if needed elsewhere
export type CreatePromptBody = z.infer<typeof CreatePromptBodySchema>
export type UpdatePromptBody = z.infer<typeof UpdatePromptBodySchema>
export type PromptIdParams = z.infer<typeof PromptIdParamsSchema>
export type ProjectAndPromptIdParams = z.infer<typeof ProjectAndPromptIdParamsSchema>
// Note: ProjectIdParams is exported from project.schemas.ts to avoid conflicts

// --- Request Body Schema ---
export const OptimizeUserInputRequestSchema = z
  .object({
    projectId: entityIdSchema,
    userContext: z.string().min(1).openapi({
      example: 'Make my login form better.',
      description: "The user's initial prompt or context to be optimized."
    })
  })
  .openapi('OptimizePromptRequest')

export const OptimizePromptResponseSchema = z
  .object({
    success: z.literal(true).openapi({ description: 'Indicates successful optimization' }),
    data: z.object({
      optimizedPrompt: z.string().openapi({
        example:
          'Optimize the user experience for the login form, focusing on clarity, security, and accessibility. Suggest improvements for field labels, error handling, password requirements display, and button text.',
        description: 'The optimized prompt generated by the service.'
      })
    })
  })
  .openapi('OptimizePromptResponse')

export const PromptProjectSchema = z.object({
  id: entityIdSchema,
  promptId: entityIdSchema,
  projectId: entityIdSchema
})

// --- Suggest Prompts Schemas ---
export const SuggestPromptsRequestSchema = z
  .object({
    userInput: z.string().min(1).openapi({
      example: 'help me implement authentication',
      description: 'The user input describing what they want to accomplish'
    }),
    limit: z.number().int().positive().max(10).optional().default(5).openapi({
      example: 5,
      description: 'Maximum number of prompts to suggest (default: 5, max: 10)'
    })
  })
  .openapi('SuggestPromptsRequest')

export const SuggestPromptsResponseSchema = z
  .object({
    success: z.literal(true),
    data: z.object({
      prompts: z.array(PromptSchema).openapi({
        description: 'Array of suggested prompts ordered by relevance (most relevant first)'
      })
    })
  })
  .openapi('SuggestPromptsResponse')

// Export types if needed elsewhere
export type OptimizePromptRequest = z.infer<typeof OptimizeUserInputRequestSchema>
export type Prompt = z.infer<typeof PromptSchema>
export type PromptListResponse = z.infer<typeof PromptListResponseSchema>
export type PromptResponse = z.infer<typeof PromptResponseSchema>
export type PromptProject = z.infer<typeof PromptProjectSchema>
export type SuggestPromptsRequest = z.infer<typeof SuggestPromptsRequestSchema>
export type SuggestPromptsResponse = z.infer<typeof SuggestPromptsResponseSchema>
