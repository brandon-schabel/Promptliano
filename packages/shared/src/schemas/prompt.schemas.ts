import { z } from '@hono/zod-openapi'
import { ProjectIdParamsSchema } from './project.schemas'

export const PromptSchema = z
  .object({
    id: z.number().openapi({ example: 1716537600000, description: 'Prompt ID' }),
    name: z.string().openapi({ example: 'Code Refactoring Prompt', description: 'Prompt name' }),
    content: z
      .string()
      .openapi({
        example: 'Refactor the following code to be more efficient: {code}',
        description: 'Prompt content template'
      }),
    projectId: z
      // unix timestamp in milliseonds
      .number()
      .optional()
      .openapi({ example: 1716537600000, description: 'Optional Project ID this prompt is linked to (contextual)' }),
    created: z.number().openapi({ example: 1716537600000, description: 'Creation timestamp (ISO 8601)' }),
    updated: z.number().openapi({ example: 1716537600000, description: 'Last update timestamp (ISO 8601)' })
  })
  .openapi('Prompt')

export const CreatePromptBodySchema = z
  .object({
    // Allow projectId to be optional during creation, linking can happen separately or via this field
    projectId: z.number().optional().openapi({ example: 1716537600000, description: 'Optional Project ID to link the prompt to upon creation' }),
    name: z.string().min(1).openapi({ example: 'My New Prompt' }),
    content: z.string().min(1).openapi({ example: 'Translate this text: {text}' })
  })
  .openapi('CreatePromptRequestBody')

export const UpdatePromptBodySchema = z
  .object({
    name: z.string().min(1).optional().openapi({ example: 'Updated Prompt Name' }),
    content: z.string().min(1).optional().openapi({ example: 'Updated content: {variable}' })
  })
  .refine((data) => data.name || data.content, {
    message: 'At least one of name or content must be provided for update'
  })
  .openapi('UpdatePromptRequestBody')

// --- Request Parameter Schemas ---
export const PromptIdParamsSchema = z
  .object({
    promptId: z
      .number()
      .openapi({
        param: { name: 'promptId', in: 'path' },
        example: 1716537600000,
        description: 'The ID of the prompt'
      })
  })
  .openapi('PromptIdParams')

export const ProjectAndPromptIdParamsSchema = z
  .object({
    projectId: z
      .number()
      .openapi({
        param: { name: 'projectId', in: 'path' },
        example: 1716537600000,
        description: 'The ID of the project'
      }),
    promptId: z
      .number()
      .openapi({
        param: { name: 'promptId', in: 'path' },
        example: 1716537600000,
        description: 'The ID of the prompt'
      })
  })
  .openapi('ProjectAndPromptIdParams')

export const PromptResponseSchema = z
  .object({
    success: z.literal(true),
    data: PromptSchema
  })
  .openapi('PromptResponse')

export const PromptListResponseSchema = z
  .object({
    success: z.literal(true),
    data: z.array(PromptSchema)
  })
  .openapi('PromptListResponse')


// Export types if needed elsewhere
export type CreatePromptBody = z.infer<typeof CreatePromptBodySchema>
export type UpdatePromptBody = z.infer<typeof UpdatePromptBodySchema>
export type PromptIdParams = z.infer<typeof PromptIdParamsSchema>
export type ProjectIdParams = z.infer<typeof ProjectIdParamsSchema>
export type ProjectAndPromptIdParams = z.infer<typeof ProjectAndPromptIdParamsSchema>

// --- Request Body Schema ---
export const OptimizeUserInputRequestSchema = z
  .object({
    projectId: z.number().openapi({
      example: 1716537600000,
      description: 'The ID of the project'
    }),
    userContext: z.string().min(1).openapi({
      example: 'Make my login form better.',
      description: "The user's initial prompt or context to be optimized."
    })
  })
  .openapi('OptimizePromptRequest')

export const OptimizePromptResponseSchema = z
  .object({
    success: z.literal(true).openapi({ description: 'Indicates successful optimization' }),
    data: z.object({
      optimizedPrompt: z.string().openapi({
        example:
          'Optimize the user experience for the login form, focusing on clarity, security, and accessibility. Suggest improvements for field labels, error handling, password requirements display, and button text.',
        description: 'The optimized prompt generated by the service.'
      })
    })
  })
  .openapi('OptimizePromptResponse')

export const PromptProjectSchema = z.object({
  id: z.number(),
  promptId: z.number(),
  projectId: z.number()
})

// Export types if needed elsewhere
export type OptimizePromptRequest = z.infer<typeof OptimizeUserInputRequestSchema>
export type Prompt = z.infer<typeof PromptSchema>
export type PromptListResponse = z.infer<typeof PromptListResponseSchema>
export type PromptResponse = z.infer<typeof PromptResponseSchema>
export type PromptProject = z.infer<typeof PromptProjectSchema>
