// packages/shared/src/validation/promptimizer-api-validation.ts
import { z } from '@hono/zod-openapi';
import { ApiErrorResponseSchema } from './chat-api-validation'; // Reuse common schemas

// --- Request Body Schema ---
export const OptimizePromptRequestSchema = z.object({
    userContext: z.string().min(1).openapi({
        example: "Make my login form better.",
        description: "The user's initial prompt or context to be optimized."
    }),
    // Add other potential fields if needed, e.g., targetAudience, desiredTone etc.
}).openapi('OptimizePromptRequest');


// --- Response Schema ---
export const OptimizePromptResponseSchema = z.object({
    success: z.literal(true).openapi({ description: 'Indicates successful optimization' }),
    data: z.object({
        optimizedPrompt: z.string().openapi({
            example: "Optimize the user experience for the login form, focusing on clarity, security, and accessibility. Suggest improvements for field labels, error handling, password requirements display, and button text.",
            description: "The optimized prompt generated by the service."
        })
    })
}).openapi('OptimizePromptResponse');

// --- Validation Object (optional, follows pattern) ---
export const promptimizerApiValidation = {
    optimize: {
        body: OptimizePromptRequestSchema
    }
} as const;

// Export types if needed elsewhere
export type OptimizePromptRequest = z.infer<typeof OptimizePromptRequestSchema>;