// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getChats, postChats, getChatsByChatIdMessages, getModels, postAiChat, postChatsByChatIdFork, postChatsByChatIdForkByMessageId, deleteMessagesByMessageId, deleteChatsByChatId, patchChatsByChatId, postApiStructuredOutputs, postApiTickets, deleteApiTicketsByTicketId, getApiTicketsByTicketId, patchApiTicketsByTicketId, postApiTicketsByTicketIdLinkFiles, postApiTicketsByTicketIdSuggestFiles, postApiTicketsByTicketIdSuggestTasks, getApiProjectsByProjectIdTickets, getApiProjectsByProjectIdTicketsWithCount, getApiProjectsByProjectIdTicketsWithTasks, getApiTicketsByTicketIdTasks, postApiTicketsByTicketIdTasks, deleteApiTicketsByTicketIdTasksByTaskId, patchApiTicketsByTicketIdTasksByTaskId, patchApiTicketsByTicketIdTasksReorder, postApiTicketsByTicketIdAutoGenerateTasks, getApiTicketsBulkTasks, getApiProjects, postApiProjects, deleteApiProjectsByProjectId, getApiProjectsByProjectId, patchApiProjectsByProjectId, postApiProjectsByProjectIdSync, getApiProjectsByProjectIdFiles, postApiProjectsByProjectIdRefresh, getApiProjectsByProjectIdFileSummaries, postApiProjectsByProjectIdSummarize, postApiProjectsByProjectIdResummarizeAll, postApiProjectsByProjectIdRemoveSummaries, getApiProjectsByProjectIdSummary, postApiProjectsByProjectIdSuggestFiles, getApiKeys, postApiKeys, deleteApiKeysByKeyId, getApiKeysByKeyId, patchApiKeysByKeyId, getApiAdminEnvInfo, getApiAdminSystemStatus, postApiFileAiChange, getApiFileAiChangeByFileChangeId, postApiFileAiChangeByFileChangeIdConfirm, getApiPrompts, postApiPrompts, getApiProjectsByProjectIdPrompts, deleteApiProjectsByProjectIdPromptsByPromptId, postApiProjectsByProjectIdPromptsByPromptId, deleteApiPromptsByPromptId, getApiPromptsByPromptId, patchApiPromptsByPromptId, postApiPromptOptimize } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { GetChatsData, PostChatsData, PostChatsError, PostChatsResponse, GetChatsByChatIdMessagesData, GetModelsData, PostAiChatData, PostAiChatError, PostAiChatResponse, PostChatsByChatIdForkData, PostChatsByChatIdForkError, PostChatsByChatIdForkResponse, PostChatsByChatIdForkByMessageIdData, PostChatsByChatIdForkByMessageIdError, PostChatsByChatIdForkByMessageIdResponse, DeleteMessagesByMessageIdData, DeleteMessagesByMessageIdError, DeleteMessagesByMessageIdResponse, DeleteChatsByChatIdData, DeleteChatsByChatIdError, DeleteChatsByChatIdResponse, PatchChatsByChatIdData, PatchChatsByChatIdError, PatchChatsByChatIdResponse, PostApiStructuredOutputsData, PostApiStructuredOutputsError, PostApiStructuredOutputsResponse, PostApiTicketsData, PostApiTicketsError, PostApiTicketsResponse, DeleteApiTicketsByTicketIdData, DeleteApiTicketsByTicketIdError, DeleteApiTicketsByTicketIdResponse, GetApiTicketsByTicketIdData, PatchApiTicketsByTicketIdData, PatchApiTicketsByTicketIdError, PatchApiTicketsByTicketIdResponse, PostApiTicketsByTicketIdLinkFilesData, PostApiTicketsByTicketIdLinkFilesError, PostApiTicketsByTicketIdLinkFilesResponse, PostApiTicketsByTicketIdSuggestFilesData, PostApiTicketsByTicketIdSuggestFilesError, PostApiTicketsByTicketIdSuggestFilesResponse, PostApiTicketsByTicketIdSuggestTasksData, PostApiTicketsByTicketIdSuggestTasksError, PostApiTicketsByTicketIdSuggestTasksResponse, GetApiProjectsByProjectIdTicketsData, GetApiProjectsByProjectIdTicketsWithCountData, GetApiProjectsByProjectIdTicketsWithTasksData, GetApiTicketsByTicketIdTasksData, PostApiTicketsByTicketIdTasksData, PostApiTicketsByTicketIdTasksError, PostApiTicketsByTicketIdTasksResponse, DeleteApiTicketsByTicketIdTasksByTaskIdData, DeleteApiTicketsByTicketIdTasksByTaskIdError, DeleteApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksByTaskIdData, PatchApiTicketsByTicketIdTasksByTaskIdError, PatchApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksReorderData, PatchApiTicketsByTicketIdTasksReorderError, PatchApiTicketsByTicketIdTasksReorderResponse, PostApiTicketsByTicketIdAutoGenerateTasksData, PostApiTicketsByTicketIdAutoGenerateTasksError, PostApiTicketsByTicketIdAutoGenerateTasksResponse, GetApiTicketsBulkTasksData, GetApiProjectsData, PostApiProjectsData, PostApiProjectsError, PostApiProjectsResponse, DeleteApiProjectsByProjectIdData, DeleteApiProjectsByProjectIdError, DeleteApiProjectsByProjectIdResponse, GetApiProjectsByProjectIdData, PatchApiProjectsByProjectIdData, PatchApiProjectsByProjectIdError, PatchApiProjectsByProjectIdResponse, PostApiProjectsByProjectIdSyncData, PostApiProjectsByProjectIdSyncError, PostApiProjectsByProjectIdSyncResponse, GetApiProjectsByProjectIdFilesData, PostApiProjectsByProjectIdRefreshData, PostApiProjectsByProjectIdRefreshError, PostApiProjectsByProjectIdRefreshResponse, GetApiProjectsByProjectIdFileSummariesData, PostApiProjectsByProjectIdSummarizeData, PostApiProjectsByProjectIdSummarizeError, PostApiProjectsByProjectIdSummarizeResponse, PostApiProjectsByProjectIdResummarizeAllData, PostApiProjectsByProjectIdResummarizeAllError, PostApiProjectsByProjectIdResummarizeAllResponse, PostApiProjectsByProjectIdRemoveSummariesData, PostApiProjectsByProjectIdRemoveSummariesError, PostApiProjectsByProjectIdRemoveSummariesResponse, GetApiProjectsByProjectIdSummaryData, PostApiProjectsByProjectIdSuggestFilesData, PostApiProjectsByProjectIdSuggestFilesError, PostApiProjectsByProjectIdSuggestFilesResponse, GetApiKeysData, PostApiKeysData, PostApiKeysError, PostApiKeysResponse, DeleteApiKeysByKeyIdData, DeleteApiKeysByKeyIdError, DeleteApiKeysByKeyIdResponse, GetApiKeysByKeyIdData, PatchApiKeysByKeyIdData, PatchApiKeysByKeyIdError, PatchApiKeysByKeyIdResponse, GetApiAdminEnvInfoData, GetApiAdminSystemStatusData, PostApiFileAiChangeData, PostApiFileAiChangeError, PostApiFileAiChangeResponse, GetApiFileAiChangeByFileChangeIdData, PostApiFileAiChangeByFileChangeIdConfirmData, PostApiFileAiChangeByFileChangeIdConfirmError, PostApiFileAiChangeByFileChangeIdConfirmResponse, GetApiPromptsData, PostApiPromptsData, PostApiPromptsError, PostApiPromptsResponse, GetApiProjectsByProjectIdPromptsData, DeleteApiProjectsByProjectIdPromptsByPromptIdData, DeleteApiProjectsByProjectIdPromptsByPromptIdError, DeleteApiProjectsByProjectIdPromptsByPromptIdResponse, PostApiProjectsByProjectIdPromptsByPromptIdData, PostApiProjectsByProjectIdPromptsByPromptIdError, PostApiProjectsByProjectIdPromptsByPromptIdResponse, DeleteApiPromptsByPromptIdData, DeleteApiPromptsByPromptIdError, DeleteApiPromptsByPromptIdResponse, GetApiPromptsByPromptIdData, PatchApiPromptsByPromptIdData, PatchApiPromptsByPromptIdError, PatchApiPromptsByPromptIdResponse, PostApiPromptOptimizeData, PostApiPromptOptimizeError, PostApiPromptOptimizeResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getChatsQueryKey = (options?: Options<GetChatsData>) => createQueryKey('getChats', options);

export const getChatsOptions = (options?: Options<GetChatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChatsQueryKey(options)
    });
};

export const postChatsQueryKey = (options: Options<PostChatsData>) => createQueryKey('postChats', options);

export const postChatsOptions = (options: Options<PostChatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChatsQueryKey(options)
    });
};

export const postChatsMutation = (options?: Partial<Options<PostChatsData>>): UseMutationOptions<PostChatsResponse, PostChatsError, Options<PostChatsData>> => {
    const mutationOptions: UseMutationOptions<PostChatsResponse, PostChatsError, Options<PostChatsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChats({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getChatsByChatIdMessagesQueryKey = (options: Options<GetChatsByChatIdMessagesData>) => createQueryKey('getChatsByChatIdMessages', options);

export const getChatsByChatIdMessagesOptions = (options: Options<GetChatsByChatIdMessagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChatsByChatIdMessages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChatsByChatIdMessagesQueryKey(options)
    });
};

export const getModelsQueryKey = (options: Options<GetModelsData>) => createQueryKey('getModels', options);

export const getModelsOptions = (options: Options<GetModelsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getModels({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getModelsQueryKey(options)
    });
};

export const postAiChatQueryKey = (options: Options<PostAiChatData>) => createQueryKey('postAiChat', options);

export const postAiChatOptions = (options: Options<PostAiChatData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAiChat({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAiChatQueryKey(options)
    });
};

export const postAiChatMutation = (options?: Partial<Options<PostAiChatData>>): UseMutationOptions<PostAiChatResponse, PostAiChatError, Options<PostAiChatData>> => {
    const mutationOptions: UseMutationOptions<PostAiChatResponse, PostAiChatError, Options<PostAiChatData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAiChat({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postChatsByChatIdForkQueryKey = (options: Options<PostChatsByChatIdForkData>) => createQueryKey('postChatsByChatIdFork', options);

export const postChatsByChatIdForkOptions = (options: Options<PostChatsByChatIdForkData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChatsByChatIdFork({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChatsByChatIdForkQueryKey(options)
    });
};

export const postChatsByChatIdForkMutation = (options?: Partial<Options<PostChatsByChatIdForkData>>): UseMutationOptions<PostChatsByChatIdForkResponse, PostChatsByChatIdForkError, Options<PostChatsByChatIdForkData>> => {
    const mutationOptions: UseMutationOptions<PostChatsByChatIdForkResponse, PostChatsByChatIdForkError, Options<PostChatsByChatIdForkData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChatsByChatIdFork({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postChatsByChatIdForkByMessageIdQueryKey = (options: Options<PostChatsByChatIdForkByMessageIdData>) => createQueryKey('postChatsByChatIdForkByMessageId', options);

export const postChatsByChatIdForkByMessageIdOptions = (options: Options<PostChatsByChatIdForkByMessageIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChatsByChatIdForkByMessageId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChatsByChatIdForkByMessageIdQueryKey(options)
    });
};

export const postChatsByChatIdForkByMessageIdMutation = (options?: Partial<Options<PostChatsByChatIdForkByMessageIdData>>): UseMutationOptions<PostChatsByChatIdForkByMessageIdResponse, PostChatsByChatIdForkByMessageIdError, Options<PostChatsByChatIdForkByMessageIdData>> => {
    const mutationOptions: UseMutationOptions<PostChatsByChatIdForkByMessageIdResponse, PostChatsByChatIdForkByMessageIdError, Options<PostChatsByChatIdForkByMessageIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChatsByChatIdForkByMessageId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteMessagesByMessageIdMutation = (options?: Partial<Options<DeleteMessagesByMessageIdData>>): UseMutationOptions<DeleteMessagesByMessageIdResponse, DeleteMessagesByMessageIdError, Options<DeleteMessagesByMessageIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteMessagesByMessageIdResponse, DeleteMessagesByMessageIdError, Options<DeleteMessagesByMessageIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteMessagesByMessageId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteChatsByChatIdMutation = (options?: Partial<Options<DeleteChatsByChatIdData>>): UseMutationOptions<DeleteChatsByChatIdResponse, DeleteChatsByChatIdError, Options<DeleteChatsByChatIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteChatsByChatIdResponse, DeleteChatsByChatIdError, Options<DeleteChatsByChatIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteChatsByChatId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchChatsByChatIdMutation = (options?: Partial<Options<PatchChatsByChatIdData>>): UseMutationOptions<PatchChatsByChatIdResponse, PatchChatsByChatIdError, Options<PatchChatsByChatIdData>> => {
    const mutationOptions: UseMutationOptions<PatchChatsByChatIdResponse, PatchChatsByChatIdError, Options<PatchChatsByChatIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchChatsByChatId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiStructuredOutputsQueryKey = (options?: Options<PostApiStructuredOutputsData>) => createQueryKey('postApiStructuredOutputs', options);

export const postApiStructuredOutputsOptions = (options?: Options<PostApiStructuredOutputsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiStructuredOutputs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiStructuredOutputsQueryKey(options)
    });
};

export const postApiStructuredOutputsMutation = (options?: Partial<Options<PostApiStructuredOutputsData>>): UseMutationOptions<PostApiStructuredOutputsResponse, PostApiStructuredOutputsError, Options<PostApiStructuredOutputsData>> => {
    const mutationOptions: UseMutationOptions<PostApiStructuredOutputsResponse, PostApiStructuredOutputsError, Options<PostApiStructuredOutputsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiStructuredOutputs({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsQueryKey = (options?: Options<PostApiTicketsData>) => createQueryKey('postApiTickets', options);

export const postApiTicketsOptions = (options?: Options<PostApiTicketsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTickets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsQueryKey(options)
    });
};

export const postApiTicketsMutation = (options?: Partial<Options<PostApiTicketsData>>): UseMutationOptions<PostApiTicketsResponse, PostApiTicketsError, Options<PostApiTicketsData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsResponse, PostApiTicketsError, Options<PostApiTicketsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTickets({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiTicketsByTicketIdMutation = (options?: Partial<Options<DeleteApiTicketsByTicketIdData>>): UseMutationOptions<DeleteApiTicketsByTicketIdResponse, DeleteApiTicketsByTicketIdError, Options<DeleteApiTicketsByTicketIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiTicketsByTicketIdResponse, DeleteApiTicketsByTicketIdError, Options<DeleteApiTicketsByTicketIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiTicketsByTicketId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiTicketsByTicketIdQueryKey = (options: Options<GetApiTicketsByTicketIdData>) => createQueryKey('getApiTicketsByTicketId', options);

export const getApiTicketsByTicketIdOptions = (options: Options<GetApiTicketsByTicketIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTicketsByTicketId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTicketsByTicketIdQueryKey(options)
    });
};

export const patchApiTicketsByTicketIdMutation = (options?: Partial<Options<PatchApiTicketsByTicketIdData>>): UseMutationOptions<PatchApiTicketsByTicketIdResponse, PatchApiTicketsByTicketIdError, Options<PatchApiTicketsByTicketIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiTicketsByTicketIdResponse, PatchApiTicketsByTicketIdError, Options<PatchApiTicketsByTicketIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiTicketsByTicketId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsByTicketIdLinkFilesQueryKey = (options: Options<PostApiTicketsByTicketIdLinkFilesData>) => createQueryKey('postApiTicketsByTicketIdLinkFiles', options);

export const postApiTicketsByTicketIdLinkFilesOptions = (options: Options<PostApiTicketsByTicketIdLinkFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdLinkFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdLinkFilesQueryKey(options)
    });
};

export const postApiTicketsByTicketIdLinkFilesMutation = (options?: Partial<Options<PostApiTicketsByTicketIdLinkFilesData>>): UseMutationOptions<PostApiTicketsByTicketIdLinkFilesResponse, PostApiTicketsByTicketIdLinkFilesError, Options<PostApiTicketsByTicketIdLinkFilesData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdLinkFilesResponse, PostApiTicketsByTicketIdLinkFilesError, Options<PostApiTicketsByTicketIdLinkFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdLinkFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsByTicketIdSuggestFilesQueryKey = (options: Options<PostApiTicketsByTicketIdSuggestFilesData>) => createQueryKey('postApiTicketsByTicketIdSuggestFiles', options);

export const postApiTicketsByTicketIdSuggestFilesOptions = (options: Options<PostApiTicketsByTicketIdSuggestFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdSuggestFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdSuggestFilesQueryKey(options)
    });
};

export const postApiTicketsByTicketIdSuggestFilesMutation = (options?: Partial<Options<PostApiTicketsByTicketIdSuggestFilesData>>): UseMutationOptions<PostApiTicketsByTicketIdSuggestFilesResponse, PostApiTicketsByTicketIdSuggestFilesError, Options<PostApiTicketsByTicketIdSuggestFilesData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdSuggestFilesResponse, PostApiTicketsByTicketIdSuggestFilesError, Options<PostApiTicketsByTicketIdSuggestFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdSuggestFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsByTicketIdSuggestTasksQueryKey = (options: Options<PostApiTicketsByTicketIdSuggestTasksData>) => createQueryKey('postApiTicketsByTicketIdSuggestTasks', options);

export const postApiTicketsByTicketIdSuggestTasksOptions = (options: Options<PostApiTicketsByTicketIdSuggestTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdSuggestTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdSuggestTasksQueryKey(options)
    });
};

export const postApiTicketsByTicketIdSuggestTasksMutation = (options?: Partial<Options<PostApiTicketsByTicketIdSuggestTasksData>>): UseMutationOptions<PostApiTicketsByTicketIdSuggestTasksResponse, PostApiTicketsByTicketIdSuggestTasksError, Options<PostApiTicketsByTicketIdSuggestTasksData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdSuggestTasksResponse, PostApiTicketsByTicketIdSuggestTasksError, Options<PostApiTicketsByTicketIdSuggestTasksData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdSuggestTasks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdTicketsQueryKey = (options: Options<GetApiProjectsByProjectIdTicketsData>) => createQueryKey('getApiProjectsByProjectIdTickets', options);

export const getApiProjectsByProjectIdTicketsOptions = (options: Options<GetApiProjectsByProjectIdTicketsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdTickets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdTicketsQueryKey(options)
    });
};

export const getApiProjectsByProjectIdTicketsWithCountQueryKey = (options: Options<GetApiProjectsByProjectIdTicketsWithCountData>) => createQueryKey('getApiProjectsByProjectIdTicketsWithCount', options);

export const getApiProjectsByProjectIdTicketsWithCountOptions = (options: Options<GetApiProjectsByProjectIdTicketsWithCountData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdTicketsWithCount({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdTicketsWithCountQueryKey(options)
    });
};

export const getApiProjectsByProjectIdTicketsWithTasksQueryKey = (options: Options<GetApiProjectsByProjectIdTicketsWithTasksData>) => createQueryKey('getApiProjectsByProjectIdTicketsWithTasks', options);

export const getApiProjectsByProjectIdTicketsWithTasksOptions = (options: Options<GetApiProjectsByProjectIdTicketsWithTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdTicketsWithTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdTicketsWithTasksQueryKey(options)
    });
};

export const getApiTicketsByTicketIdTasksQueryKey = (options: Options<GetApiTicketsByTicketIdTasksData>) => createQueryKey('getApiTicketsByTicketIdTasks', options);

export const getApiTicketsByTicketIdTasksOptions = (options: Options<GetApiTicketsByTicketIdTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTicketsByTicketIdTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTicketsByTicketIdTasksQueryKey(options)
    });
};

export const postApiTicketsByTicketIdTasksQueryKey = (options: Options<PostApiTicketsByTicketIdTasksData>) => createQueryKey('postApiTicketsByTicketIdTasks', options);

export const postApiTicketsByTicketIdTasksOptions = (options: Options<PostApiTicketsByTicketIdTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdTasksQueryKey(options)
    });
};

export const postApiTicketsByTicketIdTasksMutation = (options?: Partial<Options<PostApiTicketsByTicketIdTasksData>>): UseMutationOptions<PostApiTicketsByTicketIdTasksResponse, PostApiTicketsByTicketIdTasksError, Options<PostApiTicketsByTicketIdTasksData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdTasksResponse, PostApiTicketsByTicketIdTasksError, Options<PostApiTicketsByTicketIdTasksData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdTasks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiTicketsByTicketIdTasksByTaskIdMutation = (options?: Partial<Options<DeleteApiTicketsByTicketIdTasksByTaskIdData>>): UseMutationOptions<DeleteApiTicketsByTicketIdTasksByTaskIdResponse, DeleteApiTicketsByTicketIdTasksByTaskIdError, Options<DeleteApiTicketsByTicketIdTasksByTaskIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiTicketsByTicketIdTasksByTaskIdResponse, DeleteApiTicketsByTicketIdTasksByTaskIdError, Options<DeleteApiTicketsByTicketIdTasksByTaskIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiTicketsByTicketIdTasksByTaskId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchApiTicketsByTicketIdTasksByTaskIdMutation = (options?: Partial<Options<PatchApiTicketsByTicketIdTasksByTaskIdData>>): UseMutationOptions<PatchApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksByTaskIdError, Options<PatchApiTicketsByTicketIdTasksByTaskIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksByTaskIdError, Options<PatchApiTicketsByTicketIdTasksByTaskIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiTicketsByTicketIdTasksByTaskId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchApiTicketsByTicketIdTasksReorderMutation = (options?: Partial<Options<PatchApiTicketsByTicketIdTasksReorderData>>): UseMutationOptions<PatchApiTicketsByTicketIdTasksReorderResponse, PatchApiTicketsByTicketIdTasksReorderError, Options<PatchApiTicketsByTicketIdTasksReorderData>> => {
    const mutationOptions: UseMutationOptions<PatchApiTicketsByTicketIdTasksReorderResponse, PatchApiTicketsByTicketIdTasksReorderError, Options<PatchApiTicketsByTicketIdTasksReorderData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiTicketsByTicketIdTasksReorder({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsByTicketIdAutoGenerateTasksQueryKey = (options: Options<PostApiTicketsByTicketIdAutoGenerateTasksData>) => createQueryKey('postApiTicketsByTicketIdAutoGenerateTasks', options);

export const postApiTicketsByTicketIdAutoGenerateTasksOptions = (options: Options<PostApiTicketsByTicketIdAutoGenerateTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdAutoGenerateTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdAutoGenerateTasksQueryKey(options)
    });
};

export const postApiTicketsByTicketIdAutoGenerateTasksMutation = (options?: Partial<Options<PostApiTicketsByTicketIdAutoGenerateTasksData>>): UseMutationOptions<PostApiTicketsByTicketIdAutoGenerateTasksResponse, PostApiTicketsByTicketIdAutoGenerateTasksError, Options<PostApiTicketsByTicketIdAutoGenerateTasksData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdAutoGenerateTasksResponse, PostApiTicketsByTicketIdAutoGenerateTasksError, Options<PostApiTicketsByTicketIdAutoGenerateTasksData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdAutoGenerateTasks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiTicketsBulkTasksQueryKey = (options: Options<GetApiTicketsBulkTasksData>) => createQueryKey('getApiTicketsBulkTasks', options);

export const getApiTicketsBulkTasksOptions = (options: Options<GetApiTicketsBulkTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTicketsBulkTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTicketsBulkTasksQueryKey(options)
    });
};

export const getApiProjectsQueryKey = (options?: Options<GetApiProjectsData>) => createQueryKey('getApiProjects', options);

export const getApiProjectsOptions = (options?: Options<GetApiProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsQueryKey(options)
    });
};

export const postApiProjectsQueryKey = (options?: Options<PostApiProjectsData>) => createQueryKey('postApiProjects', options);

export const postApiProjectsOptions = (options?: Options<PostApiProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsQueryKey(options)
    });
};

export const postApiProjectsMutation = (options?: Partial<Options<PostApiProjectsData>>): UseMutationOptions<PostApiProjectsResponse, PostApiProjectsError, Options<PostApiProjectsData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsResponse, PostApiProjectsError, Options<PostApiProjectsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjects({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiProjectsByProjectIdMutation = (options?: Partial<Options<DeleteApiProjectsByProjectIdData>>): UseMutationOptions<DeleteApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdError, Options<DeleteApiProjectsByProjectIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdError, Options<DeleteApiProjectsByProjectIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiProjectsByProjectId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdQueryKey = (options: Options<GetApiProjectsByProjectIdData>) => createQueryKey('getApiProjectsByProjectId', options);

export const getApiProjectsByProjectIdOptions = (options: Options<GetApiProjectsByProjectIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdQueryKey(options)
    });
};

export const patchApiProjectsByProjectIdMutation = (options?: Partial<Options<PatchApiProjectsByProjectIdData>>): UseMutationOptions<PatchApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdError, Options<PatchApiProjectsByProjectIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdError, Options<PatchApiProjectsByProjectIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiProjectsByProjectId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdSyncQueryKey = (options: Options<PostApiProjectsByProjectIdSyncData>) => createQueryKey('postApiProjectsByProjectIdSync', options);

export const postApiProjectsByProjectIdSyncOptions = (options: Options<PostApiProjectsByProjectIdSyncData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdSync({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdSyncQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSyncMutation = (options?: Partial<Options<PostApiProjectsByProjectIdSyncData>>): UseMutationOptions<PostApiProjectsByProjectIdSyncResponse, PostApiProjectsByProjectIdSyncError, Options<PostApiProjectsByProjectIdSyncData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdSyncResponse, PostApiProjectsByProjectIdSyncError, Options<PostApiProjectsByProjectIdSyncData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdSync({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdFilesQueryKey = (options: Options<GetApiProjectsByProjectIdFilesData>) => createQueryKey('getApiProjectsByProjectIdFiles', options);

export const getApiProjectsByProjectIdFilesOptions = (options: Options<GetApiProjectsByProjectIdFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdFilesQueryKey(options)
    });
};

export const postApiProjectsByProjectIdRefreshQueryKey = (options: Options<PostApiProjectsByProjectIdRefreshData>) => createQueryKey('postApiProjectsByProjectIdRefresh', options);

export const postApiProjectsByProjectIdRefreshOptions = (options: Options<PostApiProjectsByProjectIdRefreshData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdRefresh({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdRefreshQueryKey(options)
    });
};

export const postApiProjectsByProjectIdRefreshMutation = (options?: Partial<Options<PostApiProjectsByProjectIdRefreshData>>): UseMutationOptions<PostApiProjectsByProjectIdRefreshResponse, PostApiProjectsByProjectIdRefreshError, Options<PostApiProjectsByProjectIdRefreshData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdRefreshResponse, PostApiProjectsByProjectIdRefreshError, Options<PostApiProjectsByProjectIdRefreshData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdRefresh({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdFileSummariesQueryKey = (options: Options<GetApiProjectsByProjectIdFileSummariesData>) => createQueryKey('getApiProjectsByProjectIdFileSummaries', options);

export const getApiProjectsByProjectIdFileSummariesOptions = (options: Options<GetApiProjectsByProjectIdFileSummariesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdFileSummaries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdFileSummariesQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSummarizeQueryKey = (options: Options<PostApiProjectsByProjectIdSummarizeData>) => createQueryKey('postApiProjectsByProjectIdSummarize', options);

export const postApiProjectsByProjectIdSummarizeOptions = (options: Options<PostApiProjectsByProjectIdSummarizeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdSummarize({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdSummarizeQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSummarizeMutation = (options?: Partial<Options<PostApiProjectsByProjectIdSummarizeData>>): UseMutationOptions<PostApiProjectsByProjectIdSummarizeResponse, PostApiProjectsByProjectIdSummarizeError, Options<PostApiProjectsByProjectIdSummarizeData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdSummarizeResponse, PostApiProjectsByProjectIdSummarizeError, Options<PostApiProjectsByProjectIdSummarizeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdSummarize({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdResummarizeAllQueryKey = (options: Options<PostApiProjectsByProjectIdResummarizeAllData>) => createQueryKey('postApiProjectsByProjectIdResummarizeAll', options);

export const postApiProjectsByProjectIdResummarizeAllOptions = (options: Options<PostApiProjectsByProjectIdResummarizeAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdResummarizeAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdResummarizeAllQueryKey(options)
    });
};

export const postApiProjectsByProjectIdResummarizeAllMutation = (options?: Partial<Options<PostApiProjectsByProjectIdResummarizeAllData>>): UseMutationOptions<PostApiProjectsByProjectIdResummarizeAllResponse, PostApiProjectsByProjectIdResummarizeAllError, Options<PostApiProjectsByProjectIdResummarizeAllData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdResummarizeAllResponse, PostApiProjectsByProjectIdResummarizeAllError, Options<PostApiProjectsByProjectIdResummarizeAllData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdResummarizeAll({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdRemoveSummariesQueryKey = (options: Options<PostApiProjectsByProjectIdRemoveSummariesData>) => createQueryKey('postApiProjectsByProjectIdRemoveSummaries', options);

export const postApiProjectsByProjectIdRemoveSummariesOptions = (options: Options<PostApiProjectsByProjectIdRemoveSummariesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdRemoveSummaries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdRemoveSummariesQueryKey(options)
    });
};

export const postApiProjectsByProjectIdRemoveSummariesMutation = (options?: Partial<Options<PostApiProjectsByProjectIdRemoveSummariesData>>): UseMutationOptions<PostApiProjectsByProjectIdRemoveSummariesResponse, PostApiProjectsByProjectIdRemoveSummariesError, Options<PostApiProjectsByProjectIdRemoveSummariesData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdRemoveSummariesResponse, PostApiProjectsByProjectIdRemoveSummariesError, Options<PostApiProjectsByProjectIdRemoveSummariesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdRemoveSummaries({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdSummaryQueryKey = (options: Options<GetApiProjectsByProjectIdSummaryData>) => createQueryKey('getApiProjectsByProjectIdSummary', options);

export const getApiProjectsByProjectIdSummaryOptions = (options: Options<GetApiProjectsByProjectIdSummaryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdSummary({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdSummaryQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSuggestFilesQueryKey = (options: Options<PostApiProjectsByProjectIdSuggestFilesData>) => createQueryKey('postApiProjectsByProjectIdSuggestFiles', options);

export const postApiProjectsByProjectIdSuggestFilesOptions = (options: Options<PostApiProjectsByProjectIdSuggestFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdSuggestFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdSuggestFilesQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSuggestFilesMutation = (options?: Partial<Options<PostApiProjectsByProjectIdSuggestFilesData>>): UseMutationOptions<PostApiProjectsByProjectIdSuggestFilesResponse, PostApiProjectsByProjectIdSuggestFilesError, Options<PostApiProjectsByProjectIdSuggestFilesData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdSuggestFilesResponse, PostApiProjectsByProjectIdSuggestFilesError, Options<PostApiProjectsByProjectIdSuggestFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdSuggestFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiKeysQueryKey = (options?: Options<GetApiKeysData>) => createQueryKey('getApiKeys', options);

export const getApiKeysOptions = (options?: Options<GetApiKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiKeysQueryKey(options)
    });
};

export const postApiKeysQueryKey = (options: Options<PostApiKeysData>) => createQueryKey('postApiKeys', options);

export const postApiKeysOptions = (options: Options<PostApiKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiKeysQueryKey(options)
    });
};

export const postApiKeysMutation = (options?: Partial<Options<PostApiKeysData>>): UseMutationOptions<PostApiKeysResponse, PostApiKeysError, Options<PostApiKeysData>> => {
    const mutationOptions: UseMutationOptions<PostApiKeysResponse, PostApiKeysError, Options<PostApiKeysData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiKeys({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiKeysByKeyIdMutation = (options?: Partial<Options<DeleteApiKeysByKeyIdData>>): UseMutationOptions<DeleteApiKeysByKeyIdResponse, DeleteApiKeysByKeyIdError, Options<DeleteApiKeysByKeyIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiKeysByKeyIdResponse, DeleteApiKeysByKeyIdError, Options<DeleteApiKeysByKeyIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiKeysByKeyId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiKeysByKeyIdQueryKey = (options: Options<GetApiKeysByKeyIdData>) => createQueryKey('getApiKeysByKeyId', options);

export const getApiKeysByKeyIdOptions = (options: Options<GetApiKeysByKeyIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiKeysByKeyId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiKeysByKeyIdQueryKey(options)
    });
};

export const patchApiKeysByKeyIdMutation = (options?: Partial<Options<PatchApiKeysByKeyIdData>>): UseMutationOptions<PatchApiKeysByKeyIdResponse, PatchApiKeysByKeyIdError, Options<PatchApiKeysByKeyIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiKeysByKeyIdResponse, PatchApiKeysByKeyIdError, Options<PatchApiKeysByKeyIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiKeysByKeyId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiAdminEnvInfoQueryKey = (options?: Options<GetApiAdminEnvInfoData>) => createQueryKey('getApiAdminEnvInfo', options);

export const getApiAdminEnvInfoOptions = (options?: Options<GetApiAdminEnvInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAdminEnvInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAdminEnvInfoQueryKey(options)
    });
};

export const getApiAdminSystemStatusQueryKey = (options?: Options<GetApiAdminSystemStatusData>) => createQueryKey('getApiAdminSystemStatus', options);

export const getApiAdminSystemStatusOptions = (options?: Options<GetApiAdminSystemStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAdminSystemStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAdminSystemStatusQueryKey(options)
    });
};

export const postApiFileAiChangeQueryKey = (options?: Options<PostApiFileAiChangeData>) => createQueryKey('postApiFileAiChange', options);

export const postApiFileAiChangeOptions = (options?: Options<PostApiFileAiChangeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiFileAiChange({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiFileAiChangeQueryKey(options)
    });
};

export const postApiFileAiChangeMutation = (options?: Partial<Options<PostApiFileAiChangeData>>): UseMutationOptions<PostApiFileAiChangeResponse, PostApiFileAiChangeError, Options<PostApiFileAiChangeData>> => {
    const mutationOptions: UseMutationOptions<PostApiFileAiChangeResponse, PostApiFileAiChangeError, Options<PostApiFileAiChangeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiFileAiChange({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiFileAiChangeByFileChangeIdQueryKey = (options: Options<GetApiFileAiChangeByFileChangeIdData>) => createQueryKey('getApiFileAiChangeByFileChangeId', options);

export const getApiFileAiChangeByFileChangeIdOptions = (options: Options<GetApiFileAiChangeByFileChangeIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiFileAiChangeByFileChangeId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiFileAiChangeByFileChangeIdQueryKey(options)
    });
};

export const postApiFileAiChangeByFileChangeIdConfirmQueryKey = (options: Options<PostApiFileAiChangeByFileChangeIdConfirmData>) => createQueryKey('postApiFileAiChangeByFileChangeIdConfirm', options);

export const postApiFileAiChangeByFileChangeIdConfirmOptions = (options: Options<PostApiFileAiChangeByFileChangeIdConfirmData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiFileAiChangeByFileChangeIdConfirm({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiFileAiChangeByFileChangeIdConfirmQueryKey(options)
    });
};

export const postApiFileAiChangeByFileChangeIdConfirmMutation = (options?: Partial<Options<PostApiFileAiChangeByFileChangeIdConfirmData>>): UseMutationOptions<PostApiFileAiChangeByFileChangeIdConfirmResponse, PostApiFileAiChangeByFileChangeIdConfirmError, Options<PostApiFileAiChangeByFileChangeIdConfirmData>> => {
    const mutationOptions: UseMutationOptions<PostApiFileAiChangeByFileChangeIdConfirmResponse, PostApiFileAiChangeByFileChangeIdConfirmError, Options<PostApiFileAiChangeByFileChangeIdConfirmData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiFileAiChangeByFileChangeIdConfirm({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiPromptsQueryKey = (options?: Options<GetApiPromptsData>) => createQueryKey('getApiPrompts', options);

export const getApiPromptsOptions = (options?: Options<GetApiPromptsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPrompts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPromptsQueryKey(options)
    });
};

export const postApiPromptsQueryKey = (options: Options<PostApiPromptsData>) => createQueryKey('postApiPrompts', options);

export const postApiPromptsOptions = (options: Options<PostApiPromptsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiPrompts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiPromptsQueryKey(options)
    });
};

export const postApiPromptsMutation = (options?: Partial<Options<PostApiPromptsData>>): UseMutationOptions<PostApiPromptsResponse, PostApiPromptsError, Options<PostApiPromptsData>> => {
    const mutationOptions: UseMutationOptions<PostApiPromptsResponse, PostApiPromptsError, Options<PostApiPromptsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiPrompts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdPromptsQueryKey = (options: Options<GetApiProjectsByProjectIdPromptsData>) => createQueryKey('getApiProjectsByProjectIdPrompts', options);

export const getApiProjectsByProjectIdPromptsOptions = (options: Options<GetApiProjectsByProjectIdPromptsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdPrompts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdPromptsQueryKey(options)
    });
};

export const deleteApiProjectsByProjectIdPromptsByPromptIdMutation = (options?: Partial<Options<DeleteApiProjectsByProjectIdPromptsByPromptIdData>>): UseMutationOptions<DeleteApiProjectsByProjectIdPromptsByPromptIdResponse, DeleteApiProjectsByProjectIdPromptsByPromptIdError, Options<DeleteApiProjectsByProjectIdPromptsByPromptIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiProjectsByProjectIdPromptsByPromptIdResponse, DeleteApiProjectsByProjectIdPromptsByPromptIdError, Options<DeleteApiProjectsByProjectIdPromptsByPromptIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiProjectsByProjectIdPromptsByPromptId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdPromptsByPromptIdQueryKey = (options: Options<PostApiProjectsByProjectIdPromptsByPromptIdData>) => createQueryKey('postApiProjectsByProjectIdPromptsByPromptId', options);

export const postApiProjectsByProjectIdPromptsByPromptIdOptions = (options: Options<PostApiProjectsByProjectIdPromptsByPromptIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdPromptsByPromptId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdPromptsByPromptIdQueryKey(options)
    });
};

export const postApiProjectsByProjectIdPromptsByPromptIdMutation = (options?: Partial<Options<PostApiProjectsByProjectIdPromptsByPromptIdData>>): UseMutationOptions<PostApiProjectsByProjectIdPromptsByPromptIdResponse, PostApiProjectsByProjectIdPromptsByPromptIdError, Options<PostApiProjectsByProjectIdPromptsByPromptIdData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdPromptsByPromptIdResponse, PostApiProjectsByProjectIdPromptsByPromptIdError, Options<PostApiProjectsByProjectIdPromptsByPromptIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdPromptsByPromptId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiPromptsByPromptIdMutation = (options?: Partial<Options<DeleteApiPromptsByPromptIdData>>): UseMutationOptions<DeleteApiPromptsByPromptIdResponse, DeleteApiPromptsByPromptIdError, Options<DeleteApiPromptsByPromptIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiPromptsByPromptIdResponse, DeleteApiPromptsByPromptIdError, Options<DeleteApiPromptsByPromptIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiPromptsByPromptId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiPromptsByPromptIdQueryKey = (options: Options<GetApiPromptsByPromptIdData>) => createQueryKey('getApiPromptsByPromptId', options);

export const getApiPromptsByPromptIdOptions = (options: Options<GetApiPromptsByPromptIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPromptsByPromptId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPromptsByPromptIdQueryKey(options)
    });
};

export const patchApiPromptsByPromptIdMutation = (options?: Partial<Options<PatchApiPromptsByPromptIdData>>): UseMutationOptions<PatchApiPromptsByPromptIdResponse, PatchApiPromptsByPromptIdError, Options<PatchApiPromptsByPromptIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiPromptsByPromptIdResponse, PatchApiPromptsByPromptIdError, Options<PatchApiPromptsByPromptIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiPromptsByPromptId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiPromptOptimizeQueryKey = (options: Options<PostApiPromptOptimizeData>) => createQueryKey('postApiPromptOptimize', options);

export const postApiPromptOptimizeOptions = (options: Options<PostApiPromptOptimizeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiPromptOptimize({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiPromptOptimizeQueryKey(options)
    });
};

export const postApiPromptOptimizeMutation = (options?: Partial<Options<PostApiPromptOptimizeData>>): UseMutationOptions<PostApiPromptOptimizeResponse, PostApiPromptOptimizeError, Options<PostApiPromptOptimizeData>> => {
    const mutationOptions: UseMutationOptions<PostApiPromptOptimizeResponse, PostApiPromptOptimizeError, Options<PostApiPromptOptimizeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiPromptOptimize({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};