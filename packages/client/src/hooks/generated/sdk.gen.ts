// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetChatsData, GetChatsResponse, GetChatsError, PostChatsData, PostChatsResponse, PostChatsError, GetChatsByChatIdMessagesData, GetChatsByChatIdMessagesResponse, GetChatsByChatIdMessagesError, GetModelsData, GetModelsResponse, GetModelsError, PostAiChatData, PostAiChatResponse, PostAiChatError, PostChatsByChatIdForkData, PostChatsByChatIdForkResponse, PostChatsByChatIdForkError, PostChatsByChatIdForkByMessageIdData, PostChatsByChatIdForkByMessageIdResponse, PostChatsByChatIdForkByMessageIdError, DeleteMessagesByMessageIdData, DeleteMessagesByMessageIdResponse, DeleteMessagesByMessageIdError, DeleteChatsByChatIdData, DeleteChatsByChatIdResponse, DeleteChatsByChatIdError, PatchChatsByChatIdData, PatchChatsByChatIdResponse, PatchChatsByChatIdError, PostApiStructuredOutputsData, PostApiStructuredOutputsResponse, PostApiStructuredOutputsError, PostApiTicketsData, PostApiTicketsResponse, PostApiTicketsError, DeleteApiTicketsByTicketIdData, DeleteApiTicketsByTicketIdResponse, DeleteApiTicketsByTicketIdError, GetApiTicketsByTicketIdData, GetApiTicketsByTicketIdResponse, GetApiTicketsByTicketIdError, PatchApiTicketsByTicketIdData, PatchApiTicketsByTicketIdResponse, PatchApiTicketsByTicketIdError, PostApiTicketsByTicketIdLinkFilesData, PostApiTicketsByTicketIdLinkFilesResponse, PostApiTicketsByTicketIdLinkFilesError, PostApiTicketsByTicketIdSuggestFilesData, PostApiTicketsByTicketIdSuggestFilesResponse, PostApiTicketsByTicketIdSuggestFilesError, PostApiTicketsByTicketIdSuggestTasksData, PostApiTicketsByTicketIdSuggestTasksResponse, PostApiTicketsByTicketIdSuggestTasksError, GetApiProjectsByProjectIdTicketsData, GetApiProjectsByProjectIdTicketsResponse, GetApiProjectsByProjectIdTicketsError, GetApiProjectsByProjectIdTicketsWithCountData, GetApiProjectsByProjectIdTicketsWithCountResponse, GetApiProjectsByProjectIdTicketsWithCountError, GetApiProjectsByProjectIdTicketsWithTasksData, GetApiProjectsByProjectIdTicketsWithTasksResponse, GetApiProjectsByProjectIdTicketsWithTasksError, GetApiTicketsByTicketIdTasksData, GetApiTicketsByTicketIdTasksResponse, GetApiTicketsByTicketIdTasksError, PostApiTicketsByTicketIdTasksData, PostApiTicketsByTicketIdTasksResponse, PostApiTicketsByTicketIdTasksError, DeleteApiTicketsByTicketIdTasksByTaskIdData, DeleteApiTicketsByTicketIdTasksByTaskIdResponse, DeleteApiTicketsByTicketIdTasksByTaskIdError, PatchApiTicketsByTicketIdTasksByTaskIdData, PatchApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksByTaskIdError, PatchApiTicketsByTicketIdTasksReorderData, PatchApiTicketsByTicketIdTasksReorderResponse, PatchApiTicketsByTicketIdTasksReorderError, PostApiTicketsByTicketIdAutoGenerateTasksData, PostApiTicketsByTicketIdAutoGenerateTasksResponse, PostApiTicketsByTicketIdAutoGenerateTasksError, GetApiTicketsBulkTasksData, GetApiTicketsBulkTasksResponse, GetApiTicketsBulkTasksError, GetApiProjectsData, GetApiProjectsResponse, GetApiProjectsError, PostApiProjectsData, PostApiProjectsResponse, PostApiProjectsError, DeleteApiProjectsByProjectIdData, DeleteApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdError, GetApiProjectsByProjectIdData, GetApiProjectsByProjectIdResponse, GetApiProjectsByProjectIdError, PatchApiProjectsByProjectIdData, PatchApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdError, PostApiProjectsByProjectIdSyncData, PostApiProjectsByProjectIdSyncResponse, PostApiProjectsByProjectIdSyncError, GetApiProjectsByProjectIdFilesData, GetApiProjectsByProjectIdFilesResponse, GetApiProjectsByProjectIdFilesError, PostApiProjectsByProjectIdRefreshData, PostApiProjectsByProjectIdRefreshResponse, PostApiProjectsByProjectIdRefreshError, GetApiProjectsByProjectIdFileSummariesData, GetApiProjectsByProjectIdFileSummariesResponse, GetApiProjectsByProjectIdFileSummariesError, PostApiProjectsByProjectIdSummarizeData, PostApiProjectsByProjectIdSummarizeResponse, PostApiProjectsByProjectIdSummarizeError, PostApiProjectsByProjectIdResummarizeAllData, PostApiProjectsByProjectIdResummarizeAllResponse, PostApiProjectsByProjectIdResummarizeAllError, PostApiProjectsByProjectIdRemoveSummariesData, PostApiProjectsByProjectIdRemoveSummariesResponse, PostApiProjectsByProjectIdRemoveSummariesError, GetApiProjectsByProjectIdSummaryData, GetApiProjectsByProjectIdSummaryResponse, GetApiProjectsByProjectIdSummaryError, PostApiProjectsByProjectIdSuggestFilesData, PostApiProjectsByProjectIdSuggestFilesResponse, PostApiProjectsByProjectIdSuggestFilesError, GetApiKeysData, GetApiKeysResponse, GetApiKeysError, PostApiKeysData, PostApiKeysResponse, PostApiKeysError, DeleteApiKeysByKeyIdData, DeleteApiKeysByKeyIdResponse, DeleteApiKeysByKeyIdError, GetApiKeysByKeyIdData, GetApiKeysByKeyIdResponse, GetApiKeysByKeyIdError, PatchApiKeysByKeyIdData, PatchApiKeysByKeyIdResponse, PatchApiKeysByKeyIdError, GetApiStateData, GetApiStateResponse, GetApiStateError, PutApiStateData, PutApiStateResponse, PutApiStateError, PostApiStateSettingsData, PostApiStateSettingsResponse, PostApiStateSettingsError, PostApiStateActiveProjectTabData, PostApiStateActiveProjectTabResponse, PostApiStateActiveProjectTabError, PostApiStateActiveChatData, PostApiStateActiveChatResponse, PostApiStateActiveChatError, PostApiStateProjectTabsData, PostApiStateProjectTabsResponse, PostApiStateProjectTabsError, DeleteApiStateProjectTabsByTabIdData, DeleteApiStateProjectTabsByTabIdResponse, DeleteApiStateProjectTabsByTabIdError, PostApiStateProjectTabsByTabIdData, PostApiStateProjectTabsByTabIdResponse, PostApiStateProjectTabsByTabIdError, PostApiStateProjectTabsReplaceAllData, PostApiStateProjectTabsReplaceAllResponse, PostApiStateProjectTabsReplaceAllError, PostApiStateUpdateData, PostApiStateUpdateResponse, PostApiStateUpdateError, GetApiAdminEnvInfoData, GetApiAdminEnvInfoResponse, GetApiAdminEnvInfoError, GetApiAdminSystemStatusData, GetApiAdminSystemStatusResponse, GetApiAdminSystemStatusError, PostApiFileAiChangeData, PostApiFileAiChangeResponse, PostApiFileAiChangeError, GetApiFileAiChangeByFileChangeIdData, GetApiFileAiChangeByFileChangeIdResponse, GetApiFileAiChangeByFileChangeIdError, PostApiFileAiChangeByFileChangeIdConfirmData, PostApiFileAiChangeByFileChangeIdConfirmResponse, PostApiFileAiChangeByFileChangeIdConfirmError, GetApiPromptsData, GetApiPromptsResponse, GetApiPromptsError, PostApiPromptsData, PostApiPromptsResponse, PostApiPromptsError, GetApiProjectsByProjectIdPromptsData, GetApiProjectsByProjectIdPromptsResponse, GetApiProjectsByProjectIdPromptsError, DeleteApiProjectsByProjectIdPromptsByPromptIdData, DeleteApiProjectsByProjectIdPromptsByPromptIdResponse, DeleteApiProjectsByProjectIdPromptsByPromptIdError, PostApiProjectsByProjectIdPromptsByPromptIdData, PostApiProjectsByProjectIdPromptsByPromptIdResponse, PostApiProjectsByProjectIdPromptsByPromptIdError, DeleteApiPromptsByPromptIdData, DeleteApiPromptsByPromptIdResponse, DeleteApiPromptsByPromptIdError, GetApiPromptsByPromptIdData, GetApiPromptsByPromptIdResponse, GetApiPromptsByPromptIdError, PatchApiPromptsByPromptIdData, PatchApiPromptsByPromptIdResponse, PatchApiPromptsByPromptIdError, PostApiPromptOptimizeData, PostApiPromptOptimizeResponse, PostApiPromptOptimizeError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all chat sessions
 */
export const getChats = <ThrowOnError extends boolean = false>(options?: Options<GetChatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChatsResponse, GetChatsError, ThrowOnError>({
        url: '/chats',
        ...options
    });
};

/**
 * Create a new chat session
 */
export const postChats = <ThrowOnError extends boolean = false>(options: Options<PostChatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChatsResponse, PostChatsError, ThrowOnError>({
        url: '/chats',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get messages for a specific chat
 */
export const getChatsByChatIdMessages = <ThrowOnError extends boolean = false>(options: Options<GetChatsByChatIdMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatsByChatIdMessagesResponse, GetChatsByChatIdMessagesError, ThrowOnError>({
        url: '/chats/{chatId}/messages',
        ...options
    });
};

/**
 * List available AI models for a provider
 */
export const getModels = <ThrowOnError extends boolean = false>(options: Options<GetModelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetModelsResponse, GetModelsError, ThrowOnError>({
        url: '/models',
        ...options
    });
};

/**
 * Send message to AI for chat completion (streaming)
 */
export const postAiChat = <ThrowOnError extends boolean = false>(options: Options<PostAiChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAiChatResponse, PostAiChatError, ThrowOnError>({
        url: '/ai/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fork a chat session
 */
export const postChatsByChatIdFork = <ThrowOnError extends boolean = false>(options: Options<PostChatsByChatIdForkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChatsByChatIdForkResponse, PostChatsByChatIdForkError, ThrowOnError>({
        url: '/chats/{chatId}/fork',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fork a chat session from a specific message
 */
export const postChatsByChatIdForkByMessageId = <ThrowOnError extends boolean = false>(options: Options<PostChatsByChatIdForkByMessageIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostChatsByChatIdForkByMessageIdResponse, PostChatsByChatIdForkByMessageIdError, ThrowOnError>({
        url: '/chats/{chatId}/fork/{messageId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a specific message
 */
export const deleteMessagesByMessageId = <ThrowOnError extends boolean = false>(options: Options<DeleteMessagesByMessageIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMessagesByMessageIdResponse, DeleteMessagesByMessageIdError, ThrowOnError>({
        url: '/messages/{messageId}',
        ...options
    });
};

/**
 * Delete a chat session and its messages
 */
export const deleteChatsByChatId = <ThrowOnError extends boolean = false>(options: Options<DeleteChatsByChatIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteChatsByChatIdResponse, DeleteChatsByChatIdError, ThrowOnError>({
        url: '/chats/{chatId}',
        ...options
    });
};

/**
 * Update chat properties (e.g., title)
 */
export const patchChatsByChatId = <ThrowOnError extends boolean = false>(options: Options<PatchChatsByChatIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchChatsByChatIdResponse, PatchChatsByChatIdError, ThrowOnError>({
        url: '/chats/{chatId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate structured output based on a specific schema
 */
export const postApiStructuredOutputs = <ThrowOnError extends boolean = false>(options?: Options<PostApiStructuredOutputsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiStructuredOutputsResponse, PostApiStructuredOutputsError, ThrowOnError>({
        url: '/api/structured-outputs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new ticket
 */
export const postApiTickets = <ThrowOnError extends boolean = false>(options?: Options<PostApiTicketsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiTicketsResponse, PostApiTicketsError, ThrowOnError>({
        url: '/api/tickets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a ticket
 */
export const deleteApiTicketsByTicketId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiTicketsByTicketIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiTicketsByTicketIdResponse, DeleteApiTicketsByTicketIdError, ThrowOnError>({
        url: '/api/tickets/{ticketId}',
        ...options
    });
};

/**
 * Get a ticket by ID
 */
export const getApiTicketsByTicketId = <ThrowOnError extends boolean = false>(options: Options<GetApiTicketsByTicketIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiTicketsByTicketIdResponse, GetApiTicketsByTicketIdError, ThrowOnError>({
        url: '/api/tickets/{ticketId}',
        ...options
    });
};

/**
 * Update a ticket
 */
export const patchApiTicketsByTicketId = <ThrowOnError extends boolean = false>(options: Options<PatchApiTicketsByTicketIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiTicketsByTicketIdResponse, PatchApiTicketsByTicketIdError, ThrowOnError>({
        url: '/api/tickets/{ticketId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Link files to a ticket
 */
export const postApiTicketsByTicketIdLinkFiles = <ThrowOnError extends boolean = false>(options: Options<PostApiTicketsByTicketIdLinkFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiTicketsByTicketIdLinkFilesResponse, PostApiTicketsByTicketIdLinkFilesError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/link-files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get AI suggestions for relevant files
 */
export const postApiTicketsByTicketIdSuggestFiles = <ThrowOnError extends boolean = false>(options: Options<PostApiTicketsByTicketIdSuggestFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiTicketsByTicketIdSuggestFilesResponse, PostApiTicketsByTicketIdSuggestFilesError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/suggest-files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get AI suggestions for tasks
 */
export const postApiTicketsByTicketIdSuggestTasks = <ThrowOnError extends boolean = false>(options: Options<PostApiTicketsByTicketIdSuggestTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiTicketsByTicketIdSuggestTasksResponse, PostApiTicketsByTicketIdSuggestTasksError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/suggest-tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all tickets for a project
 */
export const getApiProjectsByProjectIdTickets = <ThrowOnError extends boolean = false>(options: Options<GetApiProjectsByProjectIdTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProjectsByProjectIdTicketsResponse, GetApiProjectsByProjectIdTicketsError, ThrowOnError>({
        url: '/api/projects/{projectId}/tickets',
        ...options
    });
};

/**
 * List tickets with task counts
 */
export const getApiProjectsByProjectIdTicketsWithCount = <ThrowOnError extends boolean = false>(options: Options<GetApiProjectsByProjectIdTicketsWithCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProjectsByProjectIdTicketsWithCountResponse, GetApiProjectsByProjectIdTicketsWithCountError, ThrowOnError>({
        url: '/api/projects/{projectId}/tickets-with-count',
        ...options
    });
};

/**
 * List tickets with their tasks
 */
export const getApiProjectsByProjectIdTicketsWithTasks = <ThrowOnError extends boolean = false>(options: Options<GetApiProjectsByProjectIdTicketsWithTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProjectsByProjectIdTicketsWithTasksResponse, GetApiProjectsByProjectIdTicketsWithTasksError, ThrowOnError>({
        url: '/api/projects/{projectId}/tickets-with-tasks',
        ...options
    });
};

/**
 * Get all tasks for a ticket
 */
export const getApiTicketsByTicketIdTasks = <ThrowOnError extends boolean = false>(options: Options<GetApiTicketsByTicketIdTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiTicketsByTicketIdTasksResponse, GetApiTicketsByTicketIdTasksError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/tasks',
        ...options
    });
};

/**
 * Create a new task for a ticket
 */
export const postApiTicketsByTicketIdTasks = <ThrowOnError extends boolean = false>(options: Options<PostApiTicketsByTicketIdTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiTicketsByTicketIdTasksResponse, PostApiTicketsByTicketIdTasksError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a task
 */
export const deleteApiTicketsByTicketIdTasksByTaskId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiTicketsByTicketIdTasksByTaskIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiTicketsByTicketIdTasksByTaskIdResponse, DeleteApiTicketsByTicketIdTasksByTaskIdError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/tasks/{taskId}',
        ...options
    });
};

/**
 * Update a task
 */
export const patchApiTicketsByTicketIdTasksByTaskId = <ThrowOnError extends boolean = false>(options: Options<PatchApiTicketsByTicketIdTasksByTaskIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksByTaskIdError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/tasks/{taskId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reorder tasks within a ticket
 */
export const patchApiTicketsByTicketIdTasksReorder = <ThrowOnError extends boolean = false>(options: Options<PatchApiTicketsByTicketIdTasksReorderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiTicketsByTicketIdTasksReorderResponse, PatchApiTicketsByTicketIdTasksReorderError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/tasks/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Auto-generate tasks from ticket overview
 */
export const postApiTicketsByTicketIdAutoGenerateTasks = <ThrowOnError extends boolean = false>(options: Options<PostApiTicketsByTicketIdAutoGenerateTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiTicketsByTicketIdAutoGenerateTasksResponse, PostApiTicketsByTicketIdAutoGenerateTasksError, ThrowOnError>({
        url: '/api/tickets/{ticketId}/auto-generate-tasks',
        ...options
    });
};

/**
 * Get tasks for multiple tickets
 */
export const getApiTicketsBulkTasks = <ThrowOnError extends boolean = false>(options: Options<GetApiTicketsBulkTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiTicketsBulkTasksResponse, GetApiTicketsBulkTasksError, ThrowOnError>({
        url: '/api/tickets/bulk-tasks',
        ...options
    });
};

/**
 * List all projects
 */
export const getApiProjects = <ThrowOnError extends boolean = false>(options?: Options<GetApiProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiProjectsResponse, GetApiProjectsError, ThrowOnError>({
        url: '/api/projects',
        ...options
    });
};

/**
 * Create a new project and sync its files
 */
export const postApiProjects = <ThrowOnError extends boolean = false>(options?: Options<PostApiProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiProjectsResponse, PostApiProjectsError, ThrowOnError>({
        url: '/api/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a project and its associated data
 */
export const deleteApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdError, ThrowOnError>({
        url: '/api/projects/{projectId}',
        ...options
    });
};

/**
 * Get a specific project by ID
 */
export const getApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<GetApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProjectsByProjectIdResponse, GetApiProjectsByProjectIdError, ThrowOnError>({
        url: '/api/projects/{projectId}',
        ...options
    });
};

/**
 * Update a project's details
 */
export const patchApiProjectsByProjectId = <ThrowOnError extends boolean = false>(options: Options<PatchApiProjectsByProjectIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdError, ThrowOnError>({
        url: '/api/projects/{projectId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Manually trigger a full file sync for a project
 */
export const postApiProjectsByProjectIdSync = <ThrowOnError extends boolean = false>(options: Options<PostApiProjectsByProjectIdSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProjectsByProjectIdSyncResponse, PostApiProjectsByProjectIdSyncError, ThrowOnError>({
        url: '/api/projects/{projectId}/sync',
        ...options
    });
};

/**
 * Get the list of files associated with a project
 */
export const getApiProjectsByProjectIdFiles = <ThrowOnError extends boolean = false>(options: Options<GetApiProjectsByProjectIdFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProjectsByProjectIdFilesResponse, GetApiProjectsByProjectIdFilesError, ThrowOnError>({
        url: '/api/projects/{projectId}/files',
        ...options
    });
};

/**
 * Refresh project files (sync) optionally limited to a folder
 */
export const postApiProjectsByProjectIdRefresh = <ThrowOnError extends boolean = false>(options: Options<PostApiProjectsByProjectIdRefreshData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProjectsByProjectIdRefreshResponse, PostApiProjectsByProjectIdRefreshError, ThrowOnError>({
        url: '/api/projects/{projectId}/refresh',
        ...options
    });
};

/**
 * Get summaries for project files (all or specified)
 */
export const getApiProjectsByProjectIdFileSummaries = <ThrowOnError extends boolean = false>(options: Options<GetApiProjectsByProjectIdFileSummariesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProjectsByProjectIdFileSummariesResponse, GetApiProjectsByProjectIdFileSummariesError, ThrowOnError>({
        url: '/api/projects/{projectId}/file-summaries',
        ...options
    });
};

/**
 * Summarize selected files in a project (or force re-summarize)
 */
export const postApiProjectsByProjectIdSummarize = <ThrowOnError extends boolean = false>(options: Options<PostApiProjectsByProjectIdSummarizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProjectsByProjectIdSummarizeResponse, PostApiProjectsByProjectIdSummarizeError, ThrowOnError>({
        url: '/api/projects/{projectId}/summarize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Force re-summarization of all files in a project
 */
export const postApiProjectsByProjectIdResummarizeAll = <ThrowOnError extends boolean = false>(options: Options<PostApiProjectsByProjectIdResummarizeAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProjectsByProjectIdResummarizeAllResponse, PostApiProjectsByProjectIdResummarizeAllError, ThrowOnError>({
        url: '/api/projects/{projectId}/resummarize-all',
        ...options
    });
};

/**
 * Remove summaries from selected files
 */
export const postApiProjectsByProjectIdRemoveSummaries = <ThrowOnError extends boolean = false>(options: Options<PostApiProjectsByProjectIdRemoveSummariesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProjectsByProjectIdRemoveSummariesResponse, PostApiProjectsByProjectIdRemoveSummariesError, ThrowOnError>({
        url: '/api/projects/{projectId}/remove-summaries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a combined summary of all files in the project
 */
export const getApiProjectsByProjectIdSummary = <ThrowOnError extends boolean = false>(options: Options<GetApiProjectsByProjectIdSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProjectsByProjectIdSummaryResponse, GetApiProjectsByProjectIdSummaryError, ThrowOnError>({
        url: '/api/projects/{projectId}/summary',
        ...options
    });
};

/**
 * Suggest relevant files based on user input and project context
 */
export const postApiProjectsByProjectIdSuggestFiles = <ThrowOnError extends boolean = false>(options: Options<PostApiProjectsByProjectIdSuggestFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProjectsByProjectIdSuggestFilesResponse, PostApiProjectsByProjectIdSuggestFilesError, ThrowOnError>({
        url: '/api/projects/{projectId}/suggest-files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all configured provider keys (excluding secrets)
 */
export const getApiKeys = <ThrowOnError extends boolean = false>(options?: Options<GetApiKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiKeysResponse, GetApiKeysError, ThrowOnError>({
        url: '/api/keys',
        ...options
    });
};

/**
 * Add a new API key for an AI provider
 */
export const postApiKeys = <ThrowOnError extends boolean = false>(options: Options<PostApiKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiKeysResponse, PostApiKeysError, ThrowOnError>({
        url: '/api/keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a provider key
 */
export const deleteApiKeysByKeyId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeysByKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiKeysByKeyIdResponse, DeleteApiKeysByKeyIdError, ThrowOnError>({
        url: '/api/keys/{keyId}',
        ...options
    });
};

/**
 * Get a specific provider key by ID (including secret)
 */
export const getApiKeysByKeyId = <ThrowOnError extends boolean = false>(options: Options<GetApiKeysByKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiKeysByKeyIdResponse, GetApiKeysByKeyIdError, ThrowOnError>({
        url: '/api/keys/{keyId}',
        ...options
    });
};

/**
 * Update a provider key's details
 */
export const patchApiKeysByKeyId = <ThrowOnError extends boolean = false>(options: Options<PatchApiKeysByKeyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiKeysByKeyIdResponse, PatchApiKeysByKeyIdError, ThrowOnError>({
        url: '/api/keys/{keyId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Global State
 * Retrieves the entire current global application state object.
 */
export const getApiState = <ThrowOnError extends boolean = false>(options?: Options<GetApiStateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiStateResponse, GetApiStateError, ThrowOnError>({
        url: '/api/state',
        ...options
    });
};

/**
 * Replace Global State
 * Replaces the entire existing global application state with the provided state object. The provided object must conform to the GlobalState schema.
 */
export const putApiState = <ThrowOnError extends boolean = false>(options: Options<PutApiStateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiStateResponse, PutApiStateError, ThrowOnError>({
        url: '/api/state',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Settings Partially
 * Merges the provided partial settings object with the current settings. Returns the complete updated state.
 */
export const postApiStateSettings = <ThrowOnError extends boolean = false>(options: Options<PostApiStateSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiStateSettingsResponse, PostApiStateSettingsError, ThrowOnError>({
        url: '/api/state/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set Active Project Tab
 * Sets the currently active project tab ID. Returns the complete updated state.
 */
export const postApiStateActiveProjectTab = <ThrowOnError extends boolean = false>(options: Options<PostApiStateActiveProjectTabData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiStateActiveProjectTabResponse, PostApiStateActiveProjectTabError, ThrowOnError>({
        url: '/api/state/active-project-tab',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set Active Chat
 * Sets the currently active chat session ID. Returns the complete updated state.
 */
export const postApiStateActiveChat = <ThrowOnError extends boolean = false>(options: Options<PostApiStateActiveChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiStateActiveChatResponse, PostApiStateActiveChatError, ThrowOnError>({
        url: '/api/state/active-chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Project Tab
 * Creates a new project tab with the provided initial data (merged with defaults). Returns the new tab ID and the complete updated state.
 */
export const postApiStateProjectTabs = <ThrowOnError extends boolean = false>(options: Options<PostApiStateProjectTabsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiStateProjectTabsResponse, PostApiStateProjectTabsError, ThrowOnError>({
        url: '/api/state/project-tabs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Project Tab
 * Deletes the specified project tab. Returns the complete updated state.
 */
export const deleteApiStateProjectTabsByTabId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiStateProjectTabsByTabIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiStateProjectTabsByTabIdResponse, DeleteApiStateProjectTabsByTabIdError, ThrowOnError>({
        url: '/api/state/project-tabs/{tabId}',
        ...options
    });
};

/**
 * Update Single Project Tab
 * Merges the provided partial data with the specified project tab state. Returns the complete updated state.
 */
export const postApiStateProjectTabsByTabId = <ThrowOnError extends boolean = false>(options: Options<PostApiStateProjectTabsByTabIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiStateProjectTabsByTabIdResponse, PostApiStateProjectTabsByTabIdError, ThrowOnError>({
        url: '/api/state/project-tabs/{tabId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Replace All Project Tabs
 * Replaces the entire set of project tabs with the provided record. Returns the complete updated state.
 */
export const postApiStateProjectTabsReplaceAll = <ThrowOnError extends boolean = false>(options: Options<PostApiStateProjectTabsReplaceAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiStateProjectTabsReplaceAllResponse, PostApiStateProjectTabsReplaceAllError, ThrowOnError>({
        url: '/api/state/project-tabs/replace-all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * DEPRECATED: Update State Partially
 * DEPRECATED: Use specific endpoints like /api/state/settings, /api/state/project-tabs/{id}, etc. instead. Updates a single top-level key within the global application state.
 */
export const postApiStateUpdate = <ThrowOnError extends boolean = false>(options: Options<PostApiStateUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiStateUpdateResponse, PostApiStateUpdateError, ThrowOnError>({
        url: '/api/state/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get system environment information and database statistics
 */
export const getApiAdminEnvInfo = <ThrowOnError extends boolean = false>(options?: Options<GetApiAdminEnvInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiAdminEnvInfoResponse, GetApiAdminEnvInfoError, ThrowOnError>({
        url: '/api/admin/env-info',
        ...options
    });
};

/**
 * Check system operational status
 */
export const getApiAdminSystemStatus = <ThrowOnError extends boolean = false>(options?: Options<GetApiAdminSystemStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiAdminSystemStatusResponse, GetApiAdminSystemStatusError, ThrowOnError>({
        url: '/api/admin/system-status',
        ...options
    });
};

/**
 * Generate AI-assisted file changes based on a prompt
 */
export const postApiFileAiChange = <ThrowOnError extends boolean = false>(options?: Options<PostApiFileAiChangeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiFileAiChangeResponse, PostApiFileAiChangeError, ThrowOnError>({
        url: '/api/file/ai-change',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve details about a specific AI file change
 */
export const getApiFileAiChangeByFileChangeId = <ThrowOnError extends boolean = false>(options: Options<GetApiFileAiChangeByFileChangeIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiFileAiChangeByFileChangeIdResponse, GetApiFileAiChangeByFileChangeIdError, ThrowOnError>({
        url: '/api/file/ai-change/{fileChangeId}',
        ...options
    });
};

/**
 * Confirm and apply an AI-generated file change
 */
export const postApiFileAiChangeByFileChangeIdConfirm = <ThrowOnError extends boolean = false>(options: Options<PostApiFileAiChangeByFileChangeIdConfirmData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiFileAiChangeByFileChangeIdConfirmResponse, PostApiFileAiChangeByFileChangeIdConfirmError, ThrowOnError>({
        url: '/api/file/ai-change/{fileChangeId}/confirm',
        ...options
    });
};

/**
 * List all available prompts
 */
export const getApiPrompts = <ThrowOnError extends boolean = false>(options?: Options<GetApiPromptsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiPromptsResponse, GetApiPromptsError, ThrowOnError>({
        url: '/api/prompts',
        ...options
    });
};

/**
 * Create a new prompt
 */
export const postApiPrompts = <ThrowOnError extends boolean = false>(options: Options<PostApiPromptsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiPromptsResponse, PostApiPromptsError, ThrowOnError>({
        url: '/api/prompts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List prompts associated with a specific project
 */
export const getApiProjectsByProjectIdPrompts = <ThrowOnError extends boolean = false>(options: Options<GetApiProjectsByProjectIdPromptsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProjectsByProjectIdPromptsResponse, GetApiProjectsByProjectIdPromptsError, ThrowOnError>({
        url: '/api/projects/{projectId}/prompts',
        ...options
    });
};

/**
 * Disassociate a prompt from a project
 */
export const deleteApiProjectsByProjectIdPromptsByPromptId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiProjectsByProjectIdPromptsByPromptIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiProjectsByProjectIdPromptsByPromptIdResponse, DeleteApiProjectsByProjectIdPromptsByPromptIdError, ThrowOnError>({
        url: '/api/projects/{projectId}/prompts/{promptId}',
        ...options
    });
};

/**
 * Associate a prompt with a project
 */
export const postApiProjectsByProjectIdPromptsByPromptId = <ThrowOnError extends boolean = false>(options: Options<PostApiProjectsByProjectIdPromptsByPromptIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProjectsByProjectIdPromptsByPromptIdResponse, PostApiProjectsByProjectIdPromptsByPromptIdError, ThrowOnError>({
        url: '/api/projects/{projectId}/prompts/{promptId}',
        ...options
    });
};

/**
 * Delete a prompt
 */
export const deleteApiPromptsByPromptId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiPromptsByPromptIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiPromptsByPromptIdResponse, DeleteApiPromptsByPromptIdError, ThrowOnError>({
        url: '/api/prompts/{promptId}',
        ...options
    });
};

/**
 * Get a specific prompt by its ID
 */
export const getApiPromptsByPromptId = <ThrowOnError extends boolean = false>(options: Options<GetApiPromptsByPromptIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiPromptsByPromptIdResponse, GetApiPromptsByPromptIdError, ThrowOnError>({
        url: '/api/prompts/{promptId}',
        ...options
    });
};

/**
 * Update a prompt's details
 */
export const patchApiPromptsByPromptId = <ThrowOnError extends boolean = false>(options: Options<PatchApiPromptsByPromptIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiPromptsByPromptIdResponse, PatchApiPromptsByPromptIdError, ThrowOnError>({
        url: '/api/prompts/{promptId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Optimize a user-provided prompt using an AI model
 */
export const postApiPromptOptimize = <ThrowOnError extends boolean = false>(options: Options<PostApiPromptOptimizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiPromptOptimizeResponse, PostApiPromptOptimizeError, ThrowOnError>({
        url: '/api/prompt/optimize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};