/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TicketsImport } from './routes/tickets'
import { Route as StructuredOutputDemoImport } from './routes/structured-output-demo'
import { Route as ProjectsImport } from './routes/projects'
import { Route as ProjectSummarizationImport } from './routes/project-summarization'
import { Route as KeysImport } from './routes/keys'
import { Route as FileSearchInterfaceImport } from './routes/file-search-interface'
import { Route as CounterImport } from './routes/counter'
import { Route as ChatImport } from './routes/chat'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TicketsRoute = TicketsImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => rootRoute,
} as any)

const StructuredOutputDemoRoute = StructuredOutputDemoImport.update({
  id: '/structured-output-demo',
  path: '/structured-output-demo',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsRoute = ProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRoute,
} as any)

const ProjectSummarizationRoute = ProjectSummarizationImport.update({
  id: '/project-summarization',
  path: '/project-summarization',
  getParentRoute: () => rootRoute,
} as any)

const KeysRoute = KeysImport.update({
  id: '/keys',
  path: '/keys',
  getParentRoute: () => rootRoute,
} as any)

const FileSearchInterfaceRoute = FileSearchInterfaceImport.update({
  id: '/file-search-interface',
  path: '/file-search-interface',
  getParentRoute: () => rootRoute,
} as any)

const CounterRoute = CounterImport.update({
  id: '/counter',
  path: '/counter',
  getParentRoute: () => rootRoute,
} as any)

const ChatRoute = ChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatImport
      parentRoute: typeof rootRoute
    }
    '/counter': {
      id: '/counter'
      path: '/counter'
      fullPath: '/counter'
      preLoaderRoute: typeof CounterImport
      parentRoute: typeof rootRoute
    }
    '/file-search-interface': {
      id: '/file-search-interface'
      path: '/file-search-interface'
      fullPath: '/file-search-interface'
      preLoaderRoute: typeof FileSearchInterfaceImport
      parentRoute: typeof rootRoute
    }
    '/keys': {
      id: '/keys'
      path: '/keys'
      fullPath: '/keys'
      preLoaderRoute: typeof KeysImport
      parentRoute: typeof rootRoute
    }
    '/project-summarization': {
      id: '/project-summarization'
      path: '/project-summarization'
      fullPath: '/project-summarization'
      preLoaderRoute: typeof ProjectSummarizationImport
      parentRoute: typeof rootRoute
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsImport
      parentRoute: typeof rootRoute
    }
    '/structured-output-demo': {
      id: '/structured-output-demo'
      path: '/structured-output-demo'
      fullPath: '/structured-output-demo'
      preLoaderRoute: typeof StructuredOutputDemoImport
      parentRoute: typeof rootRoute
    }
    '/tickets': {
      id: '/tickets'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof TicketsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/counter': typeof CounterRoute
  '/file-search-interface': typeof FileSearchInterfaceRoute
  '/keys': typeof KeysRoute
  '/project-summarization': typeof ProjectSummarizationRoute
  '/projects': typeof ProjectsRoute
  '/structured-output-demo': typeof StructuredOutputDemoRoute
  '/tickets': typeof TicketsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/counter': typeof CounterRoute
  '/file-search-interface': typeof FileSearchInterfaceRoute
  '/keys': typeof KeysRoute
  '/project-summarization': typeof ProjectSummarizationRoute
  '/projects': typeof ProjectsRoute
  '/structured-output-demo': typeof StructuredOutputDemoRoute
  '/tickets': typeof TicketsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/counter': typeof CounterRoute
  '/file-search-interface': typeof FileSearchInterfaceRoute
  '/keys': typeof KeysRoute
  '/project-summarization': typeof ProjectSummarizationRoute
  '/projects': typeof ProjectsRoute
  '/structured-output-demo': typeof StructuredOutputDemoRoute
  '/tickets': typeof TicketsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/counter'
    | '/file-search-interface'
    | '/keys'
    | '/project-summarization'
    | '/projects'
    | '/structured-output-demo'
    | '/tickets'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/counter'
    | '/file-search-interface'
    | '/keys'
    | '/project-summarization'
    | '/projects'
    | '/structured-output-demo'
    | '/tickets'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/counter'
    | '/file-search-interface'
    | '/keys'
    | '/project-summarization'
    | '/projects'
    | '/structured-output-demo'
    | '/tickets'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRoute: typeof ChatRoute
  CounterRoute: typeof CounterRoute
  FileSearchInterfaceRoute: typeof FileSearchInterfaceRoute
  KeysRoute: typeof KeysRoute
  ProjectSummarizationRoute: typeof ProjectSummarizationRoute
  ProjectsRoute: typeof ProjectsRoute
  StructuredOutputDemoRoute: typeof StructuredOutputDemoRoute
  TicketsRoute: typeof TicketsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRoute: ChatRoute,
  CounterRoute: CounterRoute,
  FileSearchInterfaceRoute: FileSearchInterfaceRoute,
  KeysRoute: KeysRoute,
  ProjectSummarizationRoute: ProjectSummarizationRoute,
  ProjectsRoute: ProjectsRoute,
  StructuredOutputDemoRoute: StructuredOutputDemoRoute,
  TicketsRoute: TicketsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chat",
        "/counter",
        "/file-search-interface",
        "/keys",
        "/project-summarization",
        "/projects",
        "/structured-output-demo",
        "/tickets"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx"
    },
    "/counter": {
      "filePath": "counter.tsx"
    },
    "/file-search-interface": {
      "filePath": "file-search-interface.tsx"
    },
    "/keys": {
      "filePath": "keys.tsx"
    },
    "/project-summarization": {
      "filePath": "project-summarization.tsx"
    },
    "/projects": {
      "filePath": "projects.tsx"
    },
    "/structured-output-demo": {
      "filePath": "structured-output-demo.tsx"
    },
    "/tickets": {
      "filePath": "tickets.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
