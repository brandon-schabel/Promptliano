/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PromptsRouteImport } from './routes/prompts'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as ProjectSummarizationRouteImport } from './routes/project-summarization'
import { Route as KeysRouteImport } from './routes/keys'
import { Route as HealthRouteImport } from './routes/health'
import { Route as ChatRouteImport } from './routes/chat'
import { Route as IndexRouteImport } from './routes/index'

const PromptsRoute = PromptsRouteImport.update({
  id: '/prompts',
  path: '/prompts',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectSummarizationRoute = ProjectSummarizationRouteImport.update({
  id: '/project-summarization',
  path: '/project-summarization',
  getParentRoute: () => rootRouteImport,
} as any)
const KeysRoute = KeysRouteImport.update({
  id: '/keys',
  path: '/keys',
  getParentRoute: () => rootRouteImport,
} as any)
const HealthRoute = HealthRouteImport.update({
  id: '/health',
  path: '/health',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/health': typeof HealthRoute
  '/keys': typeof KeysRoute
  '/project-summarization': typeof ProjectSummarizationRoute
  '/projects': typeof ProjectsRoute
  '/prompts': typeof PromptsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/health': typeof HealthRoute
  '/keys': typeof KeysRoute
  '/project-summarization': typeof ProjectSummarizationRoute
  '/projects': typeof ProjectsRoute
  '/prompts': typeof PromptsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/chat': typeof ChatRoute
  '/health': typeof HealthRoute
  '/keys': typeof KeysRoute
  '/project-summarization': typeof ProjectSummarizationRoute
  '/projects': typeof ProjectsRoute
  '/prompts': typeof PromptsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/health'
    | '/keys'
    | '/project-summarization'
    | '/projects'
    | '/prompts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/health'
    | '/keys'
    | '/project-summarization'
    | '/projects'
    | '/prompts'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/health'
    | '/keys'
    | '/project-summarization'
    | '/projects'
    | '/prompts'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRoute: typeof ChatRoute
  HealthRoute: typeof HealthRoute
  KeysRoute: typeof KeysRoute
  ProjectSummarizationRoute: typeof ProjectSummarizationRoute
  ProjectsRoute: typeof ProjectsRoute
  PromptsRoute: typeof PromptsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/prompts': {
      id: '/prompts'
      path: '/prompts'
      fullPath: '/prompts'
      preLoaderRoute: typeof PromptsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project-summarization': {
      id: '/project-summarization'
      path: '/project-summarization'
      fullPath: '/project-summarization'
      preLoaderRoute: typeof ProjectSummarizationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/keys': {
      id: '/keys'
      path: '/keys'
      fullPath: '/keys'
      preLoaderRoute: typeof KeysRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/health': {
      id: '/health'
      path: '/health'
      fullPath: '/health'
      preLoaderRoute: typeof HealthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRoute: ChatRoute,
  HealthRoute: HealthRoute,
  KeysRoute: KeysRoute,
  ProjectSummarizationRoute: ProjectSummarizationRoute,
  ProjectsRoute: ProjectsRoute,
  PromptsRoute: PromptsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
