// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch'
import type {
  GetApiChatsData,
  GetApiChatsResponse,
  GetApiChatsError,
  PostApiChatsData,
  PostApiChatsResponse,
  PostApiChatsError,
  GetApiChatsByChatIdMessagesData,
  GetApiChatsByChatIdMessagesResponse,
  GetApiChatsByChatIdMessagesError,
  PostApiAiChatData,
  PostApiAiChatResponse,
  PostApiAiChatError,
  PostApiChatsByChatIdForkData,
  PostApiChatsByChatIdForkResponse,
  PostApiChatsByChatIdForkError,
  PostApiChatsByChatIdForkByMessageIdData,
  PostApiChatsByChatIdForkByMessageIdResponse,
  PostApiChatsByChatIdForkByMessageIdError,
  DeleteApiChatsByChatIdMessagesByMessageIdData,
  DeleteApiChatsByChatIdMessagesByMessageIdResponse,
  DeleteApiChatsByChatIdMessagesByMessageIdError,
  DeleteApiChatsByChatIdData,
  DeleteApiChatsByChatIdResponse,
  DeleteApiChatsByChatIdError,
  PatchApiChatsByChatIdData,
  PatchApiChatsByChatIdResponse,
  PatchApiChatsByChatIdError,
  PostApiTicketsData,
  PostApiTicketsResponse,
  PostApiTicketsError,
  DeleteApiTicketsByTicketIdData,
  DeleteApiTicketsByTicketIdResponse,
  DeleteApiTicketsByTicketIdError,
  GetApiTicketsByTicketIdData,
  GetApiTicketsByTicketIdResponse,
  GetApiTicketsByTicketIdError,
  PatchApiTicketsByTicketIdData,
  PatchApiTicketsByTicketIdResponse,
  PatchApiTicketsByTicketIdError,
  PostApiTicketsByTicketIdLinkFilesData,
  PostApiTicketsByTicketIdLinkFilesResponse,
  PostApiTicketsByTicketIdLinkFilesError,
  PostApiTicketsByTicketIdSuggestFilesData,
  PostApiTicketsByTicketIdSuggestFilesResponse,
  PostApiTicketsByTicketIdSuggestFilesError,
  PostApiTicketsByTicketIdSuggestTasksData,
  PostApiTicketsByTicketIdSuggestTasksResponse,
  PostApiTicketsByTicketIdSuggestTasksError,
  GetApiProjectsByProjectIdTicketsData,
  GetApiProjectsByProjectIdTicketsResponse,
  GetApiProjectsByProjectIdTicketsError,
  GetApiProjectsByProjectIdTicketsWithCountData,
  GetApiProjectsByProjectIdTicketsWithCountResponse,
  GetApiProjectsByProjectIdTicketsWithCountError,
  GetApiProjectsByProjectIdTicketsWithTasksData,
  GetApiProjectsByProjectIdTicketsWithTasksResponse,
  GetApiProjectsByProjectIdTicketsWithTasksError,
  GetApiTicketsByTicketIdTasksData,
  GetApiTicketsByTicketIdTasksResponse,
  GetApiTicketsByTicketIdTasksError,
  PostApiTicketsByTicketIdTasksData,
  PostApiTicketsByTicketIdTasksResponse,
  PostApiTicketsByTicketIdTasksError,
  DeleteApiTicketsByTicketIdTasksByTaskIdData,
  DeleteApiTicketsByTicketIdTasksByTaskIdResponse,
  DeleteApiTicketsByTicketIdTasksByTaskIdError,
  PatchApiTicketsByTicketIdTasksByTaskIdData,
  PatchApiTicketsByTicketIdTasksByTaskIdResponse,
  PatchApiTicketsByTicketIdTasksByTaskIdError,
  PatchApiTicketsByTicketIdTasksReorderData,
  PatchApiTicketsByTicketIdTasksReorderResponse,
  PatchApiTicketsByTicketIdTasksReorderError,
  PostApiTicketsByTicketIdAutoGenerateTasksData,
  PostApiTicketsByTicketIdAutoGenerateTasksResponse,
  PostApiTicketsByTicketIdAutoGenerateTasksError,
  GetApiTicketsBulkTasksData,
  GetApiTicketsBulkTasksResponse,
  GetApiTicketsBulkTasksError,
  GetApiProjectsData,
  GetApiProjectsResponse,
  GetApiProjectsError,
  PostApiProjectsData,
  PostApiProjectsResponse,
  PostApiProjectsError,
  DeleteApiProjectsByProjectIdData,
  DeleteApiProjectsByProjectIdResponse,
  DeleteApiProjectsByProjectIdError,
  GetApiProjectsByProjectIdData,
  GetApiProjectsByProjectIdResponse,
  GetApiProjectsByProjectIdError,
  PatchApiProjectsByProjectIdData,
  PatchApiProjectsByProjectIdResponse,
  PatchApiProjectsByProjectIdError,
  PostApiProjectsByProjectIdSyncData,
  PostApiProjectsByProjectIdSyncResponse,
  PostApiProjectsByProjectIdSyncError,
  GetApiProjectsByProjectIdFilesData,
  GetApiProjectsByProjectIdFilesResponse,
  GetApiProjectsByProjectIdFilesError,
  PostApiProjectsByProjectIdRefreshData,
  PostApiProjectsByProjectIdRefreshResponse,
  PostApiProjectsByProjectIdRefreshError,
  GetApiProjectsByProjectIdSummaryData,
  GetApiProjectsByProjectIdSummaryResponse,
  GetApiProjectsByProjectIdSummaryError,
  PostApiProjectsByProjectIdSuggestFilesData,
  PostApiProjectsByProjectIdSuggestFilesResponse,
  PostApiProjectsByProjectIdSuggestFilesError,
  PostApiProjectsByProjectIdSummarizeData,
  PostApiProjectsByProjectIdSummarizeResponse,
  PostApiProjectsByProjectIdSummarizeError,
  PostApiProjectsByProjectIdRemoveSummariesData,
  PostApiProjectsByProjectIdRemoveSummariesResponse,
  PostApiProjectsByProjectIdRemoveSummariesError,
  PostApiPromptOptimizeData,
  PostApiPromptOptimizeResponse,
  PostApiPromptOptimizeError,
  GetApiKeysData,
  GetApiKeysResponse,
  GetApiKeysError,
  PostApiKeysData,
  PostApiKeysResponse,
  PostApiKeysError,
  DeleteApiKeysByKeyIdData,
  DeleteApiKeysByKeyIdResponse,
  DeleteApiKeysByKeyIdError,
  GetApiKeysByKeyIdData,
  GetApiKeysByKeyIdResponse,
  GetApiKeysByKeyIdError,
  PatchApiKeysByKeyIdData,
  PatchApiKeysByKeyIdResponse,
  PatchApiKeysByKeyIdError,
  GetApiAdminEnvInfoData,
  GetApiAdminEnvInfoResponse,
  GetApiAdminEnvInfoError,
  GetApiAdminSystemStatusData,
  GetApiAdminSystemStatusResponse,
  GetApiAdminSystemStatusError,
  PostApiProjectsByProjectIdAiFileChangesData,
  PostApiProjectsByProjectIdAiFileChangesResponse,
  PostApiProjectsByProjectIdAiFileChangesError,
  GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdData,
  GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdResponse,
  GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdError,
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData,
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponse,
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmError,
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData,
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponse,
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectError,
  GetApiPromptsData,
  GetApiPromptsResponse,
  GetApiPromptsError,
  PostApiPromptsData,
  PostApiPromptsResponse,
  PostApiPromptsError,
  GetApiProjectsByProjectIdPromptsData,
  GetApiProjectsByProjectIdPromptsResponse,
  GetApiProjectsByProjectIdPromptsError,
  DeleteApiProjectsByProjectIdPromptsByPromptIdData,
  DeleteApiProjectsByProjectIdPromptsByPromptIdResponse,
  DeleteApiProjectsByProjectIdPromptsByPromptIdError,
  PostApiProjectsByProjectIdPromptsByPromptIdData,
  PostApiProjectsByProjectIdPromptsByPromptIdResponse,
  PostApiProjectsByProjectIdPromptsByPromptIdError,
  DeleteApiPromptsByPromptIdData,
  DeleteApiPromptsByPromptIdResponse,
  DeleteApiPromptsByPromptIdError,
  GetApiPromptsByPromptIdData,
  GetApiPromptsByPromptIdResponse,
  GetApiPromptsByPromptIdError,
  PatchApiPromptsByPromptIdData,
  PatchApiPromptsByPromptIdResponse,
  PatchApiPromptsByPromptIdError,
  PostApiGenAiStreamData,
  PostApiGenAiStreamResponse,
  PostApiGenAiTextData,
  PostApiGenAiTextResponse,
  PostApiGenAiTextError,
  PostApiGenAiStructuredData,
  PostApiGenAiStructuredResponse,
  PostApiGenAiStructuredError,
  GetApiModelsData,
  GetApiModelsResponse,
  GetApiModelsError,
  PostApiAiGenerateTextData,
  PostApiAiGenerateTextResponse,
  PostApiAiGenerateTextError,
  PostApiProjectsByProjectIdAgentCoderData,
  PostApiProjectsByProjectIdAgentCoderResponse,
  PostApiProjectsByProjectIdAgentCoderError,
  GetApiAgentCoderProjectByProjectIdRunsData,
  GetApiAgentCoderProjectByProjectIdRunsResponse,
  GetApiAgentCoderProjectByProjectIdRunsError,
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsData,
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsResponse,
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsError,
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataData,
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataResponse,
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataError,
  PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData,
  PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponse,
  PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmError,
  DeleteApiAgentCoderRunsByAgentJobIdData,
  DeleteApiAgentCoderRunsByAgentJobIdResponse,
  DeleteApiAgentCoderRunsByAgentJobIdError,
  DeleteApiKvData,
  DeleteApiKvResponse,
  DeleteApiKvError,
  GetApiKvData,
  GetApiKvResponse,
  GetApiKvError
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Get all chat sessions
 */
export const getApiChats = <ThrowOnError extends boolean = false>(options?: Options<GetApiChatsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetApiChatsResponse, GetApiChatsError, ThrowOnError>({
    url: '/api/chats',
    ...options
  })
}

/**
 * Create a new chat session
 */
export const postApiChats = <ThrowOnError extends boolean = false>(
  options: Options<PostApiChatsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PostApiChatsResponse, PostApiChatsError, ThrowOnError>({
    url: '/api/chats',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Get messages for a specific chat
 */
export const getApiChatsByChatIdMessages = <ThrowOnError extends boolean = false>(
  options: Options<GetApiChatsByChatIdMessagesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiChatsByChatIdMessagesResponse,
    GetApiChatsByChatIdMessagesError,
    ThrowOnError
  >({
    url: '/api/chats/{chatId}/messages',
    ...options
  })
}

/**
 * Chat completion (streaming, chat-associated)
 * Continues a chat session identified by chatId, streams response using Vercel AI SDK via UnifiedProviderService.
 */
export const postApiAiChat = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAiChatData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PostApiAiChatResponse, PostApiAiChatError, ThrowOnError>({
    url: '/api/ai/chat',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Fork a chat session
 */
export const postApiChatsByChatIdFork = <ThrowOnError extends boolean = false>(
  options: Options<PostApiChatsByChatIdForkData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiChatsByChatIdForkResponse,
    PostApiChatsByChatIdForkError,
    ThrowOnError
  >({
    url: '/api/chats/{chatId}/fork',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Fork a chat session from a specific message
 */
export const postApiChatsByChatIdForkByMessageId = <ThrowOnError extends boolean = false>(
  options: Options<PostApiChatsByChatIdForkByMessageIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiChatsByChatIdForkByMessageIdResponse,
    PostApiChatsByChatIdForkByMessageIdError,
    ThrowOnError
  >({
    url: '/api/chats/{chatId}/fork/{messageId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Delete a specific message
 */
export const deleteApiChatsByChatIdMessagesByMessageId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiChatsByChatIdMessagesByMessageIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiChatsByChatIdMessagesByMessageIdResponse,
    DeleteApiChatsByChatIdMessagesByMessageIdError,
    ThrowOnError
  >({
    url: '/api/chats/{chatId}/messages/{messageId}',
    ...options
  })
}

/**
 * Delete a chat session and its messages
 */
export const deleteApiChatsByChatId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiChatsByChatIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiChatsByChatIdResponse,
    DeleteApiChatsByChatIdError,
    ThrowOnError
  >({
    url: '/api/chats/{chatId}',
    ...options
  })
}

/**
 * Update chat properties (e.g., title)
 */
export const patchApiChatsByChatId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiChatsByChatIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiChatsByChatIdResponse,
    PatchApiChatsByChatIdError,
    ThrowOnError
  >({
    url: '/api/chats/{chatId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Create a new ticket
 */
export const postApiTickets = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiTicketsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<PostApiTicketsResponse, PostApiTicketsError, ThrowOnError>({
    url: '/api/tickets',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Delete a ticket
 */
export const deleteApiTicketsByTicketId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiTicketsByTicketIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiTicketsByTicketIdResponse,
    DeleteApiTicketsByTicketIdError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}',
    ...options
  })
}

/**
 * Get a ticket by ID
 */
export const getApiTicketsByTicketId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiTicketsByTicketIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiTicketsByTicketIdResponse,
    GetApiTicketsByTicketIdError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}',
    ...options
  })
}

/**
 * Update a ticket
 */
export const patchApiTicketsByTicketId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiTicketsByTicketIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiTicketsByTicketIdResponse,
    PatchApiTicketsByTicketIdError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Link files to a ticket
 */
export const postApiTicketsByTicketIdLinkFiles = <ThrowOnError extends boolean = false>(
  options: Options<PostApiTicketsByTicketIdLinkFilesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiTicketsByTicketIdLinkFilesResponse,
    PostApiTicketsByTicketIdLinkFilesError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/link-files',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Get AI suggestions for relevant files
 */
export const postApiTicketsByTicketIdSuggestFiles = <ThrowOnError extends boolean = false>(
  options: Options<PostApiTicketsByTicketIdSuggestFilesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiTicketsByTicketIdSuggestFilesResponse,
    PostApiTicketsByTicketIdSuggestFilesError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/suggest-files',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Get AI suggestions for tasks
 */
export const postApiTicketsByTicketIdSuggestTasks = <ThrowOnError extends boolean = false>(
  options: Options<PostApiTicketsByTicketIdSuggestTasksData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiTicketsByTicketIdSuggestTasksResponse,
    PostApiTicketsByTicketIdSuggestTasksError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/suggest-tasks',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * List all tickets for a project
 */
export const getApiProjectsByProjectIdTickets = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProjectsByProjectIdTicketsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProjectsByProjectIdTicketsResponse,
    GetApiProjectsByProjectIdTicketsError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/tickets',
    ...options
  })
}

/**
 * List tickets with task counts
 */
export const getApiProjectsByProjectIdTicketsWithCount = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProjectsByProjectIdTicketsWithCountData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProjectsByProjectIdTicketsWithCountResponse,
    GetApiProjectsByProjectIdTicketsWithCountError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/tickets-with-count',
    ...options
  })
}

/**
 * List tickets with their tasks
 */
export const getApiProjectsByProjectIdTicketsWithTasks = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProjectsByProjectIdTicketsWithTasksData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProjectsByProjectIdTicketsWithTasksResponse,
    GetApiProjectsByProjectIdTicketsWithTasksError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/tickets-with-tasks',
    ...options
  })
}

/**
 * Get all tasks for a ticket
 */
export const getApiTicketsByTicketIdTasks = <ThrowOnError extends boolean = false>(
  options: Options<GetApiTicketsByTicketIdTasksData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiTicketsByTicketIdTasksResponse,
    GetApiTicketsByTicketIdTasksError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/tasks',
    ...options
  })
}

/**
 * Create a new task for a ticket
 */
export const postApiTicketsByTicketIdTasks = <ThrowOnError extends boolean = false>(
  options: Options<PostApiTicketsByTicketIdTasksData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiTicketsByTicketIdTasksResponse,
    PostApiTicketsByTicketIdTasksError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/tasks',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Delete a task
 */
export const deleteApiTicketsByTicketIdTasksByTaskId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiTicketsByTicketIdTasksByTaskIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiTicketsByTicketIdTasksByTaskIdResponse,
    DeleteApiTicketsByTicketIdTasksByTaskIdError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/tasks/{taskId}',
    ...options
  })
}

/**
 * Update a task
 */
export const patchApiTicketsByTicketIdTasksByTaskId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiTicketsByTicketIdTasksByTaskIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiTicketsByTicketIdTasksByTaskIdResponse,
    PatchApiTicketsByTicketIdTasksByTaskIdError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/tasks/{taskId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Reorder tasks within a ticket
 */
export const patchApiTicketsByTicketIdTasksReorder = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiTicketsByTicketIdTasksReorderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiTicketsByTicketIdTasksReorderResponse,
    PatchApiTicketsByTicketIdTasksReorderError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/tasks/reorder',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Auto-generate tasks from ticket overview
 */
export const postApiTicketsByTicketIdAutoGenerateTasks = <ThrowOnError extends boolean = false>(
  options: Options<PostApiTicketsByTicketIdAutoGenerateTasksData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiTicketsByTicketIdAutoGenerateTasksResponse,
    PostApiTicketsByTicketIdAutoGenerateTasksError,
    ThrowOnError
  >({
    url: '/api/tickets/{ticketId}/auto-generate-tasks',
    ...options
  })
}

/**
 * Get tasks for multiple tickets
 */
export const getApiTicketsBulkTasks = <ThrowOnError extends boolean = false>(
  options: Options<GetApiTicketsBulkTasksData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiTicketsBulkTasksResponse,
    GetApiTicketsBulkTasksError,
    ThrowOnError
  >({
    url: '/api/tickets/bulk-tasks',
    ...options
  })
}

/**
 * List all projects
 */
export const getApiProjects = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiProjectsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetApiProjectsResponse, GetApiProjectsError, ThrowOnError>({
    url: '/api/projects',
    ...options
  })
}

/**
 * Create a new project and sync its files
 */
export const postApiProjects = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiProjectsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<PostApiProjectsResponse, PostApiProjectsError, ThrowOnError>({
    url: '/api/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Delete a project and its associated data
 */
export const deleteApiProjectsByProjectId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiProjectsByProjectIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiProjectsByProjectIdResponse,
    DeleteApiProjectsByProjectIdError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}',
    ...options
  })
}

/**
 * Get a specific project by ID
 */
export const getApiProjectsByProjectId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProjectsByProjectIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProjectsByProjectIdResponse,
    GetApiProjectsByProjectIdError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}',
    ...options
  })
}

/**
 * Update a project's details
 */
export const patchApiProjectsByProjectId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiProjectsByProjectIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiProjectsByProjectIdResponse,
    PatchApiProjectsByProjectIdError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Manually trigger a full file sync for a project
 */
export const postApiProjectsByProjectIdSync = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdSyncData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdSyncResponse,
    PostApiProjectsByProjectIdSyncError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/sync',
    ...options
  })
}

/**
 * Get the list of files associated with a project
 */
export const getApiProjectsByProjectIdFiles = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProjectsByProjectIdFilesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProjectsByProjectIdFilesResponse,
    GetApiProjectsByProjectIdFilesError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/files',
    ...options
  })
}

/**
 * Refresh project files (sync) optionally limited to a folder
 */
export const postApiProjectsByProjectIdRefresh = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdRefreshData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdRefreshResponse,
    PostApiProjectsByProjectIdRefreshError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/refresh',
    ...options
  })
}

/**
 * Get a combined summary of all files in the project
 */
export const getApiProjectsByProjectIdSummary = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProjectsByProjectIdSummaryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProjectsByProjectIdSummaryResponse,
    GetApiProjectsByProjectIdSummaryError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/summary',
    ...options
  })
}

/**
 * Suggest relevant files based on user input and project context
 */
export const postApiProjectsByProjectIdSuggestFiles = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdSuggestFilesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdSuggestFilesResponse,
    PostApiProjectsByProjectIdSuggestFilesError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/suggest-files',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Summarize selected files in a project (or force re-summarize)
 */
export const postApiProjectsByProjectIdSummarize = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdSummarizeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdSummarizeResponse,
    PostApiProjectsByProjectIdSummarizeError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/summarize',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Remove summaries from selected files
 */
export const postApiProjectsByProjectIdRemoveSummaries = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdRemoveSummariesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdRemoveSummariesResponse,
    PostApiProjectsByProjectIdRemoveSummariesError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/remove-summaries',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Optimize a user-provided prompt using an AI model
 */
export const postApiPromptOptimize = <ThrowOnError extends boolean = false>(
  options: Options<PostApiPromptOptimizeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiPromptOptimizeResponse,
    PostApiPromptOptimizeError,
    ThrowOnError
  >({
    url: '/api/prompt/optimize',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * List all configured provider keys (excluding secrets)
 */
export const getApiKeys = <ThrowOnError extends boolean = false>(options?: Options<GetApiKeysData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetApiKeysResponse, GetApiKeysError, ThrowOnError>({
    url: '/api/keys',
    ...options
  })
}

/**
 * Add a new API key for an AI provider
 */
export const postApiKeys = <ThrowOnError extends boolean = false>(options: Options<PostApiKeysData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<PostApiKeysResponse, PostApiKeysError, ThrowOnError>({
    url: '/api/keys',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Delete a provider key
 */
export const deleteApiKeysByKeyId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiKeysByKeyIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiKeysByKeyIdResponse,
    DeleteApiKeysByKeyIdError,
    ThrowOnError
  >({
    url: '/api/keys/{keyId}',
    ...options
  })
}

/**
 * Get a specific provider key by ID (including secret)
 */
export const getApiKeysByKeyId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiKeysByKeyIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetApiKeysByKeyIdResponse, GetApiKeysByKeyIdError, ThrowOnError>({
    url: '/api/keys/{keyId}',
    ...options
  })
}

/**
 * Update a provider key's details
 */
export const patchApiKeysByKeyId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiKeysByKeyIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<PatchApiKeysByKeyIdResponse, PatchApiKeysByKeyIdError, ThrowOnError>({
    url: '/api/keys/{keyId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Get system environment information and database statistics
 */
export const getApiAdminEnvInfo = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAdminEnvInfoData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetApiAdminEnvInfoResponse, GetApiAdminEnvInfoError, ThrowOnError>({
    url: '/api/admin/env-info',
    ...options
  })
}

/**
 * Check system operational status
 */
export const getApiAdminSystemStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAdminSystemStatusData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAdminSystemStatusResponse,
    GetApiAdminSystemStatusError,
    ThrowOnError
  >({
    url: '/api/admin/system-status',
    ...options
  })
}

/**
 * Generate AI-assisted file changes for a project file
 */
export const postApiProjectsByProjectIdAiFileChanges = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdAiFileChangesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdAiFileChangesResponse,
    PostApiProjectsByProjectIdAiFileChangesError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/ai-file-changes',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Retrieve details for a specific AI file change
 */
export const getApiProjectsByProjectIdAiFileChangesByAiFileChangeId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdResponse,
    GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}',
    ...options
  })
}

/**
 * Confirm and apply an AI-generated file change
 */
export const postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirm = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponse,
    PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}/confirm',
    ...options
  })
}

/**
 * Reject an AI-generated file change
 */
export const postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdReject = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponse,
    PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}/reject',
    ...options
  })
}

/**
 * List all available prompts
 */
export const getApiPrompts = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiPromptsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetApiPromptsResponse, GetApiPromptsError, ThrowOnError>({
    url: '/api/prompts',
    ...options
  })
}

/**
 * Create a new prompt
 */
export const postApiPrompts = <ThrowOnError extends boolean = false>(
  options: Options<PostApiPromptsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PostApiPromptsResponse, PostApiPromptsError, ThrowOnError>({
    url: '/api/prompts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * List prompts associated with a specific project
 */
export const getApiProjectsByProjectIdPrompts = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProjectsByProjectIdPromptsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProjectsByProjectIdPromptsResponse,
    GetApiProjectsByProjectIdPromptsError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/prompts',
    ...options
  })
}

/**
 * Disassociate a prompt from a project
 */
export const deleteApiProjectsByProjectIdPromptsByPromptId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiProjectsByProjectIdPromptsByPromptIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiProjectsByProjectIdPromptsByPromptIdResponse,
    DeleteApiProjectsByProjectIdPromptsByPromptIdError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/prompts/{promptId}',
    ...options
  })
}

/**
 * Associate a prompt with a project
 */
export const postApiProjectsByProjectIdPromptsByPromptId = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdPromptsByPromptIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdPromptsByPromptIdResponse,
    PostApiProjectsByProjectIdPromptsByPromptIdError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/prompts/{promptId}',
    ...options
  })
}

/**
 * Delete a prompt
 */
export const deleteApiPromptsByPromptId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiPromptsByPromptIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiPromptsByPromptIdResponse,
    DeleteApiPromptsByPromptIdError,
    ThrowOnError
  >({
    url: '/api/prompts/{promptId}',
    ...options
  })
}

/**
 * Get a specific prompt by its ID
 */
export const getApiPromptsByPromptId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiPromptsByPromptIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiPromptsByPromptIdResponse,
    GetApiPromptsByPromptIdError,
    ThrowOnError
  >({
    url: '/api/prompts/{promptId}',
    ...options
  })
}

/**
 * Update a prompt's details
 */
export const patchApiPromptsByPromptId = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiPromptsByPromptIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiPromptsByPromptIdResponse,
    PatchApiPromptsByPromptIdError,
    ThrowOnError
  >({
    url: '/api/prompts/{promptId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Generate text using a specified model and prompt
 */
export const postApiGenAiStream = <ThrowOnError extends boolean = false>(
  options: Options<PostApiGenAiStreamData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PostApiGenAiStreamResponse, unknown, ThrowOnError>({
    url: '/api/gen-ai/stream',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Generate text using a specified model and prompt
 */
export const postApiGenAiText = <ThrowOnError extends boolean = false>(
  options: Options<PostApiGenAiTextData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PostApiGenAiTextResponse, PostApiGenAiTextError, ThrowOnError>({
    url: '/api/gen-ai/text',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Generate structured data based on a predefined schema key and user input
 */
export const postApiGenAiStructured = <ThrowOnError extends boolean = false>(
  options: Options<PostApiGenAiStructuredData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiGenAiStructuredResponse,
    PostApiGenAiStructuredError,
    ThrowOnError
  >({
    url: '/api/gen-ai/structured',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * List available AI models for a provider
 */
export const getApiModels = <ThrowOnError extends boolean = false>(
  options: Options<GetApiModelsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetApiModelsResponse, GetApiModelsError, ThrowOnError>({
    url: '/api/models',
    ...options
  })
}

/**
 * Generate text (one-off, non-streaming)
 * Generates text based on a prompt using the specified provider and model. Does not use chat history or save messages.
 */
export const postApiAiGenerateText = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAiGenerateTextData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAiGenerateTextResponse,
    PostApiAiGenerateTextError,
    ThrowOnError
  >({
    url: '/api//ai/generate/text',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Run the Agent Coder on selected files with a user prompt
 */
export const postApiProjectsByProjectIdAgentCoder = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProjectsByProjectIdAgentCoderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProjectsByProjectIdAgentCoderResponse,
    PostApiProjectsByProjectIdAgentCoderError,
    ThrowOnError
  >({
    url: '/api/projects/{projectId}/agent-coder',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * List available Agent Coder run job IDs
 */
export const getApiAgentCoderProjectByProjectIdRuns = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAgentCoderProjectByProjectIdRunsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiAgentCoderProjectByProjectIdRunsResponse,
    GetApiAgentCoderProjectByProjectIdRunsError,
    ThrowOnError
  >({
    url: '/api/agent-coder/project/{projectId}/runs',
    ...options
  })
}

/**
 * Retrieve the orchestrator execution logs (.jsonl) for a specific Agent Coder run
 */
export const getApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogs = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsResponse,
    GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsError,
    ThrowOnError
  >({
    url: '/api/agent-coder/project/{projectId}/runs/{agentJobId}/logs',
    ...options
  })
}

/**
 * Retrieve the agent data log (.json) for a specific Agent Coder run
 */
export const getApiAgentCoderProjectByProjectIdRunsByAgentJobIdData = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataResponse,
    GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataError,
    ThrowOnError
  >({
    url: '/api/agent-coder/project/{projectId}/runs/{agentJobId}/data',
    ...options
  })
}

/**
 * Confirm and write agent-generated file changes to the filesystem
 */
export const postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirm = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponse,
    PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmError,
    ThrowOnError
  >({
    url: '/api/agent-coder/project/{projectId}/runs/{agentJobId}/confirm',
    ...options
  })
}

/**
 * Delete an Agent Coder run and its associated logs/data
 */
export const deleteApiAgentCoderRunsByAgentJobId = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiAgentCoderRunsByAgentJobIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiAgentCoderRunsByAgentJobIdResponse,
    DeleteApiAgentCoderRunsByAgentJobIdError,
    ThrowOnError
  >({
    url: '/api/agent-coder/runs/{agentJobId}',
    ...options
  })
}

/**
 * Delete a key-value pair from the KV store
 */
export const deleteApiKv = <ThrowOnError extends boolean = false>(options: Options<DeleteApiKvData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteApiKvResponse, DeleteApiKvError, ThrowOnError>({
    url: '/api/kv',
    ...options
  })
}

/**
 * Get a value from the KV store by key
 */
export const getApiKv = <ThrowOnError extends boolean = false>(options: Options<GetApiKvData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetApiKvResponse, GetApiKvError, ThrowOnError>({
    url: '/api/kv',
    ...options
  })
}
