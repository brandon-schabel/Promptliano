// This file is auto-generated by @hey-api/openapi-ts

export type Chat = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  title: string
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  created: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  updated: number
}

export type ChatListResponse = {
  success: true
  data: Array<Chat>
}

export type ApiErrorResponse = {
  success: false
  error: {
    message: string
    code?: string
    details?: {
      [key: string]: unknown
    }
  }
}

export type ChatResponse = {
  success: true
  data: Chat
}

export type CreateChatRequestBody = {
  title: string
  /**
   * Copy messages from currentChatId if true
   */
  copyExisting?: boolean
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  currentChatId?: number
}

export type ChatMessage = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  chatId: number
  /**
   * Role of the message sender
   */
  role: 'assistant' | 'user' | 'system'
  /**
   * Message content
   */
  content: string
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  created: number
}

export type MessageListResponse = {
  success: true
  data: Array<ChatMessage>
}

/**
 * Optional parameters for the AI model.
 */
export type AiSdkOptions = {
  /**
   * Controls the randomness of the output. Lower values (e.g., 0.2) make the output more focused, deterministic, and suitable for factual tasks. Higher values (e.g., 0.8) increase randomness and creativity, useful for brainstorming or creative writing. A value of 0 typically means greedy decoding (always picking the most likely token).
   */
  temperature?: number
  /**
   * The maximum number of tokens (words or parts of words) the model is allowed to generate in the response. This limits the output length and can affect cost. Note: This limit usually applies only to the *generated* tokens, not the input prompt tokens.
   */
  maxTokens?: number
  /**
   * Controls diversity via nucleus sampling. It defines a probability threshold (e.g., 0.9). The model considers only the smallest set of most probable tokens whose cumulative probability exceeds this threshold for the next token selection. Lower values (e.g., 0.5) restrict choices more, leading to less random outputs. A value of 1 considers all tokens. It's often recommended to alter *either* `temperature` *or* `topP`, not both.
   */
  topP?: number
  /**
   * Applies a penalty to tokens based on how frequently they have already appeared in the generated text *and* the prompt. Positive values (e.g., 0.5) decrease the likelihood of the model repeating the same words or phrases verbatim, making the output less repetitive. Negative values encourage repetition.
   */
  frequencyPenalty?: number
  /**
   * Applies a penalty to tokens based on whether they have appeared *at all* in the generated text *and* the prompt so far (regardless of frequency). Positive values (e.g., 0.5) encourage the model to introduce new concepts and topics, reducing the likelihood of repeating *any* previously mentioned word. Negative values encourage staying on topic.
   */
  presencePenalty?: number
  /**
   * Restricts the model's choices for the next token to the `k` most likely candidates. For example, if `topK` is 40, the model will only consider the top 40 most probable tokens at each step. A lower value restricts choices more. Setting `topK` to 1 is equivalent to greedy decoding (same as `temperature: 0`). Less commonly used than `topP`.
   */
  topK?: number
  /**
   * Specifies one or more sequences of text where the AI should stop generating. Once the model generates a stop sequence, it will halt output immediately, even if `maxTokens` hasn't been reached. Useful for structured output or controlling conversational turns.
   */
  stop?: string | Array<string>
  /**
   * Specifies the desired format for the model's response. This is highly provider-specific. A common use case is enforcing JSON output, often requiring specific model versions.
   */
  response_format?: unknown
  /**
   * The provider to use for the AI request.
   */
  provider?: string
  /**
   * The model to use for the AI request.
   */
  model?: string
}

export type AiChatStreamRequest = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  chatId: number
  /**
   * The latest message content from the user.
   */
  userMessage: string
  options?: AiSdkOptions
  /**
   * Optional system message override for this specific request.
   */
  systemMessage?: string
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  tempId?: number
  /**
   * Enable debug mode for detailed logging.
   */
  debug?: boolean
}

export type ForkChatRequestBody = {
  /**
   * Array of IDs or Timestamps in unix timestamp (milliseconds)
   */
  excludedMessageIds: Array<number>
}

export type ForkChatFromMessageRequestBody = {
  /**
   * Array of IDs or Timestamps in unix timestamp (milliseconds)
   */
  excludedMessageIds: Array<number>
}

export type OperationSuccessResponse = {
  success: true
  message: string
}

export type UpdateChatRequestBody = {
  title: string
}

export type Ticket = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId: number
  /**
   * Ticket title
   */
  title: string
  /**
   * Ticket description
   */
  overview: string
  /**
   * Current ticket status
   */
  status: 'open' | 'in_progress' | 'done' | 'closed'
  priority: 'low' | 'normal' | 'high'
  suggestedFileIds?: Array<number>
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  created: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  updated: number
}

export type TicketResponse = {
  success: true
  ticket: Ticket
}

export type CreateTicketBody = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId: number
  title: string
  overview?: string
  status?: 'open' | 'in_progress' | 'closed'
  priority?: 'low' | 'normal' | 'high'
  suggestedFileIds?: Array<number>
}

export type Task = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  ticketId: number
  /**
   * Task content/description
   */
  content: string
  /**
   * Whether the task is completed
   */
  done: boolean
  /**
   * Task order within the ticket
   */
  orderIndex: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  created: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  updated: number
}

export type BulkTasksResponse = {
  success: true
  tasks: {
    [key: string]: Array<Task>
  }
}

export type UpdateTicketBody = {
  title?: string
  overview?: string
  status?: 'open' | 'in_progress' | 'done' | 'closed'
  priority?: 'low' | 'normal' | 'high'
  suggestedFileIds?: Array<number>
}

export type LinkedFilesResponse = {
  success: true
  linkedFiles: Array<{
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    ticketId: number
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    fileId: number
  }>
}

export type SuggestedFilesResponse = {
  success: true
  /**
   * Array of IDs or Timestamps in unix timestamp (milliseconds)
   */
  recommendedFileIds: Array<number>
  combinedSummaries?: string
  message?: string
}

export type SuggestFilesBody = {
  /**
   * Optional additional context for file suggestions
   */
  extraUserInput?: string
}

export type SuggestedTasksResponse = {
  success: true
  suggestedTasks: Array<string>
}

export type TicketListResponse = {
  success: true
  tickets: Array<Ticket>
}

export type TicketWithTaskCount = {
  ticket: Ticket
  taskCount: number
  completedTaskCount: number
}

export type TicketWithTaskCountListResponse = {
  success: true
  ticketsWithCount: Array<TicketWithTaskCount>
}

export type TicketWithTasks = {
  ticket: Ticket
  tasks: Array<Task>
}

export type TicketWithTasksListResponse = {
  success: true
  ticketsWithTasks: Array<TicketWithTasks>
}

export type TaskResponse = {
  success: true
  task: Task
}

export type TaskListResponse = {
  success: true
  tasks: Array<Task>
}

export type Project = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  name: string
  description: string
  path: string
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  created: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  updated: number
}

export type ProjectResponse = {
  success: true
  data: Project
}

export type ProjectResponseMultiStatus = ProjectResponse & {
  warning?: string
  error?: string
}

export type CreateProjectRequestBody = {
  name: string
  path: string
  description?: string
}

export type ProjectListResponse = {
  success: true
  data: Array<Project>
}

export type UpdateProjectRequestBody = {
  name?: string
  path?: string
  description?: string
}

export type ProjectFile = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId: number
  name: string
  path: string
  extension: string
  size: number
  content: string
  summary: string
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  summaryLastUpdated: number
  meta: string
  checksum: string
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  created: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  updated: number
}

export type FileListResponse = {
  success: true
  data: Array<ProjectFile>
}

export type ProjectSummaryResponse = {
  success: true
  summary: string
}

export type SuggestFilesResponse = {
  success: true
  /**
   * Array of IDs or Timestamps in unix timestamp (milliseconds)
   */
  recommendedFileIds: Array<number>
}

export type SuggestFilesRequestBody = {
  userInput: string
}

export type SummarizeFilesResponse = {
  success: true
  included: number
  skipped: number
  updatedFiles: Array<ProjectFile>
  message: string
}

export type SummarizeFilesRequestBody = {
  /**
   * Array of IDs or Timestamps in unix timestamp (milliseconds)
   */
  fileIds: Array<number>
  /**
   * Force re-summarization even if summary exists
   */
  force?: boolean
}

export type RemoveSummariesResponse = {
  success: true
  removedCount: number
  message: string
}

export type RemoveSummariesRequestBody = {
  /**
   * Array of IDs or Timestamps in unix timestamp (milliseconds)
   */
  fileIds: Array<number>
}

export type OptimizePromptResponse = {
  /**
   * Indicates successful optimization
   */
  success: true
  data: {
    /**
     * The optimized prompt generated by the service.
     */
    optimizedPrompt: string
  }
}

export type OptimizePromptRequest = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId: number
  /**
   * The user's initial prompt or context to be optimized.
   */
  userContext: string
}

export type ProviderKey = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  /**
   * User-defined name for the key
   */
  name: string
  /**
   * AI Provider identifier (e.g., openai, anthropic)
   */
  provider: string
  /**
   * The actual API Key (handle with care)
   */
  key: string
  /**
   * Whether this key is the default for its provider
   */
  isDefault?: boolean
  /**
   * Creation timestamp (ISO 8601)
   */
  created: number
  /**
   * Last update timestamp (ISO 8601)
   */
  updated: number
}

export type ProviderKeyWithSecret = ProviderKey & {
  [key: string]: unknown
}

export type ProviderKeyResponse = {
  success: true
  data: ProviderKeyWithSecret
}

export type CreateProviderKeyRequestBody = {
  name: string
  provider: string
  key: string
  isDefault?: boolean
}

export type ProviderKeyListResponse = {
  success: true
  data: Array<ProviderKey>
}

export type UpdateProviderKeyRequestBody = {
  name?: string
  provider?: string
  key?: string
  isDefault?: boolean
}

export type EnvironmentInfo = {
  NODE_ENV: string
  BUN_ENV: string
  SERVER_PORT: string
}

export type ServerInfo = {
  version: string
  bunVersion: string
  platform: string
  arch: string
  memoryUsage: {
    rss: number
    heapTotal: number
    heapUsed: number
    external: number
    arrayBuffers: number
  }
  uptime: number
}

export type DatabaseStats = {
  chats: {
    count: number
  }
  chat_messages: {
    count: number
  }
  projects: {
    count: number
  }
  files: {
    count: number
  }
  prompts: {
    count: number
  }
  prompt_projects: {
    count: number
  }
  provider_keys: {
    count: number
  }
  tickets: {
    count: number
  }
  ticket_files: {
    count: number
  }
  ticket_tasks: {
    count: number
  }
  file_changes: {
    count: number
  }
}

export type EnvInfoResponse = {
  success: true
  environment: EnvironmentInfo
  serverInfo: ServerInfo
  databaseStats: DatabaseStats
}

export type SystemStatusResponse = {
  success: true
  status: string
  checks: {
    api: string
    timestamp: string
  }
}

export type AiFileChangeRecordResponse = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId: number
  /**
   * Path to the file that was modified
   */
  filePath: string
  /**
   * The original content of the file before changes.
   */
  originalContent: string
  /**
   * The AI suggested content for the file.
   */
  suggestedContent: string
  /**
   * The diff between original and suggested content, or an explanation.
   */
  diff: string
  /**
   * The user prompt that initiated this change.
   */
  prompt: string
  /**
   * Status of the file change.
   */
  status: 'pending' | 'confirmed' | 'rejected'
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  created: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  updated: number
  /**
   * Explanation from the AI about the change.
   */
  explanation: string
}

export type GenerateAiFileChangeResponse = {
  success: true
  result: AiFileChangeRecordResponse
}

export type GetAiFileChangeDetailsResponse = {
  success: true
  fileChange: AiFileChangeRecordResponse
}

export type ConfirmAiFileChangeResponse = {
  success: true
  result: {
    status: string
    message: string
  }
}

export type Prompt = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  /**
   * Prompt name
   */
  name: string
  /**
   * Prompt content template
   */
  content: string
  /**
   * Optional ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId?: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  created: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  updated: number
}

export type PromptResponse = {
  success: true
  data: Prompt
}

export type CreatePromptRequestBody = {
  /**
   * Optional ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId?: number
  name: string
  content: string
}

export type PromptListResponse = {
  success: true
  data: Array<Prompt>
}

export type UpdatePromptRequestBody = {
  name?: string
  content?: string
}

export type AiGenerateTextRequest = {
  /**
   * The text prompt for the AI.
   */
  prompt: string
  options?: AiSdkOptions & unknown
  /**
   * Optional system message to guide the AI behavior and persona.
   */
  systemMessage?: string
}

export type AiGenerateTextResponse = {
  success: true
  data: {
    /**
     * The generated text response from the AI.
     */
    text: string
  }
}

export type AiGenerateStructuredResponse = {
  success: true
  data: {
    /**
     * The generated structured data, validated against the schema defined by the 'schemaKey'.
     */
    output?: unknown
  }
}

export type AiGenerateStructuredRequest = {
  /**
   * The key identifying the predefined structured task configuration.
   */
  schemaKey: string
  /**
   * The user's input or context for the structured generation task.
   */
  userInput: string
  options?: AiSdkOptions & unknown
}

export type UnifiedModel = {
  /**
   * Model identifier
   */
  id: string
  /**
   * User-friendly model name
   */
  name: string
  /**
   * Provider ID
   */
  provider: string
  /**
   * Context window size in tokens
   */
  context_length?: number
}

export type ModelsListResponse = {
  success: true
  data: Array<UnifiedModel>
}

/**
 * Represents a single, well-defined unit of work required to fulfill part of the user's overall request, typically focused on one file.
 */
export type AgentTask = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  id: number
  /**
   * A brief, human-readable title summarizing the task's objective.
   */
  title: string
  /**
   * A detailed description of the changes required for the target file. This will be used as the primary instruction for the LLM rewrite.
   */
  description: string
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  targetFileId?: number
  /**
   * The relative path of the primary source file (e.g., 'src/utils/auth.ts'). Required for all tasks. Used for creation path.
   */
  targetFilePath: string
  /**
   * Tracks the progress of the task through the workflow.
   */
  status?: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED' | 'SKIPPED'
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  relatedTestFileId?: number
  /**
   * Optional: AI's estimation of the task's complexity.
   */
  estimatedComplexity?: 'LOW' | 'MEDIUM' | 'HIGH'
  /**
   * Array of IDs or Timestamps in unix timestamp (milliseconds)
   */
  dependencies?: Array<number>
}

/**
 * The final task plan executed by the agent (includes task statuses).
 */
export type AgentTaskPlan = {
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId: number
  /**
   * A concise summary of the original user request being addressed by this plan.
   */
  overallGoal: string
  /**
   * An ordered list of tasks designed to collectively achieve the overall goal. Order implies execution sequence unless overridden by dependencies.
   */
  tasks: Array<AgentTask>
}

export type AgentCoderRunSuccessData = {
  /**
   * The state of the project files after the agent's execution.
   */
  updatedFiles: Array<number>
  taskPlan?: AgentTaskPlan
  /**
   * The unique ID for retrieving the execution logs and data for this run.
   */
  agentJobId: number
}

export type AgentCoderRunResponse = {
  success: true
  data: AgentCoderRunSuccessData
}

export type AgentCoderRunRequest = {
  /**
   * The main instruction or goal for the agent.
   */
  userInput: string
  /**
   * Array of IDs or Timestamps in unix timestamp (milliseconds)
   */
  selectedFileIds: Array<number>
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  agentJobId?: number
  /**
   * Array of Optional IDs or Timestamps in unix timestamp (milliseconds)
   */
  selectedPromptIds: Array<number>
}

export type AgentDataLog = {
  /**
   * Absolute path to the directory containing logs for this job.
   */
  agentJobDirPath: string
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  projectId: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  agentJobId: number
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  agentJobStartTime: number
  taskPlan?: AgentTaskPlan & unknown
  /**
   * The final outcome status of the agent run.
   */
  finalStatus: 'Success' | 'Failed' | 'No tasks generated' | 'Error'
  finalTaskPlan: AgentTaskPlan & unknown
  /**
   * ID or Timestamp in unix timestamp (milliseconds)
   */
  agentJobEndTime: number
  /**
   * Error message if the agent run failed.
   */
  errorMessage?: string
  /**
   * Stack trace if the agent run failed.
   */
  errorStack?: string
  /**
   * Array of Optional IDs or Timestamps in unix timestamp (milliseconds)
   */
  updatedFiles: Array<number>
}

export type ConfirmAgentRunChangesResponse = {
  success: true
  message: string
  /**
   * Relative paths of files proposed for writing (actual writes depend on checksums).
   */
  writtenFiles: Array<string>
}

export type DeleteAgentRunResponse = {
  success: true
  message: string
}

export type GetApiChatsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/chats'
}

export type GetApiChatsErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiChatsError = GetApiChatsErrors[keyof GetApiChatsErrors]

export type GetApiChatsResponses = {
  /**
   * Successfully retrieved all chats
   */
  200: ChatListResponse
}

export type GetApiChatsResponse = GetApiChatsResponses[keyof GetApiChatsResponses]

export type PostApiChatsData = {
  /**
   * Data for the new chat session
   */
  body: CreateChatRequestBody
  path?: never
  query?: never
  url: '/api/chats'
}

export type PostApiChatsErrors = {
  /**
   * Referenced chat not found
   */
  404: ApiErrorResponse
  /**
   * Validation error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiChatsError = PostApiChatsErrors[keyof PostApiChatsErrors]

export type PostApiChatsResponses = {
  /**
   * Chat created successfully
   */
  201: ChatResponse
}

export type PostApiChatsResponse = PostApiChatsResponses[keyof PostApiChatsResponses]

export type GetApiChatsByChatIdMessagesData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    chatId: number
  }
  query?: never
  url: '/api/chats/{chatId}/messages'
}

export type GetApiChatsByChatIdMessagesErrors = {
  /**
   * Chat not found
   */
  404: ApiErrorResponse
  /**
   * Validation error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiChatsByChatIdMessagesError =
  GetApiChatsByChatIdMessagesErrors[keyof GetApiChatsByChatIdMessagesErrors]

export type GetApiChatsByChatIdMessagesResponses = {
  /**
   * Successfully retrieved messages
   */
  200: MessageListResponse
}

export type GetApiChatsByChatIdMessagesResponse =
  GetApiChatsByChatIdMessagesResponses[keyof GetApiChatsByChatIdMessagesResponses]

export type PostApiAiChatData = {
  /**
   * Chat ID, user message, provider, model, and options for the streaming AI chat completion.
   */
  body: AiChatStreamRequest
  path?: never
  query?: never
  url: '/api/ai/chat'
}

export type PostApiAiChatErrors = {
  /**
   * Bad Request (e.g., missing API key for provider, invalid provider/model)
   */
  400: ApiErrorResponse
  /**
   * Chat session (chatId) not found.
   */
  404: ApiErrorResponse
  /**
   * Validation error (invalid request body)
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error or AI provider communication error
   */
  500: ApiErrorResponse
}

export type PostApiAiChatError = PostApiAiChatErrors[keyof PostApiAiChatErrors]

export type PostApiAiChatResponses = {
  /**
   * Stream of response tokens (Vercel AI SDK format)
   */
  200: string
}

export type PostApiAiChatResponse = PostApiAiChatResponses[keyof PostApiAiChatResponses]

export type PostApiChatsByChatIdForkData = {
  /**
   * Optional message IDs to exclude from the fork
   */
  body: ForkChatRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    chatId: number
  }
  query?: never
  url: '/api/chats/{chatId}/fork'
}

export type PostApiChatsByChatIdForkErrors = {
  /**
   * Original chat not found
   */
  404: ApiErrorResponse
  /**
   * Validation error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiChatsByChatIdForkError = PostApiChatsByChatIdForkErrors[keyof PostApiChatsByChatIdForkErrors]

export type PostApiChatsByChatIdForkResponses = {
  /**
   * Chat forked successfully
   */
  201: ChatResponse
}

export type PostApiChatsByChatIdForkResponse =
  PostApiChatsByChatIdForkResponses[keyof PostApiChatsByChatIdForkResponses]

export type PostApiChatsByChatIdForkByMessageIdData = {
  /**
   * Optional message IDs to exclude from the fork
   */
  body: ForkChatFromMessageRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    chatId: number
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    messageId: number
  }
  query?: never
  url: '/api/chats/{chatId}/fork/{messageId}'
}

export type PostApiChatsByChatIdForkByMessageIdErrors = {
  /**
   * Original chat or message not found
   */
  404: ApiErrorResponse
  /**
   * Validation error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiChatsByChatIdForkByMessageIdError =
  PostApiChatsByChatIdForkByMessageIdErrors[keyof PostApiChatsByChatIdForkByMessageIdErrors]

export type PostApiChatsByChatIdForkByMessageIdResponses = {
  /**
   * Chat forked successfully from message
   */
  201: ChatResponse
}

export type PostApiChatsByChatIdForkByMessageIdResponse =
  PostApiChatsByChatIdForkByMessageIdResponses[keyof PostApiChatsByChatIdForkByMessageIdResponses]

export type DeleteApiChatsByChatIdMessagesByMessageIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    chatId: number
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    messageId: number
  }
  query?: never
  url: '/api/chats/{chatId}/messages/{messageId}'
}

export type DeleteApiChatsByChatIdMessagesByMessageIdErrors = {
  /**
   * Message not found
   */
  404: ApiErrorResponse
  /**
   * Validation error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type DeleteApiChatsByChatIdMessagesByMessageIdError =
  DeleteApiChatsByChatIdMessagesByMessageIdErrors[keyof DeleteApiChatsByChatIdMessagesByMessageIdErrors]

export type DeleteApiChatsByChatIdMessagesByMessageIdResponses = {
  /**
   * Message deleted successfully
   */
  200: OperationSuccessResponse
}

export type DeleteApiChatsByChatIdMessagesByMessageIdResponse =
  DeleteApiChatsByChatIdMessagesByMessageIdResponses[keyof DeleteApiChatsByChatIdMessagesByMessageIdResponses]

export type DeleteApiChatsByChatIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    chatId: number
  }
  query?: never
  url: '/api/chats/{chatId}'
}

export type DeleteApiChatsByChatIdErrors = {
  /**
   * Chat not found
   */
  404: ApiErrorResponse
  /**
   * Validation error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type DeleteApiChatsByChatIdError = DeleteApiChatsByChatIdErrors[keyof DeleteApiChatsByChatIdErrors]

export type DeleteApiChatsByChatIdResponses = {
  /**
   * Chat deleted successfully
   */
  200: OperationSuccessResponse
}

export type DeleteApiChatsByChatIdResponse = DeleteApiChatsByChatIdResponses[keyof DeleteApiChatsByChatIdResponses]

export type PatchApiChatsByChatIdData = {
  /**
   * Data to update for the chat
   */
  body: UpdateChatRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    chatId: number
  }
  query?: never
  url: '/api/chats/{chatId}'
}

export type PatchApiChatsByChatIdErrors = {
  /**
   * Chat not found
   */
  404: ApiErrorResponse
  /**
   * Validation error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PatchApiChatsByChatIdError = PatchApiChatsByChatIdErrors[keyof PatchApiChatsByChatIdErrors]

export type PatchApiChatsByChatIdResponses = {
  /**
   * Chat updated successfully
   */
  200: ChatResponse
}

export type PatchApiChatsByChatIdResponse = PatchApiChatsByChatIdResponses[keyof PatchApiChatsByChatIdResponses]

export type PostApiTicketsData = {
  body?: CreateTicketBody
  path?: never
  query?: never
  url: '/api/tickets'
}

export type PostApiTicketsErrors = {
  /**
   * Validation Error
   */
  400: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiTicketsError = PostApiTicketsErrors[keyof PostApiTicketsErrors]

export type PostApiTicketsResponses = {
  /**
   * Ticket created successfully
   */
  201: TicketResponse
}

export type PostApiTicketsResponse = PostApiTicketsResponses[keyof PostApiTicketsResponses]

export type GetApiTicketsBulkTasksData = {
  body?: never
  path?: never
  query: {
    /**
     * Comma-separated list of ticket IDs
     */
    ids: string
  }
  url: '/api/tickets/bulk-tasks'
}

export type GetApiTicketsBulkTasksErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiTicketsBulkTasksError = GetApiTicketsBulkTasksErrors[keyof GetApiTicketsBulkTasksErrors]

export type GetApiTicketsBulkTasksResponses = {
  /**
   * Tasks retrieved successfully
   */
  200: BulkTasksResponse
}

export type GetApiTicketsBulkTasksResponse = GetApiTicketsBulkTasksResponses[keyof GetApiTicketsBulkTasksResponses]

export type DeleteApiTicketsByTicketIdData = {
  body?: never
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}'
}

export type DeleteApiTicketsByTicketIdErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type DeleteApiTicketsByTicketIdError = DeleteApiTicketsByTicketIdErrors[keyof DeleteApiTicketsByTicketIdErrors]

export type DeleteApiTicketsByTicketIdResponses = {
  /**
   * Ticket deleted successfully
   */
  200: OperationSuccessResponse
}

export type DeleteApiTicketsByTicketIdResponse =
  DeleteApiTicketsByTicketIdResponses[keyof DeleteApiTicketsByTicketIdResponses]

export type GetApiTicketsByTicketIdData = {
  body?: never
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}'
}

export type GetApiTicketsByTicketIdErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiTicketsByTicketIdError = GetApiTicketsByTicketIdErrors[keyof GetApiTicketsByTicketIdErrors]

export type GetApiTicketsByTicketIdResponses = {
  /**
   * Ticket retrieved successfully
   */
  200: TicketResponse
}

export type GetApiTicketsByTicketIdResponse = GetApiTicketsByTicketIdResponses[keyof GetApiTicketsByTicketIdResponses]

export type PatchApiTicketsByTicketIdData = {
  body?: UpdateTicketBody
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}'
}

export type PatchApiTicketsByTicketIdErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PatchApiTicketsByTicketIdError = PatchApiTicketsByTicketIdErrors[keyof PatchApiTicketsByTicketIdErrors]

export type PatchApiTicketsByTicketIdResponses = {
  /**
   * Ticket updated successfully
   */
  200: TicketResponse
}

export type PatchApiTicketsByTicketIdResponse =
  PatchApiTicketsByTicketIdResponses[keyof PatchApiTicketsByTicketIdResponses]

export type PostApiTicketsByTicketIdLinkFilesData = {
  body?: {
    /**
     * Array of IDs or Timestamps in unix timestamp (milliseconds)
     */
    fileIds: Array<number>
  }
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/link-files'
}

export type PostApiTicketsByTicketIdLinkFilesErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiTicketsByTicketIdLinkFilesError =
  PostApiTicketsByTicketIdLinkFilesErrors[keyof PostApiTicketsByTicketIdLinkFilesErrors]

export type PostApiTicketsByTicketIdLinkFilesResponses = {
  /**
   * Files linked successfully
   */
  200: LinkedFilesResponse
}

export type PostApiTicketsByTicketIdLinkFilesResponse =
  PostApiTicketsByTicketIdLinkFilesResponses[keyof PostApiTicketsByTicketIdLinkFilesResponses]

export type PostApiTicketsByTicketIdSuggestFilesData = {
  body?: SuggestFilesBody
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/suggest-files'
}

export type PostApiTicketsByTicketIdSuggestFilesErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiTicketsByTicketIdSuggestFilesError =
  PostApiTicketsByTicketIdSuggestFilesErrors[keyof PostApiTicketsByTicketIdSuggestFilesErrors]

export type PostApiTicketsByTicketIdSuggestFilesResponses = {
  /**
   * Files suggested successfully
   */
  200: SuggestedFilesResponse
}

export type PostApiTicketsByTicketIdSuggestFilesResponse =
  PostApiTicketsByTicketIdSuggestFilesResponses[keyof PostApiTicketsByTicketIdSuggestFilesResponses]

export type PostApiTicketsByTicketIdSuggestTasksData = {
  body?: {
    userContext?: string
  }
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/suggest-tasks'
}

export type PostApiTicketsByTicketIdSuggestTasksErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiTicketsByTicketIdSuggestTasksError =
  PostApiTicketsByTicketIdSuggestTasksErrors[keyof PostApiTicketsByTicketIdSuggestTasksErrors]

export type PostApiTicketsByTicketIdSuggestTasksResponses = {
  /**
   * Tasks suggested successfully
   */
  200: SuggestedTasksResponse
}

export type PostApiTicketsByTicketIdSuggestTasksResponse =
  PostApiTicketsByTicketIdSuggestTasksResponses[keyof PostApiTicketsByTicketIdSuggestTasksResponses]

export type GetApiProjectsByProjectIdTicketsData = {
  body?: never
  path: {
    /**
     * Project identifier
     */
    projectId: number
  }
  query?: {
    /**
     * Filter tickets by status
     */
    status?: string
  }
  url: '/api/projects/{projectId}/tickets'
}

export type GetApiProjectsByProjectIdTicketsErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiProjectsByProjectIdTicketsError =
  GetApiProjectsByProjectIdTicketsErrors[keyof GetApiProjectsByProjectIdTicketsErrors]

export type GetApiProjectsByProjectIdTicketsResponses = {
  /**
   * Tickets listed successfully
   */
  200: TicketListResponse
}

export type GetApiProjectsByProjectIdTicketsResponse =
  GetApiProjectsByProjectIdTicketsResponses[keyof GetApiProjectsByProjectIdTicketsResponses]

export type GetApiProjectsByProjectIdTicketsWithCountData = {
  body?: never
  path: {
    /**
     * Project identifier
     */
    projectId: number
  }
  query?: {
    /**
     * Filter tickets by status
     */
    status?: string
  }
  url: '/api/projects/{projectId}/tickets-with-count'
}

export type GetApiProjectsByProjectIdTicketsWithCountErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiProjectsByProjectIdTicketsWithCountError =
  GetApiProjectsByProjectIdTicketsWithCountErrors[keyof GetApiProjectsByProjectIdTicketsWithCountErrors]

export type GetApiProjectsByProjectIdTicketsWithCountResponses = {
  /**
   * Tickets with counts listed successfully
   */
  200: TicketWithTaskCountListResponse
}

export type GetApiProjectsByProjectIdTicketsWithCountResponse =
  GetApiProjectsByProjectIdTicketsWithCountResponses[keyof GetApiProjectsByProjectIdTicketsWithCountResponses]

export type GetApiProjectsByProjectIdTicketsWithTasksData = {
  body?: never
  path: {
    /**
     * Project identifier
     */
    projectId: number
  }
  query?: {
    /**
     * Filter tickets by status
     */
    status?: string
  }
  url: '/api/projects/{projectId}/tickets-with-tasks'
}

export type GetApiProjectsByProjectIdTicketsWithTasksErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiProjectsByProjectIdTicketsWithTasksError =
  GetApiProjectsByProjectIdTicketsWithTasksErrors[keyof GetApiProjectsByProjectIdTicketsWithTasksErrors]

export type GetApiProjectsByProjectIdTicketsWithTasksResponses = {
  /**
   * Tickets with tasks listed successfully
   */
  200: TicketWithTasksListResponse
}

export type GetApiProjectsByProjectIdTicketsWithTasksResponse =
  GetApiProjectsByProjectIdTicketsWithTasksResponses[keyof GetApiProjectsByProjectIdTicketsWithTasksResponses]

export type GetApiTicketsByTicketIdTasksData = {
  body?: never
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/tasks'
}

export type GetApiTicketsByTicketIdTasksErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiTicketsByTicketIdTasksError =
  GetApiTicketsByTicketIdTasksErrors[keyof GetApiTicketsByTicketIdTasksErrors]

export type GetApiTicketsByTicketIdTasksResponses = {
  /**
   * Tasks retrieved successfully
   */
  200: TaskListResponse
}

export type GetApiTicketsByTicketIdTasksResponse =
  GetApiTicketsByTicketIdTasksResponses[keyof GetApiTicketsByTicketIdTasksResponses]

export type PostApiTicketsByTicketIdTasksData = {
  body?: {
    content: string
  }
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/tasks'
}

export type PostApiTicketsByTicketIdTasksErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiTicketsByTicketIdTasksError =
  PostApiTicketsByTicketIdTasksErrors[keyof PostApiTicketsByTicketIdTasksErrors]

export type PostApiTicketsByTicketIdTasksResponses = {
  /**
   * Task created successfully
   */
  201: TaskResponse
}

export type PostApiTicketsByTicketIdTasksResponse =
  PostApiTicketsByTicketIdTasksResponses[keyof PostApiTicketsByTicketIdTasksResponses]

export type PatchApiTicketsByTicketIdTasksReorderData = {
  body?: {
    tasks: Array<{
      /**
       * ID or Timestamp in unix timestamp (milliseconds)
       */
      taskId: number
      orderIndex: number
    }>
  }
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/tasks/reorder'
}

export type PatchApiTicketsByTicketIdTasksReorderErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PatchApiTicketsByTicketIdTasksReorderError =
  PatchApiTicketsByTicketIdTasksReorderErrors[keyof PatchApiTicketsByTicketIdTasksReorderErrors]

export type PatchApiTicketsByTicketIdTasksReorderResponses = {
  /**
   * Tasks reordered successfully
   */
  200: TaskListResponse
}

export type PatchApiTicketsByTicketIdTasksReorderResponse =
  PatchApiTicketsByTicketIdTasksReorderResponses[keyof PatchApiTicketsByTicketIdTasksReorderResponses]

export type PostApiTicketsByTicketIdAutoGenerateTasksData = {
  body?: never
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/auto-generate-tasks'
}

export type PostApiTicketsByTicketIdAutoGenerateTasksErrors = {
  /**
   * Ticket not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiTicketsByTicketIdAutoGenerateTasksError =
  PostApiTicketsByTicketIdAutoGenerateTasksErrors[keyof PostApiTicketsByTicketIdAutoGenerateTasksErrors]

export type PostApiTicketsByTicketIdAutoGenerateTasksResponses = {
  /**
   * Tasks generated successfully
   */
  200: TaskListResponse
}

export type PostApiTicketsByTicketIdAutoGenerateTasksResponse =
  PostApiTicketsByTicketIdAutoGenerateTasksResponses[keyof PostApiTicketsByTicketIdAutoGenerateTasksResponses]

export type DeleteApiTicketsByTicketIdTasksByTaskIdData = {
  body?: never
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
    /**
     * Task identifier
     */
    taskId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/tasks/{taskId}'
}

export type DeleteApiTicketsByTicketIdTasksByTaskIdErrors = {
  /**
   * Task not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type DeleteApiTicketsByTicketIdTasksByTaskIdError =
  DeleteApiTicketsByTicketIdTasksByTaskIdErrors[keyof DeleteApiTicketsByTicketIdTasksByTaskIdErrors]

export type DeleteApiTicketsByTicketIdTasksByTaskIdResponses = {
  /**
   * Task deleted successfully
   */
  200: OperationSuccessResponse
}

export type DeleteApiTicketsByTicketIdTasksByTaskIdResponse =
  DeleteApiTicketsByTicketIdTasksByTaskIdResponses[keyof DeleteApiTicketsByTicketIdTasksByTaskIdResponses]

export type PatchApiTicketsByTicketIdTasksByTaskIdData = {
  body?: {
    content?: string
    done?: boolean
  }
  path: {
    /**
     * Ticket identifier
     */
    ticketId: number
    /**
     * Task identifier
     */
    taskId: number
  }
  query?: never
  url: '/api/tickets/{ticketId}/tasks/{taskId}'
}

export type PatchApiTicketsByTicketIdTasksByTaskIdErrors = {
  /**
   * Task not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PatchApiTicketsByTicketIdTasksByTaskIdError =
  PatchApiTicketsByTicketIdTasksByTaskIdErrors[keyof PatchApiTicketsByTicketIdTasksByTaskIdErrors]

export type PatchApiTicketsByTicketIdTasksByTaskIdResponses = {
  /**
   * Task updated successfully
   */
  200: TaskResponse
}

export type PatchApiTicketsByTicketIdTasksByTaskIdResponse =
  PatchApiTicketsByTicketIdTasksByTaskIdResponses[keyof PatchApiTicketsByTicketIdTasksByTaskIdResponses]

export type GetApiProjectsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/projects'
}

export type GetApiProjectsErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiProjectsError = GetApiProjectsErrors[keyof GetApiProjectsErrors]

export type GetApiProjectsResponses = {
  /**
   * Successfully retrieved all projects
   */
  200: ProjectListResponse
}

export type GetApiProjectsResponse = GetApiProjectsResponses[keyof GetApiProjectsResponses]

export type PostApiProjectsData = {
  body?: CreateProjectRequestBody
  path?: never
  query?: never
  url: '/api/projects'
}

export type PostApiProjectsErrors = {
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiProjectsError = PostApiProjectsErrors[keyof PostApiProjectsErrors]

export type PostApiProjectsResponses = {
  /**
   * Project created and initial sync started
   */
  201: ProjectResponse
  /**
   * Project created, but post-creation steps encountered issues
   */
  207: ProjectResponseMultiStatus
}

export type PostApiProjectsResponse = PostApiProjectsResponses[keyof PostApiProjectsResponses]

export type DeleteApiProjectsByProjectIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}'
}

export type DeleteApiProjectsByProjectIdErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type DeleteApiProjectsByProjectIdError =
  DeleteApiProjectsByProjectIdErrors[keyof DeleteApiProjectsByProjectIdErrors]

export type DeleteApiProjectsByProjectIdResponses = {
  /**
   * Project deleted successfully
   */
  200: OperationSuccessResponse
}

export type DeleteApiProjectsByProjectIdResponse =
  DeleteApiProjectsByProjectIdResponses[keyof DeleteApiProjectsByProjectIdResponses]

export type GetApiProjectsByProjectIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}'
}

export type GetApiProjectsByProjectIdErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error (invalid projectId format)
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiProjectsByProjectIdError = GetApiProjectsByProjectIdErrors[keyof GetApiProjectsByProjectIdErrors]

export type GetApiProjectsByProjectIdResponses = {
  /**
   * Successfully retrieved project details
   */
  200: ProjectResponse
}

export type GetApiProjectsByProjectIdResponse =
  GetApiProjectsByProjectIdResponses[keyof GetApiProjectsByProjectIdResponses]

export type PatchApiProjectsByProjectIdData = {
  body?: UpdateProjectRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}'
}

export type PatchApiProjectsByProjectIdErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PatchApiProjectsByProjectIdError =
  PatchApiProjectsByProjectIdErrors[keyof PatchApiProjectsByProjectIdErrors]

export type PatchApiProjectsByProjectIdResponses = {
  /**
   * Project updated successfully
   */
  200: ProjectResponse
}

export type PatchApiProjectsByProjectIdResponse =
  PatchApiProjectsByProjectIdResponses[keyof PatchApiProjectsByProjectIdResponses]

export type PostApiProjectsByProjectIdSyncData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/sync'
}

export type PostApiProjectsByProjectIdSyncErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error during sync
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdSyncError =
  PostApiProjectsByProjectIdSyncErrors[keyof PostApiProjectsByProjectIdSyncErrors]

export type PostApiProjectsByProjectIdSyncResponses = {
  /**
   * Project sync initiated successfully
   */
  200: OperationSuccessResponse
}

export type PostApiProjectsByProjectIdSyncResponse =
  PostApiProjectsByProjectIdSyncResponses[keyof PostApiProjectsByProjectIdSyncResponses]

export type GetApiProjectsByProjectIdFilesData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/files'
}

export type GetApiProjectsByProjectIdFilesErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiProjectsByProjectIdFilesError =
  GetApiProjectsByProjectIdFilesErrors[keyof GetApiProjectsByProjectIdFilesErrors]

export type GetApiProjectsByProjectIdFilesResponses = {
  /**
   * Successfully retrieved project files
   */
  200: FileListResponse
}

export type GetApiProjectsByProjectIdFilesResponse =
  GetApiProjectsByProjectIdFilesResponses[keyof GetApiProjectsByProjectIdFilesResponses]

export type PostApiProjectsByProjectIdRefreshData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: {
    /**
     * Optional folder path to limit the refresh scope
     */
    folder?: string
  }
  url: '/api/projects/{projectId}/refresh'
}

export type PostApiProjectsByProjectIdRefreshErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error during refresh/sync
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdRefreshError =
  PostApiProjectsByProjectIdRefreshErrors[keyof PostApiProjectsByProjectIdRefreshErrors]

export type PostApiProjectsByProjectIdRefreshResponses = {
  /**
   * Successfully refreshed project files
   */
  200: FileListResponse
}

export type PostApiProjectsByProjectIdRefreshResponse =
  PostApiProjectsByProjectIdRefreshResponses[keyof PostApiProjectsByProjectIdRefreshResponses]

export type GetApiProjectsByProjectIdSummaryData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/summary'
}

export type GetApiProjectsByProjectIdSummaryErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiProjectsByProjectIdSummaryError =
  GetApiProjectsByProjectIdSummaryErrors[keyof GetApiProjectsByProjectIdSummaryErrors]

export type GetApiProjectsByProjectIdSummaryResponses = {
  /**
   * Successfully generated combined project summary
   */
  200: ProjectSummaryResponse
}

export type GetApiProjectsByProjectIdSummaryResponse =
  GetApiProjectsByProjectIdSummaryResponses[keyof GetApiProjectsByProjectIdSummaryResponses]

export type PostApiProjectsByProjectIdSuggestFilesData = {
  body?: SuggestFilesRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/suggest-files'
}

export type PostApiProjectsByProjectIdSuggestFilesErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error or AI processing error
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdSuggestFilesError =
  PostApiProjectsByProjectIdSuggestFilesErrors[keyof PostApiProjectsByProjectIdSuggestFilesErrors]

export type PostApiProjectsByProjectIdSuggestFilesResponses = {
  /**
   * Successfully suggested files
   */
  200: SuggestFilesResponse
}

export type PostApiProjectsByProjectIdSuggestFilesResponse =
  PostApiProjectsByProjectIdSuggestFilesResponses[keyof PostApiProjectsByProjectIdSuggestFilesResponses]

export type PostApiProjectsByProjectIdSummarizeData = {
  body?: SummarizeFilesRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/summarize'
}

export type PostApiProjectsByProjectIdSummarizeErrors = {
  /**
   * Project or some files not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error during summarization
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdSummarizeError =
  PostApiProjectsByProjectIdSummarizeErrors[keyof PostApiProjectsByProjectIdSummarizeErrors]

export type PostApiProjectsByProjectIdSummarizeResponses = {
  /**
   * File summarization process completed
   */
  200: SummarizeFilesResponse
}

export type PostApiProjectsByProjectIdSummarizeResponse =
  PostApiProjectsByProjectIdSummarizeResponses[keyof PostApiProjectsByProjectIdSummarizeResponses]

export type PostApiProjectsByProjectIdRemoveSummariesData = {
  body?: RemoveSummariesRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/remove-summaries'
}

export type PostApiProjectsByProjectIdRemoveSummariesErrors = {
  /**
   * Project or some files not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdRemoveSummariesError =
  PostApiProjectsByProjectIdRemoveSummariesErrors[keyof PostApiProjectsByProjectIdRemoveSummariesErrors]

export type PostApiProjectsByProjectIdRemoveSummariesResponses = {
  /**
   * Summaries removed successfully
   */
  200: RemoveSummariesResponse
}

export type PostApiProjectsByProjectIdRemoveSummariesResponse =
  PostApiProjectsByProjectIdRemoveSummariesResponses[keyof PostApiProjectsByProjectIdRemoveSummariesResponses]

export type PostApiPromptOptimizeData = {
  /**
   * The user prompt context to optimize
   */
  body: OptimizePromptRequest
  path?: never
  query?: never
  url: '/api/prompt/optimize'
}

export type PostApiPromptOptimizeErrors = {
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error or AI provider error during optimization
   */
  500: ApiErrorResponse
}

export type PostApiPromptOptimizeError = PostApiPromptOptimizeErrors[keyof PostApiPromptOptimizeErrors]

export type PostApiPromptOptimizeResponses = {
  /**
   * Successfully optimized the prompt
   */
  200: OptimizePromptResponse
}

export type PostApiPromptOptimizeResponse = PostApiPromptOptimizeResponses[keyof PostApiPromptOptimizeResponses]

export type GetApiKeysData = {
  body?: never
  path?: never
  query?: never
  url: '/api/keys'
}

export type GetApiKeysErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiKeysError = GetApiKeysErrors[keyof GetApiKeysErrors]

export type GetApiKeysResponses = {
  /**
   * Successfully retrieved provider keys
   */
  200: ProviderKeyListResponse
}

export type GetApiKeysResponse = GetApiKeysResponses[keyof GetApiKeysResponses]

export type PostApiKeysData = {
  body: CreateProviderKeyRequestBody
  path?: never
  query?: never
  url: '/api/keys'
}

export type PostApiKeysErrors = {
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiKeysError = PostApiKeysErrors[keyof PostApiKeysErrors]

export type PostApiKeysResponses = {
  /**
   * Provider key created successfully
   */
  201: ProviderKeyResponse
}

export type PostApiKeysResponse = PostApiKeysResponses[keyof PostApiKeysResponses]

export type DeleteApiKeysByKeyIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    keyId: number
  }
  query?: never
  url: '/api/keys/{keyId}'
}

export type DeleteApiKeysByKeyIdErrors = {
  /**
   * Provider key not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type DeleteApiKeysByKeyIdError = DeleteApiKeysByKeyIdErrors[keyof DeleteApiKeysByKeyIdErrors]

export type DeleteApiKeysByKeyIdResponses = {
  /**
   * Provider key deleted successfully
   */
  200: OperationSuccessResponse
}

export type DeleteApiKeysByKeyIdResponse = DeleteApiKeysByKeyIdResponses[keyof DeleteApiKeysByKeyIdResponses]

export type GetApiKeysByKeyIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    keyId: number
  }
  query?: never
  url: '/api/keys/{keyId}'
}

export type GetApiKeysByKeyIdErrors = {
  /**
   * Provider key not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiKeysByKeyIdError = GetApiKeysByKeyIdErrors[keyof GetApiKeysByKeyIdErrors]

export type GetApiKeysByKeyIdResponses = {
  /**
   * Successfully retrieved provider key
   */
  200: ProviderKeyResponse
}

export type GetApiKeysByKeyIdResponse = GetApiKeysByKeyIdResponses[keyof GetApiKeysByKeyIdResponses]

export type PatchApiKeysByKeyIdData = {
  body: UpdateProviderKeyRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    keyId: number
  }
  query?: never
  url: '/api/keys/{keyId}'
}

export type PatchApiKeysByKeyIdErrors = {
  /**
   * Provider key not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PatchApiKeysByKeyIdError = PatchApiKeysByKeyIdErrors[keyof PatchApiKeysByKeyIdErrors]

export type PatchApiKeysByKeyIdResponses = {
  /**
   * Provider key updated successfully
   */
  200: ProviderKeyResponse
}

export type PatchApiKeysByKeyIdResponse = PatchApiKeysByKeyIdResponses[keyof PatchApiKeysByKeyIdResponses]

export type GetApiAdminEnvInfoData = {
  body?: never
  path?: never
  query?: never
  url: '/api/admin/env-info'
}

export type GetApiAdminEnvInfoErrors = {
  /**
   * Error retrieving environment information
   */
  500: ApiErrorResponse
}

export type GetApiAdminEnvInfoError = GetApiAdminEnvInfoErrors[keyof GetApiAdminEnvInfoErrors]

export type GetApiAdminEnvInfoResponses = {
  /**
   * Successfully retrieved environment information
   */
  200: EnvInfoResponse
}

export type GetApiAdminEnvInfoResponse = GetApiAdminEnvInfoResponses[keyof GetApiAdminEnvInfoResponses]

export type GetApiAdminSystemStatusData = {
  body?: never
  path?: never
  query?: never
  url: '/api/admin/system-status'
}

export type GetApiAdminSystemStatusErrors = {
  /**
   * Error retrieving system status
   */
  500: ApiErrorResponse
}

export type GetApiAdminSystemStatusError = GetApiAdminSystemStatusErrors[keyof GetApiAdminSystemStatusErrors]

export type GetApiAdminSystemStatusResponses = {
  /**
   * Successfully retrieved system status
   */
  200: SystemStatusResponse
}

export type GetApiAdminSystemStatusResponse = GetApiAdminSystemStatusResponses[keyof GetApiAdminSystemStatusResponses]

export type PostApiProjectsByProjectIdAiFileChangesData = {
  body?: {
    /**
     * Path to the file to modify
     */
    filePath: string
    /**
     * Instruction for the AI to follow
     */
    prompt: string
  }
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/ai-file-changes'
}

export type PostApiProjectsByProjectIdAiFileChangesErrors = {
  /**
   * Invalid request
   */
  400: ApiErrorResponse
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Error generating file change
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdAiFileChangesError =
  PostApiProjectsByProjectIdAiFileChangesErrors[keyof PostApiProjectsByProjectIdAiFileChangesErrors]

export type PostApiProjectsByProjectIdAiFileChangesResponses = {
  /**
   * Successfully generated file change
   */
  200: GenerateAiFileChangeResponse
}

export type PostApiProjectsByProjectIdAiFileChangesResponse =
  PostApiProjectsByProjectIdAiFileChangesResponses[keyof PostApiProjectsByProjectIdAiFileChangesResponses]

export type GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    aiFileChangeId: number
  }
  query?: never
  url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}'
}

export type GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdErrors = {
  /**
   * Invalid ID
   */
  400: ApiErrorResponse
  /**
   * Resource not found
   */
  404: ApiErrorResponse
  /**
   * Error retrieving file change
   */
  500: ApiErrorResponse
}

export type GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdError =
  GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdErrors[keyof GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdErrors]

export type GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdResponses = {
  /**
   * Successfully retrieved file change
   */
  200: GetAiFileChangeDetailsResponse
}

export type GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdResponse =
  GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdResponses[keyof GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdResponses]

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    aiFileChangeId: number
  }
  query?: never
  url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}/confirm'
}

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmErrors = {
  /**
   * Invalid ID or state
   */
  400: ApiErrorResponse
  /**
   * Resource not found
   */
  404: ApiErrorResponse
  /**
   * Error confirming file change
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmError =
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmErrors[keyof PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmErrors]

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponses = {
  /**
   * Successfully confirmed file change
   */
  200: ConfirmAiFileChangeResponse
}

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponse =
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponses[keyof PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponses]

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    aiFileChangeId: number
  }
  query?: never
  url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}/reject'
}

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectErrors = {
  /**
   * Invalid ID or state
   */
  400: ApiErrorResponse
  /**
   * Resource not found
   */
  404: ApiErrorResponse
  /**
   * Error rejecting file change
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectError =
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectErrors[keyof PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectErrors]

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponses = {
  /**
   * Successfully rejected file change
   */
  200: ConfirmAiFileChangeResponse
}

export type PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponse =
  PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponses[keyof PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponses]

export type GetApiPromptsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/prompts'
}

export type GetApiPromptsErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiPromptsError = GetApiPromptsErrors[keyof GetApiPromptsErrors]

export type GetApiPromptsResponses = {
  /**
   * Successfully retrieved all prompts
   */
  200: PromptListResponse
}

export type GetApiPromptsResponse = GetApiPromptsResponses[keyof GetApiPromptsResponses]

export type PostApiPromptsData = {
  body: CreatePromptRequestBody
  path?: never
  query?: never
  url: '/api/prompts'
}

export type PostApiPromptsErrors = {
  /**
   * Referenced project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiPromptsError = PostApiPromptsErrors[keyof PostApiPromptsErrors]

export type PostApiPromptsResponses = {
  /**
   * Prompt created successfully
   */
  201: PromptResponse
}

export type PostApiPromptsResponse = PostApiPromptsResponses[keyof PostApiPromptsResponses]

export type GetApiProjectsByProjectIdPromptsData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/prompts'
}

export type GetApiProjectsByProjectIdPromptsErrors = {
  /**
   * Project not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiProjectsByProjectIdPromptsError =
  GetApiProjectsByProjectIdPromptsErrors[keyof GetApiProjectsByProjectIdPromptsErrors]

export type GetApiProjectsByProjectIdPromptsResponses = {
  /**
   * Successfully retrieved project prompts
   */
  200: PromptListResponse
}

export type GetApiProjectsByProjectIdPromptsResponse =
  GetApiProjectsByProjectIdPromptsResponses[keyof GetApiProjectsByProjectIdPromptsResponses]

export type DeleteApiProjectsByProjectIdPromptsByPromptIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    promptId: number
  }
  query?: never
  url: '/api/projects/{projectId}/prompts/{promptId}'
}

export type DeleteApiProjectsByProjectIdPromptsByPromptIdErrors = {
  /**
   * Project or Prompt not found, or association does not exist
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type DeleteApiProjectsByProjectIdPromptsByPromptIdError =
  DeleteApiProjectsByProjectIdPromptsByPromptIdErrors[keyof DeleteApiProjectsByProjectIdPromptsByPromptIdErrors]

export type DeleteApiProjectsByProjectIdPromptsByPromptIdResponses = {
  /**
   * Prompt successfully disassociated from project
   */
  200: OperationSuccessResponse
}

export type DeleteApiProjectsByProjectIdPromptsByPromptIdResponse =
  DeleteApiProjectsByProjectIdPromptsByPromptIdResponses[keyof DeleteApiProjectsByProjectIdPromptsByPromptIdResponses]

export type PostApiProjectsByProjectIdPromptsByPromptIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    promptId: number
  }
  query?: never
  url: '/api/projects/{projectId}/prompts/{promptId}'
}

export type PostApiProjectsByProjectIdPromptsByPromptIdErrors = {
  /**
   * Project or Prompt not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdPromptsByPromptIdError =
  PostApiProjectsByProjectIdPromptsByPromptIdErrors[keyof PostApiProjectsByProjectIdPromptsByPromptIdErrors]

export type PostApiProjectsByProjectIdPromptsByPromptIdResponses = {
  /**
   * Prompt successfully associated with project
   */
  200: OperationSuccessResponse
}

export type PostApiProjectsByProjectIdPromptsByPromptIdResponse =
  PostApiProjectsByProjectIdPromptsByPromptIdResponses[keyof PostApiProjectsByProjectIdPromptsByPromptIdResponses]

export type DeleteApiPromptsByPromptIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    promptId: number
  }
  query?: never
  url: '/api/prompts/{promptId}'
}

export type DeleteApiPromptsByPromptIdErrors = {
  /**
   * Prompt not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type DeleteApiPromptsByPromptIdError = DeleteApiPromptsByPromptIdErrors[keyof DeleteApiPromptsByPromptIdErrors]

export type DeleteApiPromptsByPromptIdResponses = {
  /**
   * Prompt deleted successfully
   */
  200: OperationSuccessResponse
}

export type DeleteApiPromptsByPromptIdResponse =
  DeleteApiPromptsByPromptIdResponses[keyof DeleteApiPromptsByPromptIdResponses]

export type GetApiPromptsByPromptIdData = {
  body?: never
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    promptId: number
  }
  query?: never
  url: '/api/prompts/{promptId}'
}

export type GetApiPromptsByPromptIdErrors = {
  /**
   * Prompt not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiPromptsByPromptIdError = GetApiPromptsByPromptIdErrors[keyof GetApiPromptsByPromptIdErrors]

export type GetApiPromptsByPromptIdResponses = {
  /**
   * Successfully retrieved prompt
   */
  200: PromptResponse
}

export type GetApiPromptsByPromptIdResponse = GetApiPromptsByPromptIdResponses[keyof GetApiPromptsByPromptIdResponses]

export type PatchApiPromptsByPromptIdData = {
  body: UpdatePromptRequestBody
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    promptId: number
  }
  query?: never
  url: '/api/prompts/{promptId}'
}

export type PatchApiPromptsByPromptIdErrors = {
  /**
   * Prompt not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type PatchApiPromptsByPromptIdError = PatchApiPromptsByPromptIdErrors[keyof PatchApiPromptsByPromptIdErrors]

export type PatchApiPromptsByPromptIdResponses = {
  /**
   * Prompt updated successfully
   */
  200: PromptResponse
}

export type PatchApiPromptsByPromptIdResponse =
  PatchApiPromptsByPromptIdResponses[keyof PatchApiPromptsByPromptIdResponses]

export type PostApiGenAiStreamData = {
  body: AiGenerateTextRequest
  path?: never
  query?: never
  url: '/api/gen-ai/stream'
}

export type PostApiGenAiStreamResponses = {
  /**
   * Stream of response tokens (Vercel AI SDK format)
   */
  200: string
}

export type PostApiGenAiStreamResponse = PostApiGenAiStreamResponses[keyof PostApiGenAiStreamResponses]

export type PostApiGenAiTextData = {
  body: AiGenerateTextRequest
  path?: never
  query?: never
  url: '/api/gen-ai/text'
}

export type PostApiGenAiTextErrors = {
  /**
   * Validation Error (invalid input)
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error or AI Provider Error
   */
  500: ApiErrorResponse
}

export type PostApiGenAiTextError = PostApiGenAiTextErrors[keyof PostApiGenAiTextErrors]

export type PostApiGenAiTextResponses = {
  /**
   * Successfully generated text
   */
  200: AiGenerateTextResponse
}

export type PostApiGenAiTextResponse = PostApiGenAiTextResponses[keyof PostApiGenAiTextResponses]

export type PostApiGenAiStructuredData = {
  body: AiGenerateStructuredRequest
  path?: never
  query?: never
  url: '/api/gen-ai/structured'
}

export type PostApiGenAiStructuredErrors = {
  /**
   * Bad Request: Invalid or unknown schemaKey provided.
   */
  400: ApiErrorResponse
  /**
   * Validation Error (invalid input)
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error or AI Provider Error
   */
  500: ApiErrorResponse
}

export type PostApiGenAiStructuredError = PostApiGenAiStructuredErrors[keyof PostApiGenAiStructuredErrors]

export type PostApiGenAiStructuredResponses = {
  /**
   * Successfully generated structured data
   */
  200: AiGenerateStructuredResponse
}

export type PostApiGenAiStructuredResponse = PostApiGenAiStructuredResponses[keyof PostApiGenAiStructuredResponses]

export type GetApiModelsData = {
  body?: never
  path?: never
  query: {
    /**
     * The provider to filter models by
     */
    provider: string
  }
  url: '/api/models'
}

export type GetApiModelsErrors = {
  /**
   * Invalid provider or configuration error
   */
  400: ApiErrorResponse
  /**
   * Validation error
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApiModelsError = GetApiModelsErrors[keyof GetApiModelsErrors]

export type GetApiModelsResponses = {
  /**
   * Successfully retrieved model list
   */
  200: ModelsListResponse
}

export type GetApiModelsResponse = GetApiModelsResponses[keyof GetApiModelsResponses]

export type PostApiAiGenerateTextData = {
  /**
   * Prompt, provider, model, and options for text generation.
   */
  body: AiGenerateTextRequest
  path?: never
  query?: never
  url: '/api//ai/generate/text'
}

export type PostApiAiGenerateTextErrors = {
  /**
   * Bad Request (e.g., missing API key, invalid provider/model)
   */
  400: ApiErrorResponse
  /**
   * Validation error (invalid request body)
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error or AI provider communication error
   */
  500: ApiErrorResponse
}

export type PostApiAiGenerateTextError = PostApiAiGenerateTextErrors[keyof PostApiAiGenerateTextErrors]

export type PostApiAiGenerateTextResponses = {
  /**
   * Successfully generated text response.
   */
  200: AiGenerateTextResponse
}

export type PostApiAiGenerateTextResponse = PostApiAiGenerateTextResponses[keyof PostApiAiGenerateTextResponses]

export type PostApiProjectsByProjectIdAgentCoderData = {
  body: AgentCoderRunRequest
  path: {
    /**
     * ID or Timestamp in unix timestamp (milliseconds)
     */
    projectId: number
  }
  query?: never
  url: '/api/projects/{projectId}/agent-coder'
}

export type PostApiProjectsByProjectIdAgentCoderErrors = {
  /**
   * Project or specified files not found
   */
  404: ApiErrorResponse
  /**
   * Validation Error (invalid input)
   */
  422: ApiErrorResponse
  /**
   * Internal Server Error or Agent Coder execution failed
   */
  500: ApiErrorResponse
}

export type PostApiProjectsByProjectIdAgentCoderError =
  PostApiProjectsByProjectIdAgentCoderErrors[keyof PostApiProjectsByProjectIdAgentCoderErrors]

export type PostApiProjectsByProjectIdAgentCoderResponses = {
  /**
   * Agent Coder executed successfully
   */
  200: AgentCoderRunResponse
}

export type PostApiProjectsByProjectIdAgentCoderResponse =
  PostApiProjectsByProjectIdAgentCoderResponses[keyof PostApiProjectsByProjectIdAgentCoderResponses]

export type GetApiAgentCoderProjectByProjectIdRunsData = {
  body?: never
  path: {
    /**
     * The unique ID of the project.
     */
    projectId: number
  }
  query?: never
  url: '/api/agent-coder/project/{projectId}/runs'
}

export type GetApiAgentCoderProjectByProjectIdRunsErrors = {
  /**
   * Internal Server Error retrieving run list
   */
  500: ApiErrorResponse
}

export type GetApiAgentCoderProjectByProjectIdRunsError =
  GetApiAgentCoderProjectByProjectIdRunsErrors[keyof GetApiAgentCoderProjectByProjectIdRunsErrors]

export type GetApiAgentCoderProjectByProjectIdRunsResponses = {
  /**
   * List of available agent run job IDs
   */
  200: {
    success: boolean
    /**
     * List of available agent run job IDs
     */
    data: Array<number>
  }
}

export type GetApiAgentCoderProjectByProjectIdRunsResponse =
  GetApiAgentCoderProjectByProjectIdRunsResponses[keyof GetApiAgentCoderProjectByProjectIdRunsResponses]

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsData = {
  body?: never
  path: {
    /**
     * The unique ID of the agent run.
     */
    agentJobId: number
    /**
     * The unique ID of the project.
     */
    projectId: number
  }
  query?: never
  url: '/api/agent-coder/project/{projectId}/runs/{agentJobId}/logs'
}

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsErrors = {
  /**
   * Agent run or log file not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error reading log file
   */
  500: ApiErrorResponse
}

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsError =
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsErrors[keyof GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsErrors]

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsResponses = {
  /**
   * Agent orchestrator log content as an array of JSON objects
   */
  200: Array<{
    [key: string]: unknown
  }>
}

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsResponse =
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsResponses[keyof GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsResponses]

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataData = {
  body?: never
  path: {
    /**
     * The unique ID of the agent run.
     */
    agentJobId: number
    /**
     * The unique ID of the project.
     */
    projectId: number
  }
  query?: never
  url: '/api/agent-coder/project/{projectId}/runs/{agentJobId}/data'
}

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataErrors = {
  /**
   * Agent run or data file not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error reading or parsing data file
   */
  500: ApiErrorResponse
}

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataError =
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataErrors[keyof GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataErrors]

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataResponses = {
  /**
   * Agent data log content as a JSON object
   */
  200: AgentDataLog
}

export type GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataResponse =
  GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataResponses[keyof GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataResponses]

export type PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData = {
  body?: never
  path: {
    /**
     * The unique ID of the agent run.
     */
    agentJobId: number
    /**
     * The unique ID of the project.
     */
    projectId: number
  }
  query?: never
  url: '/api/agent-coder/project/{projectId}/runs/{agentJobId}/confirm'
}

export type PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmErrors = {
  /**
   * Agent run data, project, or original files not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error reading data log or writing files
   */
  500: ApiErrorResponse
}

export type PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmError =
  PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmErrors[keyof PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmErrors]

export type PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponses = {
  /**
   * Agent run changes successfully written to filesystem.
   */
  200: ConfirmAgentRunChangesResponse
}

export type PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponse =
  PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponses[keyof PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponses]

export type DeleteApiAgentCoderRunsByAgentJobIdData = {
  body?: never
  path: {
    /**
     * The unique ID of the agent run.
     */
    agentJobId: number
    /**
     * The unique ID of the project.
     */
    projectId: number
  }
  query?: never
  url: '/api/agent-coder/runs/{agentJobId}'
}

export type DeleteApiAgentCoderRunsByAgentJobIdErrors = {
  /**
   * Agent run directory not found
   */
  404: ApiErrorResponse
  /**
   * Internal Server Error during deletion
   */
  500: ApiErrorResponse
}

export type DeleteApiAgentCoderRunsByAgentJobIdError =
  DeleteApiAgentCoderRunsByAgentJobIdErrors[keyof DeleteApiAgentCoderRunsByAgentJobIdErrors]

export type DeleteApiAgentCoderRunsByAgentJobIdResponses = {
  /**
   * Agent run successfully deleted.
   */
  200: DeleteAgentRunResponse
}

export type DeleteApiAgentCoderRunsByAgentJobIdResponse =
  DeleteApiAgentCoderRunsByAgentJobIdResponses[keyof DeleteApiAgentCoderRunsByAgentJobIdResponses]

export type ClientOptions = {
  baseUrl: 'http://localhost:3147' | (string & {})
}
