// This file is auto-generated by @hey-api/openapi-ts

export type AiFileChangeRecordResponse = {
    /**
     * Unique ID for the AI file change record (Unix ms)
     */
    id: number;
    /**
     * ID of the project this change belongs to (Unix ms)
     */
    projectId: number;
    /**
     * Path to the file that was modified
     */
    filePath: string;
    /**
     * The original content of the file before changes.
     */
    originalContent: string;
    /**
     * The AI suggested content for the file.
     */
    suggestedContent: string;
    /**
     * The diff between original and suggested content, or an explanation.
     */
    diff?: string | null;
    /**
     * The user prompt that initiated this change.
     */
    prompt?: string | null;
    /**
     * Status of the file change.
     */
    status: AiFileChangeStatusEnum;
    /**
     * Timestamp of when the change was created (Unix ms)
     */
    created: number;
    /**
     * Timestamp of when the change was last updated (Unix ms)
     */
    updated: number;
    /**
     * Explanation from the AI about the change.
     */
    explanation?: string | null;
};

export type AiFileChangeStatusEnum = 'pending' | 'confirmed' | 'rejected';

export type AgentCoderRunRequest = {
    /**
     * The main instruction or goal for the agent.
     */
    userInput: string;
    /**
     * Array of ProjectFile IDs to provide as initial context.
     */
    selectedFileIds: Array<string>;
    /**
     * The unique ID for retrieving the execution logs and data for this run.
     */
    agentJobId?: string | null;
    /**
     * Array of Prompt IDs to provide as initial context.
     */
    selectedPromptIds?: Array<string> | null;
};

export type AgentCoderRunResponse = {
    success?: true;
    data: AgentCoderRunSuccessData;
};

export type AgentCoderRunSuccessData = {
    /**
     * The state of the project files after the agent's execution.
     */
    updatedFiles: Array<AppSchemasAgentCoderSchemasProjectFile>;
    /**
     * The final task plan executed by the agent (includes task statuses).
     */
    taskPlan?: AgentTaskPlan | null;
    /**
     * The unique ID for retrieving the execution logs and data for this run.
     */
    agentJobId: number;
};

export type AgentDataLog = {
    /**
     * Absolute path to the directory containing logs for this job.
     */
    agentJobDirPath: string;
    /**
     * The ID of the project this agent run targeted.
     */
    projectId: number;
    /**
     * The unique ID for this agent run.
     */
    agentJobId: number;
    /**
     * ISO 8601 timestamp when the agent job started.
     */
    agentJobStartTime: string;
    /**
     * The initial task plan generated by the planning agent (before execution).
     */
    taskPlan?: AgentTaskPlan | null;
    /**
     * The final outcome status of the agent run.
     */
    finalStatus: AgentDataLogFinalStatusEnum;
    /**
     * The task plan reflecting the state after execution attempts (tasks will have final statuses like COMPLETED, FAILED).
     */
    finalTaskPlan?: AgentTaskPlan | null;
    /**
     * ISO 8601 timestamp when the agent job finished or errored.
     */
    agentJobEndTime: string;
    /**
     * Error message if the agent run failed.
     */
    errorMessage?: string | null;
    /**
     * Stack trace if the agent run failed.
     */
    errorStack?: string | null;
    /**
     * List of files with proposed changes (new files or modified files with different checksums).
     */
    updatedFiles?: Array<AppSchemasAgentCoderSchemasProjectFile> | null;
    [key: string]: unknown | string | number | (AgentTaskPlan | null) | AgentDataLogFinalStatusEnum | (AgentTaskPlan | null) | (string | null) | (string | null) | (Array<AppSchemasAgentCoderSchemasProjectFile> | null) | undefined;
};

export type AgentDataLogFinalStatusEnum = 'Success' | 'Failed' | 'No tasks generated' | 'Error';

export type AgentTask = {
    /**
     * A unique ID automatically generated for tracking this specific task.
     */
    id: number;
    /**
     * A brief, human-readable title summarizing the task's objective.
     */
    title: string;
    /**
     * A detailed description of the changes required for the target file. This will be used as the primary instruction for the LLM rewrite.
     */
    description: string;
    /**
     * The unique ID (from ProjectFileSchema) of the primary source file to be modified or created by this task. Will be populated by orchestrator for new files.
     */
    targetFileId?: string | null;
    /**
     * The relative path of the primary source file (e.g., 'src/utils/auth.ts'). Required for all tasks. Used for creation path.
     */
    targetFilePath: string;
    /**
     * Tracks the progress of the task through the workflow.
     */
    status?: AgentTaskStatusEnum;
    /**
     * Optional: The unique ID (from ProjectFileSchema) of the corresponding unit test file (e.g., 'src/utils/auth.test.ts'), if applicable.
     */
    relatedTestFileId?: string | null;
    /**
     * Optional: AI's estimation of the task's complexity.
     */
    estimatedComplexity?: ('LOW' | 'MEDIUM' | 'HIGH') | null;
    /**
     * Optional: A list of other Task IDs that must be completed before this task can start.
     */
    dependencies?: Array<string> | null;
    [key: string]: unknown | number | string | (string | null) | AgentTaskStatusEnum | (string | null) | (('LOW' | 'MEDIUM' | 'HIGH') | null) | (Array<string> | null) | undefined;
};

export type AgentTaskPlan = {
    /**
     * The ID of the project context in which these tasks operate.
     */
    projectId: number;
    /**
     * A concise summary of the original user request being addressed by this plan.
     */
    overallGoal: string;
    /**
     * An ordered list of tasks designed to collectively achieve the overall goal. Order implies execution sequence unless overridden by dependencies.
     */
    tasks: Array<AgentTask>;
    [key: string]: unknown | number | string | Array<AgentTask>;
};

export type AgentTaskStatusEnum = 'PENDING' | 'IN_PROGRESS' | 'COMPLETED' | 'FAILED' | 'SKIPPED';

export type AiChatStreamRequest = {
    /**
     * Required ID of the chat session to continue.
     */
    chatId: number;
    /**
     * The latest message content from the user.
     */
    userMessage: string;
    /**
     * Optional parameters for the AI model.
     */
    options?: AiSdkOptions | null;
    /**
     * Optional system message override for this specific request.
     */
    systemMessage?: string | null;
    /**
     * Temporary client-side ID for optimistic UI updates.
     */
    tempId?: string | null;
    /**
     * Enable debug mode for detailed logging.
     */
    debug?: boolean | null;
};

export type AiGenerateStructuredRequest = {
    schema_key: string;
    user_input: string;
    options?: AiSdkOptions | null;
};

export type AiGenerateStructuredResponse = {
    success?: true;
    data: AiStructuredResponseData;
};

export type AiGenerateTextRequest = {
    /**
     * The text prompt for the AI
     */
    prompt: string;
    /**
     * Optional model parameters
     */
    options?: AiSdkOptions | null;
    /**
     * Optional system message
     */
    system_message?: string | null;
};

export type AiGenerateTextResponse = {
    success?: true;
    data: AiTextResponseData;
};

export type AiSdkOptions = {
    /**
     * Controls randomness of output
     */
    temperature?: number | null;
    /**
     * Maximum tokens to generate
     */
    max_tokens?: number | null;
    /**
     * Controls diversity via nucleus sampling
     */
    top_p?: number | null;
    /**
     * Penalty for token frequency
     */
    frequency_penalty?: number | null;
    /**
     * Penalty for token presence
     */
    presence_penalty?: number | null;
    /**
     * Restricts token choices to top k
     */
    top_k?: number | null;
    /**
     * Stop sequences
     */
    stop?: string | Array<string> | null;
    /**
     * Response format specification
     */
    response_format?: {
        [key: string]: unknown;
    } | null;
    /**
     * AI provider
     */
    provider?: string | null;
    /**
     * Model identifier
     */
    model?: string | null;
};

export type AiStructuredResponseData = {
    output: unknown;
};

export type AiTextResponseData = {
    text: string;
};

export type ApiErrorDetail = {
    message: string;
    code?: string | null;
    details?: {
        [key: string]: unknown;
    } | null;
};

export type BulkTasksResponse = {
    success?: boolean;
    tasks: {
        [key: string]: Array<TicketTaskRead>;
    };
};

export type Chat = {
    id: number;
    title: string;
    /**
     * Creation timestamp (Unix ms)
     */
    created: number;
    /**
     * Last update timestamp (Unix ms)
     */
    updated: number;
    /**
     * Model configuration settings for this chat
     */
    chat_model_config?: ModelOptions;
};

export type ChatListResponse = {
    success?: true;
    data: Array<Chat>;
};

export type ChatMessage = {
    /**
     * Message ID
     */
    id: number;
    /**
     * Parent Chat ID
     */
    chatId: number;
    /**
     * Role of the message sender
     */
    role: MessageRoleEnum;
    /**
     * Message content
     */
    content: string;
    /**
     * Creation timestamp (Unix ms)
     */
    created: number;
};

export type ChatResponse = {
    success?: true;
    data: Chat;
};

export type ConfirmAiFileChangeResponse = {
    success?: true;
    result: ConfirmRejectResult;
};

export type ConfirmAgentRunChangesResponse = {
    success?: boolean;
    message: string;
    written_files: Array<string>;
};

export type ConfirmRejectResult = {
    status: string;
    message: string;
};

export type CreateChatBody = {
    title: string;
    /**
     * Copy messages from currentChatId if true
     */
    copyExisting?: boolean | null;
    currentChatId?: number | null;
    /**
     * Optional model configuration for the chat
     */
    modelConfig?: ModelOptions | null;
};

export type CreateProjectBody = {
    name: string;
    path: string;
    description?: string | null;
};

export type CreatePromptBody = {
    /**
     * Optional Project ID to link the prompt to upon creation (Unix ms)
     */
    projectId?: number | null;
    name: string;
    content: string;
};

export type CreateProviderKeyBody = {
    provider: string;
    key: string;
};

export type CreateTaskBody = {
    content: string;
};

export type CreateTicketBody = {
    projectId: number;
    title: string;
    overview?: string;
    status?: TicketStatusEnum;
    priority?: TicketPriorityEnum;
    suggestedFileIds?: Array<number> | null;
};

export type DatabaseStats = {
    chats?: DatabaseTableStat | null;
    chat_messages?: DatabaseTableStat | null;
    projects?: DatabaseTableStat | null;
    files?: DatabaseTableStat | null;
    prompts?: DatabaseTableStat | null;
    prompt_projects?: DatabaseTableStat | null;
    provider_keys?: DatabaseTableStat | null;
    tickets?: DatabaseTableStat | null;
    ticket_files?: DatabaseTableStat | null;
    ticket_tasks?: DatabaseTableStat | null;
    file_changes?: DatabaseTableStat | null;
};

export type DatabaseTableStat = {
    count: number;
};

export type DeleteAgentRunResponse = {
    success?: boolean;
    message: string;
};

export type EnvInfoResponse = {
    success?: boolean;
    environment: EnvironmentInfo;
    server_info: ServerInfo;
    database_stats?: DatabaseStats | null;
};

export type EnvironmentInfo = {
    PYTHON_ENV?: string | null;
    SERVER_PORT?: string | null;
};

export type FileListResponse = {
    success?: true;
    data: Array<AppSchemasProjectSchemasProjectFile>;
};

export type ForkChatBody = {
    /**
     * Optional list of message IDs to exclude from the fork
     */
    excludedMessageIds?: Array<number>;
};

export type GenerateAiFileChangeBody = {
    /**
     * Path to the file to modify
     */
    filePath: string;
    /**
     * Instruction for the AI to follow
     */
    prompt: string;
};

export type GenerateAiFileChangeResponse = {
    success?: true;
    result: AiFileChangeRecordResponse;
};

export type GetAiFileChangeDetailsResponse = {
    success?: true;
    fileChange: AiFileChangeRecordResponse;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type LinkFilesBody = {
    fileIds: Array<number>;
};

export type LinkedFilesResponse = {
    success?: boolean;
    linkedFiles: Array<TicketFileRead>;
};

export type ListAgentRunsResponse = {
    success?: boolean;
    data: Array<string>;
};

export type MessageListResponse = {
    success?: true;
    data: Array<ChatMessage>;
};

export type MessageRoleEnum = 'assistant' | 'user' | 'system';

export type ModelOptions = {
    model?: string | null;
    maxTokens?: number | null;
    temperature?: number | null;
    topP?: number | null;
    topK?: number | null;
    frequencyPenalty?: number | null;
    presencePenalty?: number | null;
    stop?: string | Array<string> | null;
};

export type ModelsListResponse = {
    success?: true;
    data: Array<UnifiedModel>;
};

export type OptimizePromptResponse = {
    /**
     * Indicates successful optimization
     */
    success: true;
    data: OptimizedPromptData;
};

export type OptimizeUserInputRequest = {
    /**
     * The ID of the project (Unix ms)
     */
    projectId: number;
    /**
     * The user's initial prompt or context to be optimized.
     */
    userContext: string;
};

export type OptimizedPromptData = {
    /**
     * The optimized prompt generated by the service.
     */
    optimizedPrompt: string;
};

export type Project = {
    id: number;
    name: string;
    path: string;
    currentBranch?: string | null;
    description?: string | null;
    created: number;
    updated: number;
    files?: Array<AppSchemasProjectSchemasProjectFile> | null;
};

export type ProjectListResponse = {
    success?: true;
    data: Array<Project>;
};

export type ProjectResponse = {
    success?: true;
    data: Project;
};

export type ProjectResponseMultiStatus = {
    success?: true;
    data: Project;
    warning?: string | null;
    error?: string | null;
};

export type ProjectSummaryResponse = {
    success?: true;
    summary: string;
};

export type Prompt = {
    /**
     * Prompt ID (Unix ms)
     */
    id: number;
    /**
     * Prompt name
     */
    name: string;
    /**
     * Prompt content template
     */
    content: string;
    /**
     * Optional Project ID this prompt is linked to (Unix ms)
     */
    projectId?: number | null;
    /**
     * Creation timestamp (Unix ms)
     */
    created: number;
    /**
     * Last update timestamp (Unix ms)
     */
    updated: number;
};

export type PromptListResponse = {
    success?: true;
    data: Array<Prompt>;
};

export type PromptResponse = {
    success?: true;
    data: Prompt;
};

export type ProviderKey = {
    /**
     * Provider Key ID (Unix ms)
     */
    id: number;
    /**
     * AI Provider identifier
     */
    provider: string;
    /**
     * The actual API Key
     */
    key: string;
    /**
     * Creation timestamp (Unix ms)
     */
    created: number;
    /**
     * Last update timestamp (Unix ms)
     */
    updated: number;
};

export type ProviderKeyListItem = {
    /**
     * Provider Key ID (Unix ms)
     */
    id: number;
    /**
     * AI Provider identifier
     */
    provider: string;
    /**
     * Creation timestamp (Unix ms)
     */
    created: number;
    /**
     * Last update timestamp (Unix ms)
     */
    updated: number;
};

export type ProviderKeyListResponse = {
    success?: true;
    data: Array<ProviderKeyListItem>;
};

export type ProviderKeyResponse = {
    success?: true;
    data: ProviderKey;
};

export type RemoveSummariesBody = {
    fileIds: Array<number>;
};

export type RemoveSummariesResponse = {
    success?: true;
    removed_count: number;
    message: string;
};

export type ReorderTaskItem = {
    taskId: number;
    orderIndex: number;
};

export type ReorderTasksBody = {
    tasks: Array<ReorderTaskItem>;
};

export type ServerInfo = {
    python_version: string;
    platform: string;
    arch: string;
    memory_usage: ServerMemoryUsage;
    uptime: number;
};

export type ServerMemoryUsage = {
    rss: number;
    vms: number;
    used_memory: number;
    total_memory: number;
};

export type SuggestFilesBody = {
    userInput: string;
};

export type SuggestFilesResponse = {
    success?: true;
    recommended_file_ids: Array<string>;
};

export type SuggestTasksBody = {
    userContext?: string | null;
};

export type SuggestedFilesBody = {
    extraUserInput?: string | null;
};

export type SuggestedFilesResponse = {
    success?: boolean;
    recommendedFileIds: Array<string>;
    combinedSummaries?: string | null;
    message?: string | null;
};

export type SuggestedTasksResponse = {
    success?: boolean;
    suggestedTasks: Array<string>;
};

export type SummarizeFilesBody = {
    fileIds: Array<number>;
    /**
     * Force re-summarization even if summary exists
     */
    force?: boolean;
};

export type SummarizeFilesResponse = {
    success?: true;
    included: number;
    skipped: number;
    updated_files: Array<AppSchemasProjectSchemasProjectFile>;
    message: string;
};

export type SystemStatusChecks = {
    api?: string;
    timestamp: string;
};

export type SystemStatusResponse = {
    success?: boolean;
    status?: string;
    checks: SystemStatusChecks;
};

export type TaskListResponse = {
    success?: boolean;
    tasks: Array<TicketTaskRead>;
};

export type TaskResponse = {
    success?: boolean;
    task: TicketTaskRead;
};

export type TicketFileRead = {
    id: number;
    ticketId: number;
    fileId: number;
    uploadedAt: number;
};

export type TicketListResponse = {
    success?: boolean;
    tickets: Array<TicketRead>;
};

export type TicketPriorityEnum = 'low' | 'normal' | 'high';

export type TicketRead = {
    id: number;
    projectId: number;
    title: string;
    overview: string;
    status: string;
    priority: string;
    suggestedFileIds: string;
    created: number;
    updated: number;
};

export type TicketResponse = {
    success?: boolean;
    ticket: TicketRead;
};

export type TicketStatusEnum = 'open' | 'in_progress' | 'closed';

export type TicketTaskRead = {
    id: number;
    ticketId: number;
    content: string;
    done: boolean;
    orderIndex: number;
    created: number;
    updated: number;
};

export type TicketWithTaskCount = {
    ticket: TicketRead;
    taskCount: number;
    completedTaskCount: number;
};

export type TicketWithTaskCountListResponse = {
    success?: boolean;
    ticketsWithCount: Array<TicketWithTaskCount>;
};

export type TicketWithTasks = {
    ticket: TicketRead;
    tasks: Array<TicketTaskRead>;
};

export type TicketWithTasksListResponse = {
    success?: boolean;
    ticketsWithTasks: Array<TicketWithTasks>;
};

export type UnifiedModel = {
    /**
     * Model identifier
     */
    id: number;
    /**
     * User-friendly model name
     */
    name: string;
    /**
     * Provider ID
     */
    provider: string;
    /**
     * Context window size in tokens
     */
    context_length?: number | null;
};

export type UpdateChatBody = {
    title: string;
};

export type UpdateProjectBody = {
    name?: string | null;
    path?: string | null;
    description?: string | null;
};

export type UpdatePromptBody = {
    name?: string | null;
    content?: string | null;
};

export type UpdateProviderKeyBody = {
    provider?: string | null;
    key?: string | null;
};

export type UpdateTaskBody = {
    content?: string | null;
    done?: boolean | null;
};

export type UpdateTicketBody = {
    title?: string | null;
    overview?: string | null;
    status?: TicketStatusEnum | null;
    priority?: TicketPriorityEnum | null;
    suggestedFileIds?: Array<number> | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type AppSchemasAdminSchemasApiErrorResponse = {
    success?: boolean;
    error: ApiErrorDetail;
};

export type AppSchemasAgentCoderSchemasProjectFile = {
    id: number;
    project_id?: string | null;
    [key: string]: unknown | number | (string | null) | undefined;
};

export type AppSchemasAiFileChangeSchemasApiErrorResponse = {
    success?: false;
    error: AppSchemasAiFileChangeSchemasErrorDetail;
};

export type AppSchemasAiFileChangeSchemasErrorDetail = {
    message: string;
    code: string;
    details?: {
        [key: string]: unknown;
    };
};

export type AppSchemasChatSchemasOperationSuccessResponse = {
    success?: true;
    detail?: string | null;
};

export type AppSchemasCommonSchemasApiErrorResponse = {
    success?: boolean;
    error: AppSchemasCommonSchemasErrorDetail;
};

export type AppSchemasCommonSchemasErrorDetail = {
    message: string;
    code?: string | null;
    details?: {
        [key: string]: unknown;
    } | null;
};

export type AppSchemasCommonSchemasOperationSuccessResponse = {
    success?: true;
    message: string;
};

export type AppSchemasProjectSchemasProjectFile = {
    id: number;
    project_id: number;
    name: string;
    path: string;
    extension?: string | null;
    size: number;
    content?: string | null;
    extractedSymbols?: {
        [key: string]: unknown;
    } | null;
    codeStory?: string | null;
    summary?: string | null;
    summary_last_updated_at?: number | null;
    meta?: string | null;
    checksum?: string | null;
    created: number;
    updated: number;
};

export type HealthCheckApiHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health';
};

export type HealthCheckApiHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetEnvInfoApiAdminEnvInfoGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/env-info';
};

export type GetEnvInfoApiAdminEnvInfoGetErrors = {
    /**
     * Error retrieving environment information
     */
    500: AppSchemasAdminSchemasApiErrorResponse;
};

export type GetEnvInfoApiAdminEnvInfoGetError = GetEnvInfoApiAdminEnvInfoGetErrors[keyof GetEnvInfoApiAdminEnvInfoGetErrors];

export type GetEnvInfoApiAdminEnvInfoGetResponses = {
    /**
     * Successful Response
     */
    200: EnvInfoResponse;
};

export type GetEnvInfoApiAdminEnvInfoGetResponse = GetEnvInfoApiAdminEnvInfoGetResponses[keyof GetEnvInfoApiAdminEnvInfoGetResponses];

export type GetSystemStatusApiAdminSystemStatusGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/system-status';
};

export type GetSystemStatusApiAdminSystemStatusGetErrors = {
    /**
     * Error retrieving system status
     */
    500: AppSchemasAdminSchemasApiErrorResponse;
};

export type GetSystemStatusApiAdminSystemStatusGetError = GetSystemStatusApiAdminSystemStatusGetErrors[keyof GetSystemStatusApiAdminSystemStatusGetErrors];

export type GetSystemStatusApiAdminSystemStatusGetResponses = {
    /**
     * Successful Response
     */
    200: SystemStatusResponse;
};

export type GetSystemStatusApiAdminSystemStatusGetResponse = GetSystemStatusApiAdminSystemStatusGetResponses[keyof GetSystemStatusApiAdminSystemStatusGetResponses];

export type RunAgentCoderApiProjectsProjectIdAgentCoderPostData = {
    body: AgentCoderRunRequest;
    path: {
        /**
         * The unique ID of the project.
         */
        project_id: string;
    };
    query?: never;
    url: '/api/projects/{project_id}/agent-coder';
};

export type RunAgentCoderApiProjectsProjectIdAgentCoderPostErrors = {
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Unprocessable Content
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type RunAgentCoderApiProjectsProjectIdAgentCoderPostError = RunAgentCoderApiProjectsProjectIdAgentCoderPostErrors[keyof RunAgentCoderApiProjectsProjectIdAgentCoderPostErrors];

export type RunAgentCoderApiProjectsProjectIdAgentCoderPostResponses = {
    /**
     * Successful Response
     */
    200: AgentCoderRunResponse;
};

export type RunAgentCoderApiProjectsProjectIdAgentCoderPostResponse = RunAgentCoderApiProjectsProjectIdAgentCoderPostResponses[keyof RunAgentCoderApiProjectsProjectIdAgentCoderPostResponses];

export type GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetData = {
    body?: never;
    path: {
        /**
         * The unique ID of the project.
         */
        project_id: string;
        /**
         * The unique ID of the agent run.
         */
        agent_job_id: string;
    };
    query?: never;
    url: '/api/projects/{project_id}/agent-coder/runs/{agent_job_id}/logs';
};

export type GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetErrors = {
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetError = GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetErrors[keyof GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetErrors];

export type GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetResponse = GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetResponses[keyof GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetResponses];

export type GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetData = {
    body?: never;
    path: {
        /**
         * The unique ID of the project.
         */
        project_id: string;
        /**
         * The unique ID of the agent run.
         */
        agent_job_id: string;
    };
    query?: never;
    url: '/api/projects/{project_id}/agent-coder/runs/{agent_job_id}/data';
};

export type GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetErrors = {
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetError = GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetErrors[keyof GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetErrors];

export type GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetResponses = {
    /**
     * Successful Response
     */
    200: AgentDataLog;
};

export type GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetResponse = GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetResponses[keyof GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetResponses];

export type ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetData = {
    body?: never;
    path: {
        /**
         * The unique ID of the project.
         */
        project_id: string;
    };
    query?: never;
    url: '/api/projects/{project_id}/agent-coder/runs';
};

export type ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetError = ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetErrors[keyof ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetErrors];

export type ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetResponses = {
    /**
     * Successful Response
     */
    200: ListAgentRunsResponse;
};

export type ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetResponse = ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetResponses[keyof ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetResponses];

export type ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData = {
    body?: never;
    path: {
        /**
         * The unique ID of the project.
         */
        project_id: string;
        /**
         * The unique ID of the agent run.
         */
        agent_job_id: string;
    };
    query?: never;
    url: '/api/projects/{project_id}/agent-coder/runs/{agent_job_id}/confirm';
};

export type ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostErrors = {
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostError = ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostErrors[keyof ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostErrors];

export type ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponses = {
    /**
     * Successful Response
     */
    200: ConfirmAgentRunChangesResponse;
};

export type ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponse = ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponses[keyof ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponses];

export type DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteData = {
    body?: never;
    path: {
        /**
         * The unique ID of the project.
         */
        project_id: string;
        /**
         * The unique ID of the agent run to delete.
         */
        agent_job_id: string;
    };
    query?: never;
    url: '/api/projects/{project_id}/agent-coder/runs/{agent_job_id}';
};

export type DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteErrors = {
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteError = DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteErrors[keyof DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteErrors];

export type DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: DeleteAgentRunResponse;
};

export type DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponse = DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponses[keyof DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponses];

export type GetAllChatsEndpointApiChatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/chats/';
};

export type GetAllChatsEndpointApiChatsGetResponses = {
    /**
     * Successful Response
     */
    200: ChatListResponse;
};

export type GetAllChatsEndpointApiChatsGetResponse = GetAllChatsEndpointApiChatsGetResponses[keyof GetAllChatsEndpointApiChatsGetResponses];

export type CreateChatEndpointApiChatsPostData = {
    body: CreateChatBody;
    path?: never;
    query?: never;
    url: '/api/chats/';
};

export type CreateChatEndpointApiChatsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateChatEndpointApiChatsPostError = CreateChatEndpointApiChatsPostErrors[keyof CreateChatEndpointApiChatsPostErrors];

export type CreateChatEndpointApiChatsPostResponses = {
    /**
     * Successful Response
     */
    201: ChatResponse;
};

export type CreateChatEndpointApiChatsPostResponse = CreateChatEndpointApiChatsPostResponses[keyof CreateChatEndpointApiChatsPostResponses];

export type GetChatMessagesEndpointApiChatsChatIdMessagesGetData = {
    body?: never;
    path?: never;
    query: {
        chatId: number;
    };
    url: '/api/chats/{chat_id}/messages';
};

export type GetChatMessagesEndpointApiChatsChatIdMessagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChatMessagesEndpointApiChatsChatIdMessagesGetError = GetChatMessagesEndpointApiChatsChatIdMessagesGetErrors[keyof GetChatMessagesEndpointApiChatsChatIdMessagesGetErrors];

export type GetChatMessagesEndpointApiChatsChatIdMessagesGetResponses = {
    /**
     * Successful Response
     */
    200: MessageListResponse;
};

export type GetChatMessagesEndpointApiChatsChatIdMessagesGetResponse = GetChatMessagesEndpointApiChatsChatIdMessagesGetResponses[keyof GetChatMessagesEndpointApiChatsChatIdMessagesGetResponses];

export type PostAiChatSdkEndpointApiChatsApiAiChatPostData = {
    body: AiChatStreamRequest;
    path?: never;
    query?: never;
    url: '/api/chats/api/ai/chat';
};

export type PostAiChatSdkEndpointApiChatsApiAiChatPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostAiChatSdkEndpointApiChatsApiAiChatPostError = PostAiChatSdkEndpointApiChatsApiAiChatPostErrors[keyof PostAiChatSdkEndpointApiChatsApiAiChatPostErrors];

export type PostAiChatSdkEndpointApiChatsApiAiChatPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ForkChatEndpointApiChatsChatIdForkPostData = {
    body: ForkChatBody;
    path?: never;
    query: {
        chatId: number;
    };
    url: '/api/chats/{chat_id}/fork';
};

export type ForkChatEndpointApiChatsChatIdForkPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ForkChatEndpointApiChatsChatIdForkPostError = ForkChatEndpointApiChatsChatIdForkPostErrors[keyof ForkChatEndpointApiChatsChatIdForkPostErrors];

export type ForkChatEndpointApiChatsChatIdForkPostResponses = {
    /**
     * Successful Response
     */
    201: ChatResponse;
};

export type ForkChatEndpointApiChatsChatIdForkPostResponse = ForkChatEndpointApiChatsChatIdForkPostResponses[keyof ForkChatEndpointApiChatsChatIdForkPostResponses];

export type ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData = {
    body: ForkChatBody;
    path?: never;
    query: {
        chatId: number;
        messageId: number;
    };
    url: '/api/chats/{chat_id}/fork/{message_id}';
};

export type ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostError = ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostErrors[keyof ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostErrors];

export type ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponses = {
    /**
     * Successful Response
     */
    201: ChatResponse;
};

export type ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponse = ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponses[keyof ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponses];

export type DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteData = {
    body?: never;
    path?: never;
    query: {
        chatId: number;
        messageId: number;
    };
    url: '/api/chats/{chat_id}/messages/{message_id}';
};

export type DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteError = DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteErrors[keyof DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteErrors];

export type DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: AppSchemasChatSchemasOperationSuccessResponse;
};

export type DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponse = DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponses[keyof DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponses];

export type DeleteChatEndpointApiChatsChatIdDeleteData = {
    body?: never;
    path?: never;
    query: {
        chatId: number;
    };
    url: '/api/chats/{chat_id}';
};

export type DeleteChatEndpointApiChatsChatIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteChatEndpointApiChatsChatIdDeleteError = DeleteChatEndpointApiChatsChatIdDeleteErrors[keyof DeleteChatEndpointApiChatsChatIdDeleteErrors];

export type DeleteChatEndpointApiChatsChatIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: AppSchemasChatSchemasOperationSuccessResponse;
};

export type DeleteChatEndpointApiChatsChatIdDeleteResponse = DeleteChatEndpointApiChatsChatIdDeleteResponses[keyof DeleteChatEndpointApiChatsChatIdDeleteResponses];

export type UpdateChatEndpointApiChatsChatIdPatchData = {
    body: UpdateChatBody;
    path?: never;
    query: {
        chatId: number;
    };
    url: '/api/chats/{chat_id}';
};

export type UpdateChatEndpointApiChatsChatIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateChatEndpointApiChatsChatIdPatchError = UpdateChatEndpointApiChatsChatIdPatchErrors[keyof UpdateChatEndpointApiChatsChatIdPatchErrors];

export type UpdateChatEndpointApiChatsChatIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ChatResponse;
};

export type UpdateChatEndpointApiChatsChatIdPatchResponse = UpdateChatEndpointApiChatsChatIdPatchResponses[keyof UpdateChatEndpointApiChatsChatIdPatchResponses];

export type ListAllPromptsEndpointApiPromptsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/prompts';
};

export type ListAllPromptsEndpointApiPromptsGetErrors = {
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ListAllPromptsEndpointApiPromptsGetError = ListAllPromptsEndpointApiPromptsGetErrors[keyof ListAllPromptsEndpointApiPromptsGetErrors];

export type ListAllPromptsEndpointApiPromptsGetResponses = {
    /**
     * Successfully retrieved all prompts
     */
    200: PromptListResponse;
};

export type ListAllPromptsEndpointApiPromptsGetResponse = ListAllPromptsEndpointApiPromptsGetResponses[keyof ListAllPromptsEndpointApiPromptsGetResponses];

export type CreatePromptEndpointApiPromptsPostData = {
    body: CreatePromptBody;
    path?: never;
    query?: never;
    url: '/api/prompts';
};

export type CreatePromptEndpointApiPromptsPostErrors = {
    /**
     * Referenced project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type CreatePromptEndpointApiPromptsPostError = CreatePromptEndpointApiPromptsPostErrors[keyof CreatePromptEndpointApiPromptsPostErrors];

export type CreatePromptEndpointApiPromptsPostResponses = {
    /**
     * Prompt created successfully
     */
    201: PromptResponse;
};

export type CreatePromptEndpointApiPromptsPostResponse = CreatePromptEndpointApiPromptsPostResponses[keyof CreatePromptEndpointApiPromptsPostResponses];

export type ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
    };
    query?: never;
    url: '/api/projects/{projectId}/prompts';
};

export type ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid projectId format)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetError = ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetErrors[keyof ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetErrors];

export type ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetResponses = {
    /**
     * Successfully retrieved project prompts
     */
    200: PromptListResponse;
};

export type ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetResponse = ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetResponses[keyof ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetResponses];

export type RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
        /**
         * The ID of the prompt
         */
        promptId: string;
    };
    query?: never;
    url: '/api/projects/{projectId}/prompts/{promptId}';
};

export type RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteErrors = {
    /**
     * Project or Prompt not found, or association does not exist
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid ID formats)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteError = RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteErrors[keyof RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteErrors];

export type RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponses = {
    /**
     * Prompt successfully disassociated from project
     */
    200: AppSchemasCommonSchemasOperationSuccessResponse;
};

export type RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponse = RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponses[keyof RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponses];

export type AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        projectId: string;
        /**
         * The ID of the prompt
         */
        promptId: string;
    };
    query?: never;
    url: '/api/projects/{projectId}/prompts/{promptId}';
};

export type AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostErrors = {
    /**
     * Project or Prompt not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid ID formats)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostError = AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostErrors[keyof AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostErrors];

export type AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponses = {
    /**
     * Prompt successfully associated with project
     */
    200: AppSchemasCommonSchemasOperationSuccessResponse;
};

export type AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponse = AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponses[keyof AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponses];

export type DeletePromptEndpointApiPromptsPromptIdDeleteData = {
    body?: never;
    path: {
        /**
         * The ID of the prompt
         */
        promptId: string;
    };
    query?: never;
    url: '/api/prompts/{promptId}';
};

export type DeletePromptEndpointApiPromptsPromptIdDeleteErrors = {
    /**
     * Prompt not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid promptId format)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type DeletePromptEndpointApiPromptsPromptIdDeleteError = DeletePromptEndpointApiPromptsPromptIdDeleteErrors[keyof DeletePromptEndpointApiPromptsPromptIdDeleteErrors];

export type DeletePromptEndpointApiPromptsPromptIdDeleteResponses = {
    /**
     * Prompt deleted successfully
     */
    200: AppSchemasCommonSchemasOperationSuccessResponse;
};

export type DeletePromptEndpointApiPromptsPromptIdDeleteResponse = DeletePromptEndpointApiPromptsPromptIdDeleteResponses[keyof DeletePromptEndpointApiPromptsPromptIdDeleteResponses];

export type GetPromptByIdEndpointApiPromptsPromptIdGetData = {
    body?: never;
    path: {
        /**
         * The ID of the prompt
         */
        promptId: string;
    };
    query?: never;
    url: '/api/prompts/{promptId}';
};

export type GetPromptByIdEndpointApiPromptsPromptIdGetErrors = {
    /**
     * Prompt not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid promptId format)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetPromptByIdEndpointApiPromptsPromptIdGetError = GetPromptByIdEndpointApiPromptsPromptIdGetErrors[keyof GetPromptByIdEndpointApiPromptsPromptIdGetErrors];

export type GetPromptByIdEndpointApiPromptsPromptIdGetResponses = {
    /**
     * Successfully retrieved prompt
     */
    200: PromptResponse;
};

export type GetPromptByIdEndpointApiPromptsPromptIdGetResponse = GetPromptByIdEndpointApiPromptsPromptIdGetResponses[keyof GetPromptByIdEndpointApiPromptsPromptIdGetResponses];

export type UpdatePromptEndpointApiPromptsPromptIdPatchData = {
    body: UpdatePromptBody;
    path: {
        /**
         * The ID of the prompt
         */
        promptId: string;
    };
    query?: never;
    url: '/api/prompts/{promptId}';
};

export type UpdatePromptEndpointApiPromptsPromptIdPatchErrors = {
    /**
     * Prompt not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid promptId or empty body)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type UpdatePromptEndpointApiPromptsPromptIdPatchError = UpdatePromptEndpointApiPromptsPromptIdPatchErrors[keyof UpdatePromptEndpointApiPromptsPromptIdPatchErrors];

export type UpdatePromptEndpointApiPromptsPromptIdPatchResponses = {
    /**
     * Prompt updated successfully
     */
    200: PromptResponse;
};

export type UpdatePromptEndpointApiPromptsPromptIdPatchResponse = UpdatePromptEndpointApiPromptsPromptIdPatchResponses[keyof UpdatePromptEndpointApiPromptsPromptIdPatchResponses];

export type ListProjectsRouteProjectsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/projects';
};

export type ListProjectsRouteProjectsGetErrors = {
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ListProjectsRouteProjectsGetError = ListProjectsRouteProjectsGetErrors[keyof ListProjectsRouteProjectsGetErrors];

export type ListProjectsRouteProjectsGetResponses = {
    /**
     * Successful Response
     */
    200: ProjectListResponse;
};

export type ListProjectsRouteProjectsGetResponse = ListProjectsRouteProjectsGetResponses[keyof ListProjectsRouteProjectsGetResponses];

export type CreateProjectRouteProjectsPostData = {
    body: CreateProjectBody;
    path?: never;
    query?: never;
    url: '/projects';
};

export type CreateProjectRouteProjectsPostErrors = {
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type CreateProjectRouteProjectsPostError = CreateProjectRouteProjectsPostErrors[keyof CreateProjectRouteProjectsPostErrors];

export type CreateProjectRouteProjectsPostResponses = {
    /**
     * Project created and initial sync started
     */
    201: ProjectResponse;
    /**
     * Project created, but post-creation steps encountered issues
     */
    207: ProjectResponseMultiStatus;
};

export type CreateProjectRouteProjectsPostResponse = CreateProjectRouteProjectsPostResponses[keyof CreateProjectRouteProjectsPostResponses];

export type DeleteProjectRouteProjectsProjectIdDeleteData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}';
};

export type DeleteProjectRouteProjectsProjectIdDeleteErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type DeleteProjectRouteProjectsProjectIdDeleteError = DeleteProjectRouteProjectsProjectIdDeleteErrors[keyof DeleteProjectRouteProjectsProjectIdDeleteErrors];

export type DeleteProjectRouteProjectsProjectIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: AppSchemasCommonSchemasOperationSuccessResponse;
};

export type DeleteProjectRouteProjectsProjectIdDeleteResponse = DeleteProjectRouteProjectsProjectIdDeleteResponses[keyof DeleteProjectRouteProjectsProjectIdDeleteResponses];

export type GetProjectByIdRouteProjectsProjectIdGetData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}';
};

export type GetProjectByIdRouteProjectsProjectIdGetErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetProjectByIdRouteProjectsProjectIdGetError = GetProjectByIdRouteProjectsProjectIdGetErrors[keyof GetProjectByIdRouteProjectsProjectIdGetErrors];

export type GetProjectByIdRouteProjectsProjectIdGetResponses = {
    /**
     * Successful Response
     */
    200: ProjectResponse;
};

export type GetProjectByIdRouteProjectsProjectIdGetResponse = GetProjectByIdRouteProjectsProjectIdGetResponses[keyof GetProjectByIdRouteProjectsProjectIdGetResponses];

export type UpdateProjectRouteProjectsProjectIdPatchData = {
    body: UpdateProjectBody;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}';
};

export type UpdateProjectRouteProjectsProjectIdPatchErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type UpdateProjectRouteProjectsProjectIdPatchError = UpdateProjectRouteProjectsProjectIdPatchErrors[keyof UpdateProjectRouteProjectsProjectIdPatchErrors];

export type UpdateProjectRouteProjectsProjectIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ProjectResponse;
};

export type UpdateProjectRouteProjectsProjectIdPatchResponse = UpdateProjectRouteProjectsProjectIdPatchResponses[keyof UpdateProjectRouteProjectsProjectIdPatchResponses];

export type SyncProjectFilesRouteProjectsProjectIdSyncPostData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}/sync';
};

export type SyncProjectFilesRouteProjectsProjectIdSyncPostErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error during sync
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type SyncProjectFilesRouteProjectsProjectIdSyncPostError = SyncProjectFilesRouteProjectsProjectIdSyncPostErrors[keyof SyncProjectFilesRouteProjectsProjectIdSyncPostErrors];

export type SyncProjectFilesRouteProjectsProjectIdSyncPostResponses = {
    /**
     * Successful Response
     */
    200: AppSchemasCommonSchemasOperationSuccessResponse;
};

export type SyncProjectFilesRouteProjectsProjectIdSyncPostResponse = SyncProjectFilesRouteProjectsProjectIdSyncPostResponses[keyof SyncProjectFilesRouteProjectsProjectIdSyncPostResponses];

export type GetProjectFilesRouteProjectsProjectIdFilesGetData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}/files';
};

export type GetProjectFilesRouteProjectsProjectIdFilesGetErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetProjectFilesRouteProjectsProjectIdFilesGetError = GetProjectFilesRouteProjectsProjectIdFilesGetErrors[keyof GetProjectFilesRouteProjectsProjectIdFilesGetErrors];

export type GetProjectFilesRouteProjectsProjectIdFilesGetResponses = {
    /**
     * Successful Response
     */
    200: FileListResponse;
};

export type GetProjectFilesRouteProjectsProjectIdFilesGetResponse = GetProjectFilesRouteProjectsProjectIdFilesGetResponses[keyof GetProjectFilesRouteProjectsProjectIdFilesGetResponses];

export type RefreshProjectRouteProjectsProjectIdRefreshPostData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: {
        /**
         * Optional folder path to limit the refresh scope
         */
        folder?: string | null;
    };
    url: '/projects/{project_id}/refresh';
};

export type RefreshProjectRouteProjectsProjectIdRefreshPostErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error during refresh/sync
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type RefreshProjectRouteProjectsProjectIdRefreshPostError = RefreshProjectRouteProjectsProjectIdRefreshPostErrors[keyof RefreshProjectRouteProjectsProjectIdRefreshPostErrors];

export type RefreshProjectRouteProjectsProjectIdRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: FileListResponse;
};

export type RefreshProjectRouteProjectsProjectIdRefreshPostResponse = RefreshProjectRouteProjectsProjectIdRefreshPostResponses[keyof RefreshProjectRouteProjectsProjectIdRefreshPostResponses];

export type GetProjectSummaryRouteProjectsProjectIdSummaryGetData = {
    body?: never;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}/summary';
};

export type GetProjectSummaryRouteProjectsProjectIdSummaryGetErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error or failed to generate summary for existing project
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetProjectSummaryRouteProjectsProjectIdSummaryGetError = GetProjectSummaryRouteProjectsProjectIdSummaryGetErrors[keyof GetProjectSummaryRouteProjectsProjectIdSummaryGetErrors];

export type GetProjectSummaryRouteProjectsProjectIdSummaryGetResponses = {
    /**
     * Successful Response
     */
    200: ProjectSummaryResponse;
};

export type GetProjectSummaryRouteProjectsProjectIdSummaryGetResponse = GetProjectSummaryRouteProjectsProjectIdSummaryGetResponses[keyof GetProjectSummaryRouteProjectsProjectIdSummaryGetResponses];

export type SuggestFilesRouteProjectsProjectIdSuggestFilesPostData = {
    body: SuggestFilesBody;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}/suggest-files';
};

export type SuggestFilesRouteProjectsProjectIdSuggestFilesPostErrors = {
    /**
     * Project not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error or AI processing error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type SuggestFilesRouteProjectsProjectIdSuggestFilesPostError = SuggestFilesRouteProjectsProjectIdSuggestFilesPostErrors[keyof SuggestFilesRouteProjectsProjectIdSuggestFilesPostErrors];

export type SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponses = {
    /**
     * Successful Response
     */
    200: SuggestFilesResponse;
};

export type SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponse = SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponses[keyof SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponses];

export type SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData = {
    body: SummarizeFilesBody;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}/summarize';
};

export type SummarizeProjectFilesRouteProjectsProjectIdSummarizePostErrors = {
    /**
     * Project or some files not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error during summarization
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type SummarizeProjectFilesRouteProjectsProjectIdSummarizePostError = SummarizeProjectFilesRouteProjectsProjectIdSummarizePostErrors[keyof SummarizeProjectFilesRouteProjectsProjectIdSummarizePostErrors];

export type SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponses = {
    /**
     * Successful Response
     */
    200: SummarizeFilesResponse;
};

export type SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponse = SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponses[keyof SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponses];

export type RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData = {
    body: RemoveSummariesBody;
    path: {
        /**
         * The ID of the project
         */
        project_id: string;
    };
    query?: never;
    url: '/projects/{project_id}/remove-summaries';
};

export type RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostErrors = {
    /**
     * Project or some files not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostError = RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostErrors[keyof RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostErrors];

export type RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponses = {
    /**
     * Successful Response
     */
    200: RemoveSummariesResponse;
};

export type RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponse = RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponses[keyof RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponses];

export type OptimizeUserInputRoutePromptOptimizePostData = {
    body: OptimizeUserInputRequest;
    path?: never;
    query?: never;
    url: '/prompt/optimize';
};

export type OptimizeUserInputRoutePromptOptimizePostErrors = {
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error or AI provider error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type OptimizeUserInputRoutePromptOptimizePostError = OptimizeUserInputRoutePromptOptimizePostErrors[keyof OptimizeUserInputRoutePromptOptimizePostErrors];

export type OptimizeUserInputRoutePromptOptimizePostResponses = {
    /**
     * Successful Response
     */
    200: OptimizePromptResponse;
};

export type OptimizeUserInputRoutePromptOptimizePostResponse = OptimizeUserInputRoutePromptOptimizePostResponses[keyof OptimizeUserInputRoutePromptOptimizePostResponses];

export type ListProviderKeysApiKeysGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/keys/';
};

export type ListProviderKeysApiKeysGetErrors = {
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ListProviderKeysApiKeysGetError = ListProviderKeysApiKeysGetErrors[keyof ListProviderKeysApiKeysGetErrors];

export type ListProviderKeysApiKeysGetResponses = {
    /**
     * Successful Response
     */
    200: ProviderKeyListResponse;
};

export type ListProviderKeysApiKeysGetResponse = ListProviderKeysApiKeysGetResponses[keyof ListProviderKeysApiKeysGetResponses];

export type CreateProviderKeyApiKeysPostData = {
    body: CreateProviderKeyBody;
    path?: never;
    query?: never;
    url: '/api/keys/';
};

export type CreateProviderKeyApiKeysPostErrors = {
    /**
     * Validation Error
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type CreateProviderKeyApiKeysPostError = CreateProviderKeyApiKeysPostErrors[keyof CreateProviderKeyApiKeysPostErrors];

export type CreateProviderKeyApiKeysPostResponses = {
    /**
     * Successful Response
     */
    201: ProviderKeyResponse;
};

export type CreateProviderKeyApiKeysPostResponse = CreateProviderKeyApiKeysPostResponses[keyof CreateProviderKeyApiKeysPostResponses];

export type DeleteProviderKeyApiKeysKeyIdDeleteData = {
    body?: never;
    path: {
        /**
         * The ID of the provider key to delete
         */
        keyId: string;
    };
    query?: never;
    url: '/api/keys/{keyId}';
};

export type DeleteProviderKeyApiKeysKeyIdDeleteErrors = {
    /**
     * Provider key not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid keyId format)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type DeleteProviderKeyApiKeysKeyIdDeleteError = DeleteProviderKeyApiKeysKeyIdDeleteErrors[keyof DeleteProviderKeyApiKeysKeyIdDeleteErrors];

export type DeleteProviderKeyApiKeysKeyIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: AppSchemasCommonSchemasOperationSuccessResponse;
};

export type DeleteProviderKeyApiKeysKeyIdDeleteResponse = DeleteProviderKeyApiKeysKeyIdDeleteResponses[keyof DeleteProviderKeyApiKeysKeyIdDeleteResponses];

export type GetProviderKeyByIdApiKeysKeyIdGetData = {
    body?: never;
    path: {
        /**
         * The ID of the provider key to retrieve
         */
        keyId: string;
    };
    query?: never;
    url: '/api/keys/{keyId}';
};

export type GetProviderKeyByIdApiKeysKeyIdGetErrors = {
    /**
     * Provider key not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid keyId format)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetProviderKeyByIdApiKeysKeyIdGetError = GetProviderKeyByIdApiKeysKeyIdGetErrors[keyof GetProviderKeyByIdApiKeysKeyIdGetErrors];

export type GetProviderKeyByIdApiKeysKeyIdGetResponses = {
    /**
     * Successful Response
     */
    200: ProviderKeyResponse;
};

export type GetProviderKeyByIdApiKeysKeyIdGetResponse = GetProviderKeyByIdApiKeysKeyIdGetResponses[keyof GetProviderKeyByIdApiKeysKeyIdGetResponses];

export type UpdateProviderKeyApiKeysKeyIdPatchData = {
    body: UpdateProviderKeyBody;
    path: {
        /**
         * The ID of the provider key to update
         */
        keyId: string;
    };
    query?: never;
    url: '/api/keys/{keyId}';
};

export type UpdateProviderKeyApiKeysKeyIdPatchErrors = {
    /**
     * Provider key not found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (e.g., invalid keyId or empty body)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type UpdateProviderKeyApiKeysKeyIdPatchError = UpdateProviderKeyApiKeysKeyIdPatchErrors[keyof UpdateProviderKeyApiKeysKeyIdPatchErrors];

export type UpdateProviderKeyApiKeysKeyIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ProviderKeyResponse;
};

export type UpdateProviderKeyApiKeysKeyIdPatchResponse = UpdateProviderKeyApiKeysKeyIdPatchResponses[keyof UpdateProviderKeyApiKeysKeyIdPatchResponses];

export type CreateTicketRouteTicketsPostData = {
    body: CreateTicketBody;
    path?: never;
    query?: never;
    url: '/tickets';
};

export type CreateTicketRouteTicketsPostErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type CreateTicketRouteTicketsPostError = CreateTicketRouteTicketsPostErrors[keyof CreateTicketRouteTicketsPostErrors];

export type CreateTicketRouteTicketsPostResponses = {
    /**
     * Successful Response
     */
    201: TicketResponse;
};

export type CreateTicketRouteTicketsPostResponse = CreateTicketRouteTicketsPostResponses[keyof CreateTicketRouteTicketsPostResponses];

export type DeleteTicketRouteTicketsTicketIdDeleteData = {
    body?: never;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}';
};

export type DeleteTicketRouteTicketsTicketIdDeleteErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type DeleteTicketRouteTicketsTicketIdDeleteError = DeleteTicketRouteTicketsTicketIdDeleteErrors[keyof DeleteTicketRouteTicketsTicketIdDeleteErrors];

export type DeleteTicketRouteTicketsTicketIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: AppSchemasCommonSchemasOperationSuccessResponse;
};

export type DeleteTicketRouteTicketsTicketIdDeleteResponse = DeleteTicketRouteTicketsTicketIdDeleteResponses[keyof DeleteTicketRouteTicketsTicketIdDeleteResponses];

export type GetTicketRouteTicketsTicketIdGetData = {
    body?: never;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}';
};

export type GetTicketRouteTicketsTicketIdGetErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetTicketRouteTicketsTicketIdGetError = GetTicketRouteTicketsTicketIdGetErrors[keyof GetTicketRouteTicketsTicketIdGetErrors];

export type GetTicketRouteTicketsTicketIdGetResponses = {
    /**
     * Successful Response
     */
    200: TicketResponse;
};

export type GetTicketRouteTicketsTicketIdGetResponse = GetTicketRouteTicketsTicketIdGetResponses[keyof GetTicketRouteTicketsTicketIdGetResponses];

export type UpdateTicketRouteTicketsTicketIdPatchData = {
    body: UpdateTicketBody;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}';
};

export type UpdateTicketRouteTicketsTicketIdPatchErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type UpdateTicketRouteTicketsTicketIdPatchError = UpdateTicketRouteTicketsTicketIdPatchErrors[keyof UpdateTicketRouteTicketsTicketIdPatchErrors];

export type UpdateTicketRouteTicketsTicketIdPatchResponses = {
    /**
     * Successful Response
     */
    200: TicketResponse;
};

export type UpdateTicketRouteTicketsTicketIdPatchResponse = UpdateTicketRouteTicketsTicketIdPatchResponses[keyof UpdateTicketRouteTicketsTicketIdPatchResponses];

export type LinkFilesRouteTicketsTicketIdLinkFilesPostData = {
    body: LinkFilesBody;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/link-files';
};

export type LinkFilesRouteTicketsTicketIdLinkFilesPostErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type LinkFilesRouteTicketsTicketIdLinkFilesPostError = LinkFilesRouteTicketsTicketIdLinkFilesPostErrors[keyof LinkFilesRouteTicketsTicketIdLinkFilesPostErrors];

export type LinkFilesRouteTicketsTicketIdLinkFilesPostResponses = {
    /**
     * Successful Response
     */
    200: LinkedFilesResponse;
};

export type LinkFilesRouteTicketsTicketIdLinkFilesPostResponse = LinkFilesRouteTicketsTicketIdLinkFilesPostResponses[keyof LinkFilesRouteTicketsTicketIdLinkFilesPostResponses];

export type SuggestTasksRouteTicketsTicketIdSuggestTasksPostData = {
    body: SuggestTasksBody;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/suggest-tasks';
};

export type SuggestTasksRouteTicketsTicketIdSuggestTasksPostErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type SuggestTasksRouteTicketsTicketIdSuggestTasksPostError = SuggestTasksRouteTicketsTicketIdSuggestTasksPostErrors[keyof SuggestTasksRouteTicketsTicketIdSuggestTasksPostErrors];

export type SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponses = {
    /**
     * Successful Response
     */
    200: SuggestedTasksResponse;
};

export type SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponse = SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponses[keyof SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponses];

export type SuggestFilesRouteTicketsTicketIdSuggestFilesPostData = {
    body: SuggestedFilesBody;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/suggest-files';
};

export type SuggestFilesRouteTicketsTicketIdSuggestFilesPostErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type SuggestFilesRouteTicketsTicketIdSuggestFilesPostError = SuggestFilesRouteTicketsTicketIdSuggestFilesPostErrors[keyof SuggestFilesRouteTicketsTicketIdSuggestFilesPostErrors];

export type SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponses = {
    /**
     * Successful Response
     */
    200: SuggestedFilesResponse;
};

export type SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponse = SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponses[keyof SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponses];

export type ListTicketsByProjectRouteProjectsProjectIdTicketsGetData = {
    body?: never;
    path: {
        /**
         * Project identifier
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter tickets by status
         */
        status?: string | null;
    };
    url: '/projects/{projectId}/tickets';
};

export type ListTicketsByProjectRouteProjectsProjectIdTicketsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ListTicketsByProjectRouteProjectsProjectIdTicketsGetError = ListTicketsByProjectRouteProjectsProjectIdTicketsGetErrors[keyof ListTicketsByProjectRouteProjectsProjectIdTicketsGetErrors];

export type ListTicketsByProjectRouteProjectsProjectIdTicketsGetResponses = {
    /**
     * Successful Response
     */
    200: TicketListResponse;
};

export type ListTicketsByProjectRouteProjectsProjectIdTicketsGetResponse = ListTicketsByProjectRouteProjectsProjectIdTicketsGetResponses[keyof ListTicketsByProjectRouteProjectsProjectIdTicketsGetResponses];

export type ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetData = {
    body?: never;
    path: {
        /**
         * Project identifier
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter tickets by status (or 'all')
         */
        status?: string | null;
    };
    url: '/projects/{projectId}/tickets-with-count';
};

export type ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetError = ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetErrors[keyof ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetErrors];

export type ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetResponses = {
    /**
     * Successful Response
     */
    200: TicketWithTaskCountListResponse;
};

export type ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetResponse = ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetResponses[keyof ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetResponses];

export type ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetData = {
    body?: never;
    path: {
        /**
         * Project identifier
         */
        projectId: string;
    };
    query?: {
        /**
         * Filter tickets by status (or 'all')
         */
        status?: string | null;
    };
    url: '/projects/{projectId}/tickets-with-tasks';
};

export type ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetError = ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetErrors[keyof ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetErrors];

export type ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetResponses = {
    /**
     * Successful Response
     */
    200: TicketWithTasksListResponse;
};

export type ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetResponse = ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetResponses[keyof ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetResponses];

export type GetTasksRouteTicketsTicketIdTasksGetData = {
    body?: never;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/tasks';
};

export type GetTasksRouteTicketsTicketIdTasksGetErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetTasksRouteTicketsTicketIdTasksGetError = GetTasksRouteTicketsTicketIdTasksGetErrors[keyof GetTasksRouteTicketsTicketIdTasksGetErrors];

export type GetTasksRouteTicketsTicketIdTasksGetResponses = {
    /**
     * Successful Response
     */
    200: TaskListResponse;
};

export type GetTasksRouteTicketsTicketIdTasksGetResponse = GetTasksRouteTicketsTicketIdTasksGetResponses[keyof GetTasksRouteTicketsTicketIdTasksGetResponses];

export type CreateTaskRouteTicketsTicketIdTasksPostData = {
    body: CreateTaskBody;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/tasks';
};

export type CreateTaskRouteTicketsTicketIdTasksPostErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type CreateTaskRouteTicketsTicketIdTasksPostError = CreateTaskRouteTicketsTicketIdTasksPostErrors[keyof CreateTaskRouteTicketsTicketIdTasksPostErrors];

export type CreateTaskRouteTicketsTicketIdTasksPostResponses = {
    /**
     * Successful Response
     */
    201: TaskResponse;
};

export type CreateTaskRouteTicketsTicketIdTasksPostResponse = CreateTaskRouteTicketsTicketIdTasksPostResponses[keyof CreateTaskRouteTicketsTicketIdTasksPostResponses];

export type DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteData = {
    body?: never;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
        /**
         * Task identifier
         */
        taskId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/tasks/{taskId}';
};

export type DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteError = DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteErrors[keyof DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteErrors];

export type DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: AppSchemasCommonSchemasOperationSuccessResponse;
};

export type DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponse = DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponses[keyof DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponses];

export type UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchData = {
    body: UpdateTaskBody;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
        /**
         * Task identifier
         */
        taskId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/tasks/{taskId}';
};

export type UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchError = UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchErrors[keyof UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchErrors];

export type UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponses = {
    /**
     * Successful Response
     */
    200: TaskResponse;
};

export type UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponse = UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponses[keyof UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponses];

export type ReorderTasksRouteTicketsTicketIdTasksReorderPatchData = {
    body: ReorderTasksBody;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/tasks/reorder';
};

export type ReorderTasksRouteTicketsTicketIdTasksReorderPatchErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type ReorderTasksRouteTicketsTicketIdTasksReorderPatchError = ReorderTasksRouteTicketsTicketIdTasksReorderPatchErrors[keyof ReorderTasksRouteTicketsTicketIdTasksReorderPatchErrors];

export type ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponses = {
    /**
     * Successful Response
     */
    200: TaskListResponse;
};

export type ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponse = ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponses[keyof ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponses];

export type AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData = {
    body?: never;
    path: {
        /**
         * Ticket identifier
         */
        ticketId: string;
    };
    query?: never;
    url: '/tickets/{ticketId}/auto-generate-tasks';
};

export type AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostErrors = {
    /**
     * Validation Error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Not Found
     */
    404: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostError = AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostErrors[keyof AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostErrors];

export type AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponses = {
    /**
     * Successful Response
     */
    200: TaskListResponse;
};

export type AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponse = AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponses[keyof AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponses];

export type GetTasksForTicketsRouteTicketsBulkTasksGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Comma-separated list of ticket IDs
         */
        ids: string;
    };
    url: '/tickets/bulk-tasks';
};

export type GetTasksForTicketsRouteTicketsBulkTasksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetTasksForTicketsRouteTicketsBulkTasksGetError = GetTasksForTicketsRouteTicketsBulkTasksGetErrors[keyof GetTasksForTicketsRouteTicketsBulkTasksGetErrors];

export type GetTasksForTicketsRouteTicketsBulkTasksGetResponses = {
    /**
     * Successful Response
     */
    200: BulkTasksResponse;
};

export type GetTasksForTicketsRouteTicketsBulkTasksGetResponse = GetTasksForTicketsRouteTicketsBulkTasksGetResponses[keyof GetTasksForTicketsRouteTicketsBulkTasksGetResponses];

export type StreamGenerateTextEndpointApiGenAiStreamPostData = {
    body: AiGenerateTextRequest;
    path?: never;
    query?: never;
    url: '/api/gen-ai/stream';
};

export type StreamGenerateTextEndpointApiGenAiStreamPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StreamGenerateTextEndpointApiGenAiStreamPostError = StreamGenerateTextEndpointApiGenAiStreamPostErrors[keyof StreamGenerateTextEndpointApiGenAiStreamPostErrors];

export type StreamGenerateTextEndpointApiGenAiStreamPostResponses = {
    /**
     * Successfully initiated AI response stream (text/event-stream).
     */
    200: unknown;
};

export type GenerateTextEndpointApiGenAiTextPostData = {
    body: AiGenerateTextRequest;
    path?: never;
    query?: never;
    url: '/api/gen-ai/text';
};

export type GenerateTextEndpointApiGenAiTextPostErrors = {
    /**
     * Validation Error (invalid input)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error or AI Provider Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GenerateTextEndpointApiGenAiTextPostError = GenerateTextEndpointApiGenAiTextPostErrors[keyof GenerateTextEndpointApiGenAiTextPostErrors];

export type GenerateTextEndpointApiGenAiTextPostResponses = {
    /**
     * Successful Response
     */
    200: AiGenerateTextResponse;
};

export type GenerateTextEndpointApiGenAiTextPostResponse = GenerateTextEndpointApiGenAiTextPostResponses[keyof GenerateTextEndpointApiGenAiTextPostResponses];

export type GenerateStructuredEndpointApiGenAiStructuredPostData = {
    body: AiGenerateStructuredRequest;
    path?: never;
    query?: never;
    url: '/api/gen-ai/structured';
};

export type GenerateStructuredEndpointApiGenAiStructuredPostErrors = {
    /**
     * Bad Request: Invalid or unknown schemaKey provided.
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation Error (invalid input)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error or AI Provider Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GenerateStructuredEndpointApiGenAiStructuredPostError = GenerateStructuredEndpointApiGenAiStructuredPostErrors[keyof GenerateStructuredEndpointApiGenAiStructuredPostErrors];

export type GenerateStructuredEndpointApiGenAiStructuredPostResponses = {
    /**
     * Successful Response
     */
    200: AiGenerateStructuredResponse;
};

export type GenerateStructuredEndpointApiGenAiStructuredPostResponse = GenerateStructuredEndpointApiGenAiStructuredPostResponses[keyof GenerateStructuredEndpointApiGenAiStructuredPostResponses];

export type GetModelsEndpointApiModelsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The provider to filter models by
         */
        provider: string;
    };
    url: '/api/models';
};

export type GetModelsEndpointApiModelsGetErrors = {
    /**
     * Invalid provider or configuration error
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation error for query parameters
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type GetModelsEndpointApiModelsGetError = GetModelsEndpointApiModelsGetErrors[keyof GetModelsEndpointApiModelsGetErrors];

export type GetModelsEndpointApiModelsGetResponses = {
    /**
     * Successful Response
     */
    200: ModelsListResponse;
};

export type GetModelsEndpointApiModelsGetResponse = GetModelsEndpointApiModelsGetResponses[keyof GetModelsEndpointApiModelsGetResponses];

export type PostAiGenerateTextEndpointApiAiGenerateTextPostData = {
    body: AiGenerateTextRequest;
    path?: never;
    query?: never;
    url: '/api//ai/generate/text';
};

export type PostAiGenerateTextEndpointApiAiGenerateTextPostErrors = {
    /**
     * Bad Request (e.g., missing API key, invalid provider/model)
     */
    400: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Validation error (invalid request body)
     */
    422: AppSchemasCommonSchemasApiErrorResponse;
    /**
     * Internal Server Error or AI provider communication error
     */
    500: AppSchemasCommonSchemasApiErrorResponse;
};

export type PostAiGenerateTextEndpointApiAiGenerateTextPostError = PostAiGenerateTextEndpointApiAiGenerateTextPostErrors[keyof PostAiGenerateTextEndpointApiAiGenerateTextPostErrors];

export type PostAiGenerateTextEndpointApiAiGenerateTextPostResponses = {
    /**
     * Successful Response
     */
    200: AiGenerateTextResponse;
};

export type PostAiGenerateTextEndpointApiAiGenerateTextPostResponse = PostAiGenerateTextEndpointApiAiGenerateTextPostResponses[keyof PostAiGenerateTextEndpointApiAiGenerateTextPostResponses];

export type GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData = {
    body: GenerateAiFileChangeBody;
    path?: never;
    query: {
        project_id: number;
    };
    url: '/api/projects/{projectId}/ai-file-changes';
};

export type GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostErrors = {
    /**
     * Invalid request
     */
    400: AppSchemasAiFileChangeSchemasApiErrorResponse;
    /**
     * Project or File not found
     */
    404: AppSchemasAiFileChangeSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Error generating file change
     */
    500: AppSchemasAiFileChangeSchemasApiErrorResponse;
};

export type GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostError = GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostErrors[keyof GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostErrors];

export type GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponses = {
    /**
     * Successful Response
     */
    200: GenerateAiFileChangeResponse;
};

export type GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponse = GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponses[keyof GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponses];

export type GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetData = {
    body?: never;
    path: {
        projectId: number;
        aiFileChangeId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}';
};

export type GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetErrors = {
    /**
     * Invalid ID (format/type)
     */
    400: AppSchemasAiFileChangeSchemasApiErrorResponse;
    /**
     * Resource not found
     */
    404: AppSchemasAiFileChangeSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Error retrieving file change
     */
    500: AppSchemasAiFileChangeSchemasApiErrorResponse;
};

export type GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetError = GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetErrors[keyof GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetErrors];

export type GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetResponses = {
    /**
     * Successful Response
     */
    200: GetAiFileChangeDetailsResponse;
};

export type GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetResponse = GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetResponses[keyof GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetResponses];

export type ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData = {
    body?: never;
    path: {
        projectId: number;
        aiFileChangeId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}/confirm';
};

export type ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostErrors = {
    /**
     * Invalid ID or state
     */
    400: AppSchemasAiFileChangeSchemasApiErrorResponse;
    /**
     * Resource not found
     */
    404: AppSchemasAiFileChangeSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Error confirming file change
     */
    500: AppSchemasAiFileChangeSchemasApiErrorResponse;
};

export type ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostError = ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostErrors[keyof ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostErrors];

export type ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponses = {
    /**
     * Successful Response
     */
    200: ConfirmAiFileChangeResponse;
};

export type ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponse = ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponses[keyof ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponses];

export type RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData = {
    body?: never;
    path: {
        projectId: number;
        aiFileChangeId: number;
    };
    query?: never;
    url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}/reject';
};

export type RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostErrors = {
    /**
     * Invalid ID or state
     */
    400: AppSchemasAiFileChangeSchemasApiErrorResponse;
    /**
     * Resource not found
     */
    404: AppSchemasAiFileChangeSchemasApiErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Error rejecting file change
     */
    500: AppSchemasAiFileChangeSchemasApiErrorResponse;
};

export type RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostError = RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostErrors[keyof RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostErrors];

export type RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponses = {
    /**
     * Successful Response
     */
    200: ConfirmAiFileChangeResponse;
};

export type RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponse = RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponses[keyof RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};