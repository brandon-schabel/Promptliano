// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { HealthCheckApiHealthGetData, GetEnvInfoApiAdminEnvInfoGetData, GetEnvInfoApiAdminEnvInfoGetResponse, GetEnvInfoApiAdminEnvInfoGetError, GetSystemStatusApiAdminSystemStatusGetData, GetSystemStatusApiAdminSystemStatusGetResponse, GetSystemStatusApiAdminSystemStatusGetError, RunAgentCoderApiProjectsProjectIdAgentCoderPostData, RunAgentCoderApiProjectsProjectIdAgentCoderPostResponse, RunAgentCoderApiProjectsProjectIdAgentCoderPostError, GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetData, GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetResponse, GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetError, GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetData, GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetResponse, GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetError, ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetData, ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetResponse, ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetError, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponse, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostError, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteData, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponse, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteError, GetAllChatsEndpointApiChatsGetData, GetAllChatsEndpointApiChatsGetResponse, CreateChatEndpointApiChatsPostData, CreateChatEndpointApiChatsPostResponse, CreateChatEndpointApiChatsPostError, GetChatMessagesEndpointApiChatsChatIdMessagesGetData, GetChatMessagesEndpointApiChatsChatIdMessagesGetResponse, GetChatMessagesEndpointApiChatsChatIdMessagesGetError, PostAiChatSdkEndpointApiChatsApiAiChatPostData, PostAiChatSdkEndpointApiChatsApiAiChatPostError, ForkChatEndpointApiChatsChatIdForkPostData, ForkChatEndpointApiChatsChatIdForkPostResponse, ForkChatEndpointApiChatsChatIdForkPostError, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponse, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostError, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteData, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponse, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteError, DeleteChatEndpointApiChatsChatIdDeleteData, DeleteChatEndpointApiChatsChatIdDeleteResponse, DeleteChatEndpointApiChatsChatIdDeleteError, UpdateChatEndpointApiChatsChatIdPatchData, UpdateChatEndpointApiChatsChatIdPatchResponse, UpdateChatEndpointApiChatsChatIdPatchError, ListAllPromptsEndpointApiPromptsGetData, ListAllPromptsEndpointApiPromptsGetResponse, ListAllPromptsEndpointApiPromptsGetError, CreatePromptEndpointApiPromptsPostData, CreatePromptEndpointApiPromptsPostResponse, CreatePromptEndpointApiPromptsPostError, ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetData, ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetResponse, ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetError, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteData, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponse, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteError, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponse, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostError, DeletePromptEndpointApiPromptsPromptIdDeleteData, DeletePromptEndpointApiPromptsPromptIdDeleteResponse, DeletePromptEndpointApiPromptsPromptIdDeleteError, GetPromptByIdEndpointApiPromptsPromptIdGetData, GetPromptByIdEndpointApiPromptsPromptIdGetResponse, GetPromptByIdEndpointApiPromptsPromptIdGetError, UpdatePromptEndpointApiPromptsPromptIdPatchData, UpdatePromptEndpointApiPromptsPromptIdPatchResponse, UpdatePromptEndpointApiPromptsPromptIdPatchError, ListProjectsRouteProjectsGetData, ListProjectsRouteProjectsGetResponse, ListProjectsRouteProjectsGetError, CreateProjectRouteProjectsPostData, CreateProjectRouteProjectsPostResponse, CreateProjectRouteProjectsPostError, DeleteProjectRouteProjectsProjectIdDeleteData, DeleteProjectRouteProjectsProjectIdDeleteResponse, DeleteProjectRouteProjectsProjectIdDeleteError, GetProjectByIdRouteProjectsProjectIdGetData, GetProjectByIdRouteProjectsProjectIdGetResponse, GetProjectByIdRouteProjectsProjectIdGetError, UpdateProjectRouteProjectsProjectIdPatchData, UpdateProjectRouteProjectsProjectIdPatchResponse, UpdateProjectRouteProjectsProjectIdPatchError, SyncProjectFilesRouteProjectsProjectIdSyncPostData, SyncProjectFilesRouteProjectsProjectIdSyncPostResponse, SyncProjectFilesRouteProjectsProjectIdSyncPostError, GetProjectFilesRouteProjectsProjectIdFilesGetData, GetProjectFilesRouteProjectsProjectIdFilesGetResponse, GetProjectFilesRouteProjectsProjectIdFilesGetError, RefreshProjectRouteProjectsProjectIdRefreshPostData, RefreshProjectRouteProjectsProjectIdRefreshPostResponse, RefreshProjectRouteProjectsProjectIdRefreshPostError, GetProjectSummaryRouteProjectsProjectIdSummaryGetData, GetProjectSummaryRouteProjectsProjectIdSummaryGetResponse, GetProjectSummaryRouteProjectsProjectIdSummaryGetError, SuggestFilesRouteProjectsProjectIdSuggestFilesPostData, SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponse, SuggestFilesRouteProjectsProjectIdSuggestFilesPostError, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponse, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostError, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponse, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostError, OptimizeUserInputRoutePromptOptimizePostData, OptimizeUserInputRoutePromptOptimizePostResponse, OptimizeUserInputRoutePromptOptimizePostError, ListProviderKeysApiKeysGetData, ListProviderKeysApiKeysGetResponse, ListProviderKeysApiKeysGetError, CreateProviderKeyApiKeysPostData, CreateProviderKeyApiKeysPostResponse, CreateProviderKeyApiKeysPostError, DeleteProviderKeyApiKeysKeyIdDeleteData, DeleteProviderKeyApiKeysKeyIdDeleteResponse, DeleteProviderKeyApiKeysKeyIdDeleteError, GetProviderKeyByIdApiKeysKeyIdGetData, GetProviderKeyByIdApiKeysKeyIdGetResponse, GetProviderKeyByIdApiKeysKeyIdGetError, UpdateProviderKeyApiKeysKeyIdPatchData, UpdateProviderKeyApiKeysKeyIdPatchResponse, UpdateProviderKeyApiKeysKeyIdPatchError, CreateTicketRouteTicketsPostData, CreateTicketRouteTicketsPostResponse, CreateTicketRouteTicketsPostError, DeleteTicketRouteTicketsTicketIdDeleteData, DeleteTicketRouteTicketsTicketIdDeleteResponse, DeleteTicketRouteTicketsTicketIdDeleteError, GetTicketRouteTicketsTicketIdGetData, GetTicketRouteTicketsTicketIdGetResponse, GetTicketRouteTicketsTicketIdGetError, UpdateTicketRouteTicketsTicketIdPatchData, UpdateTicketRouteTicketsTicketIdPatchResponse, UpdateTicketRouteTicketsTicketIdPatchError, LinkFilesRouteTicketsTicketIdLinkFilesPostData, LinkFilesRouteTicketsTicketIdLinkFilesPostResponse, LinkFilesRouteTicketsTicketIdLinkFilesPostError, SuggestTasksRouteTicketsTicketIdSuggestTasksPostData, SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponse, SuggestTasksRouteTicketsTicketIdSuggestTasksPostError, SuggestFilesRouteTicketsTicketIdSuggestFilesPostData, SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponse, SuggestFilesRouteTicketsTicketIdSuggestFilesPostError, ListTicketsByProjectRouteProjectsProjectIdTicketsGetData, ListTicketsByProjectRouteProjectsProjectIdTicketsGetResponse, ListTicketsByProjectRouteProjectsProjectIdTicketsGetError, ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetData, ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetResponse, ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetError, ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetData, ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetResponse, ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetError, GetTasksRouteTicketsTicketIdTasksGetData, GetTasksRouteTicketsTicketIdTasksGetResponse, GetTasksRouteTicketsTicketIdTasksGetError, CreateTaskRouteTicketsTicketIdTasksPostData, CreateTaskRouteTicketsTicketIdTasksPostResponse, CreateTaskRouteTicketsTicketIdTasksPostError, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteData, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponse, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteError, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchData, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponse, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchError, ReorderTasksRouteTicketsTicketIdTasksReorderPatchData, ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponse, ReorderTasksRouteTicketsTicketIdTasksReorderPatchError, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponse, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostError, GetTasksForTicketsRouteTicketsBulkTasksGetData, GetTasksForTicketsRouteTicketsBulkTasksGetResponse, GetTasksForTicketsRouteTicketsBulkTasksGetError, StreamGenerateTextEndpointApiGenAiStreamPostData, StreamGenerateTextEndpointApiGenAiStreamPostError, GenerateTextEndpointApiGenAiTextPostData, GenerateTextEndpointApiGenAiTextPostResponse, GenerateTextEndpointApiGenAiTextPostError, GenerateStructuredEndpointApiGenAiStructuredPostData, GenerateStructuredEndpointApiGenAiStructuredPostResponse, GenerateStructuredEndpointApiGenAiStructuredPostError, GetModelsEndpointApiModelsGetData, GetModelsEndpointApiModelsGetResponse, GetModelsEndpointApiModelsGetError, PostAiGenerateTextEndpointApiAiGenerateTextPostData, PostAiGenerateTextEndpointApiAiGenerateTextPostResponse, PostAiGenerateTextEndpointApiAiGenerateTextPostError, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponse, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostError, GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetData, GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetResponse, GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetError, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponse, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostError, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponse, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health Check
 */
export const healthCheckApiHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckApiHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

/**
 * Get system environment information and server statistics
 */
export const getEnvInfoApiAdminEnvInfoGet = <ThrowOnError extends boolean = false>(options?: Options<GetEnvInfoApiAdminEnvInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEnvInfoApiAdminEnvInfoGetResponse, GetEnvInfoApiAdminEnvInfoGetError, ThrowOnError>({
        url: '/api/admin/env-info',
        ...options
    });
};

/**
 * Check system operational status
 */
export const getSystemStatusApiAdminSystemStatusGet = <ThrowOnError extends boolean = false>(options?: Options<GetSystemStatusApiAdminSystemStatusGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemStatusApiAdminSystemStatusGetResponse, GetSystemStatusApiAdminSystemStatusGetError, ThrowOnError>({
        url: '/api/admin/system-status',
        ...options
    });
};

/**
 * Run the Agent Coder on selected files with a user prompt
 */
export const runAgentCoderApiProjectsProjectIdAgentCoderPost = <ThrowOnError extends boolean = false>(options: Options<RunAgentCoderApiProjectsProjectIdAgentCoderPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunAgentCoderApiProjectsProjectIdAgentCoderPostResponse, RunAgentCoderApiProjectsProjectIdAgentCoderPostError, ThrowOnError>({
        url: '/api/projects/{project_id}/agent-coder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve the orchestrator execution logs (.jsonl) for a specific Agent Coder run
 */
export const getAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGet = <ThrowOnError extends boolean = false>(options: Options<GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetResponse, GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetError, ThrowOnError>({
        url: '/api/projects/{project_id}/agent-coder/runs/{agent_job_id}/logs',
        ...options
    });
};

/**
 * Retrieve the agent data log (.json) for a specific Agent Coder run
 */
export const getAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGet = <ThrowOnError extends boolean = false>(options: Options<GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetResponse, GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetError, ThrowOnError>({
        url: '/api/projects/{project_id}/agent-coder/runs/{agent_job_id}/data',
        ...options
    });
};

/**
 * List available Agent Coder run job IDs for a project
 */
export const listProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGet = <ThrowOnError extends boolean = false>(options: Options<ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetResponse, ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetError, ThrowOnError>({
        url: '/api/projects/{project_id}/agent-coder/runs',
        ...options
    });
};

/**
 * Confirm and write agent-generated file changes to the filesystem
 */
export const confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPost = <ThrowOnError extends boolean = false>(options: Options<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponse, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostError, ThrowOnError>({
        url: '/api/projects/{project_id}/agent-coder/runs/{agent_job_id}/confirm',
        ...options
    });
};

/**
 * Delete an Agent Coder run and its associated logs/data
 */
export const deleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponse, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteError, ThrowOnError>({
        url: '/api/projects/{project_id}/agent-coder/runs/{agent_job_id}',
        ...options
    });
};

/**
 * Get All Chats Endpoint
 */
export const getAllChatsEndpointApiChatsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllChatsEndpointApiChatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllChatsEndpointApiChatsGetResponse, unknown, ThrowOnError>({
        url: '/api/chats/',
        ...options
    });
};

/**
 * Create Chat Endpoint
 */
export const createChatEndpointApiChatsPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatEndpointApiChatsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChatEndpointApiChatsPostResponse, CreateChatEndpointApiChatsPostError, ThrowOnError>({
        url: '/api/chats/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get messages for a specific chat
 */
export const getChatMessagesEndpointApiChatsChatIdMessagesGet = <ThrowOnError extends boolean = false>(options: Options<GetChatMessagesEndpointApiChatsChatIdMessagesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatMessagesEndpointApiChatsChatIdMessagesGetResponse, GetChatMessagesEndpointApiChatsChatIdMessagesGetError, ThrowOnError>({
        url: '/api/chats/{chat_id}/messages',
        ...options
    });
};

/**
 * Chat completion (streaming, chat-associated)
 */
export const postAiChatSdkEndpointApiChatsApiAiChatPost = <ThrowOnError extends boolean = false>(options: Options<PostAiChatSdkEndpointApiChatsApiAiChatPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PostAiChatSdkEndpointApiChatsApiAiChatPostError, ThrowOnError>({
        url: '/api/chats/api/ai/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fork a chat session
 */
export const forkChatEndpointApiChatsChatIdForkPost = <ThrowOnError extends boolean = false>(options: Options<ForkChatEndpointApiChatsChatIdForkPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ForkChatEndpointApiChatsChatIdForkPostResponse, ForkChatEndpointApiChatsChatIdForkPostError, ThrowOnError>({
        url: '/api/chats/{chat_id}/fork',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fork a chat session from a specific message
 */
export const forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPost = <ThrowOnError extends boolean = false>(options: Options<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponse, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostError, ThrowOnError>({
        url: '/api/chats/{chat_id}/fork/{message_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a specific message
 */
export const deleteMessageEndpointApiChatsChatIdMessagesMessageIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponse, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteError, ThrowOnError>({
        url: '/api/chats/{chat_id}/messages/{message_id}',
        ...options
    });
};

/**
 * Delete a chat session and its messages
 */
export const deleteChatEndpointApiChatsChatIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteChatEndpointApiChatsChatIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteChatEndpointApiChatsChatIdDeleteResponse, DeleteChatEndpointApiChatsChatIdDeleteError, ThrowOnError>({
        url: '/api/chats/{chat_id}',
        ...options
    });
};

/**
 * Update chat properties (e.g., title)
 */
export const updateChatEndpointApiChatsChatIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateChatEndpointApiChatsChatIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateChatEndpointApiChatsChatIdPatchResponse, UpdateChatEndpointApiChatsChatIdPatchError, ThrowOnError>({
        url: '/api/chats/{chat_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all available prompts
 * Retrieves a list of all prompts available in the system.
 */
export const listAllPromptsEndpointApiPromptsGet = <ThrowOnError extends boolean = false>(options?: Options<ListAllPromptsEndpointApiPromptsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllPromptsEndpointApiPromptsGetResponse, ListAllPromptsEndpointApiPromptsGetError, ThrowOnError>({
        url: '/api/prompts',
        ...options
    });
};

/**
 * Create a new prompt
 * Creates a new prompt. Optionally links to a project if `projectId` is provided in the body.
 */
export const createPromptEndpointApiPromptsPost = <ThrowOnError extends boolean = false>(options: Options<CreatePromptEndpointApiPromptsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePromptEndpointApiPromptsPostResponse, CreatePromptEndpointApiPromptsPostError, ThrowOnError>({
        url: '/api/prompts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List prompts associated with a specific project
 * Lists all prompts that are associated with the given `projectId`.
 */
export const listProjectPromptsEndpointApiProjectsProjectIdPromptsGet = <ThrowOnError extends boolean = false>(options: Options<ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetResponse, ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetError, ThrowOnError>({
        url: '/api/projects/{projectId}/prompts',
        ...options
    });
};

/**
 * Disassociate a prompt from a project
 * Disassociates a prompt from a project.
 */
export const removePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponse, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteError, ThrowOnError>({
        url: '/api/projects/{projectId}/prompts/{promptId}',
        ...options
    });
};

/**
 * Associate a prompt with a project
 * Associates an existing prompt with an existing project.
 */
export const addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPost = <ThrowOnError extends boolean = false>(options: Options<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponse, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostError, ThrowOnError>({
        url: '/api/projects/{projectId}/prompts/{promptId}',
        ...options
    });
};

/**
 * Delete a prompt
 * Deletes a prompt by its ID.
 */
export const deletePromptEndpointApiPromptsPromptIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePromptEndpointApiPromptsPromptIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePromptEndpointApiPromptsPromptIdDeleteResponse, DeletePromptEndpointApiPromptsPromptIdDeleteError, ThrowOnError>({
        url: '/api/prompts/{promptId}',
        ...options
    });
};

/**
 * Get a specific prompt by its ID
 * Retrieves a specific prompt by its ID.
 */
export const getPromptByIdEndpointApiPromptsPromptIdGet = <ThrowOnError extends boolean = false>(options: Options<GetPromptByIdEndpointApiPromptsPromptIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPromptByIdEndpointApiPromptsPromptIdGetResponse, GetPromptByIdEndpointApiPromptsPromptIdGetError, ThrowOnError>({
        url: '/api/prompts/{promptId}',
        ...options
    });
};

/**
 * Update a prompt's details
 * Updates a prompt's name and/or content. At least one field must be provided.
 */
export const updatePromptEndpointApiPromptsPromptIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdatePromptEndpointApiPromptsPromptIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdatePromptEndpointApiPromptsPromptIdPatchResponse, UpdatePromptEndpointApiPromptsPromptIdPatchError, ThrowOnError>({
        url: '/api/prompts/{promptId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all projects
 */
export const listProjectsRouteProjectsGet = <ThrowOnError extends boolean = false>(options?: Options<ListProjectsRouteProjectsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProjectsRouteProjectsGetResponse, ListProjectsRouteProjectsGetError, ThrowOnError>({
        url: '/projects',
        ...options
    });
};

/**
 * Create a new project and sync its files
 */
export const createProjectRouteProjectsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProjectRouteProjectsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectRouteProjectsPostResponse, CreateProjectRouteProjectsPostError, ThrowOnError>({
        url: '/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a project and its associated data
 */
export const deleteProjectRouteProjectsProjectIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectRouteProjectsProjectIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectRouteProjectsProjectIdDeleteResponse, DeleteProjectRouteProjectsProjectIdDeleteError, ThrowOnError>({
        url: '/projects/{project_id}',
        ...options
    });
};

/**
 * Get a specific project by ID
 */
export const getProjectByIdRouteProjectsProjectIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectByIdRouteProjectsProjectIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectByIdRouteProjectsProjectIdGetResponse, GetProjectByIdRouteProjectsProjectIdGetError, ThrowOnError>({
        url: '/projects/{project_id}',
        ...options
    });
};

/**
 * Update a project's details
 */
export const updateProjectRouteProjectsProjectIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectRouteProjectsProjectIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateProjectRouteProjectsProjectIdPatchResponse, UpdateProjectRouteProjectsProjectIdPatchError, ThrowOnError>({
        url: '/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Manually trigger a full file sync for a project
 */
export const syncProjectFilesRouteProjectsProjectIdSyncPost = <ThrowOnError extends boolean = false>(options: Options<SyncProjectFilesRouteProjectsProjectIdSyncPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncProjectFilesRouteProjectsProjectIdSyncPostResponse, SyncProjectFilesRouteProjectsProjectIdSyncPostError, ThrowOnError>({
        url: '/projects/{project_id}/sync',
        ...options
    });
};

/**
 * Get the list of files associated with a project
 */
export const getProjectFilesRouteProjectsProjectIdFilesGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectFilesRouteProjectsProjectIdFilesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectFilesRouteProjectsProjectIdFilesGetResponse, GetProjectFilesRouteProjectsProjectIdFilesGetError, ThrowOnError>({
        url: '/projects/{project_id}/files',
        ...options
    });
};

/**
 * Refresh project files (sync) optionally limited to a folder
 */
export const refreshProjectRouteProjectsProjectIdRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshProjectRouteProjectsProjectIdRefreshPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshProjectRouteProjectsProjectIdRefreshPostResponse, RefreshProjectRouteProjectsProjectIdRefreshPostError, ThrowOnError>({
        url: '/projects/{project_id}/refresh',
        ...options
    });
};

/**
 * Get a combined summary of all files in the project
 */
export const getProjectSummaryRouteProjectsProjectIdSummaryGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectSummaryRouteProjectsProjectIdSummaryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectSummaryRouteProjectsProjectIdSummaryGetResponse, GetProjectSummaryRouteProjectsProjectIdSummaryGetError, ThrowOnError>({
        url: '/projects/{project_id}/summary',
        ...options
    });
};

/**
 * Suggest relevant files based on user input and project context
 */
export const suggestFilesRouteProjectsProjectIdSuggestFilesPost = <ThrowOnError extends boolean = false>(options: Options<SuggestFilesRouteProjectsProjectIdSuggestFilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponse, SuggestFilesRouteProjectsProjectIdSuggestFilesPostError, ThrowOnError>({
        url: '/projects/{project_id}/suggest-files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Summarize selected files in a project (or force re-summarize)
 */
export const summarizeProjectFilesRouteProjectsProjectIdSummarizePost = <ThrowOnError extends boolean = false>(options: Options<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponse, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostError, ThrowOnError>({
        url: '/projects/{project_id}/summarize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove summaries from selected files
 */
export const removeSummariesRouteProjectsProjectIdRemoveSummariesPost = <ThrowOnError extends boolean = false>(options: Options<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponse, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostError, ThrowOnError>({
        url: '/projects/{project_id}/remove-summaries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Optimize a user-provided prompt using an AI model
 */
export const optimizeUserInputRoutePromptOptimizePost = <ThrowOnError extends boolean = false>(options: Options<OptimizeUserInputRoutePromptOptimizePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OptimizeUserInputRoutePromptOptimizePostResponse, OptimizeUserInputRoutePromptOptimizePostError, ThrowOnError>({
        url: '/prompt/optimize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all configured provider keys (excluding secrets)
 * Retrieves a list of all configured provider keys. The secret API keys themselves are excluded from this list for security.
 */
export const listProviderKeysApiKeysGet = <ThrowOnError extends boolean = false>(options?: Options<ListProviderKeysApiKeysGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProviderKeysApiKeysGetResponse, ListProviderKeysApiKeysGetError, ThrowOnError>({
        url: '/api/keys/',
        ...options
    });
};

/**
 * Add a new API key for an AI provider
 * Creates a new provider key. The response includes the created key, including its secret.
 */
export const createProviderKeyApiKeysPost = <ThrowOnError extends boolean = false>(options: Options<CreateProviderKeyApiKeysPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProviderKeyApiKeysPostResponse, CreateProviderKeyApiKeysPostError, ThrowOnError>({
        url: '/api/keys/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a provider key
 * Deletes a provider key by its ID.
 */
export const deleteProviderKeyApiKeysKeyIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProviderKeyApiKeysKeyIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProviderKeyApiKeysKeyIdDeleteResponse, DeleteProviderKeyApiKeysKeyIdDeleteError, ThrowOnError>({
        url: '/api/keys/{keyId}',
        ...options
    });
};

/**
 * Get a specific provider key by ID (including secret)
 * Retrieves details for a specific provider key, including its secret API key.
 */
export const getProviderKeyByIdApiKeysKeyIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProviderKeyByIdApiKeysKeyIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProviderKeyByIdApiKeysKeyIdGetResponse, GetProviderKeyByIdApiKeysKeyIdGetError, ThrowOnError>({
        url: '/api/keys/{keyId}',
        ...options
    });
};

/**
 * Update a provider key's details
 * Updates the provider name and/or the secret key for an existing provider key. At least one field (provider or key) must be provided.
 */
export const updateProviderKeyApiKeysKeyIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateProviderKeyApiKeysKeyIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateProviderKeyApiKeysKeyIdPatchResponse, UpdateProviderKeyApiKeysKeyIdPatchError, ThrowOnError>({
        url: '/api/keys/{keyId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a new ticket
 */
export const createTicketRouteTicketsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTicketRouteTicketsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTicketRouteTicketsPostResponse, CreateTicketRouteTicketsPostError, ThrowOnError>({
        url: '/tickets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a ticket
 */
export const deleteTicketRouteTicketsTicketIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTicketRouteTicketsTicketIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTicketRouteTicketsTicketIdDeleteResponse, DeleteTicketRouteTicketsTicketIdDeleteError, ThrowOnError>({
        url: '/tickets/{ticketId}',
        ...options
    });
};

/**
 * Get a ticket by ID
 */
export const getTicketRouteTicketsTicketIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTicketRouteTicketsTicketIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketRouteTicketsTicketIdGetResponse, GetTicketRouteTicketsTicketIdGetError, ThrowOnError>({
        url: '/tickets/{ticketId}',
        ...options
    });
};

/**
 * Update a ticket
 */
export const updateTicketRouteTicketsTicketIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateTicketRouteTicketsTicketIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTicketRouteTicketsTicketIdPatchResponse, UpdateTicketRouteTicketsTicketIdPatchError, ThrowOnError>({
        url: '/tickets/{ticketId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Link files to a ticket
 */
export const linkFilesRouteTicketsTicketIdLinkFilesPost = <ThrowOnError extends boolean = false>(options: Options<LinkFilesRouteTicketsTicketIdLinkFilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LinkFilesRouteTicketsTicketIdLinkFilesPostResponse, LinkFilesRouteTicketsTicketIdLinkFilesPostError, ThrowOnError>({
        url: '/tickets/{ticketId}/link-files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get AI suggestions for tasks
 */
export const suggestTasksRouteTicketsTicketIdSuggestTasksPost = <ThrowOnError extends boolean = false>(options: Options<SuggestTasksRouteTicketsTicketIdSuggestTasksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponse, SuggestTasksRouteTicketsTicketIdSuggestTasksPostError, ThrowOnError>({
        url: '/tickets/{ticketId}/suggest-tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get AI suggestions for relevant files
 */
export const suggestFilesRouteTicketsTicketIdSuggestFilesPost = <ThrowOnError extends boolean = false>(options: Options<SuggestFilesRouteTicketsTicketIdSuggestFilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponse, SuggestFilesRouteTicketsTicketIdSuggestFilesPostError, ThrowOnError>({
        url: '/tickets/{ticketId}/suggest-files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all tickets for a project
 */
export const listTicketsByProjectRouteProjectsProjectIdTicketsGet = <ThrowOnError extends boolean = false>(options: Options<ListTicketsByProjectRouteProjectsProjectIdTicketsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketsByProjectRouteProjectsProjectIdTicketsGetResponse, ListTicketsByProjectRouteProjectsProjectIdTicketsGetError, ThrowOnError>({
        url: '/projects/{projectId}/tickets',
        ...options
    });
};

/**
 * List tickets with task counts
 */
export const listTicketsWithCountRouteProjectsProjectIdTicketsWithCountGet = <ThrowOnError extends boolean = false>(options: Options<ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetResponse, ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetError, ThrowOnError>({
        url: '/projects/{projectId}/tickets-with-count',
        ...options
    });
};

/**
 * List tickets with their tasks
 */
export const listTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGet = <ThrowOnError extends boolean = false>(options: Options<ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetResponse, ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetError, ThrowOnError>({
        url: '/projects/{projectId}/tickets-with-tasks',
        ...options
    });
};

/**
 * Get all tasks for a ticket
 */
export const getTasksRouteTicketsTicketIdTasksGet = <ThrowOnError extends boolean = false>(options: Options<GetTasksRouteTicketsTicketIdTasksGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTasksRouteTicketsTicketIdTasksGetResponse, GetTasksRouteTicketsTicketIdTasksGetError, ThrowOnError>({
        url: '/tickets/{ticketId}/tasks',
        ...options
    });
};

/**
 * Create a new task for a ticket
 */
export const createTaskRouteTicketsTicketIdTasksPost = <ThrowOnError extends boolean = false>(options: Options<CreateTaskRouteTicketsTicketIdTasksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTaskRouteTicketsTicketIdTasksPostResponse, CreateTaskRouteTicketsTicketIdTasksPostError, ThrowOnError>({
        url: '/tickets/{ticketId}/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a task
 */
export const deleteTaskRouteTicketsTicketIdTasksTaskIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponse, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteError, ThrowOnError>({
        url: '/tickets/{ticketId}/tasks/{taskId}',
        ...options
    });
};

/**
 * Update a task
 */
export const updateTaskRouteTicketsTicketIdTasksTaskIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponse, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchError, ThrowOnError>({
        url: '/tickets/{ticketId}/tasks/{taskId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reorder tasks within a ticket
 */
export const reorderTasksRouteTicketsTicketIdTasksReorderPatch = <ThrowOnError extends boolean = false>(options: Options<ReorderTasksRouteTicketsTicketIdTasksReorderPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponse, ReorderTasksRouteTicketsTicketIdTasksReorderPatchError, ThrowOnError>({
        url: '/tickets/{ticketId}/tasks/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Auto-generate tasks from ticket overview
 */
export const autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPost = <ThrowOnError extends boolean = false>(options: Options<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponse, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostError, ThrowOnError>({
        url: '/tickets/{ticketId}/auto-generate-tasks',
        ...options
    });
};

/**
 * Get tasks for multiple tickets
 */
export const getTasksForTicketsRouteTicketsBulkTasksGet = <ThrowOnError extends boolean = false>(options: Options<GetTasksForTicketsRouteTicketsBulkTasksGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTasksForTicketsRouteTicketsBulkTasksGetResponse, GetTasksForTicketsRouteTicketsBulkTasksGetError, ThrowOnError>({
        url: '/tickets/bulk-tasks',
        ...options
    });
};

/**
 * Generate text using a specified model and prompt (streaming)
 */
export const streamGenerateTextEndpointApiGenAiStreamPost = <ThrowOnError extends boolean = false>(options: Options<StreamGenerateTextEndpointApiGenAiStreamPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, StreamGenerateTextEndpointApiGenAiStreamPostError, ThrowOnError>({
        url: '/api/gen-ai/stream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate text using a specified model and prompt
 */
export const generateTextEndpointApiGenAiTextPost = <ThrowOnError extends boolean = false>(options: Options<GenerateTextEndpointApiGenAiTextPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateTextEndpointApiGenAiTextPostResponse, GenerateTextEndpointApiGenAiTextPostError, ThrowOnError>({
        url: '/api/gen-ai/text',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate structured data based on a predefined schema key and user input
 */
export const generateStructuredEndpointApiGenAiStructuredPost = <ThrowOnError extends boolean = false>(options: Options<GenerateStructuredEndpointApiGenAiStructuredPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateStructuredEndpointApiGenAiStructuredPostResponse, GenerateStructuredEndpointApiGenAiStructuredPostError, ThrowOnError>({
        url: '/api/gen-ai/structured',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List available AI models for a provider
 */
export const getModelsEndpointApiModelsGet = <ThrowOnError extends boolean = false>(options: Options<GetModelsEndpointApiModelsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetModelsEndpointApiModelsGetResponse, GetModelsEndpointApiModelsGetError, ThrowOnError>({
        url: '/api/models',
        ...options
    });
};

/**
 * Generate text (one-off, non-streaming) - Alternative Path
 * Generates text based on a prompt. This path includes a double slash, preserved from the original TypeScript version.
 */
export const postAiGenerateTextEndpointApiAiGenerateTextPost = <ThrowOnError extends boolean = false>(options: Options<PostAiGenerateTextEndpointApiAiGenerateTextPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAiGenerateTextEndpointApiAiGenerateTextPostResponse, PostAiGenerateTextEndpointApiAiGenerateTextPostError, ThrowOnError>({
        url: '/api//ai/generate/text',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate AI-assisted file changes for a project file
 */
export const generateAiFileChangeApiProjectsProjectIdAiFileChangesPost = <ThrowOnError extends boolean = false>(options: Options<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponse, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostError, ThrowOnError>({
        url: '/api/projects/{projectId}/ai-file-changes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve details for a specific AI file change
 */
export const getAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGet = <ThrowOnError extends boolean = false>(options: Options<GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetResponse, GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetError, ThrowOnError>({
        url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}',
        ...options
    });
};

/**
 * Confirm and apply an AI-generated file change
 */
export const confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPost = <ThrowOnError extends boolean = false>(options: Options<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponse, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostError, ThrowOnError>({
        url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}/confirm',
        ...options
    });
};

/**
 * Reject an AI-generated file change
 */
export const rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPost = <ThrowOnError extends boolean = false>(options: Options<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponse, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostError, ThrowOnError>({
        url: '/api/projects/{projectId}/ai-file-changes/{aiFileChangeId}/reject',
        ...options
    });
};