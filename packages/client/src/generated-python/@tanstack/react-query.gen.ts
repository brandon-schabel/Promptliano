// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getApiChats, postApiChats, getApiChatsByChatIdMessages, postApiAiChat, postApiChatsByChatIdFork, postApiChatsByChatIdForkByMessageId, deleteApiChatsByChatIdMessagesByMessageId, deleteApiChatsByChatId, patchApiChatsByChatId, postApiTickets, deleteApiTicketsByTicketId, getApiTicketsByTicketId, patchApiTicketsByTicketId, postApiTicketsByTicketIdLinkFiles, postApiTicketsByTicketIdSuggestFiles, postApiTicketsByTicketIdSuggestTasks, getApiProjectsByProjectIdTickets, getApiProjectsByProjectIdTicketsWithCount, getApiProjectsByProjectIdTicketsWithTasks, getApiTicketsByTicketIdTasks, postApiTicketsByTicketIdTasks, deleteApiTicketsByTicketIdTasksByTaskId, patchApiTicketsByTicketIdTasksByTaskId, patchApiTicketsByTicketIdTasksReorder, postApiTicketsByTicketIdAutoGenerateTasks, getApiTicketsBulkTasks, getApiProjects, postApiProjects, deleteApiProjectsByProjectId, getApiProjectsByProjectId, patchApiProjectsByProjectId, postApiProjectsByProjectIdSync, getApiProjectsByProjectIdFiles, postApiProjectsByProjectIdRefresh, getApiProjectsByProjectIdSummary, postApiProjectsByProjectIdSuggestFiles, postApiProjectsByProjectIdSummarize, postApiProjectsByProjectIdRemoveSummaries, postApiPromptOptimize, getApiKeys, postApiKeys, deleteApiKeysByKeyId, getApiKeysByKeyId, patchApiKeysByKeyId, getApiAdminEnvInfo, getApiAdminSystemStatus, postApiProjectsByProjectIdAiFileChanges, getApiProjectsByProjectIdAiFileChangesByAiFileChangeId, postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirm, postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdReject, getApiPrompts, postApiPrompts, getApiProjectsByProjectIdPrompts, deleteApiProjectsByProjectIdPromptsByPromptId, postApiProjectsByProjectIdPromptsByPromptId, deleteApiPromptsByPromptId, getApiPromptsByPromptId, patchApiPromptsByPromptId, postApiGenAiStream, postApiGenAiText, postApiGenAiStructured, getApiModels, postApiAiGenerateText, postApiProjectsByProjectIdAgentCoder, getApiAgentCoderProjectByProjectIdRuns, getApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogs, getApiAgentCoderProjectByProjectIdRunsByAgentJobIdData, postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirm, deleteApiAgentCoderRunsByAgentJobId } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetApiChatsData, PostApiChatsData, PostApiChatsError, PostApiChatsResponse, GetApiChatsByChatIdMessagesData, PostApiAiChatData, PostApiAiChatError, PostApiAiChatResponse, PostApiChatsByChatIdForkData, PostApiChatsByChatIdForkError, PostApiChatsByChatIdForkResponse, PostApiChatsByChatIdForkByMessageIdData, PostApiChatsByChatIdForkByMessageIdError, PostApiChatsByChatIdForkByMessageIdResponse, DeleteApiChatsByChatIdMessagesByMessageIdData, DeleteApiChatsByChatIdMessagesByMessageIdError, DeleteApiChatsByChatIdMessagesByMessageIdResponse, DeleteApiChatsByChatIdData, DeleteApiChatsByChatIdError, DeleteApiChatsByChatIdResponse, PatchApiChatsByChatIdData, PatchApiChatsByChatIdError, PatchApiChatsByChatIdResponse, PostApiTicketsData, PostApiTicketsError, PostApiTicketsResponse, DeleteApiTicketsByTicketIdData, DeleteApiTicketsByTicketIdError, DeleteApiTicketsByTicketIdResponse, GetApiTicketsByTicketIdData, PatchApiTicketsByTicketIdData, PatchApiTicketsByTicketIdError, PatchApiTicketsByTicketIdResponse, PostApiTicketsByTicketIdLinkFilesData, PostApiTicketsByTicketIdLinkFilesError, PostApiTicketsByTicketIdLinkFilesResponse, PostApiTicketsByTicketIdSuggestFilesData, PostApiTicketsByTicketIdSuggestFilesError, PostApiTicketsByTicketIdSuggestFilesResponse, PostApiTicketsByTicketIdSuggestTasksData, PostApiTicketsByTicketIdSuggestTasksError, PostApiTicketsByTicketIdSuggestTasksResponse, GetApiProjectsByProjectIdTicketsData, GetApiProjectsByProjectIdTicketsWithCountData, GetApiProjectsByProjectIdTicketsWithTasksData, GetApiTicketsByTicketIdTasksData, PostApiTicketsByTicketIdTasksData, PostApiTicketsByTicketIdTasksError, PostApiTicketsByTicketIdTasksResponse, DeleteApiTicketsByTicketIdTasksByTaskIdData, DeleteApiTicketsByTicketIdTasksByTaskIdError, DeleteApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksByTaskIdData, PatchApiTicketsByTicketIdTasksByTaskIdError, PatchApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksReorderData, PatchApiTicketsByTicketIdTasksReorderError, PatchApiTicketsByTicketIdTasksReorderResponse, PostApiTicketsByTicketIdAutoGenerateTasksData, PostApiTicketsByTicketIdAutoGenerateTasksError, PostApiTicketsByTicketIdAutoGenerateTasksResponse, GetApiTicketsBulkTasksData, GetApiProjectsData, PostApiProjectsData, PostApiProjectsError, PostApiProjectsResponse, DeleteApiProjectsByProjectIdData, DeleteApiProjectsByProjectIdError, DeleteApiProjectsByProjectIdResponse, GetApiProjectsByProjectIdData, PatchApiProjectsByProjectIdData, PatchApiProjectsByProjectIdError, PatchApiProjectsByProjectIdResponse, PostApiProjectsByProjectIdSyncData, PostApiProjectsByProjectIdSyncError, PostApiProjectsByProjectIdSyncResponse, GetApiProjectsByProjectIdFilesData, PostApiProjectsByProjectIdRefreshData, PostApiProjectsByProjectIdRefreshError, PostApiProjectsByProjectIdRefreshResponse, GetApiProjectsByProjectIdSummaryData, PostApiProjectsByProjectIdSuggestFilesData, PostApiProjectsByProjectIdSuggestFilesError, PostApiProjectsByProjectIdSuggestFilesResponse, PostApiProjectsByProjectIdSummarizeData, PostApiProjectsByProjectIdSummarizeError, PostApiProjectsByProjectIdSummarizeResponse, PostApiProjectsByProjectIdRemoveSummariesData, PostApiProjectsByProjectIdRemoveSummariesError, PostApiProjectsByProjectIdRemoveSummariesResponse, PostApiPromptOptimizeData, PostApiPromptOptimizeError, PostApiPromptOptimizeResponse, GetApiKeysData, PostApiKeysData, PostApiKeysError, PostApiKeysResponse, DeleteApiKeysByKeyIdData, DeleteApiKeysByKeyIdError, DeleteApiKeysByKeyIdResponse, GetApiKeysByKeyIdData, PatchApiKeysByKeyIdData, PatchApiKeysByKeyIdError, PatchApiKeysByKeyIdResponse, GetApiAdminEnvInfoData, GetApiAdminSystemStatusData, PostApiProjectsByProjectIdAiFileChangesData, PostApiProjectsByProjectIdAiFileChangesError, PostApiProjectsByProjectIdAiFileChangesResponse, GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdData, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmError, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponse, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectError, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponse, GetApiPromptsData, PostApiPromptsData, PostApiPromptsError, PostApiPromptsResponse, GetApiProjectsByProjectIdPromptsData, DeleteApiProjectsByProjectIdPromptsByPromptIdData, DeleteApiProjectsByProjectIdPromptsByPromptIdError, DeleteApiProjectsByProjectIdPromptsByPromptIdResponse, PostApiProjectsByProjectIdPromptsByPromptIdData, PostApiProjectsByProjectIdPromptsByPromptIdError, PostApiProjectsByProjectIdPromptsByPromptIdResponse, DeleteApiPromptsByPromptIdData, DeleteApiPromptsByPromptIdError, DeleteApiPromptsByPromptIdResponse, GetApiPromptsByPromptIdData, PatchApiPromptsByPromptIdData, PatchApiPromptsByPromptIdError, PatchApiPromptsByPromptIdResponse, PostApiGenAiStreamData, PostApiGenAiStreamResponse, PostApiGenAiTextData, PostApiGenAiTextError, PostApiGenAiTextResponse, PostApiGenAiStructuredData, PostApiGenAiStructuredError, PostApiGenAiStructuredResponse, GetApiModelsData, PostApiAiGenerateTextData, PostApiAiGenerateTextError, PostApiAiGenerateTextResponse, PostApiProjectsByProjectIdAgentCoderData, PostApiProjectsByProjectIdAgentCoderError, PostApiProjectsByProjectIdAgentCoderResponse, GetApiAgentCoderProjectByProjectIdRunsData, GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsData, GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataData, PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData, PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmError, PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponse, DeleteApiAgentCoderRunsByAgentJobIdData, DeleteApiAgentCoderRunsByAgentJobIdError, DeleteApiAgentCoderRunsByAgentJobIdResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getApiChatsQueryKey = (options?: Options<GetApiChatsData>) => createQueryKey('getApiChats', options);

export const getApiChatsOptions = (options?: Options<GetApiChatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiChats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiChatsQueryKey(options)
    });
};

export const postApiChatsQueryKey = (options: Options<PostApiChatsData>) => createQueryKey('postApiChats', options);

export const postApiChatsOptions = (options: Options<PostApiChatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiChats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiChatsQueryKey(options)
    });
};

export const postApiChatsMutation = (options?: Partial<Options<PostApiChatsData>>): UseMutationOptions<PostApiChatsResponse, PostApiChatsError, Options<PostApiChatsData>> => {
    const mutationOptions: UseMutationOptions<PostApiChatsResponse, PostApiChatsError, Options<PostApiChatsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiChats({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiChatsByChatIdMessagesQueryKey = (options: Options<GetApiChatsByChatIdMessagesData>) => createQueryKey('getApiChatsByChatIdMessages', options);

export const getApiChatsByChatIdMessagesOptions = (options: Options<GetApiChatsByChatIdMessagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiChatsByChatIdMessages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiChatsByChatIdMessagesQueryKey(options)
    });
};

export const postApiAiChatQueryKey = (options: Options<PostApiAiChatData>) => createQueryKey('postApiAiChat', options);

export const postApiAiChatOptions = (options: Options<PostApiAiChatData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAiChat({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAiChatQueryKey(options)
    });
};

export const postApiAiChatMutation = (options?: Partial<Options<PostApiAiChatData>>): UseMutationOptions<PostApiAiChatResponse, PostApiAiChatError, Options<PostApiAiChatData>> => {
    const mutationOptions: UseMutationOptions<PostApiAiChatResponse, PostApiAiChatError, Options<PostApiAiChatData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAiChat({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiChatsByChatIdForkQueryKey = (options: Options<PostApiChatsByChatIdForkData>) => createQueryKey('postApiChatsByChatIdFork', options);

export const postApiChatsByChatIdForkOptions = (options: Options<PostApiChatsByChatIdForkData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiChatsByChatIdFork({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiChatsByChatIdForkQueryKey(options)
    });
};

export const postApiChatsByChatIdForkMutation = (options?: Partial<Options<PostApiChatsByChatIdForkData>>): UseMutationOptions<PostApiChatsByChatIdForkResponse, PostApiChatsByChatIdForkError, Options<PostApiChatsByChatIdForkData>> => {
    const mutationOptions: UseMutationOptions<PostApiChatsByChatIdForkResponse, PostApiChatsByChatIdForkError, Options<PostApiChatsByChatIdForkData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiChatsByChatIdFork({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiChatsByChatIdForkByMessageIdQueryKey = (options: Options<PostApiChatsByChatIdForkByMessageIdData>) => createQueryKey('postApiChatsByChatIdForkByMessageId', options);

export const postApiChatsByChatIdForkByMessageIdOptions = (options: Options<PostApiChatsByChatIdForkByMessageIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiChatsByChatIdForkByMessageId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiChatsByChatIdForkByMessageIdQueryKey(options)
    });
};

export const postApiChatsByChatIdForkByMessageIdMutation = (options?: Partial<Options<PostApiChatsByChatIdForkByMessageIdData>>): UseMutationOptions<PostApiChatsByChatIdForkByMessageIdResponse, PostApiChatsByChatIdForkByMessageIdError, Options<PostApiChatsByChatIdForkByMessageIdData>> => {
    const mutationOptions: UseMutationOptions<PostApiChatsByChatIdForkByMessageIdResponse, PostApiChatsByChatIdForkByMessageIdError, Options<PostApiChatsByChatIdForkByMessageIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiChatsByChatIdForkByMessageId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiChatsByChatIdMessagesByMessageIdMutation = (options?: Partial<Options<DeleteApiChatsByChatIdMessagesByMessageIdData>>): UseMutationOptions<DeleteApiChatsByChatIdMessagesByMessageIdResponse, DeleteApiChatsByChatIdMessagesByMessageIdError, Options<DeleteApiChatsByChatIdMessagesByMessageIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiChatsByChatIdMessagesByMessageIdResponse, DeleteApiChatsByChatIdMessagesByMessageIdError, Options<DeleteApiChatsByChatIdMessagesByMessageIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiChatsByChatIdMessagesByMessageId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiChatsByChatIdMutation = (options?: Partial<Options<DeleteApiChatsByChatIdData>>): UseMutationOptions<DeleteApiChatsByChatIdResponse, DeleteApiChatsByChatIdError, Options<DeleteApiChatsByChatIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiChatsByChatIdResponse, DeleteApiChatsByChatIdError, Options<DeleteApiChatsByChatIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiChatsByChatId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchApiChatsByChatIdMutation = (options?: Partial<Options<PatchApiChatsByChatIdData>>): UseMutationOptions<PatchApiChatsByChatIdResponse, PatchApiChatsByChatIdError, Options<PatchApiChatsByChatIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiChatsByChatIdResponse, PatchApiChatsByChatIdError, Options<PatchApiChatsByChatIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiChatsByChatId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsQueryKey = (options?: Options<PostApiTicketsData>) => createQueryKey('postApiTickets', options);

export const postApiTicketsOptions = (options?: Options<PostApiTicketsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTickets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsQueryKey(options)
    });
};

export const postApiTicketsMutation = (options?: Partial<Options<PostApiTicketsData>>): UseMutationOptions<PostApiTicketsResponse, PostApiTicketsError, Options<PostApiTicketsData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsResponse, PostApiTicketsError, Options<PostApiTicketsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTickets({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiTicketsByTicketIdMutation = (options?: Partial<Options<DeleteApiTicketsByTicketIdData>>): UseMutationOptions<DeleteApiTicketsByTicketIdResponse, DeleteApiTicketsByTicketIdError, Options<DeleteApiTicketsByTicketIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiTicketsByTicketIdResponse, DeleteApiTicketsByTicketIdError, Options<DeleteApiTicketsByTicketIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiTicketsByTicketId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiTicketsByTicketIdQueryKey = (options: Options<GetApiTicketsByTicketIdData>) => createQueryKey('getApiTicketsByTicketId', options);

export const getApiTicketsByTicketIdOptions = (options: Options<GetApiTicketsByTicketIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTicketsByTicketId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTicketsByTicketIdQueryKey(options)
    });
};

export const patchApiTicketsByTicketIdMutation = (options?: Partial<Options<PatchApiTicketsByTicketIdData>>): UseMutationOptions<PatchApiTicketsByTicketIdResponse, PatchApiTicketsByTicketIdError, Options<PatchApiTicketsByTicketIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiTicketsByTicketIdResponse, PatchApiTicketsByTicketIdError, Options<PatchApiTicketsByTicketIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiTicketsByTicketId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsByTicketIdLinkFilesQueryKey = (options: Options<PostApiTicketsByTicketIdLinkFilesData>) => createQueryKey('postApiTicketsByTicketIdLinkFiles', options);

export const postApiTicketsByTicketIdLinkFilesOptions = (options: Options<PostApiTicketsByTicketIdLinkFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdLinkFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdLinkFilesQueryKey(options)
    });
};

export const postApiTicketsByTicketIdLinkFilesMutation = (options?: Partial<Options<PostApiTicketsByTicketIdLinkFilesData>>): UseMutationOptions<PostApiTicketsByTicketIdLinkFilesResponse, PostApiTicketsByTicketIdLinkFilesError, Options<PostApiTicketsByTicketIdLinkFilesData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdLinkFilesResponse, PostApiTicketsByTicketIdLinkFilesError, Options<PostApiTicketsByTicketIdLinkFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdLinkFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsByTicketIdSuggestFilesQueryKey = (options: Options<PostApiTicketsByTicketIdSuggestFilesData>) => createQueryKey('postApiTicketsByTicketIdSuggestFiles', options);

export const postApiTicketsByTicketIdSuggestFilesOptions = (options: Options<PostApiTicketsByTicketIdSuggestFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdSuggestFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdSuggestFilesQueryKey(options)
    });
};

export const postApiTicketsByTicketIdSuggestFilesMutation = (options?: Partial<Options<PostApiTicketsByTicketIdSuggestFilesData>>): UseMutationOptions<PostApiTicketsByTicketIdSuggestFilesResponse, PostApiTicketsByTicketIdSuggestFilesError, Options<PostApiTicketsByTicketIdSuggestFilesData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdSuggestFilesResponse, PostApiTicketsByTicketIdSuggestFilesError, Options<PostApiTicketsByTicketIdSuggestFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdSuggestFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsByTicketIdSuggestTasksQueryKey = (options: Options<PostApiTicketsByTicketIdSuggestTasksData>) => createQueryKey('postApiTicketsByTicketIdSuggestTasks', options);

export const postApiTicketsByTicketIdSuggestTasksOptions = (options: Options<PostApiTicketsByTicketIdSuggestTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdSuggestTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdSuggestTasksQueryKey(options)
    });
};

export const postApiTicketsByTicketIdSuggestTasksMutation = (options?: Partial<Options<PostApiTicketsByTicketIdSuggestTasksData>>): UseMutationOptions<PostApiTicketsByTicketIdSuggestTasksResponse, PostApiTicketsByTicketIdSuggestTasksError, Options<PostApiTicketsByTicketIdSuggestTasksData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdSuggestTasksResponse, PostApiTicketsByTicketIdSuggestTasksError, Options<PostApiTicketsByTicketIdSuggestTasksData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdSuggestTasks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdTicketsQueryKey = (options: Options<GetApiProjectsByProjectIdTicketsData>) => createQueryKey('getApiProjectsByProjectIdTickets', options);

export const getApiProjectsByProjectIdTicketsOptions = (options: Options<GetApiProjectsByProjectIdTicketsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdTickets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdTicketsQueryKey(options)
    });
};

export const getApiProjectsByProjectIdTicketsWithCountQueryKey = (options: Options<GetApiProjectsByProjectIdTicketsWithCountData>) => createQueryKey('getApiProjectsByProjectIdTicketsWithCount', options);

export const getApiProjectsByProjectIdTicketsWithCountOptions = (options: Options<GetApiProjectsByProjectIdTicketsWithCountData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdTicketsWithCount({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdTicketsWithCountQueryKey(options)
    });
};

export const getApiProjectsByProjectIdTicketsWithTasksQueryKey = (options: Options<GetApiProjectsByProjectIdTicketsWithTasksData>) => createQueryKey('getApiProjectsByProjectIdTicketsWithTasks', options);

export const getApiProjectsByProjectIdTicketsWithTasksOptions = (options: Options<GetApiProjectsByProjectIdTicketsWithTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdTicketsWithTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdTicketsWithTasksQueryKey(options)
    });
};

export const getApiTicketsByTicketIdTasksQueryKey = (options: Options<GetApiTicketsByTicketIdTasksData>) => createQueryKey('getApiTicketsByTicketIdTasks', options);

export const getApiTicketsByTicketIdTasksOptions = (options: Options<GetApiTicketsByTicketIdTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTicketsByTicketIdTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTicketsByTicketIdTasksQueryKey(options)
    });
};

export const postApiTicketsByTicketIdTasksQueryKey = (options: Options<PostApiTicketsByTicketIdTasksData>) => createQueryKey('postApiTicketsByTicketIdTasks', options);

export const postApiTicketsByTicketIdTasksOptions = (options: Options<PostApiTicketsByTicketIdTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdTasksQueryKey(options)
    });
};

export const postApiTicketsByTicketIdTasksMutation = (options?: Partial<Options<PostApiTicketsByTicketIdTasksData>>): UseMutationOptions<PostApiTicketsByTicketIdTasksResponse, PostApiTicketsByTicketIdTasksError, Options<PostApiTicketsByTicketIdTasksData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdTasksResponse, PostApiTicketsByTicketIdTasksError, Options<PostApiTicketsByTicketIdTasksData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdTasks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiTicketsByTicketIdTasksByTaskIdMutation = (options?: Partial<Options<DeleteApiTicketsByTicketIdTasksByTaskIdData>>): UseMutationOptions<DeleteApiTicketsByTicketIdTasksByTaskIdResponse, DeleteApiTicketsByTicketIdTasksByTaskIdError, Options<DeleteApiTicketsByTicketIdTasksByTaskIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiTicketsByTicketIdTasksByTaskIdResponse, DeleteApiTicketsByTicketIdTasksByTaskIdError, Options<DeleteApiTicketsByTicketIdTasksByTaskIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiTicketsByTicketIdTasksByTaskId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchApiTicketsByTicketIdTasksByTaskIdMutation = (options?: Partial<Options<PatchApiTicketsByTicketIdTasksByTaskIdData>>): UseMutationOptions<PatchApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksByTaskIdError, Options<PatchApiTicketsByTicketIdTasksByTaskIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiTicketsByTicketIdTasksByTaskIdResponse, PatchApiTicketsByTicketIdTasksByTaskIdError, Options<PatchApiTicketsByTicketIdTasksByTaskIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiTicketsByTicketIdTasksByTaskId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const patchApiTicketsByTicketIdTasksReorderMutation = (options?: Partial<Options<PatchApiTicketsByTicketIdTasksReorderData>>): UseMutationOptions<PatchApiTicketsByTicketIdTasksReorderResponse, PatchApiTicketsByTicketIdTasksReorderError, Options<PatchApiTicketsByTicketIdTasksReorderData>> => {
    const mutationOptions: UseMutationOptions<PatchApiTicketsByTicketIdTasksReorderResponse, PatchApiTicketsByTicketIdTasksReorderError, Options<PatchApiTicketsByTicketIdTasksReorderData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiTicketsByTicketIdTasksReorder({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiTicketsByTicketIdAutoGenerateTasksQueryKey = (options: Options<PostApiTicketsByTicketIdAutoGenerateTasksData>) => createQueryKey('postApiTicketsByTicketIdAutoGenerateTasks', options);

export const postApiTicketsByTicketIdAutoGenerateTasksOptions = (options: Options<PostApiTicketsByTicketIdAutoGenerateTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTicketsByTicketIdAutoGenerateTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTicketsByTicketIdAutoGenerateTasksQueryKey(options)
    });
};

export const postApiTicketsByTicketIdAutoGenerateTasksMutation = (options?: Partial<Options<PostApiTicketsByTicketIdAutoGenerateTasksData>>): UseMutationOptions<PostApiTicketsByTicketIdAutoGenerateTasksResponse, PostApiTicketsByTicketIdAutoGenerateTasksError, Options<PostApiTicketsByTicketIdAutoGenerateTasksData>> => {
    const mutationOptions: UseMutationOptions<PostApiTicketsByTicketIdAutoGenerateTasksResponse, PostApiTicketsByTicketIdAutoGenerateTasksError, Options<PostApiTicketsByTicketIdAutoGenerateTasksData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTicketsByTicketIdAutoGenerateTasks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiTicketsBulkTasksQueryKey = (options: Options<GetApiTicketsBulkTasksData>) => createQueryKey('getApiTicketsBulkTasks', options);

export const getApiTicketsBulkTasksOptions = (options: Options<GetApiTicketsBulkTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTicketsBulkTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTicketsBulkTasksQueryKey(options)
    });
};

export const getApiProjectsQueryKey = (options?: Options<GetApiProjectsData>) => createQueryKey('getApiProjects', options);

export const getApiProjectsOptions = (options?: Options<GetApiProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsQueryKey(options)
    });
};

export const postApiProjectsQueryKey = (options?: Options<PostApiProjectsData>) => createQueryKey('postApiProjects', options);

export const postApiProjectsOptions = (options?: Options<PostApiProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsQueryKey(options)
    });
};

export const postApiProjectsMutation = (options?: Partial<Options<PostApiProjectsData>>): UseMutationOptions<PostApiProjectsResponse, PostApiProjectsError, Options<PostApiProjectsData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsResponse, PostApiProjectsError, Options<PostApiProjectsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjects({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiProjectsByProjectIdMutation = (options?: Partial<Options<DeleteApiProjectsByProjectIdData>>): UseMutationOptions<DeleteApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdError, Options<DeleteApiProjectsByProjectIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiProjectsByProjectIdResponse, DeleteApiProjectsByProjectIdError, Options<DeleteApiProjectsByProjectIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiProjectsByProjectId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdQueryKey = (options: Options<GetApiProjectsByProjectIdData>) => createQueryKey('getApiProjectsByProjectId', options);

export const getApiProjectsByProjectIdOptions = (options: Options<GetApiProjectsByProjectIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdQueryKey(options)
    });
};

export const patchApiProjectsByProjectIdMutation = (options?: Partial<Options<PatchApiProjectsByProjectIdData>>): UseMutationOptions<PatchApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdError, Options<PatchApiProjectsByProjectIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiProjectsByProjectIdResponse, PatchApiProjectsByProjectIdError, Options<PatchApiProjectsByProjectIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiProjectsByProjectId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdSyncQueryKey = (options: Options<PostApiProjectsByProjectIdSyncData>) => createQueryKey('postApiProjectsByProjectIdSync', options);

export const postApiProjectsByProjectIdSyncOptions = (options: Options<PostApiProjectsByProjectIdSyncData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdSync({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdSyncQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSyncMutation = (options?: Partial<Options<PostApiProjectsByProjectIdSyncData>>): UseMutationOptions<PostApiProjectsByProjectIdSyncResponse, PostApiProjectsByProjectIdSyncError, Options<PostApiProjectsByProjectIdSyncData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdSyncResponse, PostApiProjectsByProjectIdSyncError, Options<PostApiProjectsByProjectIdSyncData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdSync({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdFilesQueryKey = (options: Options<GetApiProjectsByProjectIdFilesData>) => createQueryKey('getApiProjectsByProjectIdFiles', options);

export const getApiProjectsByProjectIdFilesOptions = (options: Options<GetApiProjectsByProjectIdFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdFilesQueryKey(options)
    });
};

export const postApiProjectsByProjectIdRefreshQueryKey = (options: Options<PostApiProjectsByProjectIdRefreshData>) => createQueryKey('postApiProjectsByProjectIdRefresh', options);

export const postApiProjectsByProjectIdRefreshOptions = (options: Options<PostApiProjectsByProjectIdRefreshData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdRefresh({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdRefreshQueryKey(options)
    });
};

export const postApiProjectsByProjectIdRefreshMutation = (options?: Partial<Options<PostApiProjectsByProjectIdRefreshData>>): UseMutationOptions<PostApiProjectsByProjectIdRefreshResponse, PostApiProjectsByProjectIdRefreshError, Options<PostApiProjectsByProjectIdRefreshData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdRefreshResponse, PostApiProjectsByProjectIdRefreshError, Options<PostApiProjectsByProjectIdRefreshData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdRefresh({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdSummaryQueryKey = (options: Options<GetApiProjectsByProjectIdSummaryData>) => createQueryKey('getApiProjectsByProjectIdSummary', options);

export const getApiProjectsByProjectIdSummaryOptions = (options: Options<GetApiProjectsByProjectIdSummaryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdSummary({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdSummaryQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSuggestFilesQueryKey = (options: Options<PostApiProjectsByProjectIdSuggestFilesData>) => createQueryKey('postApiProjectsByProjectIdSuggestFiles', options);

export const postApiProjectsByProjectIdSuggestFilesOptions = (options: Options<PostApiProjectsByProjectIdSuggestFilesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdSuggestFiles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdSuggestFilesQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSuggestFilesMutation = (options?: Partial<Options<PostApiProjectsByProjectIdSuggestFilesData>>): UseMutationOptions<PostApiProjectsByProjectIdSuggestFilesResponse, PostApiProjectsByProjectIdSuggestFilesError, Options<PostApiProjectsByProjectIdSuggestFilesData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdSuggestFilesResponse, PostApiProjectsByProjectIdSuggestFilesError, Options<PostApiProjectsByProjectIdSuggestFilesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdSuggestFiles({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdSummarizeQueryKey = (options: Options<PostApiProjectsByProjectIdSummarizeData>) => createQueryKey('postApiProjectsByProjectIdSummarize', options);

export const postApiProjectsByProjectIdSummarizeOptions = (options: Options<PostApiProjectsByProjectIdSummarizeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdSummarize({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdSummarizeQueryKey(options)
    });
};

export const postApiProjectsByProjectIdSummarizeMutation = (options?: Partial<Options<PostApiProjectsByProjectIdSummarizeData>>): UseMutationOptions<PostApiProjectsByProjectIdSummarizeResponse, PostApiProjectsByProjectIdSummarizeError, Options<PostApiProjectsByProjectIdSummarizeData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdSummarizeResponse, PostApiProjectsByProjectIdSummarizeError, Options<PostApiProjectsByProjectIdSummarizeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdSummarize({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdRemoveSummariesQueryKey = (options: Options<PostApiProjectsByProjectIdRemoveSummariesData>) => createQueryKey('postApiProjectsByProjectIdRemoveSummaries', options);

export const postApiProjectsByProjectIdRemoveSummariesOptions = (options: Options<PostApiProjectsByProjectIdRemoveSummariesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdRemoveSummaries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdRemoveSummariesQueryKey(options)
    });
};

export const postApiProjectsByProjectIdRemoveSummariesMutation = (options?: Partial<Options<PostApiProjectsByProjectIdRemoveSummariesData>>): UseMutationOptions<PostApiProjectsByProjectIdRemoveSummariesResponse, PostApiProjectsByProjectIdRemoveSummariesError, Options<PostApiProjectsByProjectIdRemoveSummariesData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdRemoveSummariesResponse, PostApiProjectsByProjectIdRemoveSummariesError, Options<PostApiProjectsByProjectIdRemoveSummariesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdRemoveSummaries({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiPromptOptimizeQueryKey = (options: Options<PostApiPromptOptimizeData>) => createQueryKey('postApiPromptOptimize', options);

export const postApiPromptOptimizeOptions = (options: Options<PostApiPromptOptimizeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiPromptOptimize({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiPromptOptimizeQueryKey(options)
    });
};

export const postApiPromptOptimizeMutation = (options?: Partial<Options<PostApiPromptOptimizeData>>): UseMutationOptions<PostApiPromptOptimizeResponse, PostApiPromptOptimizeError, Options<PostApiPromptOptimizeData>> => {
    const mutationOptions: UseMutationOptions<PostApiPromptOptimizeResponse, PostApiPromptOptimizeError, Options<PostApiPromptOptimizeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiPromptOptimize({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiKeysQueryKey = (options?: Options<GetApiKeysData>) => createQueryKey('getApiKeys', options);

export const getApiKeysOptions = (options?: Options<GetApiKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiKeysQueryKey(options)
    });
};

export const postApiKeysQueryKey = (options: Options<PostApiKeysData>) => createQueryKey('postApiKeys', options);

export const postApiKeysOptions = (options: Options<PostApiKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiKeysQueryKey(options)
    });
};

export const postApiKeysMutation = (options?: Partial<Options<PostApiKeysData>>): UseMutationOptions<PostApiKeysResponse, PostApiKeysError, Options<PostApiKeysData>> => {
    const mutationOptions: UseMutationOptions<PostApiKeysResponse, PostApiKeysError, Options<PostApiKeysData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiKeys({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiKeysByKeyIdMutation = (options?: Partial<Options<DeleteApiKeysByKeyIdData>>): UseMutationOptions<DeleteApiKeysByKeyIdResponse, DeleteApiKeysByKeyIdError, Options<DeleteApiKeysByKeyIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiKeysByKeyIdResponse, DeleteApiKeysByKeyIdError, Options<DeleteApiKeysByKeyIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiKeysByKeyId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiKeysByKeyIdQueryKey = (options: Options<GetApiKeysByKeyIdData>) => createQueryKey('getApiKeysByKeyId', options);

export const getApiKeysByKeyIdOptions = (options: Options<GetApiKeysByKeyIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiKeysByKeyId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiKeysByKeyIdQueryKey(options)
    });
};

export const patchApiKeysByKeyIdMutation = (options?: Partial<Options<PatchApiKeysByKeyIdData>>): UseMutationOptions<PatchApiKeysByKeyIdResponse, PatchApiKeysByKeyIdError, Options<PatchApiKeysByKeyIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiKeysByKeyIdResponse, PatchApiKeysByKeyIdError, Options<PatchApiKeysByKeyIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiKeysByKeyId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiAdminEnvInfoQueryKey = (options?: Options<GetApiAdminEnvInfoData>) => createQueryKey('getApiAdminEnvInfo', options);

export const getApiAdminEnvInfoOptions = (options?: Options<GetApiAdminEnvInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAdminEnvInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAdminEnvInfoQueryKey(options)
    });
};

export const getApiAdminSystemStatusQueryKey = (options?: Options<GetApiAdminSystemStatusData>) => createQueryKey('getApiAdminSystemStatus', options);

export const getApiAdminSystemStatusOptions = (options?: Options<GetApiAdminSystemStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAdminSystemStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAdminSystemStatusQueryKey(options)
    });
};

export const postApiProjectsByProjectIdAiFileChangesQueryKey = (options: Options<PostApiProjectsByProjectIdAiFileChangesData>) => createQueryKey('postApiProjectsByProjectIdAiFileChanges', options);

export const postApiProjectsByProjectIdAiFileChangesOptions = (options: Options<PostApiProjectsByProjectIdAiFileChangesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdAiFileChanges({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdAiFileChangesQueryKey(options)
    });
};

export const postApiProjectsByProjectIdAiFileChangesMutation = (options?: Partial<Options<PostApiProjectsByProjectIdAiFileChangesData>>): UseMutationOptions<PostApiProjectsByProjectIdAiFileChangesResponse, PostApiProjectsByProjectIdAiFileChangesError, Options<PostApiProjectsByProjectIdAiFileChangesData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdAiFileChangesResponse, PostApiProjectsByProjectIdAiFileChangesError, Options<PostApiProjectsByProjectIdAiFileChangesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdAiFileChanges({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdAiFileChangesByAiFileChangeIdQueryKey = (options: Options<GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdData>) => createQueryKey('getApiProjectsByProjectIdAiFileChangesByAiFileChangeId', options);

export const getApiProjectsByProjectIdAiFileChangesByAiFileChangeIdOptions = (options: Options<GetApiProjectsByProjectIdAiFileChangesByAiFileChangeIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdAiFileChangesByAiFileChangeId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdAiFileChangesByAiFileChangeIdQueryKey(options)
    });
};

export const postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmQueryKey = (options: Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData>) => createQueryKey('postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirm', options);

export const postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmOptions = (options: Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirm({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmQueryKey(options)
    });
};

export const postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmMutation = (options?: Partial<Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData>>): UseMutationOptions<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponse, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmError, Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmResponse, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmError, Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirmData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdConfirm({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectQueryKey = (options: Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData>) => createQueryKey('postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdReject', options);

export const postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectOptions = (options: Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdReject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectQueryKey(options)
    });
};

export const postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectMutation = (options?: Partial<Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData>>): UseMutationOptions<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponse, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectError, Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectResponse, PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectError, Options<PostApiProjectsByProjectIdAiFileChangesByAiFileChangeIdRejectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdAiFileChangesByAiFileChangeIdReject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiPromptsQueryKey = (options?: Options<GetApiPromptsData>) => createQueryKey('getApiPrompts', options);

export const getApiPromptsOptions = (options?: Options<GetApiPromptsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPrompts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPromptsQueryKey(options)
    });
};

export const postApiPromptsQueryKey = (options: Options<PostApiPromptsData>) => createQueryKey('postApiPrompts', options);

export const postApiPromptsOptions = (options: Options<PostApiPromptsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiPrompts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiPromptsQueryKey(options)
    });
};

export const postApiPromptsMutation = (options?: Partial<Options<PostApiPromptsData>>): UseMutationOptions<PostApiPromptsResponse, PostApiPromptsError, Options<PostApiPromptsData>> => {
    const mutationOptions: UseMutationOptions<PostApiPromptsResponse, PostApiPromptsError, Options<PostApiPromptsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiPrompts({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProjectsByProjectIdPromptsQueryKey = (options: Options<GetApiProjectsByProjectIdPromptsData>) => createQueryKey('getApiProjectsByProjectIdPrompts', options);

export const getApiProjectsByProjectIdPromptsOptions = (options: Options<GetApiProjectsByProjectIdPromptsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProjectsByProjectIdPrompts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProjectsByProjectIdPromptsQueryKey(options)
    });
};

export const deleteApiProjectsByProjectIdPromptsByPromptIdMutation = (options?: Partial<Options<DeleteApiProjectsByProjectIdPromptsByPromptIdData>>): UseMutationOptions<DeleteApiProjectsByProjectIdPromptsByPromptIdResponse, DeleteApiProjectsByProjectIdPromptsByPromptIdError, Options<DeleteApiProjectsByProjectIdPromptsByPromptIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiProjectsByProjectIdPromptsByPromptIdResponse, DeleteApiProjectsByProjectIdPromptsByPromptIdError, Options<DeleteApiProjectsByProjectIdPromptsByPromptIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiProjectsByProjectIdPromptsByPromptId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdPromptsByPromptIdQueryKey = (options: Options<PostApiProjectsByProjectIdPromptsByPromptIdData>) => createQueryKey('postApiProjectsByProjectIdPromptsByPromptId', options);

export const postApiProjectsByProjectIdPromptsByPromptIdOptions = (options: Options<PostApiProjectsByProjectIdPromptsByPromptIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdPromptsByPromptId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdPromptsByPromptIdQueryKey(options)
    });
};

export const postApiProjectsByProjectIdPromptsByPromptIdMutation = (options?: Partial<Options<PostApiProjectsByProjectIdPromptsByPromptIdData>>): UseMutationOptions<PostApiProjectsByProjectIdPromptsByPromptIdResponse, PostApiProjectsByProjectIdPromptsByPromptIdError, Options<PostApiProjectsByProjectIdPromptsByPromptIdData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdPromptsByPromptIdResponse, PostApiProjectsByProjectIdPromptsByPromptIdError, Options<PostApiProjectsByProjectIdPromptsByPromptIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdPromptsByPromptId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiPromptsByPromptIdMutation = (options?: Partial<Options<DeleteApiPromptsByPromptIdData>>): UseMutationOptions<DeleteApiPromptsByPromptIdResponse, DeleteApiPromptsByPromptIdError, Options<DeleteApiPromptsByPromptIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiPromptsByPromptIdResponse, DeleteApiPromptsByPromptIdError, Options<DeleteApiPromptsByPromptIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiPromptsByPromptId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiPromptsByPromptIdQueryKey = (options: Options<GetApiPromptsByPromptIdData>) => createQueryKey('getApiPromptsByPromptId', options);

export const getApiPromptsByPromptIdOptions = (options: Options<GetApiPromptsByPromptIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPromptsByPromptId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPromptsByPromptIdQueryKey(options)
    });
};

export const patchApiPromptsByPromptIdMutation = (options?: Partial<Options<PatchApiPromptsByPromptIdData>>): UseMutationOptions<PatchApiPromptsByPromptIdResponse, PatchApiPromptsByPromptIdError, Options<PatchApiPromptsByPromptIdData>> => {
    const mutationOptions: UseMutationOptions<PatchApiPromptsByPromptIdResponse, PatchApiPromptsByPromptIdError, Options<PatchApiPromptsByPromptIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchApiPromptsByPromptId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiGenAiStreamQueryKey = (options: Options<PostApiGenAiStreamData>) => createQueryKey('postApiGenAiStream', options);

export const postApiGenAiStreamOptions = (options: Options<PostApiGenAiStreamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiGenAiStream({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiGenAiStreamQueryKey(options)
    });
};

export const postApiGenAiStreamMutation = (options?: Partial<Options<PostApiGenAiStreamData>>): UseMutationOptions<PostApiGenAiStreamResponse, DefaultError, Options<PostApiGenAiStreamData>> => {
    const mutationOptions: UseMutationOptions<PostApiGenAiStreamResponse, DefaultError, Options<PostApiGenAiStreamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiGenAiStream({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiGenAiTextQueryKey = (options: Options<PostApiGenAiTextData>) => createQueryKey('postApiGenAiText', options);

export const postApiGenAiTextOptions = (options: Options<PostApiGenAiTextData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiGenAiText({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiGenAiTextQueryKey(options)
    });
};

export const postApiGenAiTextMutation = (options?: Partial<Options<PostApiGenAiTextData>>): UseMutationOptions<PostApiGenAiTextResponse, PostApiGenAiTextError, Options<PostApiGenAiTextData>> => {
    const mutationOptions: UseMutationOptions<PostApiGenAiTextResponse, PostApiGenAiTextError, Options<PostApiGenAiTextData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiGenAiText({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiGenAiStructuredQueryKey = (options: Options<PostApiGenAiStructuredData>) => createQueryKey('postApiGenAiStructured', options);

export const postApiGenAiStructuredOptions = (options: Options<PostApiGenAiStructuredData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiGenAiStructured({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiGenAiStructuredQueryKey(options)
    });
};

export const postApiGenAiStructuredMutation = (options?: Partial<Options<PostApiGenAiStructuredData>>): UseMutationOptions<PostApiGenAiStructuredResponse, PostApiGenAiStructuredError, Options<PostApiGenAiStructuredData>> => {
    const mutationOptions: UseMutationOptions<PostApiGenAiStructuredResponse, PostApiGenAiStructuredError, Options<PostApiGenAiStructuredData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiGenAiStructured({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiModelsQueryKey = (options: Options<GetApiModelsData>) => createQueryKey('getApiModels', options);

export const getApiModelsOptions = (options: Options<GetApiModelsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiModels({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiModelsQueryKey(options)
    });
};

export const postApiAiGenerateTextQueryKey = (options: Options<PostApiAiGenerateTextData>) => createQueryKey('postApiAiGenerateText', options);

export const postApiAiGenerateTextOptions = (options: Options<PostApiAiGenerateTextData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAiGenerateText({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAiGenerateTextQueryKey(options)
    });
};

export const postApiAiGenerateTextMutation = (options?: Partial<Options<PostApiAiGenerateTextData>>): UseMutationOptions<PostApiAiGenerateTextResponse, PostApiAiGenerateTextError, Options<PostApiAiGenerateTextData>> => {
    const mutationOptions: UseMutationOptions<PostApiAiGenerateTextResponse, PostApiAiGenerateTextError, Options<PostApiAiGenerateTextData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAiGenerateText({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiProjectsByProjectIdAgentCoderQueryKey = (options: Options<PostApiProjectsByProjectIdAgentCoderData>) => createQueryKey('postApiProjectsByProjectIdAgentCoder', options);

export const postApiProjectsByProjectIdAgentCoderOptions = (options: Options<PostApiProjectsByProjectIdAgentCoderData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProjectsByProjectIdAgentCoder({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProjectsByProjectIdAgentCoderQueryKey(options)
    });
};

export const postApiProjectsByProjectIdAgentCoderMutation = (options?: Partial<Options<PostApiProjectsByProjectIdAgentCoderData>>): UseMutationOptions<PostApiProjectsByProjectIdAgentCoderResponse, PostApiProjectsByProjectIdAgentCoderError, Options<PostApiProjectsByProjectIdAgentCoderData>> => {
    const mutationOptions: UseMutationOptions<PostApiProjectsByProjectIdAgentCoderResponse, PostApiProjectsByProjectIdAgentCoderError, Options<PostApiProjectsByProjectIdAgentCoderData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProjectsByProjectIdAgentCoder({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiAgentCoderProjectByProjectIdRunsQueryKey = (options: Options<GetApiAgentCoderProjectByProjectIdRunsData>) => createQueryKey('getApiAgentCoderProjectByProjectIdRuns', options);

export const getApiAgentCoderProjectByProjectIdRunsOptions = (options: Options<GetApiAgentCoderProjectByProjectIdRunsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAgentCoderProjectByProjectIdRuns({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAgentCoderProjectByProjectIdRunsQueryKey(options)
    });
};

export const getApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsQueryKey = (options: Options<GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsData>) => createQueryKey('getApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogs', options);

export const getApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsOptions = (options: Options<GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAgentCoderProjectByProjectIdRunsByAgentJobIdLogsQueryKey(options)
    });
};

export const getApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataQueryKey = (options: Options<GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataData>) => createQueryKey('getApiAgentCoderProjectByProjectIdRunsByAgentJobIdData', options);

export const getApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataOptions = (options: Options<GetApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAgentCoderProjectByProjectIdRunsByAgentJobIdData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAgentCoderProjectByProjectIdRunsByAgentJobIdDataQueryKey(options)
    });
};

export const postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmQueryKey = (options: Options<PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData>) => createQueryKey('postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirm', options);

export const postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmOptions = (options: Options<PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirm({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmQueryKey(options)
    });
};

export const postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmMutation = (options?: Partial<Options<PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData>>): UseMutationOptions<PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponse, PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmError, Options<PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData>> => {
    const mutationOptions: UseMutationOptions<PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmResponse, PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmError, Options<PostApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirmData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAgentCoderProjectByProjectIdRunsByAgentJobIdConfirm({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiAgentCoderRunsByAgentJobIdMutation = (options?: Partial<Options<DeleteApiAgentCoderRunsByAgentJobIdData>>): UseMutationOptions<DeleteApiAgentCoderRunsByAgentJobIdResponse, DeleteApiAgentCoderRunsByAgentJobIdError, Options<DeleteApiAgentCoderRunsByAgentJobIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiAgentCoderRunsByAgentJobIdResponse, DeleteApiAgentCoderRunsByAgentJobIdError, Options<DeleteApiAgentCoderRunsByAgentJobIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiAgentCoderRunsByAgentJobId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};