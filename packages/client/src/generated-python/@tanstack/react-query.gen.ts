// This file is auto-generated by @hey-api/openapi-ts

import { type Options, healthCheckApiHealthGet, getEnvInfoApiAdminEnvInfoGet, getSystemStatusApiAdminSystemStatusGet, runAgentCoderApiProjectsProjectIdAgentCoderPost, getAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGet, getAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGet, listProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGet, confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPost, deleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDelete, getAllChatsEndpointApiChatsGet, createChatEndpointApiChatsPost, getChatMessagesEndpointApiChatsChatIdMessagesGet, postAiChatSdkEndpointApiChatsApiAiChatPost, forkChatEndpointApiChatsChatIdForkPost, forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPost, deleteMessageEndpointApiChatsChatIdMessagesMessageIdDelete, deleteChatEndpointApiChatsChatIdDelete, updateChatEndpointApiChatsChatIdPatch, listAllPromptsEndpointApiPromptsGet, createPromptEndpointApiPromptsPost, listProjectPromptsEndpointApiProjectsProjectIdPromptsGet, removePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDelete, addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPost, deletePromptEndpointApiPromptsPromptIdDelete, getPromptByIdEndpointApiPromptsPromptIdGet, updatePromptEndpointApiPromptsPromptIdPatch, listProjectsRouteProjectsGet, createProjectRouteProjectsPost, deleteProjectRouteProjectsProjectIdDelete, getProjectByIdRouteProjectsProjectIdGet, updateProjectRouteProjectsProjectIdPatch, syncProjectFilesRouteProjectsProjectIdSyncPost, getProjectFilesRouteProjectsProjectIdFilesGet, refreshProjectRouteProjectsProjectIdRefreshPost, getProjectSummaryRouteProjectsProjectIdSummaryGet, suggestFilesRouteProjectsProjectIdSuggestFilesPost, summarizeProjectFilesRouteProjectsProjectIdSummarizePost, removeSummariesRouteProjectsProjectIdRemoveSummariesPost, optimizeUserInputRoutePromptOptimizePost, listProviderKeysApiKeysGet, createProviderKeyApiKeysPost, deleteProviderKeyApiKeysKeyIdDelete, getProviderKeyByIdApiKeysKeyIdGet, updateProviderKeyApiKeysKeyIdPatch, createTicketRouteTicketsPost, deleteTicketRouteTicketsTicketIdDelete, getTicketRouteTicketsTicketIdGet, updateTicketRouteTicketsTicketIdPatch, linkFilesRouteTicketsTicketIdLinkFilesPost, suggestTasksRouteTicketsTicketIdSuggestTasksPost, suggestFilesRouteTicketsTicketIdSuggestFilesPost, listTicketsByProjectRouteProjectsProjectIdTicketsGet, listTicketsWithCountRouteProjectsProjectIdTicketsWithCountGet, listTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGet, getTasksRouteTicketsTicketIdTasksGet, createTaskRouteTicketsTicketIdTasksPost, deleteTaskRouteTicketsTicketIdTasksTaskIdDelete, updateTaskRouteTicketsTicketIdTasksTaskIdPatch, reorderTasksRouteTicketsTicketIdTasksReorderPatch, autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPost, getTasksForTicketsRouteTicketsBulkTasksGet, streamGenerateTextEndpointApiGenAiStreamPost, generateTextEndpointApiGenAiTextPost, generateStructuredEndpointApiGenAiStructuredPost, getModelsEndpointApiModelsGet, postAiGenerateTextEndpointApiAiGenerateTextPost, generateAiFileChangeApiProjectsProjectIdAiFileChangesPost, getAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGet, confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPost, rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPost } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { HealthCheckApiHealthGetData, GetEnvInfoApiAdminEnvInfoGetData, GetSystemStatusApiAdminSystemStatusGetData, RunAgentCoderApiProjectsProjectIdAgentCoderPostData, RunAgentCoderApiProjectsProjectIdAgentCoderPostError, RunAgentCoderApiProjectsProjectIdAgentCoderPostResponse, GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetData, GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetData, ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetData, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostError, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponse, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteData, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteError, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponse, GetAllChatsEndpointApiChatsGetData, CreateChatEndpointApiChatsPostData, CreateChatEndpointApiChatsPostError, CreateChatEndpointApiChatsPostResponse, GetChatMessagesEndpointApiChatsChatIdMessagesGetData, PostAiChatSdkEndpointApiChatsApiAiChatPostData, PostAiChatSdkEndpointApiChatsApiAiChatPostError, ForkChatEndpointApiChatsChatIdForkPostData, ForkChatEndpointApiChatsChatIdForkPostError, ForkChatEndpointApiChatsChatIdForkPostResponse, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostError, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponse, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteData, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteError, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponse, DeleteChatEndpointApiChatsChatIdDeleteData, DeleteChatEndpointApiChatsChatIdDeleteError, DeleteChatEndpointApiChatsChatIdDeleteResponse, UpdateChatEndpointApiChatsChatIdPatchData, UpdateChatEndpointApiChatsChatIdPatchError, UpdateChatEndpointApiChatsChatIdPatchResponse, ListAllPromptsEndpointApiPromptsGetData, CreatePromptEndpointApiPromptsPostData, CreatePromptEndpointApiPromptsPostError, CreatePromptEndpointApiPromptsPostResponse, ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetData, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteData, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteError, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponse, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostError, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponse, DeletePromptEndpointApiPromptsPromptIdDeleteData, DeletePromptEndpointApiPromptsPromptIdDeleteError, DeletePromptEndpointApiPromptsPromptIdDeleteResponse, GetPromptByIdEndpointApiPromptsPromptIdGetData, UpdatePromptEndpointApiPromptsPromptIdPatchData, UpdatePromptEndpointApiPromptsPromptIdPatchError, UpdatePromptEndpointApiPromptsPromptIdPatchResponse, ListProjectsRouteProjectsGetData, CreateProjectRouteProjectsPostData, CreateProjectRouteProjectsPostError, CreateProjectRouteProjectsPostResponse, DeleteProjectRouteProjectsProjectIdDeleteData, DeleteProjectRouteProjectsProjectIdDeleteError, DeleteProjectRouteProjectsProjectIdDeleteResponse, GetProjectByIdRouteProjectsProjectIdGetData, UpdateProjectRouteProjectsProjectIdPatchData, UpdateProjectRouteProjectsProjectIdPatchError, UpdateProjectRouteProjectsProjectIdPatchResponse, SyncProjectFilesRouteProjectsProjectIdSyncPostData, SyncProjectFilesRouteProjectsProjectIdSyncPostError, SyncProjectFilesRouteProjectsProjectIdSyncPostResponse, GetProjectFilesRouteProjectsProjectIdFilesGetData, RefreshProjectRouteProjectsProjectIdRefreshPostData, RefreshProjectRouteProjectsProjectIdRefreshPostError, RefreshProjectRouteProjectsProjectIdRefreshPostResponse, GetProjectSummaryRouteProjectsProjectIdSummaryGetData, SuggestFilesRouteProjectsProjectIdSuggestFilesPostData, SuggestFilesRouteProjectsProjectIdSuggestFilesPostError, SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponse, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostError, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponse, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostError, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponse, OptimizeUserInputRoutePromptOptimizePostData, OptimizeUserInputRoutePromptOptimizePostError, OptimizeUserInputRoutePromptOptimizePostResponse, ListProviderKeysApiKeysGetData, CreateProviderKeyApiKeysPostData, CreateProviderKeyApiKeysPostError, CreateProviderKeyApiKeysPostResponse, DeleteProviderKeyApiKeysKeyIdDeleteData, DeleteProviderKeyApiKeysKeyIdDeleteError, DeleteProviderKeyApiKeysKeyIdDeleteResponse, GetProviderKeyByIdApiKeysKeyIdGetData, UpdateProviderKeyApiKeysKeyIdPatchData, UpdateProviderKeyApiKeysKeyIdPatchError, UpdateProviderKeyApiKeysKeyIdPatchResponse, CreateTicketRouteTicketsPostData, CreateTicketRouteTicketsPostError, CreateTicketRouteTicketsPostResponse, DeleteTicketRouteTicketsTicketIdDeleteData, DeleteTicketRouteTicketsTicketIdDeleteError, DeleteTicketRouteTicketsTicketIdDeleteResponse, GetTicketRouteTicketsTicketIdGetData, UpdateTicketRouteTicketsTicketIdPatchData, UpdateTicketRouteTicketsTicketIdPatchError, UpdateTicketRouteTicketsTicketIdPatchResponse, LinkFilesRouteTicketsTicketIdLinkFilesPostData, LinkFilesRouteTicketsTicketIdLinkFilesPostError, LinkFilesRouteTicketsTicketIdLinkFilesPostResponse, SuggestTasksRouteTicketsTicketIdSuggestTasksPostData, SuggestTasksRouteTicketsTicketIdSuggestTasksPostError, SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponse, SuggestFilesRouteTicketsTicketIdSuggestFilesPostData, SuggestFilesRouteTicketsTicketIdSuggestFilesPostError, SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponse, ListTicketsByProjectRouteProjectsProjectIdTicketsGetData, ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetData, ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetData, GetTasksRouteTicketsTicketIdTasksGetData, CreateTaskRouteTicketsTicketIdTasksPostData, CreateTaskRouteTicketsTicketIdTasksPostError, CreateTaskRouteTicketsTicketIdTasksPostResponse, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteData, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteError, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponse, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchData, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchError, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponse, ReorderTasksRouteTicketsTicketIdTasksReorderPatchData, ReorderTasksRouteTicketsTicketIdTasksReorderPatchError, ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponse, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostError, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponse, GetTasksForTicketsRouteTicketsBulkTasksGetData, StreamGenerateTextEndpointApiGenAiStreamPostData, StreamGenerateTextEndpointApiGenAiStreamPostError, GenerateTextEndpointApiGenAiTextPostData, GenerateTextEndpointApiGenAiTextPostError, GenerateTextEndpointApiGenAiTextPostResponse, GenerateStructuredEndpointApiGenAiStructuredPostData, GenerateStructuredEndpointApiGenAiStructuredPostError, GenerateStructuredEndpointApiGenAiStructuredPostResponse, GetModelsEndpointApiModelsGetData, PostAiGenerateTextEndpointApiAiGenerateTextPostData, PostAiGenerateTextEndpointApiAiGenerateTextPostError, PostAiGenerateTextEndpointApiAiGenerateTextPostResponse, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostError, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponse, GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetData, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostError, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponse, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostError, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const healthCheckApiHealthGetQueryKey = (options?: Options<HealthCheckApiHealthGetData>) => createQueryKey('healthCheckApiHealthGet', options);

export const healthCheckApiHealthGetOptions = (options?: Options<HealthCheckApiHealthGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheckApiHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckApiHealthGetQueryKey(options)
    });
};

export const getEnvInfoApiAdminEnvInfoGetQueryKey = (options?: Options<GetEnvInfoApiAdminEnvInfoGetData>) => createQueryKey('getEnvInfoApiAdminEnvInfoGet', options);

export const getEnvInfoApiAdminEnvInfoGetOptions = (options?: Options<GetEnvInfoApiAdminEnvInfoGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEnvInfoApiAdminEnvInfoGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEnvInfoApiAdminEnvInfoGetQueryKey(options)
    });
};

export const getSystemStatusApiAdminSystemStatusGetQueryKey = (options?: Options<GetSystemStatusApiAdminSystemStatusGetData>) => createQueryKey('getSystemStatusApiAdminSystemStatusGet', options);

export const getSystemStatusApiAdminSystemStatusGetOptions = (options?: Options<GetSystemStatusApiAdminSystemStatusGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSystemStatusApiAdminSystemStatusGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSystemStatusApiAdminSystemStatusGetQueryKey(options)
    });
};

export const runAgentCoderApiProjectsProjectIdAgentCoderPostQueryKey = (options: Options<RunAgentCoderApiProjectsProjectIdAgentCoderPostData>) => createQueryKey('runAgentCoderApiProjectsProjectIdAgentCoderPost', options);

export const runAgentCoderApiProjectsProjectIdAgentCoderPostOptions = (options: Options<RunAgentCoderApiProjectsProjectIdAgentCoderPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await runAgentCoderApiProjectsProjectIdAgentCoderPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: runAgentCoderApiProjectsProjectIdAgentCoderPostQueryKey(options)
    });
};

export const runAgentCoderApiProjectsProjectIdAgentCoderPostMutation = (options?: Partial<Options<RunAgentCoderApiProjectsProjectIdAgentCoderPostData>>): UseMutationOptions<RunAgentCoderApiProjectsProjectIdAgentCoderPostResponse, RunAgentCoderApiProjectsProjectIdAgentCoderPostError, Options<RunAgentCoderApiProjectsProjectIdAgentCoderPostData>> => {
    const mutationOptions: UseMutationOptions<RunAgentCoderApiProjectsProjectIdAgentCoderPostResponse, RunAgentCoderApiProjectsProjectIdAgentCoderPostError, Options<RunAgentCoderApiProjectsProjectIdAgentCoderPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await runAgentCoderApiProjectsProjectIdAgentCoderPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetQueryKey = (options: Options<GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetData>) => createQueryKey('getAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGet', options);

export const getAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetOptions = (options: Options<GetAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAgentRunLogsApiProjectsProjectIdAgentCoderRunsAgentJobIdLogsGetQueryKey(options)
    });
};

export const getAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetQueryKey = (options: Options<GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetData>) => createQueryKey('getAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGet', options);

export const getAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetOptions = (options: Options<GetAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAgentRunDataApiProjectsProjectIdAgentCoderRunsAgentJobIdDataGetQueryKey(options)
    });
};

export const listProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetQueryKey = (options: Options<ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetData>) => createQueryKey('listProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGet', options);

export const listProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetOptions = (options: Options<ListProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listProjectAgentRunsApiProjectsProjectIdAgentCoderRunsGetQueryKey(options)
    });
};

export const confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostQueryKey = (options: Options<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData>) => createQueryKey('confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPost', options);

export const confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostOptions = (options: Options<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostQueryKey(options)
    });
};

export const confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostMutation = (options?: Partial<Options<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData>>): UseMutationOptions<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponse, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostError, Options<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData>> => {
    const mutationOptions: UseMutationOptions<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostResponse, ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostError, Options<ConfirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await confirmAgentRunChangesApiProjectsProjectIdAgentCoderRunsAgentJobIdConfirmPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteMutation = (options?: Partial<Options<DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteData>>): UseMutationOptions<DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponse, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteError, Options<DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteResponse, DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteError, Options<DeleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteAgentRunApiProjectsProjectIdAgentCoderRunsAgentJobIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllChatsEndpointApiChatsGetQueryKey = (options?: Options<GetAllChatsEndpointApiChatsGetData>) => createQueryKey('getAllChatsEndpointApiChatsGet', options);

export const getAllChatsEndpointApiChatsGetOptions = (options?: Options<GetAllChatsEndpointApiChatsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllChatsEndpointApiChatsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllChatsEndpointApiChatsGetQueryKey(options)
    });
};

export const createChatEndpointApiChatsPostQueryKey = (options: Options<CreateChatEndpointApiChatsPostData>) => createQueryKey('createChatEndpointApiChatsPost', options);

export const createChatEndpointApiChatsPostOptions = (options: Options<CreateChatEndpointApiChatsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createChatEndpointApiChatsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createChatEndpointApiChatsPostQueryKey(options)
    });
};

export const createChatEndpointApiChatsPostMutation = (options?: Partial<Options<CreateChatEndpointApiChatsPostData>>): UseMutationOptions<CreateChatEndpointApiChatsPostResponse, CreateChatEndpointApiChatsPostError, Options<CreateChatEndpointApiChatsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateChatEndpointApiChatsPostResponse, CreateChatEndpointApiChatsPostError, Options<CreateChatEndpointApiChatsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createChatEndpointApiChatsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getChatMessagesEndpointApiChatsChatIdMessagesGetQueryKey = (options: Options<GetChatMessagesEndpointApiChatsChatIdMessagesGetData>) => createQueryKey('getChatMessagesEndpointApiChatsChatIdMessagesGet', options);

export const getChatMessagesEndpointApiChatsChatIdMessagesGetOptions = (options: Options<GetChatMessagesEndpointApiChatsChatIdMessagesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChatMessagesEndpointApiChatsChatIdMessagesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChatMessagesEndpointApiChatsChatIdMessagesGetQueryKey(options)
    });
};

export const postAiChatSdkEndpointApiChatsApiAiChatPostQueryKey = (options: Options<PostAiChatSdkEndpointApiChatsApiAiChatPostData>) => createQueryKey('postAiChatSdkEndpointApiChatsApiAiChatPost', options);

export const postAiChatSdkEndpointApiChatsApiAiChatPostOptions = (options: Options<PostAiChatSdkEndpointApiChatsApiAiChatPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAiChatSdkEndpointApiChatsApiAiChatPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAiChatSdkEndpointApiChatsApiAiChatPostQueryKey(options)
    });
};

export const postAiChatSdkEndpointApiChatsApiAiChatPostMutation = (options?: Partial<Options<PostAiChatSdkEndpointApiChatsApiAiChatPostData>>): UseMutationOptions<unknown, PostAiChatSdkEndpointApiChatsApiAiChatPostError, Options<PostAiChatSdkEndpointApiChatsApiAiChatPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, PostAiChatSdkEndpointApiChatsApiAiChatPostError, Options<PostAiChatSdkEndpointApiChatsApiAiChatPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAiChatSdkEndpointApiChatsApiAiChatPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const forkChatEndpointApiChatsChatIdForkPostQueryKey = (options: Options<ForkChatEndpointApiChatsChatIdForkPostData>) => createQueryKey('forkChatEndpointApiChatsChatIdForkPost', options);

export const forkChatEndpointApiChatsChatIdForkPostOptions = (options: Options<ForkChatEndpointApiChatsChatIdForkPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await forkChatEndpointApiChatsChatIdForkPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: forkChatEndpointApiChatsChatIdForkPostQueryKey(options)
    });
};

export const forkChatEndpointApiChatsChatIdForkPostMutation = (options?: Partial<Options<ForkChatEndpointApiChatsChatIdForkPostData>>): UseMutationOptions<ForkChatEndpointApiChatsChatIdForkPostResponse, ForkChatEndpointApiChatsChatIdForkPostError, Options<ForkChatEndpointApiChatsChatIdForkPostData>> => {
    const mutationOptions: UseMutationOptions<ForkChatEndpointApiChatsChatIdForkPostResponse, ForkChatEndpointApiChatsChatIdForkPostError, Options<ForkChatEndpointApiChatsChatIdForkPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await forkChatEndpointApiChatsChatIdForkPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostQueryKey = (options: Options<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData>) => createQueryKey('forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPost', options);

export const forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostOptions = (options: Options<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostQueryKey(options)
    });
};

export const forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostMutation = (options?: Partial<Options<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData>>): UseMutationOptions<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponse, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostError, Options<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData>> => {
    const mutationOptions: UseMutationOptions<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostResponse, ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostError, Options<ForkChatFromMessageEndpointApiChatsChatIdForkMessageIdPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await forkChatFromMessageEndpointApiChatsChatIdForkMessageIdPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteMutation = (options?: Partial<Options<DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteData>>): UseMutationOptions<DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponse, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteError, Options<DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteResponse, DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteError, Options<DeleteMessageEndpointApiChatsChatIdMessagesMessageIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteMessageEndpointApiChatsChatIdMessagesMessageIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteChatEndpointApiChatsChatIdDeleteMutation = (options?: Partial<Options<DeleteChatEndpointApiChatsChatIdDeleteData>>): UseMutationOptions<DeleteChatEndpointApiChatsChatIdDeleteResponse, DeleteChatEndpointApiChatsChatIdDeleteError, Options<DeleteChatEndpointApiChatsChatIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteChatEndpointApiChatsChatIdDeleteResponse, DeleteChatEndpointApiChatsChatIdDeleteError, Options<DeleteChatEndpointApiChatsChatIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteChatEndpointApiChatsChatIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateChatEndpointApiChatsChatIdPatchMutation = (options?: Partial<Options<UpdateChatEndpointApiChatsChatIdPatchData>>): UseMutationOptions<UpdateChatEndpointApiChatsChatIdPatchResponse, UpdateChatEndpointApiChatsChatIdPatchError, Options<UpdateChatEndpointApiChatsChatIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateChatEndpointApiChatsChatIdPatchResponse, UpdateChatEndpointApiChatsChatIdPatchError, Options<UpdateChatEndpointApiChatsChatIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateChatEndpointApiChatsChatIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listAllPromptsEndpointApiPromptsGetQueryKey = (options?: Options<ListAllPromptsEndpointApiPromptsGetData>) => createQueryKey('listAllPromptsEndpointApiPromptsGet', options);

export const listAllPromptsEndpointApiPromptsGetOptions = (options?: Options<ListAllPromptsEndpointApiPromptsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAllPromptsEndpointApiPromptsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAllPromptsEndpointApiPromptsGetQueryKey(options)
    });
};

export const createPromptEndpointApiPromptsPostQueryKey = (options: Options<CreatePromptEndpointApiPromptsPostData>) => createQueryKey('createPromptEndpointApiPromptsPost', options);

export const createPromptEndpointApiPromptsPostOptions = (options: Options<CreatePromptEndpointApiPromptsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createPromptEndpointApiPromptsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createPromptEndpointApiPromptsPostQueryKey(options)
    });
};

export const createPromptEndpointApiPromptsPostMutation = (options?: Partial<Options<CreatePromptEndpointApiPromptsPostData>>): UseMutationOptions<CreatePromptEndpointApiPromptsPostResponse, CreatePromptEndpointApiPromptsPostError, Options<CreatePromptEndpointApiPromptsPostData>> => {
    const mutationOptions: UseMutationOptions<CreatePromptEndpointApiPromptsPostResponse, CreatePromptEndpointApiPromptsPostError, Options<CreatePromptEndpointApiPromptsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createPromptEndpointApiPromptsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listProjectPromptsEndpointApiProjectsProjectIdPromptsGetQueryKey = (options: Options<ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetData>) => createQueryKey('listProjectPromptsEndpointApiProjectsProjectIdPromptsGet', options);

export const listProjectPromptsEndpointApiProjectsProjectIdPromptsGetOptions = (options: Options<ListProjectPromptsEndpointApiProjectsProjectIdPromptsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listProjectPromptsEndpointApiProjectsProjectIdPromptsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listProjectPromptsEndpointApiProjectsProjectIdPromptsGetQueryKey(options)
    });
};

export const removePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteMutation = (options?: Partial<Options<RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteData>>): UseMutationOptions<RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponse, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteError, Options<RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteResponse, RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteError, Options<RemovePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removePromptFromProjectEndpointApiProjectsProjectIdPromptsPromptIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostQueryKey = (options: Options<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData>) => createQueryKey('addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPost', options);

export const addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostOptions = (options: Options<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostQueryKey(options)
    });
};

export const addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostMutation = (options?: Partial<Options<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData>>): UseMutationOptions<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponse, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostError, Options<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData>> => {
    const mutationOptions: UseMutationOptions<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostResponse, AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostError, Options<AddPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addPromptToProjectEndpointApiProjectsProjectIdPromptsPromptIdPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deletePromptEndpointApiPromptsPromptIdDeleteMutation = (options?: Partial<Options<DeletePromptEndpointApiPromptsPromptIdDeleteData>>): UseMutationOptions<DeletePromptEndpointApiPromptsPromptIdDeleteResponse, DeletePromptEndpointApiPromptsPromptIdDeleteError, Options<DeletePromptEndpointApiPromptsPromptIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeletePromptEndpointApiPromptsPromptIdDeleteResponse, DeletePromptEndpointApiPromptsPromptIdDeleteError, Options<DeletePromptEndpointApiPromptsPromptIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deletePromptEndpointApiPromptsPromptIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPromptByIdEndpointApiPromptsPromptIdGetQueryKey = (options: Options<GetPromptByIdEndpointApiPromptsPromptIdGetData>) => createQueryKey('getPromptByIdEndpointApiPromptsPromptIdGet', options);

export const getPromptByIdEndpointApiPromptsPromptIdGetOptions = (options: Options<GetPromptByIdEndpointApiPromptsPromptIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPromptByIdEndpointApiPromptsPromptIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPromptByIdEndpointApiPromptsPromptIdGetQueryKey(options)
    });
};

export const updatePromptEndpointApiPromptsPromptIdPatchMutation = (options?: Partial<Options<UpdatePromptEndpointApiPromptsPromptIdPatchData>>): UseMutationOptions<UpdatePromptEndpointApiPromptsPromptIdPatchResponse, UpdatePromptEndpointApiPromptsPromptIdPatchError, Options<UpdatePromptEndpointApiPromptsPromptIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdatePromptEndpointApiPromptsPromptIdPatchResponse, UpdatePromptEndpointApiPromptsPromptIdPatchError, Options<UpdatePromptEndpointApiPromptsPromptIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updatePromptEndpointApiPromptsPromptIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listProjectsRouteProjectsGetQueryKey = (options?: Options<ListProjectsRouteProjectsGetData>) => createQueryKey('listProjectsRouteProjectsGet', options);

export const listProjectsRouteProjectsGetOptions = (options?: Options<ListProjectsRouteProjectsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listProjectsRouteProjectsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listProjectsRouteProjectsGetQueryKey(options)
    });
};

export const createProjectRouteProjectsPostQueryKey = (options: Options<CreateProjectRouteProjectsPostData>) => createQueryKey('createProjectRouteProjectsPost', options);

export const createProjectRouteProjectsPostOptions = (options: Options<CreateProjectRouteProjectsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createProjectRouteProjectsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createProjectRouteProjectsPostQueryKey(options)
    });
};

export const createProjectRouteProjectsPostMutation = (options?: Partial<Options<CreateProjectRouteProjectsPostData>>): UseMutationOptions<CreateProjectRouteProjectsPostResponse, CreateProjectRouteProjectsPostError, Options<CreateProjectRouteProjectsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateProjectRouteProjectsPostResponse, CreateProjectRouteProjectsPostError, Options<CreateProjectRouteProjectsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createProjectRouteProjectsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteProjectRouteProjectsProjectIdDeleteMutation = (options?: Partial<Options<DeleteProjectRouteProjectsProjectIdDeleteData>>): UseMutationOptions<DeleteProjectRouteProjectsProjectIdDeleteResponse, DeleteProjectRouteProjectsProjectIdDeleteError, Options<DeleteProjectRouteProjectsProjectIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteProjectRouteProjectsProjectIdDeleteResponse, DeleteProjectRouteProjectsProjectIdDeleteError, Options<DeleteProjectRouteProjectsProjectIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProjectRouteProjectsProjectIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProjectByIdRouteProjectsProjectIdGetQueryKey = (options: Options<GetProjectByIdRouteProjectsProjectIdGetData>) => createQueryKey('getProjectByIdRouteProjectsProjectIdGet', options);

export const getProjectByIdRouteProjectsProjectIdGetOptions = (options: Options<GetProjectByIdRouteProjectsProjectIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectByIdRouteProjectsProjectIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectByIdRouteProjectsProjectIdGetQueryKey(options)
    });
};

export const updateProjectRouteProjectsProjectIdPatchMutation = (options?: Partial<Options<UpdateProjectRouteProjectsProjectIdPatchData>>): UseMutationOptions<UpdateProjectRouteProjectsProjectIdPatchResponse, UpdateProjectRouteProjectsProjectIdPatchError, Options<UpdateProjectRouteProjectsProjectIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateProjectRouteProjectsProjectIdPatchResponse, UpdateProjectRouteProjectsProjectIdPatchError, Options<UpdateProjectRouteProjectsProjectIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateProjectRouteProjectsProjectIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const syncProjectFilesRouteProjectsProjectIdSyncPostQueryKey = (options: Options<SyncProjectFilesRouteProjectsProjectIdSyncPostData>) => createQueryKey('syncProjectFilesRouteProjectsProjectIdSyncPost', options);

export const syncProjectFilesRouteProjectsProjectIdSyncPostOptions = (options: Options<SyncProjectFilesRouteProjectsProjectIdSyncPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await syncProjectFilesRouteProjectsProjectIdSyncPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: syncProjectFilesRouteProjectsProjectIdSyncPostQueryKey(options)
    });
};

export const syncProjectFilesRouteProjectsProjectIdSyncPostMutation = (options?: Partial<Options<SyncProjectFilesRouteProjectsProjectIdSyncPostData>>): UseMutationOptions<SyncProjectFilesRouteProjectsProjectIdSyncPostResponse, SyncProjectFilesRouteProjectsProjectIdSyncPostError, Options<SyncProjectFilesRouteProjectsProjectIdSyncPostData>> => {
    const mutationOptions: UseMutationOptions<SyncProjectFilesRouteProjectsProjectIdSyncPostResponse, SyncProjectFilesRouteProjectsProjectIdSyncPostError, Options<SyncProjectFilesRouteProjectsProjectIdSyncPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await syncProjectFilesRouteProjectsProjectIdSyncPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProjectFilesRouteProjectsProjectIdFilesGetQueryKey = (options: Options<GetProjectFilesRouteProjectsProjectIdFilesGetData>) => createQueryKey('getProjectFilesRouteProjectsProjectIdFilesGet', options);

export const getProjectFilesRouteProjectsProjectIdFilesGetOptions = (options: Options<GetProjectFilesRouteProjectsProjectIdFilesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectFilesRouteProjectsProjectIdFilesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectFilesRouteProjectsProjectIdFilesGetQueryKey(options)
    });
};

export const refreshProjectRouteProjectsProjectIdRefreshPostQueryKey = (options: Options<RefreshProjectRouteProjectsProjectIdRefreshPostData>) => createQueryKey('refreshProjectRouteProjectsProjectIdRefreshPost', options);

export const refreshProjectRouteProjectsProjectIdRefreshPostOptions = (options: Options<RefreshProjectRouteProjectsProjectIdRefreshPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await refreshProjectRouteProjectsProjectIdRefreshPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: refreshProjectRouteProjectsProjectIdRefreshPostQueryKey(options)
    });
};

export const refreshProjectRouteProjectsProjectIdRefreshPostMutation = (options?: Partial<Options<RefreshProjectRouteProjectsProjectIdRefreshPostData>>): UseMutationOptions<RefreshProjectRouteProjectsProjectIdRefreshPostResponse, RefreshProjectRouteProjectsProjectIdRefreshPostError, Options<RefreshProjectRouteProjectsProjectIdRefreshPostData>> => {
    const mutationOptions: UseMutationOptions<RefreshProjectRouteProjectsProjectIdRefreshPostResponse, RefreshProjectRouteProjectsProjectIdRefreshPostError, Options<RefreshProjectRouteProjectsProjectIdRefreshPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await refreshProjectRouteProjectsProjectIdRefreshPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProjectSummaryRouteProjectsProjectIdSummaryGetQueryKey = (options: Options<GetProjectSummaryRouteProjectsProjectIdSummaryGetData>) => createQueryKey('getProjectSummaryRouteProjectsProjectIdSummaryGet', options);

export const getProjectSummaryRouteProjectsProjectIdSummaryGetOptions = (options: Options<GetProjectSummaryRouteProjectsProjectIdSummaryGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectSummaryRouteProjectsProjectIdSummaryGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectSummaryRouteProjectsProjectIdSummaryGetQueryKey(options)
    });
};

export const suggestFilesRouteProjectsProjectIdSuggestFilesPostQueryKey = (options: Options<SuggestFilesRouteProjectsProjectIdSuggestFilesPostData>) => createQueryKey('suggestFilesRouteProjectsProjectIdSuggestFilesPost', options);

export const suggestFilesRouteProjectsProjectIdSuggestFilesPostOptions = (options: Options<SuggestFilesRouteProjectsProjectIdSuggestFilesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await suggestFilesRouteProjectsProjectIdSuggestFilesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: suggestFilesRouteProjectsProjectIdSuggestFilesPostQueryKey(options)
    });
};

export const suggestFilesRouteProjectsProjectIdSuggestFilesPostMutation = (options?: Partial<Options<SuggestFilesRouteProjectsProjectIdSuggestFilesPostData>>): UseMutationOptions<SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponse, SuggestFilesRouteProjectsProjectIdSuggestFilesPostError, Options<SuggestFilesRouteProjectsProjectIdSuggestFilesPostData>> => {
    const mutationOptions: UseMutationOptions<SuggestFilesRouteProjectsProjectIdSuggestFilesPostResponse, SuggestFilesRouteProjectsProjectIdSuggestFilesPostError, Options<SuggestFilesRouteProjectsProjectIdSuggestFilesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await suggestFilesRouteProjectsProjectIdSuggestFilesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const summarizeProjectFilesRouteProjectsProjectIdSummarizePostQueryKey = (options: Options<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData>) => createQueryKey('summarizeProjectFilesRouteProjectsProjectIdSummarizePost', options);

export const summarizeProjectFilesRouteProjectsProjectIdSummarizePostOptions = (options: Options<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await summarizeProjectFilesRouteProjectsProjectIdSummarizePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: summarizeProjectFilesRouteProjectsProjectIdSummarizePostQueryKey(options)
    });
};

export const summarizeProjectFilesRouteProjectsProjectIdSummarizePostMutation = (options?: Partial<Options<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData>>): UseMutationOptions<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponse, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostError, Options<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData>> => {
    const mutationOptions: UseMutationOptions<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostResponse, SummarizeProjectFilesRouteProjectsProjectIdSummarizePostError, Options<SummarizeProjectFilesRouteProjectsProjectIdSummarizePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await summarizeProjectFilesRouteProjectsProjectIdSummarizePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeSummariesRouteProjectsProjectIdRemoveSummariesPostQueryKey = (options: Options<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData>) => createQueryKey('removeSummariesRouteProjectsProjectIdRemoveSummariesPost', options);

export const removeSummariesRouteProjectsProjectIdRemoveSummariesPostOptions = (options: Options<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await removeSummariesRouteProjectsProjectIdRemoveSummariesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: removeSummariesRouteProjectsProjectIdRemoveSummariesPostQueryKey(options)
    });
};

export const removeSummariesRouteProjectsProjectIdRemoveSummariesPostMutation = (options?: Partial<Options<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData>>): UseMutationOptions<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponse, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostError, Options<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData>> => {
    const mutationOptions: UseMutationOptions<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostResponse, RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostError, Options<RemoveSummariesRouteProjectsProjectIdRemoveSummariesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeSummariesRouteProjectsProjectIdRemoveSummariesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const optimizeUserInputRoutePromptOptimizePostQueryKey = (options: Options<OptimizeUserInputRoutePromptOptimizePostData>) => createQueryKey('optimizeUserInputRoutePromptOptimizePost', options);

export const optimizeUserInputRoutePromptOptimizePostOptions = (options: Options<OptimizeUserInputRoutePromptOptimizePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await optimizeUserInputRoutePromptOptimizePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: optimizeUserInputRoutePromptOptimizePostQueryKey(options)
    });
};

export const optimizeUserInputRoutePromptOptimizePostMutation = (options?: Partial<Options<OptimizeUserInputRoutePromptOptimizePostData>>): UseMutationOptions<OptimizeUserInputRoutePromptOptimizePostResponse, OptimizeUserInputRoutePromptOptimizePostError, Options<OptimizeUserInputRoutePromptOptimizePostData>> => {
    const mutationOptions: UseMutationOptions<OptimizeUserInputRoutePromptOptimizePostResponse, OptimizeUserInputRoutePromptOptimizePostError, Options<OptimizeUserInputRoutePromptOptimizePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await optimizeUserInputRoutePromptOptimizePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listProviderKeysApiKeysGetQueryKey = (options?: Options<ListProviderKeysApiKeysGetData>) => createQueryKey('listProviderKeysApiKeysGet', options);

export const listProviderKeysApiKeysGetOptions = (options?: Options<ListProviderKeysApiKeysGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listProviderKeysApiKeysGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listProviderKeysApiKeysGetQueryKey(options)
    });
};

export const createProviderKeyApiKeysPostQueryKey = (options: Options<CreateProviderKeyApiKeysPostData>) => createQueryKey('createProviderKeyApiKeysPost', options);

export const createProviderKeyApiKeysPostOptions = (options: Options<CreateProviderKeyApiKeysPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createProviderKeyApiKeysPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createProviderKeyApiKeysPostQueryKey(options)
    });
};

export const createProviderKeyApiKeysPostMutation = (options?: Partial<Options<CreateProviderKeyApiKeysPostData>>): UseMutationOptions<CreateProviderKeyApiKeysPostResponse, CreateProviderKeyApiKeysPostError, Options<CreateProviderKeyApiKeysPostData>> => {
    const mutationOptions: UseMutationOptions<CreateProviderKeyApiKeysPostResponse, CreateProviderKeyApiKeysPostError, Options<CreateProviderKeyApiKeysPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createProviderKeyApiKeysPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteProviderKeyApiKeysKeyIdDeleteMutation = (options?: Partial<Options<DeleteProviderKeyApiKeysKeyIdDeleteData>>): UseMutationOptions<DeleteProviderKeyApiKeysKeyIdDeleteResponse, DeleteProviderKeyApiKeysKeyIdDeleteError, Options<DeleteProviderKeyApiKeysKeyIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteProviderKeyApiKeysKeyIdDeleteResponse, DeleteProviderKeyApiKeysKeyIdDeleteError, Options<DeleteProviderKeyApiKeysKeyIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProviderKeyApiKeysKeyIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProviderKeyByIdApiKeysKeyIdGetQueryKey = (options: Options<GetProviderKeyByIdApiKeysKeyIdGetData>) => createQueryKey('getProviderKeyByIdApiKeysKeyIdGet', options);

export const getProviderKeyByIdApiKeysKeyIdGetOptions = (options: Options<GetProviderKeyByIdApiKeysKeyIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProviderKeyByIdApiKeysKeyIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProviderKeyByIdApiKeysKeyIdGetQueryKey(options)
    });
};

export const updateProviderKeyApiKeysKeyIdPatchMutation = (options?: Partial<Options<UpdateProviderKeyApiKeysKeyIdPatchData>>): UseMutationOptions<UpdateProviderKeyApiKeysKeyIdPatchResponse, UpdateProviderKeyApiKeysKeyIdPatchError, Options<UpdateProviderKeyApiKeysKeyIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateProviderKeyApiKeysKeyIdPatchResponse, UpdateProviderKeyApiKeysKeyIdPatchError, Options<UpdateProviderKeyApiKeysKeyIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateProviderKeyApiKeysKeyIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createTicketRouteTicketsPostQueryKey = (options: Options<CreateTicketRouteTicketsPostData>) => createQueryKey('createTicketRouteTicketsPost', options);

export const createTicketRouteTicketsPostOptions = (options: Options<CreateTicketRouteTicketsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTicketRouteTicketsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTicketRouteTicketsPostQueryKey(options)
    });
};

export const createTicketRouteTicketsPostMutation = (options?: Partial<Options<CreateTicketRouteTicketsPostData>>): UseMutationOptions<CreateTicketRouteTicketsPostResponse, CreateTicketRouteTicketsPostError, Options<CreateTicketRouteTicketsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateTicketRouteTicketsPostResponse, CreateTicketRouteTicketsPostError, Options<CreateTicketRouteTicketsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTicketRouteTicketsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteTicketRouteTicketsTicketIdDeleteMutation = (options?: Partial<Options<DeleteTicketRouteTicketsTicketIdDeleteData>>): UseMutationOptions<DeleteTicketRouteTicketsTicketIdDeleteResponse, DeleteTicketRouteTicketsTicketIdDeleteError, Options<DeleteTicketRouteTicketsTicketIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteTicketRouteTicketsTicketIdDeleteResponse, DeleteTicketRouteTicketsTicketIdDeleteError, Options<DeleteTicketRouteTicketsTicketIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTicketRouteTicketsTicketIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTicketRouteTicketsTicketIdGetQueryKey = (options: Options<GetTicketRouteTicketsTicketIdGetData>) => createQueryKey('getTicketRouteTicketsTicketIdGet', options);

export const getTicketRouteTicketsTicketIdGetOptions = (options: Options<GetTicketRouteTicketsTicketIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTicketRouteTicketsTicketIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTicketRouteTicketsTicketIdGetQueryKey(options)
    });
};

export const updateTicketRouteTicketsTicketIdPatchMutation = (options?: Partial<Options<UpdateTicketRouteTicketsTicketIdPatchData>>): UseMutationOptions<UpdateTicketRouteTicketsTicketIdPatchResponse, UpdateTicketRouteTicketsTicketIdPatchError, Options<UpdateTicketRouteTicketsTicketIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateTicketRouteTicketsTicketIdPatchResponse, UpdateTicketRouteTicketsTicketIdPatchError, Options<UpdateTicketRouteTicketsTicketIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTicketRouteTicketsTicketIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const linkFilesRouteTicketsTicketIdLinkFilesPostQueryKey = (options: Options<LinkFilesRouteTicketsTicketIdLinkFilesPostData>) => createQueryKey('linkFilesRouteTicketsTicketIdLinkFilesPost', options);

export const linkFilesRouteTicketsTicketIdLinkFilesPostOptions = (options: Options<LinkFilesRouteTicketsTicketIdLinkFilesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await linkFilesRouteTicketsTicketIdLinkFilesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: linkFilesRouteTicketsTicketIdLinkFilesPostQueryKey(options)
    });
};

export const linkFilesRouteTicketsTicketIdLinkFilesPostMutation = (options?: Partial<Options<LinkFilesRouteTicketsTicketIdLinkFilesPostData>>): UseMutationOptions<LinkFilesRouteTicketsTicketIdLinkFilesPostResponse, LinkFilesRouteTicketsTicketIdLinkFilesPostError, Options<LinkFilesRouteTicketsTicketIdLinkFilesPostData>> => {
    const mutationOptions: UseMutationOptions<LinkFilesRouteTicketsTicketIdLinkFilesPostResponse, LinkFilesRouteTicketsTicketIdLinkFilesPostError, Options<LinkFilesRouteTicketsTicketIdLinkFilesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await linkFilesRouteTicketsTicketIdLinkFilesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const suggestTasksRouteTicketsTicketIdSuggestTasksPostQueryKey = (options: Options<SuggestTasksRouteTicketsTicketIdSuggestTasksPostData>) => createQueryKey('suggestTasksRouteTicketsTicketIdSuggestTasksPost', options);

export const suggestTasksRouteTicketsTicketIdSuggestTasksPostOptions = (options: Options<SuggestTasksRouteTicketsTicketIdSuggestTasksPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await suggestTasksRouteTicketsTicketIdSuggestTasksPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: suggestTasksRouteTicketsTicketIdSuggestTasksPostQueryKey(options)
    });
};

export const suggestTasksRouteTicketsTicketIdSuggestTasksPostMutation = (options?: Partial<Options<SuggestTasksRouteTicketsTicketIdSuggestTasksPostData>>): UseMutationOptions<SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponse, SuggestTasksRouteTicketsTicketIdSuggestTasksPostError, Options<SuggestTasksRouteTicketsTicketIdSuggestTasksPostData>> => {
    const mutationOptions: UseMutationOptions<SuggestTasksRouteTicketsTicketIdSuggestTasksPostResponse, SuggestTasksRouteTicketsTicketIdSuggestTasksPostError, Options<SuggestTasksRouteTicketsTicketIdSuggestTasksPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await suggestTasksRouteTicketsTicketIdSuggestTasksPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const suggestFilesRouteTicketsTicketIdSuggestFilesPostQueryKey = (options: Options<SuggestFilesRouteTicketsTicketIdSuggestFilesPostData>) => createQueryKey('suggestFilesRouteTicketsTicketIdSuggestFilesPost', options);

export const suggestFilesRouteTicketsTicketIdSuggestFilesPostOptions = (options: Options<SuggestFilesRouteTicketsTicketIdSuggestFilesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await suggestFilesRouteTicketsTicketIdSuggestFilesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: suggestFilesRouteTicketsTicketIdSuggestFilesPostQueryKey(options)
    });
};

export const suggestFilesRouteTicketsTicketIdSuggestFilesPostMutation = (options?: Partial<Options<SuggestFilesRouteTicketsTicketIdSuggestFilesPostData>>): UseMutationOptions<SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponse, SuggestFilesRouteTicketsTicketIdSuggestFilesPostError, Options<SuggestFilesRouteTicketsTicketIdSuggestFilesPostData>> => {
    const mutationOptions: UseMutationOptions<SuggestFilesRouteTicketsTicketIdSuggestFilesPostResponse, SuggestFilesRouteTicketsTicketIdSuggestFilesPostError, Options<SuggestFilesRouteTicketsTicketIdSuggestFilesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await suggestFilesRouteTicketsTicketIdSuggestFilesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTicketsByProjectRouteProjectsProjectIdTicketsGetQueryKey = (options: Options<ListTicketsByProjectRouteProjectsProjectIdTicketsGetData>) => createQueryKey('listTicketsByProjectRouteProjectsProjectIdTicketsGet', options);

export const listTicketsByProjectRouteProjectsProjectIdTicketsGetOptions = (options: Options<ListTicketsByProjectRouteProjectsProjectIdTicketsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTicketsByProjectRouteProjectsProjectIdTicketsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTicketsByProjectRouteProjectsProjectIdTicketsGetQueryKey(options)
    });
};

export const listTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetQueryKey = (options: Options<ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetData>) => createQueryKey('listTicketsWithCountRouteProjectsProjectIdTicketsWithCountGet', options);

export const listTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetOptions = (options: Options<ListTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTicketsWithCountRouteProjectsProjectIdTicketsWithCountGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTicketsWithCountRouteProjectsProjectIdTicketsWithCountGetQueryKey(options)
    });
};

export const listTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetQueryKey = (options: Options<ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetData>) => createQueryKey('listTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGet', options);

export const listTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetOptions = (options: Options<ListTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTicketsWithTasksRouteProjectsProjectIdTicketsWithTasksGetQueryKey(options)
    });
};

export const getTasksRouteTicketsTicketIdTasksGetQueryKey = (options: Options<GetTasksRouteTicketsTicketIdTasksGetData>) => createQueryKey('getTasksRouteTicketsTicketIdTasksGet', options);

export const getTasksRouteTicketsTicketIdTasksGetOptions = (options: Options<GetTasksRouteTicketsTicketIdTasksGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTasksRouteTicketsTicketIdTasksGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTasksRouteTicketsTicketIdTasksGetQueryKey(options)
    });
};

export const createTaskRouteTicketsTicketIdTasksPostQueryKey = (options: Options<CreateTaskRouteTicketsTicketIdTasksPostData>) => createQueryKey('createTaskRouteTicketsTicketIdTasksPost', options);

export const createTaskRouteTicketsTicketIdTasksPostOptions = (options: Options<CreateTaskRouteTicketsTicketIdTasksPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTaskRouteTicketsTicketIdTasksPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTaskRouteTicketsTicketIdTasksPostQueryKey(options)
    });
};

export const createTaskRouteTicketsTicketIdTasksPostMutation = (options?: Partial<Options<CreateTaskRouteTicketsTicketIdTasksPostData>>): UseMutationOptions<CreateTaskRouteTicketsTicketIdTasksPostResponse, CreateTaskRouteTicketsTicketIdTasksPostError, Options<CreateTaskRouteTicketsTicketIdTasksPostData>> => {
    const mutationOptions: UseMutationOptions<CreateTaskRouteTicketsTicketIdTasksPostResponse, CreateTaskRouteTicketsTicketIdTasksPostError, Options<CreateTaskRouteTicketsTicketIdTasksPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTaskRouteTicketsTicketIdTasksPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteTaskRouteTicketsTicketIdTasksTaskIdDeleteMutation = (options?: Partial<Options<DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteData>>): UseMutationOptions<DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponse, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteError, Options<DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteResponse, DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteError, Options<DeleteTaskRouteTicketsTicketIdTasksTaskIdDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTaskRouteTicketsTicketIdTasksTaskIdDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateTaskRouteTicketsTicketIdTasksTaskIdPatchMutation = (options?: Partial<Options<UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchData>>): UseMutationOptions<UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponse, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchError, Options<UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchData>> => {
    const mutationOptions: UseMutationOptions<UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchResponse, UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchError, Options<UpdateTaskRouteTicketsTicketIdTasksTaskIdPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTaskRouteTicketsTicketIdTasksTaskIdPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const reorderTasksRouteTicketsTicketIdTasksReorderPatchMutation = (options?: Partial<Options<ReorderTasksRouteTicketsTicketIdTasksReorderPatchData>>): UseMutationOptions<ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponse, ReorderTasksRouteTicketsTicketIdTasksReorderPatchError, Options<ReorderTasksRouteTicketsTicketIdTasksReorderPatchData>> => {
    const mutationOptions: UseMutationOptions<ReorderTasksRouteTicketsTicketIdTasksReorderPatchResponse, ReorderTasksRouteTicketsTicketIdTasksReorderPatchError, Options<ReorderTasksRouteTicketsTicketIdTasksReorderPatchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await reorderTasksRouteTicketsTicketIdTasksReorderPatch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostQueryKey = (options: Options<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData>) => createQueryKey('autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPost', options);

export const autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostOptions = (options: Options<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostQueryKey(options)
    });
};

export const autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostMutation = (options?: Partial<Options<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData>>): UseMutationOptions<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponse, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostError, Options<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData>> => {
    const mutationOptions: UseMutationOptions<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostResponse, AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostError, Options<AutoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await autoGenerateTasksRouteTicketsTicketIdAutoGenerateTasksPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTasksForTicketsRouteTicketsBulkTasksGetQueryKey = (options: Options<GetTasksForTicketsRouteTicketsBulkTasksGetData>) => createQueryKey('getTasksForTicketsRouteTicketsBulkTasksGet', options);

export const getTasksForTicketsRouteTicketsBulkTasksGetOptions = (options: Options<GetTasksForTicketsRouteTicketsBulkTasksGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTasksForTicketsRouteTicketsBulkTasksGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTasksForTicketsRouteTicketsBulkTasksGetQueryKey(options)
    });
};

export const streamGenerateTextEndpointApiGenAiStreamPostQueryKey = (options: Options<StreamGenerateTextEndpointApiGenAiStreamPostData>) => createQueryKey('streamGenerateTextEndpointApiGenAiStreamPost', options);

export const streamGenerateTextEndpointApiGenAiStreamPostOptions = (options: Options<StreamGenerateTextEndpointApiGenAiStreamPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await streamGenerateTextEndpointApiGenAiStreamPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: streamGenerateTextEndpointApiGenAiStreamPostQueryKey(options)
    });
};

export const streamGenerateTextEndpointApiGenAiStreamPostMutation = (options?: Partial<Options<StreamGenerateTextEndpointApiGenAiStreamPostData>>): UseMutationOptions<unknown, StreamGenerateTextEndpointApiGenAiStreamPostError, Options<StreamGenerateTextEndpointApiGenAiStreamPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, StreamGenerateTextEndpointApiGenAiStreamPostError, Options<StreamGenerateTextEndpointApiGenAiStreamPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await streamGenerateTextEndpointApiGenAiStreamPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const generateTextEndpointApiGenAiTextPostQueryKey = (options: Options<GenerateTextEndpointApiGenAiTextPostData>) => createQueryKey('generateTextEndpointApiGenAiTextPost', options);

export const generateTextEndpointApiGenAiTextPostOptions = (options: Options<GenerateTextEndpointApiGenAiTextPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await generateTextEndpointApiGenAiTextPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: generateTextEndpointApiGenAiTextPostQueryKey(options)
    });
};

export const generateTextEndpointApiGenAiTextPostMutation = (options?: Partial<Options<GenerateTextEndpointApiGenAiTextPostData>>): UseMutationOptions<GenerateTextEndpointApiGenAiTextPostResponse, GenerateTextEndpointApiGenAiTextPostError, Options<GenerateTextEndpointApiGenAiTextPostData>> => {
    const mutationOptions: UseMutationOptions<GenerateTextEndpointApiGenAiTextPostResponse, GenerateTextEndpointApiGenAiTextPostError, Options<GenerateTextEndpointApiGenAiTextPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await generateTextEndpointApiGenAiTextPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const generateStructuredEndpointApiGenAiStructuredPostQueryKey = (options: Options<GenerateStructuredEndpointApiGenAiStructuredPostData>) => createQueryKey('generateStructuredEndpointApiGenAiStructuredPost', options);

export const generateStructuredEndpointApiGenAiStructuredPostOptions = (options: Options<GenerateStructuredEndpointApiGenAiStructuredPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await generateStructuredEndpointApiGenAiStructuredPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: generateStructuredEndpointApiGenAiStructuredPostQueryKey(options)
    });
};

export const generateStructuredEndpointApiGenAiStructuredPostMutation = (options?: Partial<Options<GenerateStructuredEndpointApiGenAiStructuredPostData>>): UseMutationOptions<GenerateStructuredEndpointApiGenAiStructuredPostResponse, GenerateStructuredEndpointApiGenAiStructuredPostError, Options<GenerateStructuredEndpointApiGenAiStructuredPostData>> => {
    const mutationOptions: UseMutationOptions<GenerateStructuredEndpointApiGenAiStructuredPostResponse, GenerateStructuredEndpointApiGenAiStructuredPostError, Options<GenerateStructuredEndpointApiGenAiStructuredPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await generateStructuredEndpointApiGenAiStructuredPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getModelsEndpointApiModelsGetQueryKey = (options: Options<GetModelsEndpointApiModelsGetData>) => createQueryKey('getModelsEndpointApiModelsGet', options);

export const getModelsEndpointApiModelsGetOptions = (options: Options<GetModelsEndpointApiModelsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getModelsEndpointApiModelsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getModelsEndpointApiModelsGetQueryKey(options)
    });
};

export const postAiGenerateTextEndpointApiAiGenerateTextPostQueryKey = (options: Options<PostAiGenerateTextEndpointApiAiGenerateTextPostData>) => createQueryKey('postAiGenerateTextEndpointApiAiGenerateTextPost', options);

export const postAiGenerateTextEndpointApiAiGenerateTextPostOptions = (options: Options<PostAiGenerateTextEndpointApiAiGenerateTextPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAiGenerateTextEndpointApiAiGenerateTextPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAiGenerateTextEndpointApiAiGenerateTextPostQueryKey(options)
    });
};

export const postAiGenerateTextEndpointApiAiGenerateTextPostMutation = (options?: Partial<Options<PostAiGenerateTextEndpointApiAiGenerateTextPostData>>): UseMutationOptions<PostAiGenerateTextEndpointApiAiGenerateTextPostResponse, PostAiGenerateTextEndpointApiAiGenerateTextPostError, Options<PostAiGenerateTextEndpointApiAiGenerateTextPostData>> => {
    const mutationOptions: UseMutationOptions<PostAiGenerateTextEndpointApiAiGenerateTextPostResponse, PostAiGenerateTextEndpointApiAiGenerateTextPostError, Options<PostAiGenerateTextEndpointApiAiGenerateTextPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAiGenerateTextEndpointApiAiGenerateTextPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const generateAiFileChangeApiProjectsProjectIdAiFileChangesPostQueryKey = (options: Options<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData>) => createQueryKey('generateAiFileChangeApiProjectsProjectIdAiFileChangesPost', options);

export const generateAiFileChangeApiProjectsProjectIdAiFileChangesPostOptions = (options: Options<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await generateAiFileChangeApiProjectsProjectIdAiFileChangesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: generateAiFileChangeApiProjectsProjectIdAiFileChangesPostQueryKey(options)
    });
};

export const generateAiFileChangeApiProjectsProjectIdAiFileChangesPostMutation = (options?: Partial<Options<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData>>): UseMutationOptions<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponse, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostError, Options<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData>> => {
    const mutationOptions: UseMutationOptions<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostResponse, GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostError, Options<GenerateAiFileChangeApiProjectsProjectIdAiFileChangesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await generateAiFileChangeApiProjectsProjectIdAiFileChangesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetQueryKey = (options: Options<GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetData>) => createQueryKey('getAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGet', options);

export const getAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetOptions = (options: Options<GetAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAiFileChangeDetailsApiProjectsProjectIdAiFileChangesAiFileChangeIdGetQueryKey(options)
    });
};

export const confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostQueryKey = (options: Options<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData>) => createQueryKey('confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPost', options);

export const confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostOptions = (options: Options<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostQueryKey(options)
    });
};

export const confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostMutation = (options?: Partial<Options<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData>>): UseMutationOptions<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponse, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostError, Options<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData>> => {
    const mutationOptions: UseMutationOptions<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostResponse, ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostError, Options<ConfirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await confirmAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdConfirmPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostQueryKey = (options: Options<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData>) => createQueryKey('rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPost', options);

export const rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostOptions = (options: Options<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostQueryKey(options)
    });
};

export const rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostMutation = (options?: Partial<Options<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData>>): UseMutationOptions<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponse, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostError, Options<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData>> => {
    const mutationOptions: UseMutationOptions<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostResponse, RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostError, Options<RejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await rejectAiFileChangeApiProjectsProjectIdAiFileChangesAiFileChangeIdRejectPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};