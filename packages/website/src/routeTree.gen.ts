/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LocalFirstRouteImport } from './routes/local-first'
import { Route as IntegrationsRouteImport } from './routes/integrations'
import { Route as DownloadsRouteImport } from './routes/downloads'
import { Route as DocsRouteImport } from './routes/docs'
import { Route as CommunityRouteImport } from './routes/community'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as IntegrationsIndexRouteImport } from './routes/integrations.index'
import { Route as DocsIndexRouteImport } from './routes/docs.index'
import { Route as IntegrationsVscodeRouteImport } from './routes/integrations.vscode'
import { Route as IntegrationsVideosRouteImport } from './routes/integrations.videos'
import { Route as IntegrationsTroubleshootingRouteImport } from './routes/integrations.troubleshooting'
import { Route as IntegrationsSetupRouteImport } from './routes/integrations.setup'
import { Route as IntegrationsExamplesRouteImport } from './routes/integrations.examples'
import { Route as IntegrationsCursorRouteImport } from './routes/integrations.cursor'
import { Route as IntegrationsConfigRouteImport } from './routes/integrations.config'
import { Route as IntegrationsCompatibilityRouteImport } from './routes/integrations.compatibility'
import { Route as IntegrationsClaudeDesktopRouteImport } from './routes/integrations.claude-desktop'
import { Route as IntegrationsClaudeCodeRouteImport } from './routes/integrations.claude-code'
import { Route as DocsUiOverviewRouteImport } from './routes/docs.ui-overview'
import { Route as DocsMcpToolsRouteImport } from './routes/docs.mcp-tools'
import { Route as DocsGuidesRouteImport } from './routes/docs.guides'
import { Route as DocsGettingStartedRouteImport } from './routes/docs.getting-started'
import { Route as DocsDownloadInstallationRouteImport } from './routes/docs.download-installation'
import { Route as DocsApiRouteImport } from './routes/docs.api'
import { Route as DocsHowToTicketsTasksRouteImport } from './routes/docs.how-to.tickets-tasks'
import { Route as DocsHowToMcpBestPracticesRouteImport } from './routes/docs.how-to.mcp-best-practices'
import { Route as DocsHowToFirstProjectRouteImport } from './routes/docs.how-to.first-project'
import { Route as DocsHowToBuildingContextRouteImport } from './routes/docs.how-to.building-context'

const LocalFirstRoute = LocalFirstRouteImport.update({
  id: '/local-first',
  path: '/local-first',
  getParentRoute: () => rootRouteImport,
} as any)
const IntegrationsRoute = IntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => rootRouteImport,
} as any)
const DownloadsRoute = DownloadsRouteImport.update({
  id: '/downloads',
  path: '/downloads',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityRoute = CommunityRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const IntegrationsIndexRoute = IntegrationsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IntegrationsRoute,
} as any)
const DocsIndexRoute = DocsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRoute,
} as any)
const IntegrationsVscodeRoute = IntegrationsVscodeRouteImport.update({
  id: '/vscode',
  path: '/vscode',
  getParentRoute: () => IntegrationsRoute,
} as any)
const IntegrationsVideosRoute = IntegrationsVideosRouteImport.update({
  id: '/videos',
  path: '/videos',
  getParentRoute: () => IntegrationsRoute,
} as any)
const IntegrationsTroubleshootingRoute =
  IntegrationsTroubleshootingRouteImport.update({
    id: '/troubleshooting',
    path: '/troubleshooting',
    getParentRoute: () => IntegrationsRoute,
  } as any)
const IntegrationsSetupRoute = IntegrationsSetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => IntegrationsRoute,
} as any)
const IntegrationsExamplesRoute = IntegrationsExamplesRouteImport.update({
  id: '/examples',
  path: '/examples',
  getParentRoute: () => IntegrationsRoute,
} as any)
const IntegrationsCursorRoute = IntegrationsCursorRouteImport.update({
  id: '/cursor',
  path: '/cursor',
  getParentRoute: () => IntegrationsRoute,
} as any)
const IntegrationsConfigRoute = IntegrationsConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => IntegrationsRoute,
} as any)
const IntegrationsCompatibilityRoute =
  IntegrationsCompatibilityRouteImport.update({
    id: '/compatibility',
    path: '/compatibility',
    getParentRoute: () => IntegrationsRoute,
  } as any)
const IntegrationsClaudeDesktopRoute =
  IntegrationsClaudeDesktopRouteImport.update({
    id: '/claude-desktop',
    path: '/claude-desktop',
    getParentRoute: () => IntegrationsRoute,
  } as any)
const IntegrationsClaudeCodeRoute = IntegrationsClaudeCodeRouteImport.update({
  id: '/claude-code',
  path: '/claude-code',
  getParentRoute: () => IntegrationsRoute,
} as any)
const DocsUiOverviewRoute = DocsUiOverviewRouteImport.update({
  id: '/ui-overview',
  path: '/ui-overview',
  getParentRoute: () => DocsRoute,
} as any)
const DocsMcpToolsRoute = DocsMcpToolsRouteImport.update({
  id: '/mcp-tools',
  path: '/mcp-tools',
  getParentRoute: () => DocsRoute,
} as any)
const DocsGuidesRoute = DocsGuidesRouteImport.update({
  id: '/guides',
  path: '/guides',
  getParentRoute: () => DocsRoute,
} as any)
const DocsGettingStartedRoute = DocsGettingStartedRouteImport.update({
  id: '/getting-started',
  path: '/getting-started',
  getParentRoute: () => DocsRoute,
} as any)
const DocsDownloadInstallationRoute =
  DocsDownloadInstallationRouteImport.update({
    id: '/download-installation',
    path: '/download-installation',
    getParentRoute: () => DocsRoute,
  } as any)
const DocsApiRoute = DocsApiRouteImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => DocsRoute,
} as any)
const DocsHowToTicketsTasksRoute = DocsHowToTicketsTasksRouteImport.update({
  id: '/how-to/tickets-tasks',
  path: '/how-to/tickets-tasks',
  getParentRoute: () => DocsRoute,
} as any)
const DocsHowToMcpBestPracticesRoute =
  DocsHowToMcpBestPracticesRouteImport.update({
    id: '/how-to/mcp-best-practices',
    path: '/how-to/mcp-best-practices',
    getParentRoute: () => DocsRoute,
  } as any)
const DocsHowToFirstProjectRoute = DocsHowToFirstProjectRouteImport.update({
  id: '/how-to/first-project',
  path: '/how-to/first-project',
  getParentRoute: () => DocsRoute,
} as any)
const DocsHowToBuildingContextRoute =
  DocsHowToBuildingContextRouteImport.update({
    id: '/how-to/building-context',
    path: '/how-to/building-context',
    getParentRoute: () => DocsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/community': typeof CommunityRoute
  '/docs': typeof DocsRouteWithChildren
  '/downloads': typeof DownloadsRoute
  '/integrations': typeof IntegrationsRouteWithChildren
  '/local-first': typeof LocalFirstRoute
  '/docs/api': typeof DocsApiRoute
  '/docs/download-installation': typeof DocsDownloadInstallationRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/guides': typeof DocsGuidesRoute
  '/docs/mcp-tools': typeof DocsMcpToolsRoute
  '/docs/ui-overview': typeof DocsUiOverviewRoute
  '/integrations/claude-code': typeof IntegrationsClaudeCodeRoute
  '/integrations/claude-desktop': typeof IntegrationsClaudeDesktopRoute
  '/integrations/compatibility': typeof IntegrationsCompatibilityRoute
  '/integrations/config': typeof IntegrationsConfigRoute
  '/integrations/cursor': typeof IntegrationsCursorRoute
  '/integrations/examples': typeof IntegrationsExamplesRoute
  '/integrations/setup': typeof IntegrationsSetupRoute
  '/integrations/troubleshooting': typeof IntegrationsTroubleshootingRoute
  '/integrations/videos': typeof IntegrationsVideosRoute
  '/integrations/vscode': typeof IntegrationsVscodeRoute
  '/docs/': typeof DocsIndexRoute
  '/integrations/': typeof IntegrationsIndexRoute
  '/docs/how-to/building-context': typeof DocsHowToBuildingContextRoute
  '/docs/how-to/first-project': typeof DocsHowToFirstProjectRoute
  '/docs/how-to/mcp-best-practices': typeof DocsHowToMcpBestPracticesRoute
  '/docs/how-to/tickets-tasks': typeof DocsHowToTicketsTasksRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/community': typeof CommunityRoute
  '/downloads': typeof DownloadsRoute
  '/local-first': typeof LocalFirstRoute
  '/docs/api': typeof DocsApiRoute
  '/docs/download-installation': typeof DocsDownloadInstallationRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/guides': typeof DocsGuidesRoute
  '/docs/mcp-tools': typeof DocsMcpToolsRoute
  '/docs/ui-overview': typeof DocsUiOverviewRoute
  '/integrations/claude-code': typeof IntegrationsClaudeCodeRoute
  '/integrations/claude-desktop': typeof IntegrationsClaudeDesktopRoute
  '/integrations/compatibility': typeof IntegrationsCompatibilityRoute
  '/integrations/config': typeof IntegrationsConfigRoute
  '/integrations/cursor': typeof IntegrationsCursorRoute
  '/integrations/examples': typeof IntegrationsExamplesRoute
  '/integrations/setup': typeof IntegrationsSetupRoute
  '/integrations/troubleshooting': typeof IntegrationsTroubleshootingRoute
  '/integrations/videos': typeof IntegrationsVideosRoute
  '/integrations/vscode': typeof IntegrationsVscodeRoute
  '/docs': typeof DocsIndexRoute
  '/integrations': typeof IntegrationsIndexRoute
  '/docs/how-to/building-context': typeof DocsHowToBuildingContextRoute
  '/docs/how-to/first-project': typeof DocsHowToFirstProjectRoute
  '/docs/how-to/mcp-best-practices': typeof DocsHowToMcpBestPracticesRoute
  '/docs/how-to/tickets-tasks': typeof DocsHowToTicketsTasksRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/community': typeof CommunityRoute
  '/docs': typeof DocsRouteWithChildren
  '/downloads': typeof DownloadsRoute
  '/integrations': typeof IntegrationsRouteWithChildren
  '/local-first': typeof LocalFirstRoute
  '/docs/api': typeof DocsApiRoute
  '/docs/download-installation': typeof DocsDownloadInstallationRoute
  '/docs/getting-started': typeof DocsGettingStartedRoute
  '/docs/guides': typeof DocsGuidesRoute
  '/docs/mcp-tools': typeof DocsMcpToolsRoute
  '/docs/ui-overview': typeof DocsUiOverviewRoute
  '/integrations/claude-code': typeof IntegrationsClaudeCodeRoute
  '/integrations/claude-desktop': typeof IntegrationsClaudeDesktopRoute
  '/integrations/compatibility': typeof IntegrationsCompatibilityRoute
  '/integrations/config': typeof IntegrationsConfigRoute
  '/integrations/cursor': typeof IntegrationsCursorRoute
  '/integrations/examples': typeof IntegrationsExamplesRoute
  '/integrations/setup': typeof IntegrationsSetupRoute
  '/integrations/troubleshooting': typeof IntegrationsTroubleshootingRoute
  '/integrations/videos': typeof IntegrationsVideosRoute
  '/integrations/vscode': typeof IntegrationsVscodeRoute
  '/docs/': typeof DocsIndexRoute
  '/integrations/': typeof IntegrationsIndexRoute
  '/docs/how-to/building-context': typeof DocsHowToBuildingContextRoute
  '/docs/how-to/first-project': typeof DocsHowToFirstProjectRoute
  '/docs/how-to/mcp-best-practices': typeof DocsHowToMcpBestPracticesRoute
  '/docs/how-to/tickets-tasks': typeof DocsHowToTicketsTasksRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/community'
    | '/docs'
    | '/downloads'
    | '/integrations'
    | '/local-first'
    | '/docs/api'
    | '/docs/download-installation'
    | '/docs/getting-started'
    | '/docs/guides'
    | '/docs/mcp-tools'
    | '/docs/ui-overview'
    | '/integrations/claude-code'
    | '/integrations/claude-desktop'
    | '/integrations/compatibility'
    | '/integrations/config'
    | '/integrations/cursor'
    | '/integrations/examples'
    | '/integrations/setup'
    | '/integrations/troubleshooting'
    | '/integrations/videos'
    | '/integrations/vscode'
    | '/docs/'
    | '/integrations/'
    | '/docs/how-to/building-context'
    | '/docs/how-to/first-project'
    | '/docs/how-to/mcp-best-practices'
    | '/docs/how-to/tickets-tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/community'
    | '/downloads'
    | '/local-first'
    | '/docs/api'
    | '/docs/download-installation'
    | '/docs/getting-started'
    | '/docs/guides'
    | '/docs/mcp-tools'
    | '/docs/ui-overview'
    | '/integrations/claude-code'
    | '/integrations/claude-desktop'
    | '/integrations/compatibility'
    | '/integrations/config'
    | '/integrations/cursor'
    | '/integrations/examples'
    | '/integrations/setup'
    | '/integrations/troubleshooting'
    | '/integrations/videos'
    | '/integrations/vscode'
    | '/docs'
    | '/integrations'
    | '/docs/how-to/building-context'
    | '/docs/how-to/first-project'
    | '/docs/how-to/mcp-best-practices'
    | '/docs/how-to/tickets-tasks'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/community'
    | '/docs'
    | '/downloads'
    | '/integrations'
    | '/local-first'
    | '/docs/api'
    | '/docs/download-installation'
    | '/docs/getting-started'
    | '/docs/guides'
    | '/docs/mcp-tools'
    | '/docs/ui-overview'
    | '/integrations/claude-code'
    | '/integrations/claude-desktop'
    | '/integrations/compatibility'
    | '/integrations/config'
    | '/integrations/cursor'
    | '/integrations/examples'
    | '/integrations/setup'
    | '/integrations/troubleshooting'
    | '/integrations/videos'
    | '/integrations/vscode'
    | '/docs/'
    | '/integrations/'
    | '/docs/how-to/building-context'
    | '/docs/how-to/first-project'
    | '/docs/how-to/mcp-best-practices'
    | '/docs/how-to/tickets-tasks'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CommunityRoute: typeof CommunityRoute
  DocsRoute: typeof DocsRouteWithChildren
  DownloadsRoute: typeof DownloadsRoute
  IntegrationsRoute: typeof IntegrationsRouteWithChildren
  LocalFirstRoute: typeof LocalFirstRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/local-first': {
      id: '/local-first'
      path: '/local-first'
      fullPath: '/local-first'
      preLoaderRoute: typeof LocalFirstRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/integrations': {
      id: '/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof IntegrationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/downloads': {
      id: '/downloads'
      path: '/downloads'
      fullPath: '/downloads'
      preLoaderRoute: typeof DownloadsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community': {
      id: '/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/integrations/': {
      id: '/integrations/'
      path: '/'
      fullPath: '/integrations/'
      preLoaderRoute: typeof IntegrationsIndexRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsIndexRouteImport
      parentRoute: typeof DocsRoute
    }
    '/integrations/vscode': {
      id: '/integrations/vscode'
      path: '/vscode'
      fullPath: '/integrations/vscode'
      preLoaderRoute: typeof IntegrationsVscodeRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/videos': {
      id: '/integrations/videos'
      path: '/videos'
      fullPath: '/integrations/videos'
      preLoaderRoute: typeof IntegrationsVideosRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/troubleshooting': {
      id: '/integrations/troubleshooting'
      path: '/troubleshooting'
      fullPath: '/integrations/troubleshooting'
      preLoaderRoute: typeof IntegrationsTroubleshootingRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/setup': {
      id: '/integrations/setup'
      path: '/setup'
      fullPath: '/integrations/setup'
      preLoaderRoute: typeof IntegrationsSetupRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/examples': {
      id: '/integrations/examples'
      path: '/examples'
      fullPath: '/integrations/examples'
      preLoaderRoute: typeof IntegrationsExamplesRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/cursor': {
      id: '/integrations/cursor'
      path: '/cursor'
      fullPath: '/integrations/cursor'
      preLoaderRoute: typeof IntegrationsCursorRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/config': {
      id: '/integrations/config'
      path: '/config'
      fullPath: '/integrations/config'
      preLoaderRoute: typeof IntegrationsConfigRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/compatibility': {
      id: '/integrations/compatibility'
      path: '/compatibility'
      fullPath: '/integrations/compatibility'
      preLoaderRoute: typeof IntegrationsCompatibilityRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/claude-desktop': {
      id: '/integrations/claude-desktop'
      path: '/claude-desktop'
      fullPath: '/integrations/claude-desktop'
      preLoaderRoute: typeof IntegrationsClaudeDesktopRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/integrations/claude-code': {
      id: '/integrations/claude-code'
      path: '/claude-code'
      fullPath: '/integrations/claude-code'
      preLoaderRoute: typeof IntegrationsClaudeCodeRouteImport
      parentRoute: typeof IntegrationsRoute
    }
    '/docs/ui-overview': {
      id: '/docs/ui-overview'
      path: '/ui-overview'
      fullPath: '/docs/ui-overview'
      preLoaderRoute: typeof DocsUiOverviewRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/mcp-tools': {
      id: '/docs/mcp-tools'
      path: '/mcp-tools'
      fullPath: '/docs/mcp-tools'
      preLoaderRoute: typeof DocsMcpToolsRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/guides': {
      id: '/docs/guides'
      path: '/guides'
      fullPath: '/docs/guides'
      preLoaderRoute: typeof DocsGuidesRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/getting-started': {
      id: '/docs/getting-started'
      path: '/getting-started'
      fullPath: '/docs/getting-started'
      preLoaderRoute: typeof DocsGettingStartedRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/download-installation': {
      id: '/docs/download-installation'
      path: '/download-installation'
      fullPath: '/docs/download-installation'
      preLoaderRoute: typeof DocsDownloadInstallationRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/api': {
      id: '/docs/api'
      path: '/api'
      fullPath: '/docs/api'
      preLoaderRoute: typeof DocsApiRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/how-to/tickets-tasks': {
      id: '/docs/how-to/tickets-tasks'
      path: '/how-to/tickets-tasks'
      fullPath: '/docs/how-to/tickets-tasks'
      preLoaderRoute: typeof DocsHowToTicketsTasksRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/how-to/mcp-best-practices': {
      id: '/docs/how-to/mcp-best-practices'
      path: '/how-to/mcp-best-practices'
      fullPath: '/docs/how-to/mcp-best-practices'
      preLoaderRoute: typeof DocsHowToMcpBestPracticesRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/how-to/first-project': {
      id: '/docs/how-to/first-project'
      path: '/how-to/first-project'
      fullPath: '/docs/how-to/first-project'
      preLoaderRoute: typeof DocsHowToFirstProjectRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/how-to/building-context': {
      id: '/docs/how-to/building-context'
      path: '/how-to/building-context'
      fullPath: '/docs/how-to/building-context'
      preLoaderRoute: typeof DocsHowToBuildingContextRouteImport
      parentRoute: typeof DocsRoute
    }
  }
}

interface DocsRouteChildren {
  DocsApiRoute: typeof DocsApiRoute
  DocsDownloadInstallationRoute: typeof DocsDownloadInstallationRoute
  DocsGettingStartedRoute: typeof DocsGettingStartedRoute
  DocsGuidesRoute: typeof DocsGuidesRoute
  DocsMcpToolsRoute: typeof DocsMcpToolsRoute
  DocsUiOverviewRoute: typeof DocsUiOverviewRoute
  DocsIndexRoute: typeof DocsIndexRoute
  DocsHowToBuildingContextRoute: typeof DocsHowToBuildingContextRoute
  DocsHowToFirstProjectRoute: typeof DocsHowToFirstProjectRoute
  DocsHowToMcpBestPracticesRoute: typeof DocsHowToMcpBestPracticesRoute
  DocsHowToTicketsTasksRoute: typeof DocsHowToTicketsTasksRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsApiRoute: DocsApiRoute,
  DocsDownloadInstallationRoute: DocsDownloadInstallationRoute,
  DocsGettingStartedRoute: DocsGettingStartedRoute,
  DocsGuidesRoute: DocsGuidesRoute,
  DocsMcpToolsRoute: DocsMcpToolsRoute,
  DocsUiOverviewRoute: DocsUiOverviewRoute,
  DocsIndexRoute: DocsIndexRoute,
  DocsHowToBuildingContextRoute: DocsHowToBuildingContextRoute,
  DocsHowToFirstProjectRoute: DocsHowToFirstProjectRoute,
  DocsHowToMcpBestPracticesRoute: DocsHowToMcpBestPracticesRoute,
  DocsHowToTicketsTasksRoute: DocsHowToTicketsTasksRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

interface IntegrationsRouteChildren {
  IntegrationsClaudeCodeRoute: typeof IntegrationsClaudeCodeRoute
  IntegrationsClaudeDesktopRoute: typeof IntegrationsClaudeDesktopRoute
  IntegrationsCompatibilityRoute: typeof IntegrationsCompatibilityRoute
  IntegrationsConfigRoute: typeof IntegrationsConfigRoute
  IntegrationsCursorRoute: typeof IntegrationsCursorRoute
  IntegrationsExamplesRoute: typeof IntegrationsExamplesRoute
  IntegrationsSetupRoute: typeof IntegrationsSetupRoute
  IntegrationsTroubleshootingRoute: typeof IntegrationsTroubleshootingRoute
  IntegrationsVideosRoute: typeof IntegrationsVideosRoute
  IntegrationsVscodeRoute: typeof IntegrationsVscodeRoute
  IntegrationsIndexRoute: typeof IntegrationsIndexRoute
}

const IntegrationsRouteChildren: IntegrationsRouteChildren = {
  IntegrationsClaudeCodeRoute: IntegrationsClaudeCodeRoute,
  IntegrationsClaudeDesktopRoute: IntegrationsClaudeDesktopRoute,
  IntegrationsCompatibilityRoute: IntegrationsCompatibilityRoute,
  IntegrationsConfigRoute: IntegrationsConfigRoute,
  IntegrationsCursorRoute: IntegrationsCursorRoute,
  IntegrationsExamplesRoute: IntegrationsExamplesRoute,
  IntegrationsSetupRoute: IntegrationsSetupRoute,
  IntegrationsTroubleshootingRoute: IntegrationsTroubleshootingRoute,
  IntegrationsVideosRoute: IntegrationsVideosRoute,
  IntegrationsVscodeRoute: IntegrationsVscodeRoute,
  IntegrationsIndexRoute: IntegrationsIndexRoute,
}

const IntegrationsRouteWithChildren = IntegrationsRoute._addFileChildren(
  IntegrationsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CommunityRoute: CommunityRoute,
  DocsRoute: DocsRouteWithChildren,
  DownloadsRoute: DownloadsRoute,
  IntegrationsRoute: IntegrationsRouteWithChildren,
  LocalFirstRoute: LocalFirstRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
