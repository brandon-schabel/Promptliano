/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all projects */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new project and sync its files */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateProjectRequestBody"];
                };
            };
            responses: {
                /** @description Project created and initial sync started */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                /** @description Project created, but post-creation steps encountered issues */
                207: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponseMultiStatus"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific project by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a project and its associated data */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a project's details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateProjectRequestBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/projects/{id}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search project files (AST-grep by default) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        query: string;
                        /**
                         * @default ast
                         * @enum {string}
                         */
                        searchType?: "ast" | "exact" | "fuzzy" | "regex" | "semantic";
                        fileTypes?: string[];
                        limit?: number;
                        offset?: number;
                        includeContext?: boolean;
                        contextLines?: number;
                        caseSensitive?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                results: {
                                    file: components["schemas"]["File"];
                                    score: number;
                                    matches: {
                                        line: number;
                                        column: number;
                                        text: string;
                                        context?: string;
                                    }[];
                                    snippet?: string;
                                }[];
                                stats: {
                                    totalResults: number;
                                    searchTime: number;
                                    cached: boolean;
                                    indexCoverage: number;
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Manually trigger a full file sync for a project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/sync-stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Trigger a file sync with real-time progress updates via SSE */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sync progress stream */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of files associated with a project */
        get: {
            parameters: {
                query?: {
                    includeAllVersions?: boolean | null;
                    /** @description Maximum number of files to return */
                    limit?: number;
                    /** @description Number of files to skip */
                    offset?: number | null;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["File"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/files/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get project files metadata without content (for performance) */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of files to return */
                    limit?: number;
                    /** @description Number of files to skip */
                    offset?: number | null;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                projectId: number;
                                name: string;
                                path: string;
                                extension: string | null;
                                size: number | null;
                                lastModified: number | null;
                                contentType: string | null;
                                meta: string | null;
                                checksum: string | null;
                                imports: string | number | boolean | null | {
                                    [key: string]: unknown;
                                } | unknown[];
                                exports: string | number | boolean | null | {
                                    [key: string]: unknown;
                                } | unknown[];
                                isRelevant: boolean | null;
                                relevanceScore: number | null;
                                createdAt: number;
                                updatedAt: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/files/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update content of multiple files in a project (creates new versions) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        updates: {
                            fileId: number;
                            content: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["File"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/files/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the content of a specific file (creates new version) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                    fileId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        content: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["File"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh project files (sync) optionally limited to a folder */
        post: {
            parameters: {
                query?: {
                    /** @description Optional folder path to limit the refresh scope */
                    folder?: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["File"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/suggest-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Suggest relevant files based on user input and project context */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SuggestFilesRequestBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuggestFilesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get comprehensive statistics for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                fileStats: {
                                    totalFiles: number;
                                    totalSize: number;
                                    filesByType: {
                                        [key: string]: number;
                                    };
                                    sizeByType: {
                                        [key: string]: number;
                                    };
                                    filesByCategory: {
                                        source: number;
                                        tests: number;
                                        docs: number;
                                        config: number;
                                        other: number;
                                    };
                                };
                                ticketStats: {
                                    totalTickets: number;
                                    ticketsByStatus: {
                                        open: number;
                                        in_progress: number;
                                        closed: number;
                                    };
                                    ticketsByPriority: {
                                        low: number;
                                        normal: number;
                                        high: number;
                                    };
                                    averageTasksPerTicket: number;
                                };
                                taskStats: {
                                    totalTasks: number;
                                    completedTasks: number;
                                    completionRate: number;
                                    tasksByTicket: {
                                        ticketId: number;
                                        ticketTitle: string;
                                        totalTasks: number;
                                        completedTasks: number;
                                    }[];
                                };
                                promptStats: {
                                    totalPrompts: number;
                                    totalTokens: number;
                                    averagePromptLength: number;
                                    promptTypes: {
                                        [key: string]: number;
                                    };
                                };
                                activityStats: {
                                    recentUpdates: number;
                                    lastUpdateTime: number;
                                    creationTrend: {
                                        date: string;
                                        files: number;
                                        tickets: number;
                                        tasks: number;
                                    }[];
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new ticket */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateTicketBody"];
                };
            };
            responses: {
                /** @description Ticket created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a ticket by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a ticket */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a ticket */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateTicketBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/tickets/{ticketId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete a ticket and mark all tasks as done */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CompleteTicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/link-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Link files to a ticket */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LinkFilesBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LinkedFilesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/suggest-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get AI suggestions for relevant files */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SuggestFilesBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuggestFilesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/suggest-files/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stream progressive AI suggestions for relevant files */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SuggestFilesBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/suggest-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get AI suggestions for tasks */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SuggestTasksBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuggestedTasksResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all tickets for a project */
        get: {
            parameters: {
                query?: {
                    /** @description Filter tickets by status */
                    status?: string;
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/tickets-with-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tickets with task counts */
        get: {
            parameters: {
                query?: {
                    /** @description Filter tickets by status */
                    status?: string;
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketWithTaskCountListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/tickets-with-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tickets with their tasks */
        get: {
            parameters: {
                query?: {
                    /** @description Filter tickets by status */
                    status?: string;
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketWithTasksListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tasks for a ticket */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new task for a ticket */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateTaskBody"];
                };
            };
            responses: {
                /** @description Task created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a task */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                    /** @description Task identifier */
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a task */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                    /** @description Task identifier */
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateTaskBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/tickets/{ticketId}/tasks/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reorder tasks within a ticket */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReorderTasksBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/tickets/{ticketId}/auto-generate-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Auto-generate tasks from ticket overview */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket identifier */
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/bulk-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tasks for multiple tickets */
        get: {
            parameters: {
                query: {
                    /** @description Comma-separated list of ticket IDs */
                    ids: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkTasksResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a ticket by ID (basic) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Update a ticket by ID (basic) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateTicketBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a ticket by ID (basic) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all chat sessions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new chat session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Data for the new chat session */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateChatBody"];
                };
            };
            responses: {
                /** @description Chat created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get messages for a specific chat */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MessageListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}/fork": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fork a chat session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: string;
                };
                cookie?: never;
            };
            /** @description Optional message IDs to exclude from the fork */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ForkChatBody"];
                };
            };
            responses: {
                /** @description Chat forked successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}/fork/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fork a chat session from a specific message */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: string;
                    messageId: string;
                };
                cookie?: never;
            };
            /** @description Optional message IDs to exclude from the fork */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ForkChatFromMessageBody"];
                };
            };
            responses: {
                /** @description Chat forked successfully from message */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}/messages/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a specific message */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: string;
                    messageId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a chat session and its messages */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update chat properties (e.g., title) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: string;
                };
                cookie?: never;
            };
            /** @description Data to update for the chat */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateChatBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/chats/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a chat by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Update a chat by ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateChatBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a chat by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all available prompts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new prompt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreatePromptRequestBody"];
                };
            };
            responses: {
                /** @description Prompt created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List prompts associated with a specific project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/suggest-prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get AI-suggested prompts based on user input
         * @description Uses AI to analyze user input and suggest the most relevant prompts from the project
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SuggestPromptsRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuggestPromptsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/prompts/{promptId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Associate a prompt with a project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                    promptId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Disassociate a prompt from a project */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                    promptId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a prompt by ID (basic) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Update a prompt by ID (basic) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdatePromptRequestBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a prompt by ID (basic) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a prompt's details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePromptRequestBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/prompts/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import prompts from markdown files
         * @description Upload and import one or more markdown files containing prompts with frontmatter
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** @description Markdown file(s) to import (max 10MB per file) */
                        files?: string | string[] | null;
                        /** @description Optional project ID to associate imported prompts with */
                        projectId?: number;
                        /**
                         * @description Whether to overwrite existing prompts with the same name
                         * @default false
                         */
                        overwriteExisting?: boolean | null;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkImportResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description File too large */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/{id}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export a single prompt as markdown
         * @description Download a prompt as a markdown file with frontmatter
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Prompt exported successfully */
                200: {
                    headers: {
                        "Content-Type"?: string;
                        "Content-Disposition": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                /** @description Prompt not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/export-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export multiple prompts as markdown
         * @description Export multiple prompts to markdown format
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BatchExportRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MarkdownExportResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/prompts/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import prompts to a specific project
         * @description Upload and import markdown files with prompts directly to a project
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** @description Markdown file(s) to import (max 10MB per file) */
                        files?: string | string[] | null;
                        /**
                         * @description Whether to overwrite existing prompts with the same name
                         * @default false
                         */
                        overwriteExisting?: boolean | null;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkImportResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description File too large */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/prompts/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export all prompts from a project
         * @description Download all prompts from a project as markdown file(s)
         */
        get: {
            parameters: {
                query?: {
                    /** @description Export format */
                    format?: "single-file" | "multi-file";
                    /** @description Sort order for prompts */
                    sortBy?: "name" | "created" | "updated";
                    /** @description Sort direction */
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MarkdownExportResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/validate-markdown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate markdown content for prompt import
         * @description Validates markdown content structure and frontmatter for prompt import
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Markdown content to validate */
                        content: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["MarkdownContentValidation"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/:projectId/queues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        description?: string;
                        maxParallelItems?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                deleted: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateQueueBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/tickets/:ticketId/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number;
                        priority?: number;
                        includeTasks?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["Ticket"] & {
                                id?: number;
                                projectId?: number;
                                title?: string;
                                overview?: string | null;
                                /** @enum {string} */
                                status?: "open" | "in_progress" | "closed";
                                /** @enum {string} */
                                priority?: "low" | "normal" | "high";
                                suggestedFileIds?: string[];
                                suggestedAgentIds?: string[];
                                suggestedPromptIds?: number[];
                                queueId?: number | null;
                                queuePosition?: number | null;
                                /** @enum {string|null} */
                                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                                queuePriority?: number | null;
                                queuedAt?: number | null;
                                queueStartedAt?: number | null;
                                queueCompletedAt?: number | null;
                                queueAgentId?: string | null;
                                queueErrorMessage?: string | null;
                                estimatedProcessingTime?: number | null;
                                actualProcessingTime?: number | null;
                                createdAt?: number;
                                updatedAt?: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/:ticketId/tasks/:taskId/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number;
                    taskId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number;
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TicketTask"] & {
                                id?: number;
                                ticketId?: number;
                                content?: string;
                                description?: string | null;
                                suggestedFileIds?: string[];
                                done?: boolean;
                                /** @enum {string} */
                                status?: "pending" | "in_progress" | "completed" | "cancelled";
                                orderIndex?: number;
                                estimatedHours?: number | null;
                                dependencies?: number[];
                                tags?: string[];
                                agentId?: string | null;
                                suggestedPromptIds?: number[];
                                queueId?: number | null;
                                queuePosition?: number | null;
                                /** @enum {string|null} */
                                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                                queuePriority?: number | null;
                                queuedAt?: number | null;
                                queueStartedAt?: number | null;
                                queueCompletedAt?: number | null;
                                queueAgentId?: string | null;
                                queueErrorMessage?: string | null;
                                estimatedProcessingTime?: number | null;
                                actualProcessingTime?: number | null;
                                createdAt?: number;
                                updatedAt?: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/:ticketId/dequeue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["Ticket"] & {
                                id?: number;
                                projectId?: number;
                                title?: string;
                                overview?: string | null;
                                /** @enum {string} */
                                status?: "open" | "in_progress" | "closed";
                                /** @enum {string} */
                                priority?: "low" | "normal" | "high";
                                suggestedFileIds?: string[];
                                suggestedAgentIds?: string[];
                                suggestedPromptIds?: number[];
                                queueId?: number | null;
                                queuePosition?: number | null;
                                /** @enum {string|null} */
                                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                                queuePriority?: number | null;
                                queuedAt?: number | null;
                                queueStartedAt?: number | null;
                                queueCompletedAt?: number | null;
                                queueAgentId?: string | null;
                                queueErrorMessage?: string | null;
                                estimatedProcessingTime?: number | null;
                                actualProcessingTime?: number | null;
                                createdAt?: number;
                                updatedAt?: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/:ticketId/tasks/:taskId/dequeue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number;
                    taskId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TicketTask"] & {
                                id?: number;
                                ticketId?: number;
                                content?: string;
                                description?: string | null;
                                suggestedFileIds?: string[];
                                done?: boolean;
                                /** @enum {string} */
                                status?: "pending" | "in_progress" | "completed" | "cancelled";
                                orderIndex?: number;
                                estimatedHours?: number | null;
                                dependencies?: number[];
                                tags?: string[];
                                agentId?: string | null;
                                suggestedPromptIds?: number[];
                                queueId?: number | null;
                                queuePosition?: number | null;
                                /** @enum {string|null} */
                                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                                queuePriority?: number | null;
                                queuedAt?: number | null;
                                queueStartedAt?: number | null;
                                queueCompletedAt?: number | null;
                                queueAgentId?: string | null;
                                queueErrorMessage?: string | null;
                                estimatedProcessingTime?: number | null;
                                actualProcessingTime?: number | null;
                                createdAt?: number;
                                updatedAt?: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueStats"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/:projectId/queues-with-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueWithStats"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/next-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        agentId?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["GetNextTaskResponse"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/:projectId/unqueued-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                tickets: (components["schemas"]["Ticket"] & {
                                    id?: number;
                                    projectId?: number;
                                    title?: string;
                                    overview?: string | null;
                                    /** @enum {string} */
                                    status?: "open" | "in_progress" | "closed";
                                    /** @enum {string} */
                                    priority?: "low" | "normal" | "high";
                                    suggestedFileIds?: string[];
                                    suggestedAgentIds?: string[];
                                    suggestedPromptIds?: number[];
                                    queueId?: number | null;
                                    queuePosition?: number | null;
                                    /** @enum {string|null} */
                                    queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                                    queuePriority?: number | null;
                                    queuedAt?: number | null;
                                    queueStartedAt?: number | null;
                                    queueCompletedAt?: number | null;
                                    queueAgentId?: string | null;
                                    queueErrorMessage?: string | null;
                                    estimatedProcessingTime?: number | null;
                                    actualProcessingTime?: number | null;
                                    createdAt?: number;
                                    updatedAt?: number;
                                })[];
                                tasks: (components["schemas"]["TicketTask"] & {
                                    id?: number;
                                    ticketId?: number;
                                    content?: string;
                                    description?: string | null;
                                    suggestedFileIds?: string[];
                                    done?: boolean;
                                    /** @enum {string} */
                                    status?: "pending" | "in_progress" | "completed" | "cancelled";
                                    orderIndex?: number;
                                    estimatedHours?: number | null;
                                    dependencies?: number[];
                                    tags?: string[];
                                    agentId?: string | null;
                                    suggestedPromptIds?: number[];
                                    queueId?: number | null;
                                    queuePosition?: number | null;
                                    /** @enum {string|null} */
                                    queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                                    queuePriority?: number | null;
                                    queuedAt?: number | null;
                                    queueStartedAt?: number | null;
                                    queueCompletedAt?: number | null;
                                    queueAgentId?: string | null;
                                    queueErrorMessage?: string | null;
                                    estimatedProcessingTime?: number | null;
                                    actualProcessingTime?: number | null;
                                    createdAt?: number;
                                    updatedAt?: number;
                                })[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queue/:itemType/:itemId/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemType: "ticket" | "task";
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        ticketId?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                completed: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queue/:itemType/:itemId/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemType: "ticket" | "task";
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        errorMessage: string;
                        ticketId?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                failed: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queue/:itemType/:itemId/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemType: "ticket" | "task";
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        targetQueueId: number | null;
                        ticketId?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                moved: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/enqueue-ticket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        ticketId: number;
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: (components["schemas"]["QueueItem"] & {
                                id: number;
                                queueId: number;
                                /** @enum {string} */
                                itemType: "ticket" | "task" | "chat" | "prompt";
                                itemId: number;
                                /** @default 0 */
                                priority: number;
                                /** @enum {string} */
                                status: "queued" | "in_progress" | "completed" | "failed" | "cancelled";
                                agentId: string | null;
                                errorMessage: string | null;
                                estimatedProcessingTime: number | null;
                                actualProcessingTime: number | null;
                                startedAt: number | null;
                                completedAt: number | null;
                                createdAt: number;
                                updatedAt: number;
                            })[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    status?: string;
                };
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                queueItem: components["schemas"]["QueueItem"] & {
                                    id: number;
                                    queueId: number;
                                    /** @enum {string} */
                                    itemType: "ticket" | "task" | "chat" | "prompt";
                                    itemId: number;
                                    /** @default 0 */
                                    priority: number;
                                    /** @enum {string} */
                                    status: "queued" | "in_progress" | "completed" | "failed" | "cancelled";
                                    agentId: string | null;
                                    errorMessage: string | null;
                                    estimatedProcessingTime: number | null;
                                    actualProcessingTime: number | null;
                                    startedAt: number | null;
                                    completedAt: number | null;
                                    createdAt: number;
                                    updatedAt: number;
                                };
                                ticket?: unknown;
                                task?: unknown;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        ticketId?: number;
                        taskId?: number;
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueItem"] & {
                                id: number;
                                queueId: number;
                                /** @enum {string} */
                                itemType: "ticket" | "task" | "chat" | "prompt";
                                itemId: number;
                                /** @default 0 */
                                priority: number;
                                /** @enum {string} */
                                status: "queued" | "in_progress" | "completed" | "failed" | "cancelled";
                                agentId: string | null;
                                errorMessage: string | null;
                                estimatedProcessingTime: number | null;
                                actualProcessingTime: number | null;
                                startedAt: number | null;
                                completedAt: number | null;
                                createdAt: number;
                                updatedAt: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/batch-enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BatchEnqueueBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: (components["schemas"]["QueueItem"] & {
                                id: number;
                                queueId: number;
                                /** @enum {string} */
                                itemType: "ticket" | "task" | "chat" | "prompt";
                                itemId: number;
                                /** @default 0 */
                                priority: number;
                                /** @enum {string} */
                                status: "queued" | "in_progress" | "completed" | "failed" | "cancelled";
                                agentId: string | null;
                                errorMessage: string | null;
                                estimatedProcessingTime: number | null;
                                actualProcessingTime: number | null;
                                startedAt: number | null;
                                completedAt: number | null;
                                createdAt: number;
                                updatedAt: number;
                            })[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueTimeline"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a queue by ID (basic) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Update a queue by ID (basic) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateQueueBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a queue by ID (basic) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                deleted: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all configured provider keys (excluding secrets) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Add a new API key for an AI provider */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateProviderKey"];
                };
            };
            responses: {
                /** @description Provider key created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a provider key by ID (basic) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Update a provider key by ID (basic) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateProviderKey"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a provider key by ID (basic) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a provider key's details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProviderKey"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/providers/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test a single provider connection
         * @description Test the connection to a specific AI provider and retrieve available models
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TestProviderRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TestProviderApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/batch-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test multiple providers at once
         * @description Test connections to multiple AI providers in parallel or sequentially
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BatchTestProviderRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BatchTestProviderApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get health status of all configured providers
         * @description Retrieve health status information for all configured AI providers
         */
        get: {
            parameters: {
                query?: {
                    /** @description Force fresh health check instead of using cached data */
                    refresh?: boolean | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderHealthStatusListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update provider settings (URLs for local providers)
         * @description Update custom URLs for local AI providers like Ollama and LMStudio
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        ollamaUrl?: string;
                        lmstudioUrl?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keys/validate-custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate a custom OpenAI-compatible provider */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ValidateCustomProviderRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidateCustomProviderResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/chat/{chatId}/mcp-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP session metadata for a chat */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatMcpSessionResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/chat/{chatId}/mcp/tools/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invoke the default Promptliano MCP tool for a chat turn */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChatMcpToolInvokeRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatMcpToolInvokeResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/chat/sdk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stream chat completions via AI SDK */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Chat request payload for AI SDK streaming */
            requestBody: {
                content: {
                    "application/json": {
                        id?: string;
                        provider?: string;
                        model?: string;
                        temperature?: number;
                        maxTokens?: number;
                        topP?: number;
                        frequencyPenalty?: number;
                        presencePenalty?: number;
                        responseFormat?: unknown;
                        toolsEnabled?: boolean;
                        /** @enum {string} */
                        toolChoice?: "auto" | "none";
                        maxSteps?: number;
                        forceFinalText?: boolean;
                        parallelToolCalls?: boolean;
                        enableChatAutoNaming?: boolean;
                        messages: {
                            id?: string;
                            /** @enum {string} */
                            role: "user" | "assistant" | "system";
                            content?: unknown;
                            parts?: unknown[];
                            createdAt?: number;
                        }[];
                        maxMessagesToInclude?: number;
                        /** @default true */
                        includeSystemPrompt?: boolean;
                    };
                };
            };
            responses: {
                /** @description UI message event stream */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all available providers including custom ones */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProvidersListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gen-ai/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate text using a specified model and prompt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiGenerateTextRequest"];
                };
            };
            responses: {
                /** @description Successfully initiated AI response stream. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gen-ai/text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate text using a specified model and prompt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiGenerateTextRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AiGenerateTextResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gen-ai/structured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate structured data based on a predefined schema key and user input */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiGenerateStructuredRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AiGenerateStructuredResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available AI models for a provider */
        get: {
            parameters: {
                query?: {
                    /** @description Filter models by provider */
                    provider?: string;
                    /** @description Include disabled models in the response */
                    includeDisabled?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelsListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/_debug-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Debug provider key resolution (no secrets) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                providerKeysConfig: {
                                    [key: string]: boolean;
                                };
                                envFallback: {
                                    [key: string]: boolean;
                                };
                                keys: {
                                    id: number;
                                    provider: string;
                                    normalized: string;
                                    isDefault?: boolean;
                                    decrypted: boolean;
                                    createdAt: number;
                                    updatedAt: number;
                                }[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/generate/text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate text (one-off, non-streaming)
         * @description Generates text based on a prompt using the specified provider and model. Does not use chat history or save messages.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Prompt, provider, model, and options for text generation. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiGenerateTextRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AiGenerateTextResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/provider-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update provider settings
         * @description Updates custom URLs for local AI providers like Ollama and LMStudio
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Provider settings to update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProviderSettings"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"] & {
                            data: components["schemas"]["UpdateProviderSettings"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/flow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get complete flow data for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FlowData"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/flow/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all flow items as a flat list */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FlowItemsList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/flow/unqueued": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all unqueued tickets and tasks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnqueuedItems"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/queues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a queue (Flow) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        projectId: number | null;
                        name: string;
                        description?: string;
                        maxParallelItems?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data?: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/flow/queues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List queues for a project (Flow) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/flow/queues-with-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get queues with stats (Flow) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/queues/{queueId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get items in a queue (Flow) */
        get: {
            parameters: {
                query?: {
                    status?: string;
                };
                header?: never;
                path: {
                    queueId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["QueueItems"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/queues/{queueId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get queue statistics (Flow) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalItems: number;
                            queuedItems: number;
                            inProgressItems: number;
                            completedItems: number;
                            failedItems: number;
                            currentAgents: string[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/queues/{queueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete queue (Flow) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            deleted: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update queue (Flow) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number | null;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        description?: string;
                        maxParallelItems?: number;
                        isActive?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/flow/tickets/{ticketId}/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enqueue a ticket to a queue */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number | null;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number | null;
                        /** @default 0 */
                        priority?: number;
                        /** @default false */
                        includeTasks?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Ticket"] & {
                            id?: number;
                            projectId?: number;
                            title?: string;
                            overview?: string | null;
                            /** @enum {string} */
                            status?: "open" | "in_progress" | "closed";
                            /** @enum {string} */
                            priority?: "low" | "normal" | "high";
                            suggestedFileIds?: string[];
                            suggestedAgentIds?: string[];
                            suggestedPromptIds?: number[];
                            queueId?: number | null;
                            queuePosition?: number | null;
                            /** @enum {string|null} */
                            queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                            queuePriority?: number | null;
                            queuedAt?: number | null;
                            queueStartedAt?: number | null;
                            queueCompletedAt?: number | null;
                            queueAgentId?: string | null;
                            queueErrorMessage?: string | null;
                            estimatedProcessingTime?: number | null;
                            actualProcessingTime?: number | null;
                            createdAt?: number;
                            updatedAt?: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/tasks/{taskId}/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enqueue a task to a queue */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskId: number | null;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number | null;
                        /** @default 0 */
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTask"] & {
                            id?: number;
                            ticketId?: number;
                            content?: string;
                            description?: string | null;
                            suggestedFileIds?: string[];
                            done?: boolean;
                            /** @enum {string} */
                            status?: "pending" | "in_progress" | "completed" | "cancelled";
                            orderIndex?: number;
                            estimatedHours?: number | null;
                            dependencies?: number[];
                            tags?: string[];
                            agentId?: string | null;
                            suggestedPromptIds?: number[];
                            queueId?: number | null;
                            queuePosition?: number | null;
                            /** @enum {string|null} */
                            queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                            queuePriority?: number | null;
                            queuedAt?: number | null;
                            queueStartedAt?: number | null;
                            queueCompletedAt?: number | null;
                            queueAgentId?: string | null;
                            queueErrorMessage?: string | null;
                            estimatedProcessingTime?: number | null;
                            actualProcessingTime?: number | null;
                            createdAt?: number;
                            updatedAt?: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/tickets/{ticketId}/dequeue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a ticket from its queue */
        post: {
            parameters: {
                query?: {
                    includeTasks?: string;
                };
                header?: never;
                path: {
                    ticketId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Ticket"] & {
                            id?: number;
                            projectId?: number;
                            title?: string;
                            overview?: string | null;
                            /** @enum {string} */
                            status?: "open" | "in_progress" | "closed";
                            /** @enum {string} */
                            priority?: "low" | "normal" | "high";
                            suggestedFileIds?: string[];
                            suggestedAgentIds?: string[];
                            suggestedPromptIds?: number[];
                            queueId?: number | null;
                            queuePosition?: number | null;
                            /** @enum {string|null} */
                            queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                            queuePriority?: number | null;
                            queuedAt?: number | null;
                            queueStartedAt?: number | null;
                            queueCompletedAt?: number | null;
                            queueAgentId?: string | null;
                            queueErrorMessage?: string | null;
                            estimatedProcessingTime?: number | null;
                            actualProcessingTime?: number | null;
                            createdAt?: number;
                            updatedAt?: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/tasks/{taskId}/dequeue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a task from its queue */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTask"] & {
                            id?: number;
                            ticketId?: number;
                            content?: string;
                            description?: string | null;
                            suggestedFileIds?: string[];
                            done?: boolean;
                            /** @enum {string} */
                            status?: "pending" | "in_progress" | "completed" | "cancelled";
                            orderIndex?: number;
                            estimatedHours?: number | null;
                            dependencies?: number[];
                            tags?: string[];
                            agentId?: string | null;
                            suggestedPromptIds?: number[];
                            queueId?: number | null;
                            queuePosition?: number | null;
                            /** @enum {string|null} */
                            queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                            queuePriority?: number | null;
                            queuedAt?: number | null;
                            queueStartedAt?: number | null;
                            queueCompletedAt?: number | null;
                            queueAgentId?: string | null;
                            queueErrorMessage?: string | null;
                            estimatedProcessingTime?: number | null;
                            actualProcessingTime?: number | null;
                            createdAt?: number;
                            updatedAt?: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move an item between queues or to unqueued */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        itemType: "ticket" | "task";
                        itemId: number | null;
                        targetQueueId: number | null;
                        /** @default 0 */
                        priority?: number;
                        /** @default false */
                        includeTasks?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FlowItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Persist new order for items in a queue */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number | null;
                        items: {
                            /** @enum {string} */
                            itemType: "ticket" | "task";
                            itemId: number | null;
                            ticketId?: number | null;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/process/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark an item as being processed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        itemType: "ticket" | "task";
                        itemId: number | null;
                        agentId: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/process/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark an item as completed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        itemType: "ticket" | "task";
                        itemId: number | null;
                        processingTime?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/process/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark an item as failed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        itemType: "ticket" | "task";
                        itemId: number | null;
                        errorMessage: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/bulk-move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move multiple items to a queue or unqueued */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        items: {
                            /** @enum {string} */
                            itemType: "ticket" | "task";
                            itemId: number | null;
                        }[];
                        targetQueueId: number | null;
                        /** @default 0 */
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            movedCount: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/browse-directory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Browse directories on the file system */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BrowseDirectoryRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BrowseDirectoryResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all MCP server configurations for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create MCP server configuration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Display name for the MCP server
                         * @example File System Tools
                         */
                        name: string;
                        /**
                         * @description Command to start the MCP server
                         * @example npx @modelcontextprotocol/server-filesystem
                         */
                        command: string;
                        /**
                         * @description Command line arguments for the server
                         * @default []
                         * @example [
                         *       "--root",
                         *       "/path/to/project"
                         *     ]
                         */
                        args?: string[];
                        /**
                         * @description Environment variables for the server
                         * @default {}
                         * @example {
                         *       "NODE_ENV": "production"
                         *     }
                         */
                        env?: {
                            [key: string]: string;
                        };
                        /**
                         * @description Whether the server is enabled
                         * @default true
                         * @example true
                         */
                        enabled?: boolean;
                        /**
                         * @description Whether to auto-start the server when project opens
                         * @default false
                         * @example false
                         */
                        autoStart?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigResponse"];
                    };
                };
                /** @description MCP server configuration created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/servers/{serverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP server configuration by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                    serverId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete MCP server configuration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                    serverId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update MCP server configuration */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                    serverId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMCPServerConfigBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/mcp/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available MCP tools */
        get: {
            parameters: {
                query?: {
                    serverId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                name: string;
                                description: string;
                                serverId?: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/tools/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute an MCP tool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MCPToolExecutionRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPToolExecutionResultResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available MCP resources */
        get: {
            parameters: {
                query?: {
                    serverId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPResourceListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/resources/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Read MCP resource content */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        uri: string;
                        serverId?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                uri: string;
                                name: string;
                                description: string;
                                mimeType: string;
                                content?: unknown;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/analytics/executions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List MCP tool executions for a project */
        get: {
            parameters: {
                query?: {
                    /** @description Filter executions by tool name */
                    toolName?: string;
                    /** @description Filter by execution status (success, error, timeout) */
                    status?: "success" | "error" | "timeout" | "running";
                    /** @description Filter by session identifier */
                    sessionId?: string;
                    /** @description Unix timestamp (ms) for range start */
                    startDate?: string;
                    /** @description Unix timestamp (ms) for range end */
                    endDate?: string;
                    /** @description Maximum number of records (default 100) */
                    limit?: string;
                    /** @description Pagination offset (default 0) */
                    offset?: string;
                    /** @description Sort executions by field */
                    sortBy?: "startedAt" | "duration" | "toolName";
                    /** @description Sort order */
                    sortOrder?: "asc" | "desc";
                    /** @description Alias for toolName supporting comma-separated values */
                    toolNames?: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPExecutionListSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/analytics/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get aggregated MCP analytics overview for a project */
        get: {
            parameters: {
                query?: {
                    /** @description Time window to aggregate analytics over */
                    period?: "hour" | "day" | "week" | "month";
                    /** @description Comma-separated list of MCP tool names to filter */
                    toolNames?: string;
                    /** @description Unix timestamp (ms) for range start */
                    startDate?: string;
                    /** @description Unix timestamp (ms) for range end */
                    endDate?: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPAnalyticsOverviewSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/analytics/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP tool statistics for a project */
        get: {
            parameters: {
                query?: {
                    /** @description Time window to aggregate analytics over */
                    period?: "hour" | "day" | "week" | "month";
                    /** @description Comma-separated list of MCP tool names to filter */
                    toolNames?: string;
                    /** @description Unix timestamp (ms) for range start */
                    startDate?: string;
                    /** @description Unix timestamp (ms) for range end */
                    endDate?: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPAnalyticsStatisticsSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/analytics/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP execution timeline for a project */
        get: {
            parameters: {
                query?: {
                    /** @description Time window to aggregate analytics over */
                    period?: "hour" | "day" | "week" | "month";
                    /** @description Comma-separated list of MCP tool names to filter */
                    toolNames?: string;
                    /** @description Unix timestamp (ms) for range start */
                    startDate?: string;
                    /** @description Unix timestamp (ms) for range end */
                    endDate?: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPExecutionTimelineSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/analytics/error-patterns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get common MCP error patterns for a project */
        get: {
            parameters: {
                query?: {
                    /** @description Time window to aggregate analytics over */
                    period?: "hour" | "day" | "week" | "month";
                    /** @description Comma-separated list of MCP tool names to filter */
                    toolNames?: string;
                    /** @description Unix timestamp (ms) for range start */
                    startDate?: string;
                    /** @description Unix timestamp (ms) for range end */
                    endDate?: string;
                    /** @description Maximum number of error patterns to return */
                    limit?: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPErrorPatternsSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/config/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConfigLocationsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/config/merged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MergedConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/config/expanded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MergedConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** @description Update project MCP configuration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        mcpEnabled?: boolean;
                        customInstructions?: string;
                    };
                };
            };
            responses: {
                /** @description Updated config */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                projectConfig: {
                                    projectId: number;
                                    projectName: string;
                                    mcpEnabled: boolean;
                                    installedTools: unknown[];
                                    customInstructions?: string;
                                };
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/config/save-to-location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        config: {
                            mcpServers?: {
                                [key: string]: {
                                    /**
                                     * @default stdio
                                     * @enum {string}
                                     */
                                    type?: "stdio" | "http";
                                    command: string;
                                    args?: string[];
                                    env?: {
                                        [key: string]: string;
                                    };
                                    timeout?: number;
                                };
                            };
                            inputs?: {
                                /** @enum {string} */
                                type: "promptString" | "promptNumber" | "promptBoolean";
                                id: string;
                                description: string;
                                default?: unknown;
                                password?: boolean;
                            }[];
                            extends?: string | string[];
                        };
                        location: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/config/default-for-location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    location: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MergedConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/active-tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get active MCP servers and their tools, including conditional Groq remote MCP based on provider selection */
        get: {
            parameters: {
                query?: {
                    projectId?: number | null;
                    provider?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ActiveMCPToolsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get git status for a project
         * @description Retrieves the current git status including staged, unstaged, and untracked files
         */
        get: {
            parameters: {
                query?: {
                    /** @description Force refresh the git status (bypass cache) */
                    refresh?: boolean | null;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitStatusResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/stage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stage files for commit
         * @description Stages specified files or patterns for the next commit
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["StageFilesRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/unstage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstage files from commit
         * @description Removes specified files from the staging area
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UnstageFilesRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/stage-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stage all changes
         * @description Stages all modified and untracked files for commit
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All changes staged successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/unstage-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstage all changes
         * @description Removes all files from the staging area
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All changes unstaged successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/commit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new commit
         * @description Creates a new commit with staged changes
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get commit history
         * @description Retrieves the commit history for the project
         */
        get: {
            parameters: {
                query?: {
                    maxCount?: number | null;
                    skip?: number | null;
                    author?: string;
                    since?: string;
                    until?: string;
                    grep?: string;
                    branch?: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitLogResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/log-enhanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get enhanced commit history
         * @description Retrieves detailed commit history with additional metadata
         */
        get: {
            parameters: {
                query?: {
                    maxCount?: number | null;
                    skip?: number | null;
                    author?: string;
                    since?: string;
                    until?: string;
                    grep?: string;
                    branch?: string;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommitLogEnhancedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/commits/{commitHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get commit details
         * @description Retrieves detailed information about a specific commit
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                    commitHash: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommitDetailResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/diff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get file diff
         * @description Retrieves the diff for a specific file
         */
        get: {
            parameters: {
                query: {
                    /** @description Path to the file to diff */
                    filePath: string;
                    /** @description Whether to get the cached/staged diff */
                    cached?: boolean | null;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitDiffResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all branches
         * @description Retrieves all local and remote branches for the project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BranchListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new branch
         * @description Creates a new branch from the specified starting point
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["GitCreateBranchRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Branch created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/branches-enhanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List branches with enhanced information
         * @description Retrieves branches with additional metadata like ahead/behind counts
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BranchListEnhancedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/branches/switch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Switch to a different branch
         * @description Switches the working directory to the specified branch
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["GitSwitchBranchRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/branches/{branchName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a branch
         * @description Deletes the specified branch
         */
        delete: {
            parameters: {
                query?: {
                    /** @description Force delete even if branch has unmerged changes */
                    force?: boolean | null;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                    branchName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/stash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get list of all stashes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StashListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** @description Stash current changes */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitOperationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /**
         * Drop a stash
         * @description Removes the specified stash from the stash list
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default stash@{0} */
                        stashRef?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/stash/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Apply a stash without removing it from the stash list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default stash@{0} */
                        ref?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitOperationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/stash/pop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pop a stash
         * @description Applies the specified stash and removes it from the stash list
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default stash@{0} */
                        stashRef?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/worktrees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all worktrees
         * @description Retrieves the list of all worktrees for the project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorktreeListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add a new worktree
         * @description Creates a new worktree for the specified branch
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["GitWorktreeAddRequest"];
                };
            };
            responses: {
                /** @description Worktree added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /**
         * Remove a worktree
         * @description Removes the specified worktree
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["GitWorktreeRemoveRequest"];
                };
            };
            responses: {
                /** @description Worktree removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/worktrees/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Lock a worktree
         * @description Locks the specified worktree to prevent deletion
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["GitWorktreeLockRequest"];
                };
            };
            responses: {
                /** @description Worktree locked successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/worktrees/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlock a worktree
         * @description Unlocks the specified worktree
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        worktreePath: string;
                    };
                };
            };
            responses: {
                /** @description Worktree unlocked successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/worktrees/prune": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prune worktrees
         * @description Removes worktree entries that no longer exist
         */
        post: {
            parameters: {
                query?: {
                    /** @description Perform a dry run without actually pruning */
                    dryRun?: boolean | null;
                };
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PruneWorktreesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/remotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all configured remotes for a git repository */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RemotesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/push": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Push changes to a remote repository */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["GitPushRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitOperationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Fetch updates from a remote repository */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default origin */
                        remote?: string;
                        prune?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitOperationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/pull": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Pull changes from a remote repository */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default origin */
                        remote?: string;
                        branch?: string;
                        rebase?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitOperationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all tags for a git repository */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TagsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** @description Create a new tag in the git repository */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        message?: string;
                        ref?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitOperationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/git/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reset current HEAD to a specified state */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["GitResetRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitOperationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-tabs/{tabId}/generate-name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate an AI-powered name for a project tab */
        post: operations["generateProjectTabName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/agent-files/detect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Detect agent instruction files for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                projectFiles: {
                                    type: string;
                                    name: string;
                                    path: string;
                                    /** @enum {string} */
                                    scope: "global" | "project";
                                    exists: boolean;
                                    writable: boolean;
                                    hasInstructions?: boolean;
                                    instructionVersion?: string;
                                    metadata?: {
                                        [key: string]: unknown;
                                    };
                                }[];
                                globalFiles: {
                                    type: string;
                                    name: string;
                                    path: string;
                                    /** @enum {string} */
                                    scope: "global" | "project";
                                    exists: boolean;
                                    writable: boolean;
                                    hasInstructions?: boolean;
                                    instructionVersion?: string;
                                    metadata?: {
                                        [key: string]: unknown;
                                    };
                                }[];
                                suggestedFiles: {
                                    type: string;
                                    name: string;
                                    suggestedPath: string;
                                }[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/agent-files/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Update an agent file with Promptliano instructions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        filePath: string;
                        includeExamples?: boolean;
                        customInstructions?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                message: string;
                                backedUp?: boolean;
                                filePath: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/agent-files/remove-instructions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Remove Promptliano instructions from an agent file */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        filePath: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                message: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/agent-files/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check status of agent files and instruction versions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                currentVersion: string;
                                files: {
                                    path: string;
                                    exists: boolean;
                                    hasInstructions: boolean;
                                    instructionVersion?: string;
                                    isOutdated: boolean;
                                }[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/agent-files/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new agent file with instructions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        type: string;
                        includeExamples?: boolean;
                        customInstructions?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                message: string;
                                filePath: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/installation/detect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Detect installed MCP-compatible tools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DetectToolsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/installation/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get MCP installation and connection status for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InstallationStatusResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/installation/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Install Promptliano MCP for a specific tool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        tool: "claude-desktop" | "vscode" | "cursor" | "continue" | "claude-code" | "windsurf";
                        serverUrl?: string;
                        debug?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InstallResultResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/installation/uninstall": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Uninstall Promptliano MCP for a specific tool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        tool: "claude-desktop" | "vscode" | "cursor" | "continue" | "claude-code" | "windsurf";
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UninstallResultResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get global MCP connection status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Global MCP status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                totalSessions: number;
                                projectSessions: number;
                                projectStatuses: {
                                    projectId: number;
                                    connected: boolean;
                                    sessionId?: string;
                                    lastActivity?: number;
                                }[];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/installation/batch-install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Install Promptliano MCP for multiple tools at once */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        tools: ("claude-desktop" | "vscode" | "cursor" | "continue" | "claude-code" | "windsurf")[];
                        serverUrl?: string;
                        debug?: boolean;
                    };
                };
            };
            responses: {
                /** @description Batch installation results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                results: {
                                    tool: string;
                                    success: boolean;
                                    message: string;
                                    configPath?: string;
                                    backedUp?: boolean;
                                    backupPath?: string;
                                }[];
                                summary: {
                                    total: number;
                                    succeeded: number;
                                    failed: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/mcp/install-project-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Install MCP configuration at the project level (.mcp.json) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entity ID - coerces strings to positive integers for URL parameters */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        serverUrl?: string;
                    };
                };
            };
            responses: {
                /** @description Project MCP configuration installed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                message: string;
                                configPath: string;
                                backedUp: boolean;
                                backupPath?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List processes for a project */
        get: operations["listProjectProcesses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/scripts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List package.json scripts in the project (root + workspaces) */
        get: operations["listProjectScripts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start a new process for a project */
        post: operations["startProjectProcess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/{processId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop a running process */
        post: operations["stopProjectProcess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get process execution history */
        get: operations["getProcessHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/{processId}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get logs for a process */
        get: operations["getProcessLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/ports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ports used by processes */
        get: operations["getProcessPorts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/ports/{port}/kill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Kill process using a specific port */
        post: operations["killProcessByPort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/ports/scan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Scan and update port usage */
        post: operations["scanProcessPorts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/processes/scripts/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run a package.json script */
        post: operations["runProjectScript"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/proxy/copilot/_health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Copilot proxy health
         * @description Returns basic health and configuration info and attempts a lightweight GET to the upstream /models endpoint.
         */
        get: operations["getCopilotProxyHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/copilot/embed/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable or disable embedded Copilot proxy */
        post: operations["postCopilotEmbedToggle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/copilot/embed/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update embedded Copilot runtime settings */
        post: operations["postCopilotEmbedSettings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/copilot/embed/auth/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start GitHub device authorization flow */
        post: operations["postCopilotEmbedAuthStart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/copilot/embed/auth/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete device authorization and initialize Copilot tokens */
        post: operations["postCopilotEmbedAuthComplete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/copilot/embed/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get embedded Copilot status */
        get: operations["getCopilotEmbedStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all model configurations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelConfigListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new model configuration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateModelConfig"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs/provider/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get model configurations by provider */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    provider: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelConfigListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs/provider/{provider}/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get default configuration for a provider */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    provider: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs/name/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get configuration by name */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get configuration by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Update a model configuration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateModelConfig"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a model configuration */
        delete: {
            parameters: {
                query?: {
                    hard?: boolean | null;
                };
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                deleted: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs/{id}/set-default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set configuration as default for its provider */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                updated: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-presets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all model presets with configurations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelPresetsWithConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new model preset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateModelPreset"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelPresetResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-presets/category/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get presets by category */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    category: "general" | "coding" | "creative" | "analysis" | "custom";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelPresetListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-presets/most-used": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get most used presets */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelPresetListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-presets/recently-used": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get recently used presets */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelPresetListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-presets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get preset with its configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelPresetWithConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Update a model preset */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateModelPreset"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelPresetResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a model preset */
        delete: {
            parameters: {
                query?: {
                    hard?: boolean | null;
                };
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                deleted: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-presets/{id}/use": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark preset as used (increments usage count) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                updated: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs/system/initialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initialize system default configurations */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                message: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export all configurations and presets */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExportDataResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/model-configs/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Import configurations and presets */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        configs?: components["schemas"]["CreateModelConfig"][];
                        presets?: components["schemas"]["CreateModelPreset"][];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ImportResultResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Project: {
            id: number;
            name: string;
            description: string | null;
            path: string;
            createdAt: number;
            updatedAt: number;
        };
        ProjectResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Project"];
        };
        ProjectResponseMultiStatus: components["schemas"]["ProjectResponse"] & {
            warning?: string;
            error?: string;
        };
        ApiErrorResponse: {
            /** @enum {boolean} */
            success: false;
            error: {
                /** @example An error occurred */
                message: string;
                /** @example ERROR_CODE */
                code?: string;
                details?: {
                    [key: string]: unknown;
                };
            };
        };
        CreateProjectRequestBody: {
            /** @example My Awesome Project */
            name: string;
            /** @example /path/to/project */
            path: string;
            /** @example Optional project description */
            description?: string;
        };
        ProjectListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Project"][];
        };
        UpdateProjectRequestBody: {
            /** @example My Awesome Project */
            name?: string;
            /** @example /path/to/project */
            path?: string;
            /** @example Optional project description */
            description?: string;
        };
        OperationSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            /** @example Operation completed successfully */
            message: string;
        };
        File: {
            id: string;
            projectId: number;
            name: string;
            path: string;
            extension: string | null;
            size: number | null;
            lastModified: number | null;
            contentType: string | null;
            content: string | null;
            meta: string | null;
            checksum: string | null;
            imports: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            exports: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            isRelevant: boolean | null;
            relevanceScore: number | null;
            createdAt: number;
            updatedAt: number;
        };
        SuggestFilesResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                suggestedFiles: {
                    path: string;
                    relevance: number;
                    reason?: string;
                    reasons?: string[];
                    fileType: string;
                    aiConfidence?: number;
                    confidence?: number;
                    aiReasons?: string[];
                    lineCount?: number;
                    totalLines?: number;
                }[];
                totalFiles: number;
                analyzedFiles: number;
                /**
                 * @description Preset strategy controlling scoring, AI usage, and performance
                 * @enum {string}
                 */
                strategy: "fast" | "balanced" | "thorough";
                tokensSaved?: number;
                processingTime: number;
                recommendedFileIds?: string[];
                aiSelections?: {
                    id: string;
                    confidence: number;
                    reasons: string[];
                }[];
                selectedDirectories?: string[];
                totalDirectories?: number;
                filesFromDirectories?: number;
                lineCountPerFile?: number;
                aiModel?: string;
                directorySelectionTime?: number;
                fileFetchTime?: number;
                suggestionTime?: number;
            };
        };
        SuggestFilesRequestBody: {
            /** @example Implement authentication using JWT */
            userInput?: string;
            /**
             * @description Alias for userInput maintained for backward compatibility
             * @example Implement authentication using JWT
             */
            prompt?: string;
            /**
             * @description Maximum number of files to return
             * @default 25
             * @example 25
             */
            limit: number;
            /**
             * @description Preset strategy controlling scoring, AI usage, and performance
             * @default balanced
             * @enum {string}
             */
            strategy: "fast" | "balanced" | "thorough";
            /**
             * @description Return per-file relevance scores when available
             * @default true
             * @example true
             */
            includeScores: boolean;
            /**
             * @description Include detailed AI-generated reasons for each file suggestion (default: false to save tokens)
             * @default false
             * @example false
             */
            includeReasons: boolean;
            /**
             * @description Additional context used to bias relevance scoring
             * @example Focus on MCP transport tools and remove unused prompts
             */
            userContext?: string;
            /**
             * @description Number of lines to read from each file (V2 only)
             * @default 50
             * @example 50
             */
            lineCount: number;
            /**
             * @description Optional: manually specify directories to search (skips AI directory selection)
             * @example [
             *       "src/auth",
             *       "src/api"
             *     ]
             */
            directories?: string[];
            /**
             * @description If true and directories provided, skip AI directory selection stage
             * @default false
             * @example false
             */
            skipDirectorySelection: boolean;
        };
        Ticket: {
            id: number;
            projectId: number;
            title: string;
            overview: string | null;
            /** @enum {string} */
            status: "open" | "in_progress" | "closed";
            /** @enum {string} */
            priority: "low" | "normal" | "high";
            suggestedFileIds: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            suggestedAgentIds: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            suggestedPromptIds: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            queueId: number | null;
            queuePosition: number | null;
            /** @enum {string|null} */
            queueStatus: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
            queuePriority: number | null;
            queuedAt: number | null;
            queueStartedAt: number | null;
            queueCompletedAt: number | null;
            queueAgentId: string | null;
            queueErrorMessage: string | null;
            estimatedProcessingTime: number | null;
            actualProcessingTime: number | null;
            createdAt: number;
            updatedAt: number;
        };
        TicketResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Ticket"];
        };
        CreateTicketBody: {
            projectId: number;
            title: string;
            /** @default null */
            overview: string | null;
            /**
             * @default open
             * @enum {string}
             */
            status: "open" | "in_progress" | "closed";
            /**
             * @default normal
             * @enum {string}
             */
            priority: "low" | "normal" | "high";
            suggestedFileIds: string[];
            suggestedAgentIds: string[];
            suggestedPromptIds: number[];
        };
        UpdateTicketBody: {
            projectId?: number;
            title?: string;
            /** @default null */
            overview: string | null;
            /**
             * @default open
             * @enum {string}
             */
            status: "open" | "in_progress" | "closed";
            /**
             * @default normal
             * @enum {string}
             */
            priority: "low" | "normal" | "high";
            suggestedFileIds?: string[];
            suggestedAgentIds?: string[];
            suggestedPromptIds?: number[];
        };
        TicketTask: {
            id: number;
            ticketId: number;
            content: string;
            description: string | null;
            suggestedFileIds: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            done: boolean;
            /** @enum {string} */
            status: "pending" | "in_progress" | "completed" | "cancelled";
            orderIndex: number;
            estimatedHours: number | null;
            dependencies: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            tags: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            agentId: string | null;
            suggestedPromptIds: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            queueId: number | null;
            queuePosition: number | null;
            /** @enum {string|null} */
            queueStatus: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
            queuePriority: number | null;
            queuedAt: number | null;
            queueStartedAt: number | null;
            queueCompletedAt: number | null;
            queueAgentId: string | null;
            queueErrorMessage: string | null;
            estimatedProcessingTime: number | null;
            actualProcessingTime: number | null;
            createdAt: number;
            updatedAt: number;
        };
        CompleteTicketResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                ticket: components["schemas"]["Ticket"];
                tasks: components["schemas"]["TicketTask"][];
            };
        };
        LinkedFilesResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                ticketId: string;
                fileId: string;
            }[];
        };
        LinkFilesBody: {
            fileIds: string[];
        };
        SuggestFilesBody: {
            extraUserInput?: string;
        };
        SuggestedTasksResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                suggestedTasks: string[];
            };
        };
        SuggestTasksBody: {
            userContext?: string;
        };
        TicketListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Ticket"][];
        };
        TicketWithTaskCount: {
            ticket: components["schemas"]["Ticket"];
            taskCount: number;
            completedTaskCount: number;
        };
        TicketWithTaskCountListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TicketWithTaskCount"][];
        };
        TicketWithTasks: {
            ticket: components["schemas"]["Ticket"];
            tasks: components["schemas"]["TicketTask"][];
        };
        TicketWithTasksListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TicketWithTasks"][];
        };
        TaskResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TicketTask"];
        };
        CreateTaskBody: {
            ticketId: number;
            content: string;
            description: string | null;
            suggestedFileIds: string[];
            estimatedHours: number | null;
            dependencies: number[];
            tags: string[];
            agentId: string | null;
            suggestedPromptIds: number[];
        };
        TaskListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TicketTask"][];
        };
        UpdateTaskBody: {
            content?: string;
            description?: string | null;
            suggestedFileIds?: string[];
            estimatedHours?: number | null;
            dependencies?: number[];
            tags?: string[];
            agentId?: string | null;
            suggestedPromptIds?: number[];
            done?: boolean;
            orderIndex?: number;
        };
        ReorderTasksBody: {
            tasks: {
                /**
                 * Format: int64
                 * @description Entity ID - positive integer without timestamp conversion
                 * @example 1716537600000
                 */
                taskId: number;
                orderIndex: number;
            }[];
        };
        BulkTasksResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                [key: string]: components["schemas"]["TicketTask"][];
            };
        };
        ChatListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: number;
                projectId: number | null;
                title: string;
                createdAt: number;
                updatedAt: number;
            }[];
        };
        ChatResponse: {
            /** @enum {boolean} */
            success: true;
            /** @description Chat */
            data: {
                id: number;
                projectId: number | null;
                title: string;
                createdAt: number;
                updatedAt: number;
            };
        };
        CreateChatBody: {
            title: string;
            projectId?: number;
            copyExisting?: boolean;
            currentChatId?: number;
        };
        MessageListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: number;
                chatId: number;
                /** @enum {string} */
                role: "assistant" | "user" | "system";
                content: string;
                metadata: {
                    [key: string]: unknown;
                } | null;
                createdAt: number;
            }[];
        };
        ForkChatBody: {
            /** @default [] */
            excludedMessageIds: number[];
        };
        ForkChatFromMessageBody: {
            /** @default [] */
            excludedMessageIds: number[];
        };
        UpdateChatBody: {
            title: string;
        };
        Prompt: {
            id: number;
            projectId: number | null;
            title: string;
            content: string;
            description: string | null;
            tags: string[];
            createdAt: number;
            updatedAt: number;
        };
        PromptResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Prompt"];
        };
        CreatePromptRequestBody: {
            /** @example My New Prompt */
            title: string;
            /** @example Translate this text: {text} */
            content: string;
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId?: number;
        };
        PromptListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Prompt"][];
        };
        SuggestPromptsResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description Array of suggested prompts ordered by relevance (most relevant first) */
                prompts: components["schemas"]["Prompt"][];
                debug?: {
                    scores?: {
                        promptId: string;
                        totalScore: number;
                        titleScore: number;
                        contentScore: number;
                        tagScore: number;
                        recencyScore: number;
                        usageScore?: number;
                        aiConfidence?: number;
                        aiReasons?: string[];
                    }[];
                    metadata?: {
                        totalPrompts: number;
                        analyzedPrompts: number;
                        /** @enum {string} */
                        strategy: "fast" | "balanced" | "thorough";
                        processingTime: number;
                        tokensSaved: number;
                        aiSelections?: {
                            id: string;
                            confidence: number;
                            reasons: string[];
                        }[];
                    };
                };
            };
        };
        SuggestPromptsRequest: {
            /**
             * @description The user input describing what they want to accomplish
             * @example help me implement authentication
             */
            userInput: string;
            /**
             * @description Maximum number of prompts to suggest (default: 5, max: 10)
             * @default 5
             * @example 5
             */
            limit: number;
            /**
             * @description Suggestion strategy controlling AI rerank and candidate breadth
             * @example balanced
             * @enum {string}
             */
            strategy?: "fast" | "balanced" | "thorough";
            /**
             * @description When true, include debug scores (server may ignore)
             * @example false
             */
            includeScores?: boolean;
            /**
             * @description Optional extra context to improve relevance
             * @example working on routes/services layer
             */
            userContext?: string;
        };
        UpdatePromptRequestBody: {
            /** @example My New Prompt */
            title?: string;
            /** @example Translate this text: {text} */
            content?: string;
        };
        PromptImportResult: {
            /** @description Whether this individual prompt import succeeded */
            success: boolean;
            /**
             * @description The name of the prompt being imported
             * @example Code Refactoring Prompt
             */
            promptName: string;
            /**
             * Format: int64
             * @description ID of the created/updated prompt (only present on success)
             * @example 1716537600000
             */
            promptId?: number;
            /**
             * @description Error message if import failed
             * @example Prompt with this name already exists
             */
            error?: string;
            /**
             * @description Warning message for non-fatal issues
             * @example Missing frontmatter field: created
             */
            warning?: string;
            /**
             * @description Action taken for this prompt
             * @enum {string}
             */
            action: "created" | "updated" | "skipped";
        };
        MarkdownImportResult: {
            /** @description Overall success status of the import operation */
            success: boolean;
            /**
             * @description Name of the imported file
             * @example my-prompts.md
             */
            fileName: string;
            /**
             * @description Total number of prompts found in the file
             * @example 3
             */
            promptsProcessed: number;
            /**
             * @description Number of prompts successfully imported
             * @example 2
             */
            promptsImported: number;
            /** @description Detailed results for each prompt */
            results: components["schemas"]["PromptImportResult"][];
            /**
             * @description Global errors that affected the entire file
             * @default []
             * @example [
             *       "Invalid frontmatter format"
             *     ]
             */
            errors: string[];
            /**
             * @description Global warnings for the import operation
             * @default []
             * @example [
             *       "File contains no valid prompts"
             *     ]
             */
            warnings: string[];
        };
        BulkImportResult: {
            /** @description Overall success status (true if at least one prompt imported) */
            success: boolean;
            /**
             * @description Total number of files processed
             * @example 5
             */
            totalFiles: number;
            /**
             * @description Number of files successfully processed
             * @example 4
             */
            filesProcessed: number;
            /**
             * @description Total number of prompts found across all files
             * @example 15
             */
            totalPrompts: number;
            /**
             * @description Number of prompts successfully imported
             * @example 12
             */
            promptsImported: number;
            /** @description Results for each file processed */
            fileResults: components["schemas"]["MarkdownImportResult"][];
            summary: {
                /**
                 * @description Number of new prompts created
                 * @example 8
                 */
                created: number;
                /**
                 * @description Number of existing prompts updated
                 * @example 4
                 */
                updated: number;
                /**
                 * @description Number of prompts skipped
                 * @example 3
                 */
                skipped: number;
                /**
                 * @description Number of prompts that failed to import
                 * @example 0
                 */
                failed: number;
            };
        };
        BulkImportResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["BulkImportResult"];
        };
        ExportedFile: {
            /**
             * @description Generated filename for the exported prompt
             * @example code-refactoring-prompt.md
             */
            fileName: string;
            /** @description The markdown content of the exported prompt */
            content: string;
            /**
             * Format: int64
             * @description ID of the source prompt
             * @example 1716537600000
             */
            promptId: number;
            /**
             * @description Name of the source prompt
             * @example Code Refactoring Prompt
             */
            promptName: string;
        };
        MarkdownExportResult: {
            /** @description Whether the export operation succeeded */
            success: boolean;
            /**
             * @description The export format used
             * @enum {string}
             */
            format: "single-file" | "multi-file";
            /**
             * @description Number of prompts exported
             * @example 5
             */
            promptCount: number;
            /**
             * @description Filename for single-file export
             * @example exported-prompts.md
             */
            fileName?: string;
            /** @description The markdown content for single-file export */
            content?: string;
            /** @description Array of exported files for multi-file export */
            files?: components["schemas"]["ExportedFile"][];
            /** @description Export metadata and settings */
            metadata: {
                /**
                 * Format: date-time
                 * @description ISO 8601 datetime when export was generated
                 * @example 2024-01-01T12:00:00Z
                 */
                exportedAt: string;
                /**
                 * @description Total size of exported content in bytes
                 * @example 15432
                 */
                totalSize: number;
                /** @description Export settings used */
                settings: {
                    /**
                     * Format: int64
                     * @description Optional project ID to filter prompts by project
                     * @example 1716537600000
                     */
                    projectId?: number;
                    /**
                     * @description Export format: single file with all prompts or separate files per prompt
                     * @default single-file
                     * @example single-file
                     * @enum {string}
                     */
                    format: "single-file" | "multi-file";
                    /**
                     * @description Whether to include frontmatter with metadata
                     * @default true
                     * @example true
                     */
                    includeFrontmatter: boolean;
                    /**
                     * @description Whether to include created date in frontmatter
                     * @default true
                     * @example true
                     */
                    includeCreatedDate: boolean;
                    /**
                     * @description Whether to include updated date in frontmatter
                     * @default true
                     * @example true
                     */
                    includeUpdatedDate: boolean;
                    /**
                     * @description Whether to include tags in frontmatter (if available)
                     * @default true
                     * @example true
                     */
                    includeTags: boolean;
                    /**
                     * @description Whether to sanitize content for safe markdown export
                     * @default true
                     * @example true
                     */
                    sanitizeContent: boolean;
                    /**
                     * @description How to sort the exported prompts
                     * @default name
                     * @example name
                     * @enum {string}
                     */
                    sortBy: "name" | "created" | "updated";
                    /**
                     * @description Sort order for exported prompts
                     * @default asc
                     * @example asc
                     * @enum {string}
                     */
                    sortOrder: "asc" | "desc";
                };
            };
        };
        MarkdownExportResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MarkdownExportResult"];
        };
        BatchExportRequest: {
            /**
             * @description Array of prompt IDs to export
             * @example [
             *       1716537600000,
             *       1716537600001
             *     ]
             */
            promptIds: number[];
            /**
             * @description Export format: single file with all prompts or separate files per prompt
             * @default single-file
             * @example single-file
             * @enum {string}
             */
            format: "single-file" | "multi-file";
            /**
             * @description Whether to include frontmatter with metadata
             * @default true
             * @example true
             */
            includeFrontmatter: boolean;
            /**
             * @description Whether to include created date in frontmatter
             * @default true
             * @example true
             */
            includeCreatedDate: boolean;
            /**
             * @description Whether to include updated date in frontmatter
             * @default true
             * @example true
             */
            includeUpdatedDate: boolean;
            /**
             * @description Whether to include tags in frontmatter (if available)
             * @default true
             * @example true
             */
            includeTags: boolean;
            /**
             * @description Whether to sanitize content for safe markdown export
             * @default true
             * @example true
             */
            sanitizeContent: boolean;
            /**
             * @description How to sort the exported prompts
             * @default name
             * @example name
             * @enum {string}
             */
            sortBy: "name" | "created" | "updated";
            /**
             * @description Sort order for exported prompts
             * @default asc
             * @example asc
             * @enum {string}
             */
            sortOrder: "asc" | "desc";
        };
        MarkdownContentValidation: {
            /** @description Whether the content has valid YAML frontmatter (optional for prompts) */
            hasValidFrontmatter: boolean;
            /** @description Whether content can be processed (frontmatter is optional for prompts) */
            hasRequiredFields: boolean;
            /** @description Length of the content after frontmatter */
            contentLength: number;
            /** @description Estimated number of prompts based on content structure */
            estimatedPrompts: number;
            /**
             * @description Content validation warnings
             * @default []
             */
            warnings: string[];
            /**
             * @description Content validation errors
             * @default []
             */
            errors: string[];
        };
        TaskQueue: {
            id: number;
            projectId: number;
            name: string;
            description: string | null;
            maxParallelItems: number;
            isActive: boolean;
            createdAt: number;
            updatedAt: number;
        };
        UpdateQueueBody: {
            name?: string;
            description?: string;
            maxParallelItems?: number;
            /** @enum {string} */
            status?: "active" | "paused" | "inactive";
            isActive?: boolean;
        };
        QueueStats: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            queueId: number;
            queueName: string;
            totalItems: number;
            queuedItems: number;
            inProgressItems: number;
            completedItems: number;
            failedItems: number;
            cancelledItems: number;
            averageProcessingTime: number | null;
            currentAgents: string[];
            ticketCount?: number;
            taskCount?: number;
            uniqueTickets?: number;
        };
        QueueWithStats: {
            queue: components["schemas"]["TaskQueue"];
            stats: components["schemas"]["QueueStats"];
        };
        QueueItem: {
            id: number;
            queueId: number;
            /** @enum {string} */
            itemType: "ticket" | "task" | "chat" | "prompt";
            itemId: number;
            priority: number;
            /** @enum {string} */
            status: "queued" | "in_progress" | "completed" | "failed" | "cancelled";
            agentId: string | null;
            errorMessage: string | null;
            estimatedProcessingTime: number | null;
            actualProcessingTime: number | null;
            startedAt: number | null;
            completedAt: number | null;
            createdAt: number;
            updatedAt: number;
        } | null;
        GetNextTaskResponse: {
            queueItem: components["schemas"]["QueueItem"];
            ticket?: unknown;
            task?: unknown;
        };
        EnqueueItemBody: {
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            ticketId?: number;
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            taskId?: number;
            priority?: number;
            agentId?: string;
        };
        BatchEnqueueBody: {
            items: components["schemas"]["EnqueueItemBody"][];
        };
        QueueTimeline: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            queueId: number;
            currentTime: number;
            items: {
                /**
                 * Format: int64
                 * @description Entity ID - positive integer without timestamp conversion
                 * @example 1716537600000
                 */
                itemId: number;
                /**
                 * Format: int64
                 * @description Nullable optional entity ID - positive integer without timestamp conversion
                 * @example 1716537600000
                 */
                ticketId?: number;
                /**
                 * Format: int64
                 * @description Nullable optional entity ID - positive integer without timestamp conversion
                 * @example 1716537600000
                 */
                taskId?: number;
                title: string;
                estimatedStartTime: number;
                estimatedEndTime: number;
                estimatedProcessingTime: number;
                /** @enum {string} */
                status: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | "timeout";
            }[];
            totalEstimatedTime: number;
            estimatedCompletionTime: number;
        };
        ProviderKeyPublic: {
            id: number;
            provider: string;
            keyName?: string | null;
            name?: string | null;
            key?: string | null;
            secretRef?: string | null;
            baseUrl?: string | null;
            customHeaders?: {
                [key: string]: string;
            } | null;
            isDefault?: boolean;
            isActive?: boolean;
            environment?: string;
            description?: string | null;
            expiresAt?: number | null;
            lastUsed?: number | null;
            createdAt: number;
            updatedAt: number;
            /** @enum {string|null} */
            storageMethod?: "direct" | "env" | null;
            displayValue?: string | null;
        };
        ProviderKeyResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProviderKeyPublic"];
        };
        CreateProviderKey: {
            provider: string;
            keyName?: string;
            name?: string;
            secretRef?: string;
            key?: string;
            baseUrl?: string;
            customHeaders?: {
                [key: string]: string;
            };
            /** @default false */
            isDefault: boolean;
            /** @default true */
            isActive: boolean;
            /** @default production */
            environment: string;
            description?: string;
            expiresAt?: number;
            lastUsed?: number;
        };
        ProviderKeyListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProviderKeyPublic"][];
        };
        UpdateProviderKey: {
            keyName?: string;
            name?: string;
            secretRef?: string;
            key?: string;
            baseUrl?: string;
            customHeaders?: {
                [key: string]: string;
            };
            isDefault?: boolean;
            isActive?: boolean;
            environment?: string;
            description?: string;
            expiresAt?: number;
            lastUsed?: number;
        };
        TestProviderApiResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                success: boolean;
                providerId: number;
                provider: string;
                model?: string;
                latency: number;
                error?: string;
                response?: string;
            };
        };
        TestProviderRequest: {
            providerId: number;
            model?: string;
            /** @default Hello, this is a test message. */
            testPrompt: string;
        };
        BatchTestProviderApiResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                results: {
                    success: boolean;
                    providerId: number;
                    provider: string;
                    model?: string;
                    latency: number;
                    error?: string;
                    response?: string;
                }[];
                summary: {
                    total: number;
                    successful: number;
                    failed: number;
                    averageLatency?: number;
                };
            };
        };
        BatchTestProviderRequest: {
            providerIds?: number[];
            /** @default Hello, this is a test message. */
            testPrompt: string;
            /** @default false */
            includeInactive: boolean;
        };
        ProviderHealthStatusListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @enum {string} */
                status: "healthy" | "degraded" | "down" | "unhealthy" | "unknown";
                latency?: number;
                averageResponseTime?: number;
                modelCount?: number;
                lastChecked: number;
                error?: string;
            }[];
        };
        ProviderModel: {
            id: string;
            name: string;
            description?: string;
            provider: string;
            contextLength?: number;
            maxTokens?: number;
            capabilities?: string[];
        };
        CustomProviderFeatures: {
            streaming: boolean;
            functionCalling: boolean;
            structuredOutput: boolean;
            vision: boolean;
            embeddings: boolean;
        };
        ValidateCustomProviderResponse: {
            data: {
                compatible: boolean;
                models: components["schemas"]["ProviderModel"][];
                features: components["schemas"]["CustomProviderFeatures"];
                baseUrl: string;
            };
        };
        ValidateCustomProviderRequest: {
            /** Format: uri */
            baseUrl: string;
            apiKey: string;
            customHeaders?: {
                [key: string]: string;
            };
        };
        ChatMcpSessionResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                serverId: number;
                tools: {
                    id: string;
                    name: string;
                    description?: string;
                    parameters?: {
                        name: string;
                        type?: string;
                        description?: string;
                        required?: boolean;
                        enum?: (string | number)[];
                        default?: unknown;
                    }[];
                }[];
            };
        };
        ChatMcpToolInvokeResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                toolId: string;
                content: string | null;
                raw?: unknown;
            };
        };
        ChatMcpToolInvokeRequest: {
            toolId?: string;
            message?: string;
            arguments?: {
                [key: string]: unknown;
            };
            limit?: number;
        };
        ProvidersListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: string;
                name: string;
                isCustom?: boolean;
                baseUrl?: string;
                configured?: boolean;
                requiresConfiguration?: boolean;
            }[];
        };
        /** @description Optional parameters to override default model behavior (temperature, maxTokens, etc.). */
        AiSdkOptions: {
            /**
             * Format: uri
             * @description Custom Ollama server URL to use instead of the default.
             * @example http://192.168.1.100:11434
             */
            ollamaUrl?: string;
            /**
             * Format: uri
             * @description Custom LMStudio server URL to use instead of the default.
             * @example http://localhost:1234
             */
            lmstudioUrl?: string;
            /**
             * @description Controls the randomness of the output. Lower values (e.g., 0.2) make the output more focused, deterministic, and suitable for factual tasks. Higher values (e.g., 0.8) increase randomness and creativity, useful for brainstorming or creative writing. A value of 0 typically means greedy decoding (always picking the most likely token).
             * @example 0.7
             */
            temperature?: number;
            /**
             * @description The maximum number of tokens (words or parts of words) the model is allowed to generate in the response. This limits the output length and can affect cost. Note: This limit usually applies only to the *generated* tokens, not the input prompt tokens.
             * @example 4000
             */
            maxTokens?: number;
            /**
             * @description Controls diversity via nucleus sampling. It defines a probability threshold (e.g., 0.9). The model considers only the smallest set of most probable tokens whose cumulative probability exceeds this threshold for the next token selection. Lower values (e.g., 0.5) restrict choices more, leading to less random outputs. A value of 1 considers all tokens. It's often recommended to alter *either* `temperature` *or* `topP`, not both.
             * @example 1
             */
            topP?: number;
            /**
             * @description Applies a penalty to tokens based on how frequently they have already appeared in the generated text *and* the prompt. Positive values (e.g., 0.5) decrease the likelihood of the model repeating the same words or phrases verbatim, making the output less repetitive. Negative values encourage repetition.
             * @example 0.2
             */
            frequencyPenalty?: number;
            /**
             * @description Applies a penalty to tokens based on whether they have appeared *at all* in the generated text *and* the prompt so far (regardless of frequency). Positive values (e.g., 0.5) encourage the model to introduce new concepts and topics, reducing the likelihood of repeating *any* previously mentioned word. Negative values encourage staying on topic.
             * @example 0.1
             */
            presencePenalty?: number;
            /**
             * @description Restricts the model's choices for the next token to the `k` most likely candidates. For example, if `topK` is 40, the model will only consider the top 40 most probable tokens at each step. A lower value restricts choices more. Setting `topK` to 1 is equivalent to greedy decoding (same as `temperature: 0`). Less commonly used than `topP`.
             * @example 40
             */
            topK?: number;
            /**
             * @description Specifies one or more sequences of text where the AI should stop generating. Once the model generates a stop sequence, it will halt output immediately, even if `maxTokens` hasn't been reached. Useful for structured output or controlling conversational turns.
             * @example [
             *       "\nHuman:",
             *       "\n---"
             *     ]
             */
            stop?: string | string[];
            /**
             * @description Specifies the desired format for the model's response. This is highly provider-specific. A common use case is enforcing JSON output, often requiring specific model versions.
             * @example {
             *       "type": "json_object"
             *     }
             */
            response_format?: unknown;
            /**
             * @description The provider to use for the AI request.
             * @example openai
             */
            provider?: string;
            /**
             * @description The model to use for the AI request.
             * @example gpt-4o-mini
             */
            model?: string;
        };
        AiGenerateTextRequest: {
            /**
             * @description The text prompt for the AI.
             * @example Suggest 5 suitable filenames for a typescript utility file containing helper functions for string manipulation.
             */
            prompt: string;
            options?: components["schemas"]["AiSdkOptions"];
            /**
             * @description Optional system message to guide the AI behavior and persona.
             * @example You are an expert programmer. Provide concise and relevant suggestions.
             */
            systemMessage?: string;
        };
        AiGenerateTextResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description The generated text response from the AI. */
                text: string;
            };
        };
        AiGenerateStructuredResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description The generated structured data, validated against the schema defined by the 'schemaKey'. */
                output?: unknown;
            };
        };
        AiGenerateStructuredRequest: {
            /**
             * @description The key identifying the predefined structured task configuration.
             * @example filenameSuggestion
             */
            schemaKey: string;
            /**
             * @description The user's input or context for the structured generation task.
             * @example A react component for displaying user profiles
             */
            userInput: string;
            options?: components["schemas"]["AiSdkOptions"] & unknown;
        };
        UnifiedModel: {
            /**
             * @description Model identifier
             * @example gpt-4o-mini
             */
            id: string;
            /**
             * @description User-friendly model name
             * @example GPT-4o Mini
             */
            name: string;
            /**
             * @description Provider ID
             * @example openai
             */
            provider: string;
            /**
             * @description Context window size in tokens
             * @example 128000
             */
            context_length?: number;
        };
        ModelsListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["UnifiedModel"][];
        };
        UpdateProviderSettings: {
            /** Format: uri */
            ollamaUrl?: string;
            /** Format: uri */
            lmstudioUrl?: string;
        };
        Queue: {
            id: number;
            name: string;
            description: string | null;
            /** @default true */
            isActive: boolean;
            /** @default 1 */
            maxConcurrency: number;
            retryConfig: {
                [key: string]: unknown;
            } | null;
            metadata: {
                [key: string]: unknown;
            } | null;
            createdAt: number;
            updatedAt: number;
        };
        FlowData: {
            unqueued: {
                tickets: (components["schemas"]["Ticket"] & {
                    id?: number;
                    projectId?: number;
                    title?: string;
                    overview?: string | null;
                    /** @enum {string} */
                    status?: "open" | "in_progress" | "closed";
                    /** @enum {string} */
                    priority?: "low" | "normal" | "high";
                    suggestedFileIds?: string[];
                    suggestedAgentIds?: string[];
                    suggestedPromptIds?: number[];
                    queueId?: number | null;
                    queuePosition?: number | null;
                    /** @enum {string|null} */
                    queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                    queuePriority?: number | null;
                    queuedAt?: number | null;
                    queueStartedAt?: number | null;
                    queueCompletedAt?: number | null;
                    queueAgentId?: string | null;
                    queueErrorMessage?: string | null;
                    estimatedProcessingTime?: number | null;
                    actualProcessingTime?: number | null;
                    createdAt?: number;
                    updatedAt?: number;
                })[];
                tasks: (components["schemas"]["TicketTask"] & {
                    id?: number;
                    ticketId?: number;
                    content?: string;
                    description?: string | null;
                    suggestedFileIds?: string[];
                    done?: boolean;
                    /** @enum {string} */
                    status?: "pending" | "in_progress" | "completed" | "cancelled";
                    orderIndex?: number;
                    estimatedHours?: number | null;
                    dependencies?: number[];
                    tags?: string[];
                    agentId?: string | null;
                    suggestedPromptIds?: number[];
                    queueId?: number | null;
                    queuePosition?: number | null;
                    /** @enum {string|null} */
                    queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                    queuePriority?: number | null;
                    queuedAt?: number | null;
                    queueStartedAt?: number | null;
                    queueCompletedAt?: number | null;
                    queueAgentId?: string | null;
                    queueErrorMessage?: string | null;
                    estimatedProcessingTime?: number | null;
                    actualProcessingTime?: number | null;
                    createdAt?: number;
                    updatedAt?: number;
                })[];
            };
            queues: {
                [key: string]: {
                    queue: components["schemas"]["Queue"];
                    tickets: (components["schemas"]["Ticket"] & {
                        id?: number;
                        projectId?: number;
                        title?: string;
                        overview?: string | null;
                        /** @enum {string} */
                        status?: "open" | "in_progress" | "closed";
                        /** @enum {string} */
                        priority?: "low" | "normal" | "high";
                        suggestedFileIds?: string[];
                        suggestedAgentIds?: string[];
                        suggestedPromptIds?: number[];
                        queueId?: number | null;
                        queuePosition?: number | null;
                        /** @enum {string|null} */
                        queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                        queuePriority?: number | null;
                        queuedAt?: number | null;
                        queueStartedAt?: number | null;
                        queueCompletedAt?: number | null;
                        queueAgentId?: string | null;
                        queueErrorMessage?: string | null;
                        estimatedProcessingTime?: number | null;
                        actualProcessingTime?: number | null;
                        createdAt?: number;
                        updatedAt?: number;
                    })[];
                    tasks: (components["schemas"]["TicketTask"] & {
                        id?: number;
                        ticketId?: number;
                        content?: string;
                        description?: string | null;
                        suggestedFileIds?: string[];
                        done?: boolean;
                        /** @enum {string} */
                        status?: "pending" | "in_progress" | "completed" | "cancelled";
                        orderIndex?: number;
                        estimatedHours?: number | null;
                        dependencies?: number[];
                        tags?: string[];
                        agentId?: string | null;
                        suggestedPromptIds?: number[];
                        queueId?: number | null;
                        queuePosition?: number | null;
                        /** @enum {string|null} */
                        queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                        queuePriority?: number | null;
                        queuedAt?: number | null;
                        queueStartedAt?: number | null;
                        queueCompletedAt?: number | null;
                        queueAgentId?: string | null;
                        queueErrorMessage?: string | null;
                        estimatedProcessingTime?: number | null;
                        actualProcessingTime?: number | null;
                        createdAt?: number;
                        updatedAt?: number;
                    })[];
                };
            };
        };
        FlowItem: {
            id: string;
            /** @enum {string} */
            type: "ticket" | "task";
            title: string;
            description?: string;
            ticket?: components["schemas"]["Ticket"] & {
                id?: number;
                projectId?: number;
                title?: string;
                overview?: string | null;
                /** @enum {string} */
                status?: "open" | "in_progress" | "closed";
                /** @enum {string} */
                priority?: "low" | "normal" | "high";
                suggestedFileIds?: string[];
                suggestedAgentIds?: string[];
                suggestedPromptIds?: number[];
                queueId?: number | null;
                queuePosition?: number | null;
                /** @enum {string|null} */
                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                queuePriority?: number | null;
                queuedAt?: number | null;
                queueStartedAt?: number | null;
                queueCompletedAt?: number | null;
                queueAgentId?: string | null;
                queueErrorMessage?: string | null;
                estimatedProcessingTime?: number | null;
                actualProcessingTime?: number | null;
                createdAt?: number;
                updatedAt?: number;
            };
            task?: components["schemas"]["TicketTask"] & {
                id?: number;
                ticketId?: number;
                content?: string;
                description?: string | null;
                suggestedFileIds?: string[];
                done?: boolean;
                /** @enum {string} */
                status?: "pending" | "in_progress" | "completed" | "cancelled";
                orderIndex?: number;
                estimatedHours?: number | null;
                dependencies?: number[];
                tags?: string[];
                agentId?: string | null;
                suggestedPromptIds?: number[];
                queueId?: number | null;
                queuePosition?: number | null;
                /** @enum {string|null} */
                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                queuePriority?: number | null;
                queuedAt?: number | null;
                queueStartedAt?: number | null;
                queueCompletedAt?: number | null;
                queueAgentId?: string | null;
                queueErrorMessage?: string | null;
                estimatedProcessingTime?: number | null;
                actualProcessingTime?: number | null;
                createdAt?: number;
                updatedAt?: number;
            };
            queueId?: number | null;
            queuePosition?: number | null;
            queueStatus?: string | null;
            queuePriority?: number;
            created: number;
            updated: number;
        };
        FlowItemsList: components["schemas"]["FlowItem"][];
        UnqueuedItems: {
            tickets: (components["schemas"]["Ticket"] & {
                id?: number;
                projectId?: number;
                title?: string;
                overview?: string | null;
                /** @enum {string} */
                status?: "open" | "in_progress" | "closed";
                /** @enum {string} */
                priority?: "low" | "normal" | "high";
                suggestedFileIds?: string[];
                suggestedAgentIds?: string[];
                suggestedPromptIds?: number[];
                queueId?: number | null;
                queuePosition?: number | null;
                /** @enum {string|null} */
                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                queuePriority?: number | null;
                queuedAt?: number | null;
                queueStartedAt?: number | null;
                queueCompletedAt?: number | null;
                queueAgentId?: string | null;
                queueErrorMessage?: string | null;
                estimatedProcessingTime?: number | null;
                actualProcessingTime?: number | null;
                createdAt?: number;
                updatedAt?: number;
            })[];
            tasks: (components["schemas"]["TicketTask"] & {
                id?: number;
                ticketId?: number;
                content?: string;
                description?: string | null;
                suggestedFileIds?: string[];
                done?: boolean;
                /** @enum {string} */
                status?: "pending" | "in_progress" | "completed" | "cancelled";
                orderIndex?: number;
                estimatedHours?: number | null;
                dependencies?: number[];
                tags?: string[];
                agentId?: string | null;
                suggestedPromptIds?: number[];
                queueId?: number | null;
                queuePosition?: number | null;
                /** @enum {string|null} */
                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                queuePriority?: number | null;
                queuedAt?: number | null;
                queueStartedAt?: number | null;
                queueCompletedAt?: number | null;
                queueAgentId?: string | null;
                queueErrorMessage?: string | null;
                estimatedProcessingTime?: number | null;
                actualProcessingTime?: number | null;
                createdAt?: number;
                updatedAt?: number;
            })[];
        };
        QueueItems: {
            tickets: (components["schemas"]["Ticket"] & {
                id?: number;
                projectId?: number;
                title?: string;
                overview?: string | null;
                /** @enum {string} */
                status?: "open" | "in_progress" | "closed";
                /** @enum {string} */
                priority?: "low" | "normal" | "high";
                suggestedFileIds?: string[];
                suggestedAgentIds?: string[];
                suggestedPromptIds?: number[];
                queueId?: number | null;
                queuePosition?: number | null;
                /** @enum {string|null} */
                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                queuePriority?: number | null;
                queuedAt?: number | null;
                queueStartedAt?: number | null;
                queueCompletedAt?: number | null;
                queueAgentId?: string | null;
                queueErrorMessage?: string | null;
                estimatedProcessingTime?: number | null;
                actualProcessingTime?: number | null;
                createdAt?: number;
                updatedAt?: number;
            })[];
            tasks: (components["schemas"]["TicketTask"] & {
                id?: number;
                ticketId?: number;
                content?: string;
                description?: string | null;
                suggestedFileIds?: string[];
                done?: boolean;
                /** @enum {string} */
                status?: "pending" | "in_progress" | "completed" | "cancelled";
                orderIndex?: number;
                estimatedHours?: number | null;
                dependencies?: number[];
                tags?: string[];
                agentId?: string | null;
                suggestedPromptIds?: number[];
                queueId?: number | null;
                queuePosition?: number | null;
                /** @enum {string|null} */
                queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
                queuePriority?: number | null;
                queuedAt?: number | null;
                queueStartedAt?: number | null;
                queueCompletedAt?: number | null;
                queueAgentId?: string | null;
                queueErrorMessage?: string | null;
                estimatedProcessingTime?: number | null;
                actualProcessingTime?: number | null;
                createdAt?: number;
                updatedAt?: number;
            })[];
        };
        DirectoryEntry: {
            name: string;
            path: string;
            isDirectory: boolean;
            isHidden: boolean;
        };
        /** @description BrowseDirectoryData */
        BrowseDirectoryData: {
            currentPath: string;
            parentPath: string | null;
            entries: components["schemas"]["DirectoryEntry"][];
        };
        BrowseDirectoryResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["BrowseDirectoryData"];
        };
        BrowseDirectoryRequest: {
            /** @description The directory path to browse. If not provided, defaults to home directory */
            path?: string;
        };
        MCPServerConfig: {
            /**
             * @description Unique identifier for the MCP server configuration
             * @example 1234567890
             */
            id: number;
            /**
             * @description ID of the project this MCP server belongs to
             * @example 1234567890
             */
            projectId: number;
            /**
             * @description Display name for the MCP server
             * @example File System Tools
             */
            name: string;
            /**
             * @description Command to start the MCP server
             * @example npx @modelcontextprotocol/server-filesystem
             */
            command: string;
            /**
             * @description Command line arguments for the server
             * @default []
             * @example [
             *       "--root",
             *       "/path/to/project"
             *     ]
             */
            args: string[];
            /**
             * @description Environment variables for the server
             * @default {}
             * @example {
             *       "NODE_ENV": "production"
             *     }
             */
            env: {
                [key: string]: string;
            };
            /**
             * @description Whether the server is enabled
             * @default true
             * @example true
             */
            enabled: boolean;
            /**
             * @description Whether to auto-start the server when project opens
             * @default false
             * @example false
             */
            autoStart: boolean;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
             * @example 1759637630350
             */
            created: number;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
             * @example 1759637630350
             */
            updated: number;
        };
        MCPServerConfigResponse: {
            success: boolean;
            data: components["schemas"]["MCPServerConfig"];
        };
        MCPServerConfigListResponse: {
            success: boolean;
            data: components["schemas"]["MCPServerConfig"][];
        };
        UpdateMCPServerConfigBody: {
            /**
             * @description ID of the project this MCP server belongs to
             * @example 1234567890
             */
            projectId?: number;
            /**
             * @description Display name for the MCP server
             * @example File System Tools
             */
            name?: string;
            /**
             * @description Command to start the MCP server
             * @example npx @modelcontextprotocol/server-filesystem
             */
            command?: string;
            /**
             * @description Command line arguments for the server
             * @default []
             * @example [
             *       "--root",
             *       "/path/to/project"
             *     ]
             */
            args: string[];
            /**
             * @description Environment variables for the server
             * @default {}
             * @example {
             *       "NODE_ENV": "production"
             *     }
             */
            env: {
                [key: string]: string;
            };
            /**
             * @description Whether the server is enabled
             * @default true
             * @example true
             */
            enabled: boolean;
            /**
             * @description Whether to auto-start the server when project opens
             * @default false
             * @example false
             */
            autoStart: boolean;
        };
        MCPToolExecutionResult: {
            /**
             * @description Unique ID for this execution
             * @example exec_123456
             */
            id: string;
            toolId: string;
            serverId: number;
            /**
             * @description Status of the execution
             * @example success
             * @enum {string}
             */
            status: "pending" | "running" | "success" | "error";
            /** @description Result from the tool execution */
            result?: unknown;
            /** @description Error message if execution failed */
            error: string | null;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
             * @example 1759637630350
             */
            startedAt: number;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
             * @example 1759637630350
             */
            completedAt: number;
        };
        MCPToolExecutionResultResponse: {
            success: boolean;
            data: components["schemas"]["MCPToolExecutionResult"];
        };
        MCPToolExecutionRequest: {
            /**
             * @description ID of the tool to execute
             * @example read_file
             */
            toolId: string;
            /** @description ID of the MCP server to execute the tool on */
            serverId: number;
            /**
             * @description Parameters to pass to the tool
             * @default {}
             * @example {
             *       "path": "/path/to/file.txt"
             *     }
             */
            parameters: {
                [key: string]: unknown;
            };
        };
        MCPResource: {
            /**
             * @description URI of the resource
             * @example file:///path/to/file.txt
             */
            uri: string;
            /**
             * @description Display name for the resource
             * @example file.txt
             */
            name: string;
            /** @description Description of the resource */
            description?: string;
            /**
             * @description MIME type of the resource
             * @example text/plain
             */
            mimeType?: string;
            /** @description ID of the MCP server providing this resource */
            serverId: number;
        };
        MCPResourceListResponse: {
            success: boolean;
            data: components["schemas"]["MCPResource"][];
        };
        MCPToolExecution: {
            id: number;
            toolName: string;
            projectId?: number | null;
            userId?: string | null;
            sessionId?: string | null;
            /**
             * Format: int64
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            startedAt: number;
            /**
             * Format: int64
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            completedAt?: number;
            durationMs?: number | null;
            /** @enum {string} */
            status: "success" | "error" | "timeout" | "running";
            errorMessage?: string | null;
            errorCode?: string | null;
            inputParams?: string | null;
            outputSize?: number | null;
            metadata?: string | null;
        };
        MCPExecutionListResponse: {
            executions: components["schemas"]["MCPToolExecution"][];
            total: number;
            page: number;
            pageSize: number;
        };
        MCPExecutionListSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MCPExecutionListResponse"];
        };
        MCPToolSummary: {
            toolName: string;
            totalExecutions: number;
            successRate: number;
            errorRate: number;
            timeoutRate: number;
            avgDurationMs: number;
            minDurationMs: number | null;
            maxDurationMs: number | null;
            totalOutputSize: number;
            /**
             * Format: int64
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            lastExecutedAt: number;
        };
        MCPAnalyticsOverview: {
            totalExecutions: number;
            uniqueTools: number;
            overallSuccessRate: number;
            avgExecutionTime: number;
            topTools: components["schemas"]["MCPToolSummary"][];
            recentErrors: components["schemas"]["MCPToolExecution"][];
            executionTrend: {
                /**
                 * Format: int64
                 * @description ID or Timestamp in unix timestamp (milliseconds)
                 * @example 1716537600000
                 */
                timestamp: number;
                count: number;
                avgDuration: number;
            }[];
        };
        MCPAnalyticsOverviewSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MCPAnalyticsOverview"];
        };
        MCPAnalyticsStatisticsSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MCPToolSummary"][];
        };
        MCPExecutionTimeline: {
            /**
             * Format: int64
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            timestamp: number;
            toolCounts: {
                [key: string]: number;
            };
            totalCount: number;
            avgDuration: number;
            successCount: number;
            errorCount: number;
        };
        MCPExecutionTimelineSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MCPExecutionTimeline"][];
        };
        MCPErrorPattern: {
            pattern: {
                [key: string]: unknown;
            };
            toolName?: string;
            count: number;
            lastSeen: number;
        };
        MCPErrorPatternsSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MCPErrorPattern"][];
        };
        ConfigLocationsData: {
            locations: {
                path: string;
                exists: boolean;
                priority: number;
            }[];
        };
        ConfigLocationsResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ConfigLocationsData"];
        };
        MergedConfigData: {
            config: {
                mcpServers?: {
                    [key: string]: {
                        /**
                         * @default stdio
                         * @enum {string}
                         */
                        type: "stdio" | "http";
                        command: string;
                        args?: string[];
                        env?: {
                            [key: string]: string;
                        };
                        timeout?: number;
                    };
                };
                inputs?: {
                    /** @enum {string} */
                    type: "promptString" | "promptNumber" | "promptBoolean";
                    id: string;
                    description: string;
                    default?: unknown;
                    password?: boolean;
                }[];
                extends?: string | string[];
            };
        };
        MergedConfigResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MergedConfigData"];
        };
        ProjectConfigData: {
            config: {
                mcpServers?: {
                    [key: string]: {
                        /**
                         * @default stdio
                         * @enum {string}
                         */
                        type: "stdio" | "http";
                        command: string;
                        args?: string[];
                        env?: {
                            [key: string]: string;
                        };
                        timeout?: number;
                    };
                };
                inputs?: {
                    /** @enum {string} */
                    type: "promptString" | "promptNumber" | "promptBoolean";
                    id: string;
                    description: string;
                    default?: unknown;
                    password?: boolean;
                }[];
                extends?: string | string[];
            } | null;
            source?: string;
        };
        ProjectConfigResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProjectConfigData"];
        };
        ActiveMCPToolsResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                mcps: {
                    name: string;
                    /** @enum {string} */
                    type: "local" | "remote";
                    enabled: boolean;
                    toolCount: number;
                    tools: {
                        name: string;
                        description?: string;
                        category?: string;
                    }[];
                    conditionalOn?: string;
                }[];
                totalTools: number;
                provider?: string;
            };
        };
        GitFileStatus: {
            /** @description The file path relative to the repository root */
            path: string;
            /**
             * @description The git status of the file
             * @enum {string}
             */
            status: "added" | "modified" | "deleted" | "renamed" | "copied" | "untracked" | "ignored" | "unchanged";
            /** @description Whether the file is staged for commit */
            staged: boolean;
            /** @description The index status code from git */
            index: string | null;
            /** @description The working directory status code from git */
            workingDir: string | null;
        };
        GitStatus: {
            /** @description Whether the directory is a git repository */
            isRepo: boolean;
            /** @description The current branch name */
            current: string | null;
            /** @description The tracking branch name */
            tracking: string | null;
            /** @description Number of commits ahead of tracking branch */
            ahead: number;
            /** @description Number of commits behind tracking branch */
            behind: number;
            /** @description List of files with git status */
            files: components["schemas"]["GitFileStatus"][];
            /** @description List of staged file paths */
            staged: string[];
            /** @description List of modified file paths */
            modified: string[];
            /** @description List of created file paths */
            created: string[];
            /** @description List of deleted file paths */
            deleted: string[];
            /** @description List of renamed file paths */
            renamed: string[];
            /** @description List of conflicted file paths */
            conflicted: string[];
        };
        GitStatusResultResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitStatus"];
        };
        GitStatusError: {
            /** @enum {string} */
            type: "not_a_repo" | "git_not_installed" | "permission_denied" | "unknown";
            message: string;
        };
        GitStatusResult: components["schemas"]["GitStatusResultResponse"] | {
            /** @enum {boolean} */
            success: false;
            error: components["schemas"]["GitStatusError"];
        };
        GitStatusResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitStatusResult"];
        };
        StageFilesRequest: {
            /** @description Array of file paths to stage */
            filePaths: string[];
        };
        UnstageFilesRequest: {
            /** @description Array of file paths to unstage */
            filePaths: string[];
        };
        GitLogEntry: {
            hash: string;
            abbreviatedHash: string;
            message: string;
            author: {
                name: string;
                email: string;
            };
            date: string;
            /** @description Branch/tag references */
            refs?: string;
        };
        GitLogResponse: {
            success: boolean;
            data?: components["schemas"]["GitLogEntry"][];
            hasMore?: boolean;
            message?: string;
        };
        /** @description Commit author information */
        GitAuthorEnhanced: {
            name: string;
            email: string;
            /**
             * Format: uri
             * @description Gravatar or other avatar URL
             */
            avatarUrl?: string;
        };
        GitFileStats: {
            /** @description File path relative to repository root */
            path: string;
            /** @description Number of lines added */
            additions: number;
            /** @description Number of lines removed */
            deletions: number;
            /**
             * @description Change type
             * @enum {string}
             */
            status: "added" | "modified" | "deleted" | "renamed" | "copied";
            /** @description Previous path for renamed/moved files */
            oldPath?: string;
        };
        GitCommitEnhanced: {
            /** @description Full SHA-1 commit hash */
            hash: string;
            /** @description Abbreviated commit hash (7-8 chars) */
            abbreviatedHash: string;
            /** @description First line of commit message */
            subject: string;
            /** @description Full commit message including subject */
            body: string;
            author: components["schemas"]["GitAuthorEnhanced"];
            committer: components["schemas"]["GitAuthorEnhanced"] & unknown;
            /** @description ISO 8601 timestamp when authored */
            authoredDate: string;
            /** @description ISO 8601 timestamp when committed */
            committedDate: string;
            /** @description Human-readable relative time (e.g., "2 hours ago") */
            relativeTime: string;
            /** @description Parent commit hashes */
            parents: string[];
            /** @description Branch and tag references pointing to this commit */
            refs: string[];
            /** @description Summary statistics for the commit */
            stats: {
                /** @description Total number of files changed */
                filesChanged: number;
                /** @description Total lines added */
                additions: number;
                /** @description Total lines removed */
                deletions: number;
            };
            /** @description Per-file change statistics */
            fileStats?: components["schemas"]["GitFileStats"][];
        };
        GitPagination: {
            /** @description Current page number (1-based) */
            page: number;
            /** @description Number of items per page */
            perPage: number;
            /** @description Total number of items if available */
            totalCount?: number;
            /** @description Whether more items are available */
            hasMore: boolean;
            /** @description Cursor for cursor-based pagination */
            cursor?: string;
        };
        GitCommitLogEnhanced: {
            success: boolean;
            data?: {
                commits: components["schemas"]["GitCommitEnhanced"][];
                pagination: components["schemas"]["GitPagination"];
                /** @description Branch name these commits are from */
                branch: string;
            };
            message?: string;
        };
        CommitLogEnhancedResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitCommitLogEnhanced"];
        };
        GitFileDiff: {
            path: string;
            /** @enum {string} */
            status: "added" | "modified" | "deleted" | "renamed" | "copied";
            additions: number;
            deletions: number;
            binary: boolean;
            oldPath?: string;
            /** @description Unified diff content if requested */
            diff?: string;
        };
        GitCommitDetail: {
            success: boolean;
            data?: {
                commit: components["schemas"]["GitCommitEnhanced"];
                /** @description Detailed file changes */
                files: components["schemas"]["GitFileDiff"][];
                /** @description Full unified diff if requested */
                totalDiff?: string;
            };
            message?: string;
        };
        CommitDetailResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitCommitDetail"];
        };
        GitDiffResponse: {
            success: boolean;
            data?: {
                filePath: string;
                /** @description The raw diff content */
                diff: string;
                staged: boolean;
                commit?: string;
            };
            message?: string;
        };
        GitBranch: {
            /** @description Branch name */
            name: string;
            /** @description Whether this is the current branch */
            current: boolean;
            /** @description Whether this is a remote branch */
            isRemote: boolean;
            /** @description Latest commit hash */
            commit: string;
            /** @description Tracking branch name */
            tracking: string | null;
            /** @description Commits ahead of tracking branch */
            ahead: number;
            /** @description Commits behind tracking branch */
            behind: number;
        };
        BranchListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitBranch"][];
        };
        GitBranchEnhanced: {
            /** @description Branch name */
            name: string;
            /** @description Whether this is the currently checked out branch */
            current: boolean;
            /** @description Whether this is a remote branch */
            isRemote: boolean;
            /** @description Whether the branch is protected */
            isProtected?: boolean;
            /** @description Summary of the latest commit on this branch */
            latestCommit: {
                hash: string;
                abbreviatedHash: string;
                subject: string;
                /** @description Author name */
                author: string;
                relativeTime: string;
            };
            /** @description Remote tracking branch */
            tracking: string | null;
            /** @description Commits ahead of tracking/main branch */
            ahead: number;
            /** @description Commits behind tracking/main branch */
            behind: number;
            /** @description ISO 8601 timestamp of last activity */
            lastActivity?: string;
        };
        GitBranchListEnhancedResponse: {
            success: boolean;
            data?: {
                branches: components["schemas"]["GitBranchEnhanced"][];
                /** @description Name of current branch */
                current: string | null;
                /** @description Default branch name (e.g., main, master) */
                defaultBranch: string;
            };
            message?: string;
        };
        BranchListEnhancedResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitBranchListEnhancedResponse"];
        };
        GitCreateBranchRequest: {
            name: string;
            /** @description Branch or commit to start from */
            startPoint?: string;
        };
        GitSwitchBranchRequest: {
            name: string;
            createIfNotExists?: boolean;
        };
        GitStash: {
            index: number;
            message: string;
            /** @description Branch where stash was created */
            branch: string;
            date: string;
        };
        StashListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitStash"][];
        };
        GitWorktree: {
            /** @description Absolute path to the worktree */
            path: string;
            /** @description Branch checked out in this worktree */
            branch: string;
            /** @description Current commit hash */
            commit: string;
            /** @description Whether this is the main worktree */
            isMain: boolean;
            /** @description Whether the worktree is locked */
            isLocked: boolean;
            /** @description Reason for locking if locked */
            lockReason?: string;
            /** @description Whether the worktree can be pruned */
            prunable?: boolean;
        };
        WorktreeListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitWorktree"][];
        };
        GitWorktreeAddRequest: {
            /** @description Path where to create the worktree */
            path: string;
            /** @description Branch to check out */
            branch?: string;
            /** @description Create new branch with this name */
            newBranch?: string;
            /** @description Commit/tag to check out */
            commitish?: string;
            /** @description Detach HEAD at specified commit */
            detach?: boolean;
        };
        GitWorktreeRemoveRequest: {
            /** @description Path of the worktree to remove */
            path: string;
            /** @description Force removal even with uncommitted changes */
            force?: boolean;
        };
        GitWorktreeLockRequest: {
            /** @description Path of the worktree to lock */
            path: string;
            /** @description Reason for locking */
            reason?: string;
        };
        PruneWorktreesResponse: {
            /** @enum {boolean} */
            success: true;
            data: string[];
            message: string;
        };
        GitRemote: {
            name: string;
            /** @description Fetch URL */
            fetch: string;
            /** @description Push URL */
            push: string;
        };
        RemotesResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitRemote"][];
        };
        GitOperationResponse: {
            /** @enum {boolean} */
            success: true;
            message: string;
        };
        GitPushRequest: {
            /** @default origin */
            remote: string;
            /** @description Current branch if not specified */
            branch?: string;
            force?: boolean;
            setUpstream?: boolean;
        };
        /** @description Tagger info for annotated tags */
        GitCommitAuthor: {
            name: string;
            email: string;
            /** @description ISO date string */
            date: string;
        };
        GitTag: {
            name: string;
            /** @description Commit hash */
            commit: string;
            /** @description Tag message for annotated tags */
            annotation?: string;
            tagger?: components["schemas"]["GitCommitAuthor"];
        };
        TagsResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["GitTag"][];
        };
        GitResetRequest: {
            /** @description Commit reference to reset to */
            ref: string;
            /**
             * @default mixed
             * @enum {string}
             */
            mode: "soft" | "mixed" | "hard";
        };
        DetectToolsResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                tools: {
                    tool: string;
                    name: string;
                    installed: boolean;
                    configPath?: string;
                    configExists?: boolean;
                    hasPromptliano?: boolean;
                }[];
                platform: string;
            };
        };
        InstallationStatusResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                projectConfig: {
                    projectId: number;
                    projectName: string;
                    mcpEnabled: boolean;
                    installedTools: {
                        tool: string;
                        installedAt: number;
                        configPath?: string;
                        serverName: string;
                    }[];
                    customInstructions?: string;
                } | null;
                connectionStatus: {
                    connected: boolean;
                    sessionId?: string;
                    lastActivity?: number;
                    projectId?: number;
                };
            };
        };
        InstallResultResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                message: string;
                configPath?: string;
                backedUp?: boolean;
                backupPath?: string;
            };
        };
        UninstallResultResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                message: string;
            };
        };
        ProcessInfo: {
            /** @description Internal process identifier */
            id: string;
            /** @description Associated project ID */
            projectId: number;
            /** @description OS process PID (if available) */
            pid: number | null;
            /** @description Optional display name */
            name?: string;
            /** @description Command executable */
            command: string;
            /**
             * @description Command arguments
             * @default []
             */
            args: string[];
            /** @description Working directory for the process */
            cwd: string;
            /**
             * @description Current process status
             * @enum {string}
             */
            status: "running" | "stopped" | "exited" | "error";
            /** @description Start timestamp (ms since epoch) */
            startedAt: number;
            /** @description Exit timestamp (ms since epoch) */
            exitedAt?: number | null;
            /** @description Exit code if exited */
            exitCode?: number | null;
            /**
             * @description Recent output lines
             * @default {
             *       "stdout": [],
             *       "stderr": []
             *     }
             */
            lastOutput: {
                stdout: string[];
                stderr: string[];
            };
        };
        ProcessListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProcessInfo"][];
        };
        ProjectScript: {
            /** @description Name from the package.json */
            packageName: string;
            /** @description Absolute path to the package directory */
            packagePath: string;
            /** @description Script key in package.json */
            scriptName: string;
            /** @description Script command content */
            command: string;
            /**
             * @description Inferred package manager
             * @enum {string}
             */
            packageManager: "npm" | "bun" | "yarn" | "pnpm";
            /** @description True if located under a workspace directory like packages/* */
            workspace: boolean;
        };
        ProjectScriptListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProjectScript"][];
        };
        ProcessDetailResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProcessInfo"];
        };
        ProcessStartRequest: {
            /** @description Command to execute (binary/script) */
            command: string;
            /** @default [] */
            args: string[];
            name?: string;
            /** @description Override working directory; defaults to project path */
            cwd?: string;
            env?: {
                [key: string]: string;
            };
        };
        ProcessStopResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProcessInfo"];
        };
        ProcessHistoryListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: number;
                projectId: number;
                processId: string;
                pid?: number | null;
                name?: string | null;
                command: string;
                /** @enum {string} */
                status: "running" | "stopped" | "exited" | "error" | "killed";
                startedAt: number;
                exitedAt?: number | null;
                exitCode?: number | null;
            }[];
        };
        ProcessLogsListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: number;
                runId: number;
                timestamp: number;
                /** @enum {string} */
                type: "stdout" | "stderr" | "system";
                content: string;
                lineNumber: number;
            }[];
        };
        ProcessPortsListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: number;
                port: number;
                /** @enum {string} */
                protocol: "tcp" | "udp";
                address: string;
                pid?: number | null;
                processName?: string | null;
                /** @enum {string} */
                state: "listening" | "established" | "closed";
            }[];
        };
        KillByPortResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                pid: number;
            };
        };
        ScanPortsListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: number;
                port: number;
                /** @enum {string} */
                protocol: "tcp" | "udp";
                address: string;
                pid?: number | null;
                processName?: string | null;
                /** @enum {string} */
                state: "listening" | "established" | "closed";
            }[];
        };
        CopilotProxyHealth: {
            success: boolean;
            upstream: string;
            checked?: boolean;
            status?: number;
            error?: string;
        };
        ModelConfig: {
            id: number;
            name: string;
            displayName: string | null;
            provider: string;
            model: string;
            temperature: number | null;
            maxTokens: number | null;
            topP: number | null;
            topK: number | null;
            frequencyPenalty: number | null;
            presencePenalty: number | null;
            responseFormat: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            systemPrompt: string | null;
            isSystemPreset: boolean;
            isDefault: boolean;
            isActive: boolean;
            description: string | null;
            /** @enum {string|null} */
            presetCategory: "low" | "medium" | "high" | "planning" | "custom" | null;
            uiIcon: string | null;
            uiColor: string | null;
            uiOrder: number | null;
            createdAt: number;
            updatedAt: number;
        };
        ModelConfigListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ModelConfig"][];
        };
        ModelConfigResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ModelConfig"];
        };
        CreateModelConfig: {
            name: string;
            displayName?: string | null;
            provider: string;
            model: string;
            temperature?: number | null;
            maxTokens?: number | null;
            topP?: number | null;
            topK?: number | null;
            frequencyPenalty?: number | null;
            presencePenalty?: number | null;
            responseFormat?: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            systemPrompt?: string | null;
            isSystemPreset?: boolean;
            isDefault?: boolean;
            isActive?: boolean;
            description?: string | null;
            /** @enum {string|null} */
            presetCategory?: "low" | "medium" | "high" | "planning" | "custom" | null;
            uiIcon?: string | null;
            uiColor?: string | null;
            uiOrder?: number | null;
        };
        UpdateModelConfig: {
            name?: string;
            displayName?: string | null;
            provider?: string;
            model?: string;
            temperature?: number | null;
            maxTokens?: number | null;
            topP?: number | null;
            topK?: number | null;
            frequencyPenalty?: number | null;
            presencePenalty?: number | null;
            responseFormat?: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            systemPrompt?: string | null;
            isSystemPreset?: boolean;
            isDefault?: boolean;
            isActive?: boolean;
            description?: string | null;
            /** @enum {string|null} */
            presetCategory?: "low" | "medium" | "high" | "planning" | "custom" | null;
            uiIcon?: string | null;
            uiColor?: string | null;
            uiOrder?: number | null;
        };
        ModelPresetWithConfig: {
            id: number;
            name: string;
            description: string | null;
            configId: number;
            /** @enum {string|null} */
            category: "general" | "coding" | "creative" | "analysis" | "custom" | "chat" | "productivity" | null;
            isSystemPreset: boolean;
            isActive: boolean;
            usageCount: number;
            lastUsedAt: number | null;
            metadata: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            createdAt: number;
            updatedAt: number;
            config: components["schemas"]["ModelConfig"];
        };
        ModelPresetsWithConfigResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ModelPresetWithConfig"][];
        };
        ModelPreset: {
            id: number;
            name: string;
            description: string | null;
            configId: number;
            /** @enum {string|null} */
            category: "general" | "coding" | "creative" | "analysis" | "custom" | "chat" | "productivity" | null;
            isSystemPreset: boolean;
            isActive: boolean;
            usageCount: number;
            lastUsedAt: number | null;
            metadata: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
            createdAt: number;
            updatedAt: number;
        };
        ModelPresetListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ModelPreset"][];
        };
        ModelPresetWithConfigResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ModelPresetWithConfig"];
        };
        ModelPresetResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ModelPreset"];
        };
        CreateModelPreset: {
            name: string;
            description?: string | null;
            configId: number;
            /** @enum {string|null} */
            category?: "general" | "coding" | "creative" | "analysis" | "custom" | "chat" | "productivity" | null;
            isSystemPreset?: boolean;
            isActive?: boolean;
            metadata?: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
        };
        UpdateModelPreset: {
            name?: string;
            description?: string | null;
            configId?: number;
            /** @enum {string|null} */
            category?: "general" | "coding" | "creative" | "analysis" | "custom" | "chat" | "productivity" | null;
            isSystemPreset?: boolean;
            isActive?: boolean;
            metadata?: string | number | boolean | null | {
                [key: string]: unknown;
            } | unknown[];
        };
        ExportDataResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                configs: components["schemas"]["ModelConfig"][];
                presets: components["schemas"]["ModelPreset"][];
            };
        };
        ImportResultResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                configsImported: number;
                presetsImported: number;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    generateProjectTabName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tabId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    projectId: number;
                    tabData?: {
                        selectedFiles?: number[];
                        userPrompt?: string;
                    };
                    existingNames?: string[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: true;
                        data: {
                            name: string;
                            /** @enum {string} */
                            status: "success" | "fallback";
                            generatedAt: string;
                        };
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    listProjectProcesses: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    listProjectScripts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectScriptListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    startProjectProcess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProcessStartRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    stopProjectProcess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                processId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessStopResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    getProcessHistory: {
        parameters: {
            query?: {
                limit?: string;
                offset?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessHistoryListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    getProcessLogs: {
        parameters: {
            query?: {
                limit?: string;
                offset?: string;
                type?: "stdout" | "stderr" | "system" | "all";
            };
            header?: never;
            path: {
                id: string;
                processId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessLogsListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    getProcessPorts: {
        parameters: {
            query?: {
                state?: "listening" | "established" | "closed" | "all";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessPortsListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    killProcessByPort: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                port: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KillByPortResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    scanProcessPorts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScanPortsListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    runProjectScript: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    scriptName: string;
                    /**
                     * @default bun
                     * @enum {string}
                     */
                    packageManager?: "npm" | "bun" | "yarn" | "pnpm";
                    packagePath?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessDetailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    getCopilotProxyHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CopilotProxyHealth"];
                };
            };
        };
    };
    postCopilotEmbedToggle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    enabled: boolean;
                };
            };
        };
        responses: {
            /** @description Applied */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: true;
                        enabled: boolean;
                    };
                };
            };
        };
    };
    postCopilotEmbedSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    accountType?: "individual" | "business" | "enterprise";
                    rateLimitSeconds?: number;
                    rateLimitWait?: boolean;
                    manualApprove?: boolean;
                    showTokens?: boolean;
                };
            };
        };
        responses: {
            /** @description Applied */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: true;
                        applied: {
                            /** @enum {string} */
                            accountType: "individual" | "business" | "enterprise";
                            rateLimitSeconds: number | null;
                            rateLimitWait: boolean;
                            manualApprove: boolean;
                            showTokens: boolean;
                        };
                    };
                };
            };
        };
    };
    postCopilotEmbedAuthStart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: true;
                        userCode: string;
                        verificationUri: string;
                        expiresIn: number;
                        interval: number;
                        device?: {
                            device_code: string;
                            user_code: string;
                            verification_uri: string;
                            expires_in: number;
                            interval: number;
                        };
                    };
                };
            };
        };
    };
    postCopilotEmbedAuthComplete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    device: {
                        device_code: string;
                        user_code: string;
                        verification_uri: string;
                        expires_in: number;
                        interval: number;
                    };
                };
            };
        };
        responses: {
            /** @description Authorized */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: true;
                        authorized: boolean;
                    };
                };
            };
        };
    };
    getCopilotEmbedStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: true;
                        authorized: boolean;
                        /** @enum {string} */
                        accountType: "individual" | "business" | "enterprise";
                        modelsCount?: number;
                        lastRefreshed?: number;
                    };
                };
            };
        };
    };
}
