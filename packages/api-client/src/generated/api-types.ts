/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all chat sessions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new chat session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Data for the new chat session */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateChatRequestBody"];
                };
            };
            responses: {
                /** @description Chat created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get messages for a specific chat */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatMessageListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat completion (streaming, chat-associated)
         * @description Continues a chat session identified by chatId, streams response using Vercel AI SDK via UnifiedProviderService.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Chat ID, user message, provider, model, and options for the streaming AI chat completion. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiChatStreamRequest"];
                };
            };
            responses: {
                /** @description Successfully initiated AI response stream. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
                /** @description Bad Request (e.g., missing API key for provider, invalid provider/model) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Chat session (chatId) not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation error (invalid request body) */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error or AI provider communication error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}/fork": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fork a chat session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: number;
                };
                cookie?: never;
            };
            /** @description Optional message IDs to exclude from the fork */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ForkChatRequestBody"];
                };
            };
            responses: {
                /** @description Chat forked successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}/fork/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fork a chat session from a specific message */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: number;
                    messageId: number;
                };
                cookie?: never;
            };
            /** @description Optional message IDs to exclude from the fork */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ForkChatFromMessageRequestBody"];
                };
            };
            responses: {
                /** @description Chat forked successfully from message */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}/messages/{messageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a specific message */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: number;
                    messageId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chats/{chatId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a chat session and its messages */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update chat properties (e.g., title) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chatId: number;
                };
                cookie?: never;
            };
            /** @description Data to update for the chat */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateChatRequestBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all projects */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new project and sync its files */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateProjectRequestBody"];
                };
            };
            responses: {
                /** @description Project created and initial sync started */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                /** @description Project created, but post-creation steps encountered issues */
                207: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponseMultiStatus"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific project by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a project and its associated data */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a project's details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateProjectRequestBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/projects/{projectId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Manually trigger a full file sync for a project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/sync-stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Trigger a file sync with real-time progress updates via SSE */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sync progress stream */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of files associated with a project */
        get: {
            parameters: {
                query?: {
                    includeAllVersions?: boolean | null;
                    /** @description Maximum number of files to return */
                    limit?: number;
                    /** @description Number of files to skip */
                    offset?: number | null;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FileListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get project files metadata without content (for performance) */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of files to return */
                    limit?: number;
                    /** @description Number of files to skip */
                    offset?: number | null;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectFileWithoutContentListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update content of multiple files in a project (creates new versions) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        updates: {
                            fileId: number;
                            content: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["ProjectFile"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the content of a specific file (creates new version) */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                    fileId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        content: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FileResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh project files (sync) optionally limited to a folder */
        post: {
            parameters: {
                query?: {
                    folder?: string;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FileListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a combined summary of all files in the project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectSummaryResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/summary/advanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get an advanced project summary with customizable options */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            /** @description Summary generation options */
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        depth?: "minimal" | "standard" | "detailed";
                        /** @enum {string} */
                        format?: "xml" | "json" | "markdown";
                        /** @enum {string} */
                        strategy?: "fast" | "balanced" | "thorough";
                        focus?: string[];
                        includeImports?: boolean;
                        includeExports?: boolean;
                        maxTokens?: number;
                        progressive?: boolean;
                        expand?: string[];
                        includeMetrics?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/summary/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get metrics about project summary generation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/summary/invalidate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invalidate the project summary cache */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompt/optimize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Optimize a user-provided prompt using an AI model */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The user prompt context to optimize */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OptimizePromptRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OptimizePromptResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/suggest-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Suggest relevant files based on user input and project context */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The prompt to analyze for file suggestions */
                        prompt: string;
                        /**
                         * @description Maximum number of files to suggest
                         * @default 10
                         */
                        limit?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["ProjectFile"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Summarize specified files in a project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Array of file IDs to summarize */
                        fileIds: number[];
                        /**
                         * @description Force re-summarization of already summarized files
                         * @default false
                         */
                        force?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                included: number;
                                skipped: number;
                                updatedFiles: components["schemas"]["ProjectFile"][];
                                skippedReasons?: {
                                    empty: number;
                                    tooLarge: number;
                                    errors: number;
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/files/remove-summaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove summaries from specified files */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Array of file IDs to remove summaries from */
                        fileIds: number[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                removedCount: number;
                                message: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get comprehensive statistics for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                fileStats: {
                                    totalFiles: number;
                                    totalSize: number;
                                    filesByType: {
                                        [key: string]: number;
                                    };
                                    sizeByType: {
                                        [key: string]: number;
                                    };
                                    filesByCategory: {
                                        source: number;
                                        tests: number;
                                        docs: number;
                                        config: number;
                                        other: number;
                                    };
                                    filesWithSummaries: number;
                                    averageSummaryLength: number;
                                };
                                ticketStats: {
                                    totalTickets: number;
                                    ticketsByStatus: {
                                        open: number;
                                        in_progress: number;
                                        closed: number;
                                    };
                                    ticketsByPriority: {
                                        low: number;
                                        normal: number;
                                        high: number;
                                    };
                                    averageTasksPerTicket: number;
                                };
                                taskStats: {
                                    totalTasks: number;
                                    completedTasks: number;
                                    completionRate: number;
                                    tasksByTicket: {
                                        ticketId: number;
                                        ticketTitle: string;
                                        totalTasks: number;
                                        completedTasks: number;
                                    }[];
                                };
                                promptStats: {
                                    totalPrompts: number;
                                    totalTokens: number;
                                    averagePromptLength: number;
                                    promptTypes: {
                                        [key: string]: number;
                                    };
                                };
                                activityStats: {
                                    recentUpdates: number;
                                    lastUpdateTime: number;
                                    creationTrend: {
                                        date: string;
                                        files: number;
                                        tickets: number;
                                        tasks: number;
                                    }[];
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/batch-summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start batch summarization of unsummarized files */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @default mixed
                         * @enum {string}
                         */
                        strategy?: "imports" | "directory" | "semantic" | "mixed";
                        options?: {
                            maxGroupSize?: number;
                            maxTokensPerGroup?: number;
                            priorityThreshold?: number;
                            maxConcurrentGroups?: number;
                            staleThresholdDays?: number;
                            includeStaleFiles?: boolean;
                            retryFailedFiles?: boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                batchId: string;
                                currentGroup: string;
                                groupIndex: number;
                                totalGroups: number;
                                filesProcessed: number;
                                totalFiles: number;
                                tokensUsed: number;
                                errors: string[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/batch-summarize/{batchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get progress of a batch summarization operation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                    batchId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                batchId: string;
                                currentGroup: string;
                                groupIndex: number;
                                totalGroups: number;
                                filesProcessed: number;
                                totalFiles: number;
                                tokensUsed: number;
                                errors: string[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Cancel a running batch summarization */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                    batchId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/summarization-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get file summarization statistics for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                projectId: number;
                                totalFiles: number;
                                summarizedFiles: number;
                                unsummarizedFiles: number;
                                staleFiles: number;
                                failedFiles: number;
                                averageTokensPerFile: number;
                                lastBatchRun?: number;
                                filesByStatus: {
                                    pending: number;
                                    in_progress: number;
                                    completed: number;
                                    failed: number;
                                    skipped: number;
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/preview-file-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Preview how files would be grouped for summarization */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @default mixed
                         * @enum {string}
                         */
                        strategy?: "imports" | "directory" | "semantic" | "mixed";
                        maxGroupSize?: number;
                        includeStaleFiles?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                groups: {
                                    id: string;
                                    name: string;
                                    /** @enum {string} */
                                    strategy: "imports" | "directory" | "semantic" | "mixed";
                                    fileIds: number[];
                                    estimatedTokens?: number;
                                    priority: number;
                                }[];
                                totalFiles: number;
                                totalGroups: number;
                                estimatedTotalTokens: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all configured provider keys (excluding secrets) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Add a new API key for an AI provider */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateProviderKeyRequestBody"];
                };
            };
            responses: {
                /** @description Provider key created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keys/{keyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific provider key by ID (including secret) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    keyId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a provider key */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    keyId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a provider key's details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    keyId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProviderKeyRequestBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderKeyResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/providers/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test a single provider connection
         * @description Test the connection to a specific AI provider and retrieve available models
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TestProviderRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TestProviderApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/batch-test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test multiple providers at once
         * @description Test connections to multiple AI providers in parallel or sequentially
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BatchTestProviderRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BatchTestProviderApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get health status of all configured providers
         * @description Retrieve health status information for all configured AI providers
         */
        get: {
            parameters: {
                query?: {
                    /** @description Force fresh health check instead of using cached data */
                    refresh?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProviderHealthStatusListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update provider settings (URLs for local providers)
         * @description Update custom URLs for local AI providers like Ollama and LMStudio
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        ollamaUrl?: string;
                        lmstudioUrl?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keys/validate-custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate a custom OpenAI-compatible provider */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ValidateCustomProviderRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidateCustomProviderResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all available prompts */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new prompt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreatePromptRequestBody"];
                };
            };
            responses: {
                /** @description Prompt created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List prompts associated with a specific project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/suggest-prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get AI-suggested prompts based on user input
         * @description Uses AI to analyze user input and suggest the most relevant prompts from the project
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SuggestPromptsRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuggestPromptsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/prompts/{promptId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Associate a prompt with a project */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                    promptId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Disassociate a prompt from a project */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                    promptId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/{promptId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific prompt by its ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    promptId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a prompt */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    promptId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a prompt's details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    promptId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePromptRequestBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromptResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/prompts/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import prompts from markdown files
         * @description Upload and import one or more markdown files containing prompts with frontmatter
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** @description Markdown file(s) to import (max 10MB per file) */
                        files?: string | string[] | unknown;
                        /** @description Optional project ID to associate imported prompts with */
                        projectId?: number;
                        /**
                         * @description Whether to overwrite existing prompts with the same name
                         * @default false
                         */
                        overwriteExisting?: boolean | null;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkImportResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description File too large */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/{promptId}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export a single prompt as markdown
         * @description Download a prompt as a markdown file with frontmatter
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    promptId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Prompt exported successfully */
                200: {
                    headers: {
                        "Content-Type"?: string;
                        "Content-Disposition": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                /** @description Prompt not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/export-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export multiple prompts as markdown
         * @description Export multiple prompts to markdown format
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BatchExportRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MarkdownExportResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/prompts/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import prompts to a specific project
         * @description Upload and import markdown files with prompts directly to a project
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** @description Markdown file(s) to import (max 10MB per file) */
                        files?: string | string[] | unknown;
                        /**
                         * @description Whether to overwrite existing prompts with the same name
                         * @default false
                         */
                        overwriteExisting?: boolean | null;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkImportResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description File too large */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/prompts/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export all prompts from a project
         * @description Download all prompts from a project as markdown file(s)
         */
        get: {
            parameters: {
                query?: {
                    format?: "single-file" | "multi-file";
                    sortBy?: "name" | "created" | "updated";
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MarkdownExportResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prompts/validate-markdown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate markdown content for prompt import
         * @description Validates markdown content structure and frontmatter for prompt import
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Markdown content to validate */
                        content: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["MarkdownContentValidation"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new ticket */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateTicketBody"];
                };
            };
            responses: {
                /** @description Ticket created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a ticket by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a ticket */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a ticket */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateTicketBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/tickets/{ticketId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete a ticket and mark all tasks as done */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CompleteTicketResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/link-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Link files to a ticket */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LinkFilesBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LinkedFilesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/suggest-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get AI suggestions for relevant files */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SuggestFilesBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuggestedFilesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/suggest-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get AI suggestions for tasks */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SuggestTasksBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuggestedTasksResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all tickets for a project */
        get: {
            parameters: {
                query?: {
                    status?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/tickets-with-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tickets with task counts */
        get: {
            parameters: {
                query?: {
                    status?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketWithTaskCountListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/tickets-with-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tickets with their tasks */
        get: {
            parameters: {
                query?: {
                    status?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketWithTasksListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tasks for a ticket */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new task for a ticket */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateTaskBody"];
                };
            };
            responses: {
                /** @description Task created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/{ticketId}/tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a task */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a task */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateTaskBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/tickets/{ticketId}/tasks/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reorder tasks within a ticket */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReorderTasksBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/tickets/{ticketId}/auto-generate-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Auto-generate tasks from ticket overview */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/bulk-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tasks for multiple tickets */
        get: {
            parameters: {
                query: {
                    ids: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkTasksResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/:projectId/queues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        description?: string;
                        maxParallelItems?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                deleted: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateQueueBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/tickets/:ticketId/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number;
                        priority?: number;
                        includeTasks?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["Ticket"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/:ticketId/tasks/:taskId/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number;
                    taskId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number;
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TicketTask"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/:ticketId/dequeue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["Ticket"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tickets/:ticketId/tasks/:taskId/dequeue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number;
                    taskId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TicketTask"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueStats"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/:projectId/queues-with-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueWithStats"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/next-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        agentId?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["GetNextTaskResponse"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/:projectId/unqueued-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                tickets: components["schemas"]["Ticket"][];
                                tasks: components["schemas"]["TicketTask"][];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TaskQueue"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queue/:itemType/:itemId/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemType: "ticket" | "task";
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        ticketId?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                completed: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queue/:itemType/:itemId/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemType: "ticket" | "task";
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        errorMessage: string;
                        ticketId?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                failed: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queue/:itemType/:itemId/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemType: "ticket" | "task";
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        targetQueueId: number | null;
                        ticketId?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                moved: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/enqueue-ticket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        ticketId: number;
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueItem"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    status?: string;
                };
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                queueItem: components["schemas"]["QueueItem"];
                                ticket?: unknown;
                                task?: unknown;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        ticketId?: number;
                        taskId?: number;
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueItem"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/batch-enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BatchEnqueueBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueItem"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/queues/:queueId/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queueId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["QueueTimeline"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/flow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get complete flow data for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            unqueued: {
                                tickets: components["schemas"]["Ticket"][];
                                tasks: components["schemas"]["TicketTask"][];
                            };
                            queues: {
                                [key: string]: {
                                    queue: components["schemas"]["TaskQueue"];
                                    tickets: components["schemas"]["Ticket"][];
                                    tasks: components["schemas"]["TicketTask"][];
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/flow/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all flow items as a flat list */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @enum {string} */
                            type: "ticket" | "task";
                            title: string;
                            description?: string;
                            ticket?: components["schemas"]["Ticket"];
                            task?: components["schemas"]["TicketTask"];
                            queueId?: number | null;
                            queuePosition?: number | null;
                            queueStatus?: string | null;
                            queuePriority?: number;
                            created: number;
                            updated: number;
                        }[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/flow/unqueued": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all unqueued tickets and tasks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            tickets: components["schemas"]["Ticket"][];
                            tasks: components["schemas"]["TicketTask"][];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/tickets/{ticketId}/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enqueue a ticket to a queue */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: number | null;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number | null;
                        /** @default 0 */
                        priority?: number;
                        /** @default false */
                        includeTasks?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Ticket"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/tasks/{taskId}/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enqueue a task to a queue */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskId: number | null;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number | null;
                        /** @default 0 */
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTask"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/tickets/{ticketId}/dequeue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a ticket from its queue */
        post: {
            parameters: {
                query?: {
                    includeTasks?: string;
                };
                header?: never;
                path: {
                    ticketId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Ticket"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/tasks/{taskId}/dequeue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a task from its queue */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    taskId: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTask"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move an item between queues or to unqueued */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        itemType: "ticket" | "task";
                        itemId: number | null;
                        targetQueueId: number | null;
                        /** @default 0 */
                        priority?: number;
                        /** @default false */
                        includeTasks?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @enum {string} */
                            type: "ticket" | "task";
                            title: string;
                            description?: string;
                            ticket?: components["schemas"]["Ticket"];
                            task?: components["schemas"]["TicketTask"];
                            queueId?: number | null;
                            queuePosition?: number | null;
                            queueStatus?: string | null;
                            queuePriority?: number;
                            created: number;
                            updated: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Persist new order for items in a queue */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        queueId: number | null;
                        items: {
                            /** @enum {string} */
                            itemType: "ticket" | "task";
                            itemId: number | null;
                            ticketId?: number | null;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/process/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark an item as being processed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        itemType: "ticket" | "task";
                        itemId: number | null;
                        agentId: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/process/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark an item as completed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        itemType: "ticket" | "task";
                        itemId: number | null;
                        processingTime?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/process/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark an item as failed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        itemType: "ticket" | "task";
                        itemId: number | null;
                        errorMessage: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flow/bulk-move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move multiple items to a queue or unqueued */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        items: {
                            /** @enum {string} */
                            itemType: "ticket" | "task";
                            itemId: number | null;
                        }[];
                        targetQueueId: number | null;
                        /** @default 0 */
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            movedCount: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all available providers including custom ones */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProvidersListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gen-ai/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate text using a specified model and prompt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiGenerateTextRequest"];
                };
            };
            responses: {
                /** @description Successfully initiated AI response stream. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gen-ai/text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate text using a specified model and prompt */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiGenerateTextRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AiGenerateTextResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gen-ai/structured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate structured data based on a predefined schema key and user input */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiGenerateStructuredRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AiGenerateStructuredResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available AI models for a provider */
        get: {
            parameters: {
                query: {
                    provider: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelsListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ai/generate/text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate text (one-off, non-streaming)
         * @description Generates text based on a prompt using the specified provider and model. Does not use chat history or save messages.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Prompt, provider, model, and options for text generation. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AiGenerateTextRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AiGenerateTextResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/provider-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update provider settings
         * @description Updates custom URLs for local AI providers like Ollama and LMStudio
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Provider settings to update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProviderSettings"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"] & {
                            data: components["schemas"]["UpdateProviderSettings"];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/browse-directory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Browse directories on the file system */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The directory path to browse. If not provided, defaults to home directory */
                        path?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                currentPath: string;
                                parentPath: string | null;
                                entries: {
                                    name: string;
                                    path: string;
                                    isDirectory: boolean;
                                    isHidden: boolean;
                                }[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all MCP server configurations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create MCP server configuration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateMCPServerConfigBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigResponse"];
                    };
                };
                /** @description MCP server configuration created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/servers/{serverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP server configuration by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete MCP server configuration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update MCP server configuration */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMCPServerConfigBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPServerConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/mcp/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available MCP tools */
        get: {
            parameters: {
                query?: {
                    serverId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                name: string;
                                description: string;
                                serverId?: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/tools/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute an MCP tool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MCPToolExecutionRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPToolExecutionResultResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List available MCP resources */
        get: {
            parameters: {
                query?: {
                    serverId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPResourceListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/resources/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Read MCP resource content */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        uri: string;
                        serverId?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                uri: string;
                                name: string;
                                description: string;
                                mimeType: string;
                                content?: unknown;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/builtin-tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of built-in MCP tools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                name: string;
                                description: string;
                                category: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/servers/{serverId}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start an MCP server */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/servers/{serverId}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop an MCP server */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP usage analytics */
        get: {
            parameters: {
                query?: {
                    startDate?: string;
                    endDate?: string;
                    serverId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                period: {
                                    start: string;
                                    end: string;
                                };
                                servers: {
                                    serverId: string;
                                    totalRequests: number;
                                    successRate: number;
                                    avgResponseTime: number;
                                }[];
                                tools: {
                                    name: string;
                                    executions: number;
                                    avgDuration: number;
                                }[];
                                totalRequests: number;
                                totalErrors: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/servers/{serverId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get statistics for a specific MCP server */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                serverId: string;
                                /** @enum {string} */
                                status: "connected" | "disconnected" | "error";
                                uptime: number;
                                totalRequests: number;
                                successRate: number;
                                avgResponseTime: number;
                                lastActivity: string;
                                capabilities?: unknown;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/tools/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tool usage statistics */
        get: {
            parameters: {
                query?: {
                    period?: "hour" | "day" | "week" | "month";
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                period: string;
                                topTools: {
                                    name: string;
                                    count: number;
                                    avgExecutionTime: number;
                                    successRate: number;
                                }[];
                                totalExecutions: number;
                                totalErrors: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/resources/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get resource access statistics */
        get: {
            parameters: {
                query?: {
                    period?: "hour" | "day" | "week" | "month";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                period: string;
                                topResources: {
                                    uri: string;
                                    accessCount: number;
                                    avgResponseTime: number;
                                }[];
                                totalAccesses: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/analytics/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate MCP usage report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        startDate: string;
                        endDate: string;
                        /**
                         * @default json
                         * @enum {string}
                         */
                        format?: "json" | "csv" | "pdf";
                        /** @default true */
                        includeServerDetails?: boolean;
                        /** @default true */
                        includeToolDetails?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                reportId: string;
                                generatedAt: string;
                                period: {
                                    start: string;
                                    end: string;
                                };
                                format: string;
                                content?: unknown;
                                downloadUrl?: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/sessions/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP session statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                activeSessions: number;
                                totalSessionsToday: number;
                                avgSessionDuration: number;
                                peakConcurrentSessions: number;
                                sessionsByServer: {
                                    [key: string]: number;
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/analytics/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP performance metrics */
        get: {
            parameters: {
                query?: {
                    metricType?: "latency" | "throughput" | "error_rate";
                    aggregation?: "avg" | "min" | "max" | "p50" | "p95" | "p99";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                metrics: {
                                    timestamp: string;
                                    value: number;
                                    type: string;
                                }[];
                                aggregation: string;
                                summary: {
                                    current: number;
                                    /** @enum {string} */
                                    trend: "up" | "down" | "stable";
                                    changePercent: number;
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/analytics/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP analytics overview for a project */
        get: {
            parameters: {
                query?: {
                    period?: "hour" | "day" | "week" | "month";
                    toolNames?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                totalExecutions: number;
                                uniqueTools: number;
                                overallSuccessRate: number;
                                avgExecutionTime: number;
                                topTools: unknown[];
                                recentErrors: unknown[];
                                executionTrend: unknown[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/analytics/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP tool statistics for a project */
        get: {
            parameters: {
                query?: {
                    period?: "hour" | "day" | "week" | "month";
                    toolNames?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: unknown[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/analytics/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP execution timeline for a project */
        get: {
            parameters: {
                query?: {
                    period?: "hour" | "day" | "week" | "month";
                    toolNames?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: unknown[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/analytics/error-patterns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP error patterns for a project */
        get: {
            parameters: {
                query?: {
                    period?: "hour" | "day" | "week" | "month";
                    toolNames?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: unknown[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/analytics/executions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP tool executions for a project */
        get: {
            parameters: {
                query?: {
                    toolName?: string;
                    status?: "success" | "error" | "timeout";
                    startDate?: string;
                    endDate?: string;
                    limit?: string;
                    offset?: string;
                    sortBy?: "startedAt" | "duration" | "toolName";
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                executions: unknown[];
                                total: number;
                                page: number;
                                pageSize: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/test/connection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test MCP server connection */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uri
                         * @description MCP server URL to test
                         */
                        url: string;
                        /** @default 5000 */
                        timeout?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                connected: boolean;
                                responseTime: number;
                                error?: string;
                                serverInfo?: unknown;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/test/initialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test MCP initialize handshake */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uri
                         * @description MCP server URL to test
                         */
                        url: string;
                        capabilities?: {
                            /** @default true */
                            tools?: boolean;
                            /** @default true */
                            resources?: boolean;
                            /** @default false */
                            prompts?: boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                initialized: boolean;
                                sessionId?: string;
                                capabilities?: unknown;
                                serverInfo?: unknown;
                                error?: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/test/tool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test MCP tool execution */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        serverId?: string;
                        toolName: string;
                        /** @default {} */
                        arguments?: {
                            [key: string]: unknown;
                        };
                        /** @default false */
                        validateOnly?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                executed: boolean;
                                result?: unknown;
                                executionTime: number;
                                error?: string;
                                validationErrors?: string[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/test/validate-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate MCP server configuration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        serverId: string;
                        /** @default true */
                        checkConnectivity?: boolean;
                        /** @default true */
                        checkCapabilities?: boolean;
                        /** @default true */
                        checkTools?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                valid: boolean;
                                checks: {
                                    connectivity?: {
                                        passed: boolean;
                                        message?: string;
                                    };
                                    capabilities?: {
                                        passed: boolean;
                                        message?: string;
                                        details?: unknown;
                                    };
                                    tools?: {
                                        passed: boolean;
                                        message?: string;
                                        availableTools?: string[];
                                    };
                                };
                                errors?: string[];
                                warnings?: string[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/test/debug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Debug MCP communication */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        serverId: string;
                        /** @enum {string} */
                        action: "list-tools" | "list-resources" | "get-capabilities" | "raw-request";
                        rawRequest?: {
                            method: string;
                            params?: unknown;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                request?: unknown;
                                response?: unknown;
                                timing: {
                                    start: string;
                                    end: string;
                                    duration: number;
                                };
                                metadata: {
                                    serverId: string;
                                    action: string;
                                    protocol?: string;
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all MCP sessions */
        get: {
            parameters: {
                query?: {
                    status?: "active" | "idle" | "disconnected" | "all";
                    serverId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                serverId: string;
                                /** @enum {string} */
                                status: "active" | "idle" | "disconnected";
                                startedAt: string;
                                lastActivity: string;
                                metadata?: {
                                    clientInfo?: unknown;
                                    serverInfo?: unknown;
                                    capabilities?: unknown;
                                };
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new MCP session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        serverId: string;
                        clientInfo?: {
                            name: string;
                            version: string;
                        };
                        capabilities?: {
                            tools?: boolean;
                            resources?: boolean;
                            prompts?: boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            serverId: string;
                            /** @enum {string} */
                            status: "active" | "idle" | "disconnected";
                            startedAt: string;
                            lastActivity: string;
                            metadata?: {
                                clientInfo?: unknown;
                                serverInfo?: unknown;
                                capabilities?: unknown;
                            };
                        };
                    };
                };
                /** @description Session created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                serverId: string;
                                /** @enum {string} */
                                status: "active" | "idle" | "disconnected";
                                startedAt: string;
                                lastActivity: string;
                                metadata?: {
                                    clientInfo?: unknown;
                                    serverInfo?: unknown;
                                    capabilities?: unknown;
                                };
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/sessions/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get MCP session by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            serverId: string;
                            /** @enum {string} */
                            status: "active" | "idle" | "disconnected";
                            startedAt: string;
                            lastActivity: string;
                            metadata?: {
                                clientInfo?: unknown;
                                serverInfo?: unknown;
                                capabilities?: unknown;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/sessions/{sessionId}/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Close an MCP session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        reason?: string;
                        /** @default false */
                        force?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/sessions/{sessionId}/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh/keep-alive an MCP session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            serverId: string;
                            /** @enum {string} */
                            status: "active" | "idle" | "disconnected";
                            startedAt: string;
                            lastActivity: string;
                            metadata?: {
                                clientInfo?: unknown;
                                serverInfo?: unknown;
                                capabilities?: unknown;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/sessions/{sessionId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get session command history */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path: {
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                sessionId: string;
                                history: {
                                    timestamp: string;
                                    /** @enum {string} */
                                    type: "request" | "response" | "notification";
                                    method?: string;
                                    params?: unknown;
                                    result?: unknown;
                                    error?: unknown;
                                }[];
                                total: number;
                                hasMore: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/sessions/cleanup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cleanup idle MCP sessions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default 30 */
                        idleThresholdMinutes?: number;
                        /** @default false */
                        dryRun?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                sessionsChecked: number;
                                sessionsClosed: number;
                                sessionIds: string[];
                                dryRun: boolean;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get git status for a project
         * @description Retrieves the current git status including staged, unstaged, and untracked files
         */
        get: {
            parameters: {
                query?: {
                    refresh?: boolean | null;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GitStatusResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/stage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stage files for commit
         * @description Stages specified files or patterns for the next commit
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of file paths to stage */
                        filePaths: string[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/unstage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstage files from commit
         * @description Removes specified files from the staging area
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of file paths to unstage */
                        filePaths: string[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/stage-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stage all changes
         * @description Stages all modified and untracked files for commit
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All changes staged successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/unstage-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unstage all changes
         * @description Removes all files from the staging area
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All changes unstaged successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/commit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new commit
         * @description Creates a new commit with staged changes
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get commit history
         * @description Retrieves the commit history for the project
         */
        get: {
            parameters: {
                query?: {
                    maxCount?: number | null;
                    skip?: number | null;
                    author?: string;
                    since?: string;
                    until?: string;
                    grep?: string;
                    branch?: string;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommitLogResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/log-enhanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get enhanced commit history
         * @description Retrieves detailed commit history with additional metadata
         */
        get: {
            parameters: {
                query?: {
                    maxCount?: number | null;
                    skip?: number | null;
                    author?: string;
                    since?: string;
                    until?: string;
                    grep?: string;
                    branch?: string;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommitLogEnhancedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/commits/{commitHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get commit details
         * @description Retrieves detailed information about a specific commit
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number | null;
                    commitHash: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommitDetailResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/diff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get file diff
         * @description Retrieves the diff for a specific file
         */
        get: {
            parameters: {
                query: {
                    filePath: string;
                    cached?: boolean | null;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DiffResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all branches
         * @description Retrieves all local and remote branches for the project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BranchListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new branch
         * @description Creates a new branch from the specified starting point
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                        /** @description Branch or commit to start from */
                        startPoint?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Branch created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/branches-enhanced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List branches with enhanced information
         * @description Retrieves branches with additional metadata like ahead/behind counts
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BranchListEnhancedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/branches/switch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Switch to a different branch
         * @description Switches the working directory to the specified branch
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                        createIfNotExists?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/branches/{branchName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a branch
         * @description Deletes the specified branch
         */
        delete: {
            parameters: {
                query?: {
                    force?: boolean | null;
                };
                header?: never;
                path: {
                    projectId: number | null;
                    branchName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/stash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get list of all stashes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StashListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** @description Stash current changes */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            responses: {
                /** @description Changes stashed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Drop a stash
         * @description Removes the specified stash from the stash list
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default stash@{0} */
                        stashRef?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/stash/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Apply a stash without removing it from the stash list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default stash@{0} */
                        ref?: string;
                    };
                };
            };
            responses: {
                /** @description Stash applied successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/stash/pop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pop a stash
         * @description Applies the specified stash and removes it from the stash list
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default stash@{0} */
                        stashRef?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/worktrees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all worktrees
         * @description Retrieves the list of all worktrees for the project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["WorktreeListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add a new worktree
         * @description Creates a new worktree for the specified branch
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Path where to create the worktree */
                        path: string;
                        /** @description Branch to check out */
                        branch?: string;
                        /** @description Create new branch with this name */
                        newBranch?: string;
                        /** @description Commit/tag to check out */
                        commitish?: string;
                        /** @description Detach HEAD at specified commit */
                        detach?: boolean;
                    };
                };
            };
            responses: {
                /** @description Worktree added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /**
         * Remove a worktree
         * @description Removes the specified worktree
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Path of the worktree to remove */
                        path: string;
                        /** @description Force removal even with uncommitted changes */
                        force?: boolean;
                    };
                };
            };
            responses: {
                /** @description Worktree removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/worktrees/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Lock a worktree
         * @description Locks the specified worktree to prevent deletion
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Path of the worktree to lock */
                        path: string;
                        /** @description Reason for locking */
                        reason?: string;
                    };
                };
            };
            responses: {
                /** @description Worktree locked successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/worktrees/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlock a worktree
         * @description Unlocks the specified worktree
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        worktreePath: string;
                    };
                };
            };
            responses: {
                /** @description Worktree unlocked successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/worktrees/prune": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prune worktrees
         * @description Removes worktree entries that no longer exist
         */
        post: {
            parameters: {
                query?: {
                    dryRun?: boolean | null;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PruneWorktreesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/remotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all configured remotes for a git repository */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RemotesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/push": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Push changes to a remote repository */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default origin */
                        remote?: string;
                        /** @description Current branch if not specified */
                        branch?: string;
                        force?: boolean;
                        setUpstream?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Fetch updates from a remote repository */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default origin */
                        remote?: string;
                        prune?: boolean;
                    };
                };
            };
            responses: {
                /** @description Fetched successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/pull": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Pull changes from a remote repository */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default origin */
                        remote?: string;
                        branch?: string;
                        rebase?: boolean;
                    };
                };
            };
            responses: {
                /** @description Pulled successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all tags for a git repository */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TagsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** @description Create a new tag in the git repository */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        message?: string;
                        ref?: string;
                    };
                };
            };
            responses: {
                /** @description Tag created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/git/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reset current HEAD to a specified state */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Commit reference to reset to */
                        ref: string;
                        /**
                         * @default mixed
                         * @enum {string}
                         */
                        mode?: "soft" | "mixed" | "hard";
                    };
                };
            };
            responses: {
                /** @description Reset successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Project not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/active-tab": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    clientId?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ActiveTabResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        tabId: number;
                        clientId?: string;
                        tabMetadata?: {
                            displayName?: string;
                            selectedFiles?: number[];
                            selectedFilePaths?: string[];
                            selectedPrompts?: number[];
                            userPrompt?: string;
                            fileSearch?: string;
                            contextLimit?: number;
                            /** @enum {string} */
                            preferredEditor?: "vscode" | "cursor" | "webstorm";
                            suggestedFileIds?: number[];
                            ticketSearch?: string;
                            /** @enum {string} */
                            ticketSort?: "created_asc" | "created_desc" | "status" | "priority";
                            /** @enum {string} */
                            ticketStatusFilter?: "all" | "open" | "in_progress" | "closed" | "non_closed";
                            searchByContent?: boolean;
                            resolveImports?: boolean;
                            bookmarkedFileGroups?: {
                                [key: string]: number[];
                            };
                            sortOrder?: number;
                            promptsPanelCollapsed?: boolean;
                            selectedFilesCollapsed?: boolean;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ActiveTabResponseRequired"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete: {
            parameters: {
                query?: {
                    clientId?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-tabs/{tabId}/generate-name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate an AI-powered name for a project tab */
        post: operations["generateProjectTabName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/agent-files/detect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Detect agent instruction files for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                projectFiles: {
                                    type: string;
                                    name: string;
                                    path: string;
                                    /** @enum {string} */
                                    scope: "global" | "project";
                                    exists: boolean;
                                    writable: boolean;
                                    hasInstructions?: boolean;
                                    instructionVersion?: string;
                                    metadata?: {
                                        [key: string]: unknown;
                                    };
                                }[];
                                globalFiles: {
                                    type: string;
                                    name: string;
                                    path: string;
                                    /** @enum {string} */
                                    scope: "global" | "project";
                                    exists: boolean;
                                    writable: boolean;
                                    hasInstructions?: boolean;
                                    instructionVersion?: string;
                                    metadata?: {
                                        [key: string]: unknown;
                                    };
                                }[];
                                suggestedFiles: {
                                    type: string;
                                    name: string;
                                    suggestedPath: string;
                                }[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/agent-files/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Update an agent file with Promptliano instructions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        filePath: string;
                        includeExamples?: boolean;
                        customInstructions?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                message: string;
                                backedUp?: boolean;
                                filePath: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/agent-files/remove-instructions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Remove Promptliano instructions from an agent file */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        filePath: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                message: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/agent-files/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check status of agent files and instruction versions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                currentVersion: string;
                                files: {
                                    path: string;
                                    exists: boolean;
                                    hasInstructions: boolean;
                                    instructionVersion?: string;
                                    isOutdated: boolean;
                                }[];
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/agent-files/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new agent file with instructions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        type: string;
                        includeExamples?: boolean;
                        customInstructions?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                message: string;
                                filePath: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all available Claude agents */
        get: {
            parameters: {
                query?: {
                    projectId?: number | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeAgentListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new Claude agent */
        post: {
            parameters: {
                query?: {
                    projectId?: number | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateClaudeAgentBody"];
                };
            };
            responses: {
                /** @description Agent created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeAgentResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific Claude agent by its ID */
        get: {
            parameters: {
                query?: {
                    projectId?: number | null;
                };
                header?: never;
                path: {
                    agentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeAgentResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a Claude agent */
        delete: {
            parameters: {
                query?: {
                    projectId?: number | null;
                };
                header?: never;
                path: {
                    agentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a Claude agent's details */
        patch: {
            parameters: {
                query?: {
                    projectId?: number | null;
                };
                header?: never;
                path: {
                    agentId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateClaudeAgentBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeAgentResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/projects/{projectId}/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Claude agents associated with a specific project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeAgentListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/suggest-agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get AI-suggested Claude agents based on user input
         * @description Uses AI to analyze user input and suggest the most relevant agents for the task
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SuggestAgentsRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AgentSuggestionsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/commands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Claude commands for a project */
        get: {
            parameters: {
                query?: {
                    query?: string;
                    scope?: "project" | "user";
                    namespace?: string;
                    includeGlobal?: boolean;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeCommandListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new Claude command */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateClaudeCommandBody"];
                };
            };
            responses: {
                /** @description Command created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeCommandResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/commands/{commandName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific Claude command */
        get: {
            parameters: {
                query?: {
                    namespace?: string;
                };
                header?: never;
                path: {
                    projectId: number | null;
                    commandName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeCommandResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /** Update a Claude command */
        put: {
            parameters: {
                query?: {
                    namespace?: string;
                };
                header?: never;
                path: {
                    projectId: number | null;
                    commandName: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateClaudeCommandBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeCommandResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Delete a Claude command */
        delete: {
            parameters: {
                query?: {
                    namespace?: string;
                };
                header?: never;
                path: {
                    projectId: number | null;
                    commandName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/commands/{commandName}/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute a Claude command */
        post: {
            parameters: {
                query?: {
                    namespace?: string;
                };
                header?: never;
                path: {
                    projectId: number | null;
                    commandName: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ExecuteClaudeCommandBody"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommandExecutionResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/commands/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a new Claude command using AI
         * @description Uses AI to generate a complete slash command based on user requirements and project context
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CommandGenerationRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommandGenerationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/commands/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get AI-powered command suggestions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        context?: string;
                        /** @default 5 */
                        limit?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommandSuggestionsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/mcp-status/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get MCP installation status for Claude Code and Claude Desktop
         * @description Checks MCP configuration status across Claude Desktop and Claude Code CLI
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MCPStatusResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/sessions/{projectId}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lightweight session metadata for a project
         * @description Retrieves session metadata without full message content for fast loading
         */
        get: {
            parameters: {
                query?: {
                    search?: string;
                    branch?: string;
                    startDate?: string;
                    endDate?: string;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeSessionsMetadataResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/sessions/{projectId}/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent Claude Code sessions
         * @description Retrieves the most recent sessions for fast access (default 10 sessions)
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeSessionsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/sessions/{projectId}/paginated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sessions with cursor-based pagination
         * @description Retrieves sessions with efficient cursor-based pagination for large datasets
         */
        get: {
            parameters: {
                query?: {
                    cursor?: string;
                    limit?: number;
                    sortBy?: "lastUpdate" | "startTime" | "messageCount" | "fileSize";
                    sortOrder?: "asc" | "desc";
                    search?: string;
                    branch?: string;
                    startDate?: string;
                    endDate?: string;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeSessionsPaginatedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/sessions/{projectId}/{sessionId}/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get complete Claude Code session with full message data
         * @description Retrieves a complete session including all messages and token usage data
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeFullSessionResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/sessions/{projectId}/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get messages for a specific Claude Code session
         * @description Retrieves all messages from a specific chat session
         */
        get: {
            parameters: {
                query?: {
                    search?: string;
                    role?: "user" | "assistant" | "all";
                    limit?: number;
                    offset?: number | null;
                };
                header?: never;
                path: {
                    projectId: number;
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeMessagesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/sessions/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all Claude Code chat sessions for a project
         * @description Retrieves all chat sessions from Claude Code local storage with optional cursor-based pagination
         */
        get: {
            parameters: {
                query?: {
                    search?: string;
                    branch?: string;
                    startDate?: string;
                    endDate?: string;
                    limit?: number;
                    offset?: number | null;
                    useCursor?: boolean | null;
                    cursor?: string;
                    sortBy?: "lastUpdate" | "startTime" | "messageCount";
                    sortOrder?: "asc" | "desc";
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeSessionsEnhancedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/project-data/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Claude Code project metadata
         * @description Retrieves project-level data including branches, working directories, and statistics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClaudeProjectDataResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-code/import-session/{projectId}/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import a Claude Code session into a Promptliano chat
         * @description Imports all messages from a Claude Code session into a new Promptliano chat
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                    sessionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-hooks/{projectPath}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all hooks for a project
         * @description Retrieves all Claude Code hooks configured for the specified project path
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectPath: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HookListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create new hook
         * @description Creates a new Claude Code hook configuration
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectPath: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Hook event type that triggers the hook execution
                         * @example PreToolUse
                         * @enum {string}
                         */
                        event: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
                        /**
                         * @description Pattern to match tool names
                         * @example Edit|Write
                         */
                        matcher: string;
                        command: string;
                        timeout?: number;
                    };
                };
            };
            responses: {
                /** @description Hook created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HookResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-hooks/{projectPath}/{eventName}/{matcherIndex}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific hook configuration
         * @description Retrieves a specific hook by its event name and matcher index
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectPath: string;
                    eventName: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
                    matcherIndex: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HookResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        /**
         * Update hook configuration
         * @description Updates an existing Claude Code hook configuration
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectPath: string;
                    eventName: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
                    matcherIndex: number | null;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Hook event type that triggers the hook execution
                         * @example PreToolUse
                         * @enum {string}
                         */
                        event?: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
                        matcherIndex?: number;
                        matcher?: string;
                        command?: string;
                        timeout?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HookResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete hook configuration
         * @description Deletes an existing Claude Code hook configuration
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectPath: string;
                    eventName: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
                    matcherIndex: number | null;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-hooks/{projectPath}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate hook from description
         * @description Uses AI to generate a hook configuration from a natural language description
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectPath: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["HookGenerationRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HookGenerationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-hooks/{projectPath}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test hook (placeholder)
         * @description Note: Claude Code handles actual hook execution. This endpoint returns a message.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectPath: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["HookTestRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HookTestResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/claude-hooks/{projectPath}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search hooks
         * @description Searches hooks by command, matcher, event name
         */
        get: {
            parameters: {
                query?: {
                    q?: string;
                };
                header?: never;
                path: {
                    projectPath: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HookListResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/installation/detect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Detect installed MCP-compatible tools */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DetectToolsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/installation/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get MCP installation and connection status for a project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InstallationStatusResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/installation/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Install Promptliano MCP for a specific tool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        tool: "claude-desktop" | "vscode" | "cursor" | "continue" | "claude-code" | "windsurf";
                        serverUrl?: string;
                        debug?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InstallResultResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/installation/uninstall": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Uninstall Promptliano MCP for a specific tool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        tool: "claude-desktop" | "vscode" | "cursor" | "continue" | "claude-code" | "windsurf";
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UninstallResultResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get global MCP connection status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Global MCP status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                totalSessions: number;
                                projectSessions: number;
                                projectStatuses: {
                                    projectId: number;
                                    connected: boolean;
                                    sessionId?: string;
                                    lastActivity?: number;
                                }[];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        config: {
                            mcpServers?: {
                                [key: string]: {
                                    /**
                                     * @default stdio
                                     * @enum {string}
                                     */
                                    type?: "stdio" | "http";
                                    command: string;
                                    args?: string[];
                                    env?: {
                                        [key: string]: string;
                                    };
                                    timeout?: number;
                                };
                            };
                            inputs?: {
                                /** @enum {string} */
                                type: "promptString" | "promptNumber" | "promptBoolean";
                                id: string;
                                description: string;
                                default?: unknown;
                                password?: boolean;
                            }[];
                            extends?: string | string[];
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/installation/batch-install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Install Promptliano MCP for multiple tools at once */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        tools: ("claude-desktop" | "vscode" | "cursor" | "continue" | "claude-code" | "windsurf")[];
                        serverUrl?: string;
                        debug?: boolean;
                    };
                };
            };
            responses: {
                /** @description Batch installation results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                results: {
                                    tool: string;
                                    success: boolean;
                                    message: string;
                                    configPath?: string;
                                    backedUp?: boolean;
                                    backupPath?: string;
                                }[];
                                summary: {
                                    total: number;
                                    succeeded: number;
                                    failed: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/install-project-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Install MCP configuration at the project level (.mcp.json) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        serverUrl?: string;
                    };
                };
            };
            responses: {
                /** @description Project MCP configuration installed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            data: {
                                message: string;
                                configPath: string;
                                backedUp: boolean;
                                backupPath?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/config/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConfigLocationsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/config/merged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MergedConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/config/expanded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MergedConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/config/save-to-location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        config: {
                            mcpServers?: {
                                [key: string]: {
                                    /**
                                     * @default stdio
                                     * @enum {string}
                                     */
                                    type?: "stdio" | "http";
                                    command: string;
                                    args?: string[];
                                    env?: {
                                        [key: string]: string;
                                    };
                                    timeout?: number;
                                };
                            };
                            inputs?: {
                                /** @enum {string} */
                                type: "promptString" | "promptNumber" | "promptBoolean";
                                id: string;
                                description: string;
                                default?: unknown;
                                password?: boolean;
                            }[];
                            extends?: string | string[];
                        };
                        location: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OperationSuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/mcp/config/default-for-location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    location: string;
                };
                header?: never;
                path: {
                    projectId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MergedConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/global/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get global MCP configuration */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GlobalMCPConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /** @description Update global MCP configuration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        defaultServerUrl?: string;
                        debugMode?: boolean;
                        defaultTimeout?: number;
                        globalEnv?: {
                            [key: string]: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GlobalMCPConfigResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/global/installations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all global MCP installations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GlobalInstallationsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/global/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Install Promptliano MCP globally for a tool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        tool: "claude-desktop" | "vscode" | "cursor" | "continue" | "claude-code" | "windsurf";
                        serverUrl?: string;
                        debug?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GlobalInstallResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/global/uninstall": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Uninstall global Promptliano MCP for a tool */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        tool: "claude-desktop" | "vscode" | "cursor" | "continue" | "claude-code" | "windsurf";
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GlobalUninstallResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/global/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get global MCP installation status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GlobalStatusResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Resource Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Validation Error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Chat: {
            id: number;
            /** @description Unix timestamp in milliseconds */
            created: number;
            /** @description Unix timestamp in milliseconds */
            updated: number;
            title: string;
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId?: number;
        };
        ChatListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Chat"][];
        };
        ApiErrorResponse: {
            /** @enum {boolean} */
            success: false;
            error: {
                /** @example An error occurred */
                message: string;
                /** @example ERROR_CODE */
                code?: string;
                details?: {
                    [key: string]: unknown;
                };
            };
        };
        ChatResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Chat"];
        };
        CreateChat: {
            title: string;
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId?: number;
        };
        CreateChatRequestBody: components["schemas"]["CreateChat"] & {
            /** @example New Chat Session */
            title?: string;
            /** @description Copy messages from currentChatId if true */
            copyExisting?: boolean;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            currentChatId?: number;
        };
        ChatMessageAttachment: {
            id: number;
            /** @description Unix timestamp in milliseconds */
            created: number;
            /** @description Unix timestamp in milliseconds */
            updated: number;
            /** @description Original name of the uploaded file. */
            fileName: string;
            /** @description MIME type of the file. */
            mimeType: string;
            /** @description File size in bytes. */
            size: number;
            /**
             * Format: uri
             * @description URL to access/download the attachment.
             */
            url: string;
        };
        ChatMessage: {
            id: number;
            /** @description Unix timestamp in milliseconds */
            created: number;
            /** @description Unix timestamp in milliseconds */
            updated: number;
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            chatId: number;
            /**
             * @description Role of the message sender
             * @example user
             * @enum {string}
             */
            role: "assistant" | "user" | "system";
            /**
             * @description Message content
             * @example Hello, world!
             */
            content: string;
            /** @description Message type for categorization */
            type?: string;
            /** @description Optional list of attachments for the message. */
            attachments?: components["schemas"]["ChatMessageAttachment"][];
        };
        ChatMessageListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ChatMessage"][];
        };
        /** @description Optional parameters for the AI model. */
        AiSdkOptions: {
            /**
             * Format: uri
             * @description Custom Ollama server URL to use instead of the default.
             * @example http://192.168.1.100:11434
             */
            ollamaUrl?: string;
            /**
             * Format: uri
             * @description Custom LMStudio server URL to use instead of the default.
             * @example http://localhost:1234
             */
            lmstudioUrl?: string;
            /**
             * @description Controls the randomness of the output. Lower values (e.g., 0.2) make the output more focused, deterministic, and suitable for factual tasks. Higher values (e.g., 0.8) increase randomness and creativity, useful for brainstorming or creative writing. A value of 0 typically means greedy decoding (always picking the most likely token).
             * @example 0.7
             */
            temperature?: number;
            /**
             * @description The maximum number of tokens (words or parts of words) the model is allowed to generate in the response. This limits the output length and can affect cost. Note: This limit usually applies only to the *generated* tokens, not the input prompt tokens.
             * @example 4000
             */
            maxTokens?: number;
            /**
             * @description Controls diversity via nucleus sampling. It defines a probability threshold (e.g., 0.9). The model considers only the smallest set of most probable tokens whose cumulative probability exceeds this threshold for the next token selection. Lower values (e.g., 0.5) restrict choices more, leading to less random outputs. A value of 1 considers all tokens. It's often recommended to alter *either* `temperature` *or* `topP`, not both.
             * @example 1
             */
            topP?: number;
            /**
             * @description Applies a penalty to tokens based on how frequently they have already appeared in the generated text *and* the prompt. Positive values (e.g., 0.5) decrease the likelihood of the model repeating the same words or phrases verbatim, making the output less repetitive. Negative values encourage repetition.
             * @example 0.2
             */
            frequencyPenalty?: number;
            /**
             * @description Applies a penalty to tokens based on whether they have appeared *at all* in the generated text *and* the prompt so far (regardless of frequency). Positive values (e.g., 0.5) encourage the model to introduce new concepts and topics, reducing the likelihood of repeating *any* previously mentioned word. Negative values encourage staying on topic.
             * @example 0.1
             */
            presencePenalty?: number;
            /**
             * @description Restricts the model's choices for the next token to the `k` most likely candidates. For example, if `topK` is 40, the model will only consider the top 40 most probable tokens at each step. A lower value restricts choices more. Setting `topK` to 1 is equivalent to greedy decoding (same as `temperature: 0`). Less commonly used than `topP`.
             * @example 40
             */
            topK?: number;
            /**
             * @description Specifies one or more sequences of text where the AI should stop generating. Once the model generates a stop sequence, it will halt output immediately, even if `maxTokens` hasn't been reached. Useful for structured output or controlling conversational turns.
             * @example [
             *       "\nHuman:",
             *       "\n---"
             *     ]
             */
            stop?: string | string[];
            /**
             * @description Specifies the desired format for the model's response. This is highly provider-specific. A common use case is enforcing JSON output, often requiring specific model versions.
             * @example {
             *       "type": "json_object"
             *     }
             */
            response_format?: unknown;
            /**
             * @description The provider to use for the AI request.
             * @example openai
             */
            provider?: string;
            /**
             * @description The model to use for the AI request.
             * @example gpt-4o-mini
             */
            model?: string;
        };
        AiChatStreamRequest: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            chatId: number;
            /**
             * @description The latest message content from the user.
             * @example Thanks! Can you elaborate on the E=mc^2 part?
             */
            userMessage: string;
            /** @description Attachments specifically for the current user message being sent to the AI. */
            currentMessageAttachments?: {
                /**
                 * @description ID or Timestamp in unix timestamp (milliseconds)
                 * @example 1716537600000
                 */
                id: number;
                /**
                 * Format: uri
                 * @description Accessible URL of the attachment for the AI model.
                 */
                url: string;
                /** @description MIME type of the attachment. */
                mimeType: string;
                /** @description Original filename, if helpful for context. */
                fileName?: string;
            }[];
            options?: components["schemas"]["AiSdkOptions"];
            /**
             * @description Optional system message override for this specific request.
             * @example Respond concisely.
             */
            systemMessage?: string;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            tempId?: number;
            /**
             * @description Enable debug mode for detailed logging.
             * @example true
             */
            debug?: boolean;
            /**
             * @description Enable automatic chat naming based on the first user message.
             * @example true
             */
            enableChatAutoNaming?: boolean;
        };
        ForkChatRequestBody: {
            /**
             * @description Array of IDs or Timestamps in unix timestamp (milliseconds)
             * @example [
             *       1716537600000,
             *       1716537600001
             *     ]
             */
            excludedMessageIds: number[];
        };
        ForkChatFromMessageRequestBody: {
            /**
             * @description Array of IDs or Timestamps in unix timestamp (milliseconds)
             * @example [
             *       1716537600000,
             *       1716537600001
             *     ]
             */
            excludedMessageIds: number[];
        };
        OperationSuccessResponse: {
            /** @enum {boolean} */
            success: true;
            /** @example Operation completed successfully */
            message: string;
        };
        UpdateChat: {
            title?: string;
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId?: number;
        };
        UpdateChatRequestBody: components["schemas"]["UpdateChat"] & {
            /** @example Updated Chat Title */
            title: string;
        };
        Project: {
            id: number;
            /** @description Unix timestamp in milliseconds */
            created: number;
            /** @description Unix timestamp in milliseconds */
            updated: number;
            name: string;
            description: string;
            path: string;
        };
        ProjectResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Project"];
        };
        ProjectResponseMultiStatus: components["schemas"]["ProjectResponse"] & {
            warning?: string;
            error?: string;
        };
        CreateProject: {
            name: string;
            description: string;
            path: string;
        };
        CreateProjectRequestBody: components["schemas"]["CreateProject"] & {
            /** @example My Awesome Project */
            name?: string;
            /** @example Optional project description */
            description?: string;
            /** @example /path/to/project */
            path?: string;
        };
        ProjectListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Project"][];
        };
        UpdateProject: {
            name?: string;
            description?: string;
            path?: string;
        };
        UpdateProjectRequestBody: components["schemas"]["UpdateProject"] & {
            /** @example Updated Project Name */
            name?: string;
            /** @example Updated description */
            description?: string;
            /** @example /new/path/to/project */
            path?: string;
        };
        ImportInfo: {
            source: string;
            specifiers: {
                /** @enum {string} */
                type: "default" | "named" | "namespace";
                imported?: string;
                local: string;
            }[];
        };
        ExportInfo: {
            /** @enum {string} */
            type: "default" | "named" | "all";
            source?: string;
            specifiers?: {
                exported: string;
                local?: string;
            }[];
        };
        ProjectFile: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            id: number;
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId: number;
            name: string;
            path: string;
            extension: string;
            size: number;
            content: string | null;
            summary: string | null;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            summaryLastUpdated: number | null;
            meta: string | null;
            checksum: string | null;
            /** @default null */
            imports: components["schemas"]["ImportInfo"][] | null;
            /** @default null */
            exports: components["schemas"]["ExportInfo"][] | null;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            created: number;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            updated: number;
        };
        FileListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProjectFile"][];
        };
        ProjectFileWithoutContent: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            id: number;
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId: number;
            name: string;
            path: string;
            extension: string;
            size: number;
            summary: string | null;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            summaryLastUpdated: number | null;
            meta: string | null;
            checksum: string | null;
            /** @default null */
            imports: components["schemas"]["ImportInfo"][] | null;
            /** @default null */
            exports: components["schemas"]["ExportInfo"][] | null;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            created: number;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            updated: number;
        };
        ProjectFileWithoutContentListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProjectFileWithoutContent"][];
        };
        FileResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProjectFile"];
        };
        ProjectSummaryResponse: {
            /** @enum {boolean} */
            success: true;
            summary: string;
        };
        OptimizePromptResponse: {
            /**
             * @description Indicates successful optimization
             * @enum {boolean}
             */
            success: true;
            data: {
                /**
                 * @description The optimized prompt generated by the service.
                 * @example Optimize the user experience for the login form, focusing on clarity, security, and accessibility. Suggest improvements for field labels, error handling, password requirements display, and button text.
                 */
                optimizedPrompt: string;
            };
        };
        OptimizePromptRequest: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId: number;
            /**
             * @description The user's initial prompt or context to be optimized.
             * @example Make my login form better.
             */
            userContext: string;
        };
        ProviderKey: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            id: number;
            /**
             * @description User-defined name for the key
             * @example My OpenAI Key
             */
            name: string;
            /**
             * @description AI Provider identifier (e.g., openai, anthropic, custom)
             * @example openai
             */
            provider: string;
            /**
             * @description The actual API Key (handle with care)
             * @example sk-xxxxxxxxxxxxxxxxxxxx
             */
            key: string;
            /**
             * @description Whether this key is encrypted
             * @default false
             * @example true
             */
            encrypted: boolean;
            /**
             * @description Initialization vector for encryption
             * @example base64string
             */
            iv?: string | null;
            /**
             * @description Authentication tag for AES-GCM
             * @example base64string
             */
            tag?: string | null;
            /**
             * @description Salt for key derivation
             * @example base64string
             */
            salt?: string | null;
            /**
             * Format: uri
             * @description Base URL for custom OpenAI-compatible providers
             * @example https://api.example.com/v1
             */
            baseUrl?: string;
            /**
             * @description Optional custom headers for the provider
             * @example {
             *       "X-Custom-Header": "value"
             *     }
             */
            customHeaders?: {
                [key: string]: string;
            };
            /**
             * @description Whether this key is the default for its provider
             * @default false
             * @example false
             */
            isDefault: boolean;
            /**
             * @description Whether this key is currently active
             * @default true
             * @example true
             */
            isActive: boolean;
            /**
             * @description Environment this key is for (production, staging, etc.)
             * @default production
             * @example production
             */
            environment: string;
            /**
             * @description Optional description of the key
             * @example Main production key
             */
            description?: string;
            /**
             * @description Optional expiration timestamp
             * @example 1716537600000
             */
            expiresAt?: number;
            /**
             * @description Last time this key was used
             * @example 1716537600000
             */
            lastUsed?: number;
            /**
             * @description Creation timestamp (ISO 8601)
             * @example 1716537600000
             */
            created: number;
            /**
             * @description Last update timestamp (ISO 8601)
             * @example 1716537600000
             */
            updated: number;
        };
        ProviderKeyWithSecret: components["schemas"]["ProviderKey"] & Record<string, never>;
        ProviderKeyResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProviderKeyWithSecret"];
        };
        CreateProviderKeyRequestBody: {
            /** @example My OpenAI Key */
            name: string;
            /** @example anthropic */
            provider: string;
            /** @example sk-ant-xxxxxxxx */
            key: string;
            /**
             * Format: uri
             * @description Base URL for custom providers
             * @example https://api.example.com/v1
             */
            baseUrl?: string;
            /**
             * @description Custom headers
             * @example {
             *       "X-Custom-Header": "value"
             *     }
             */
            customHeaders?: {
                [key: string]: string;
            };
            /** @example true */
            isDefault?: boolean;
        };
        ProviderKeyListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProviderKey"][];
        };
        UpdateProviderKeyRequestBody: {
            /** @example My Updated Key Name */
            name?: string;
            /** @example google */
            provider?: string;
            /** @example aizaxxxxxxxxxxxxx */
            key?: string;
            /**
             * Format: uri
             * @description Base URL for custom providers
             * @example https://api.example.com/v1
             */
            baseUrl?: string;
            /**
             * @description Custom headers
             * @example {
             *       "X-Custom-Header": "value"
             *     }
             */
            customHeaders?: {
                [key: string]: string;
            };
            /** @example false */
            isDefault?: boolean;
        };
        ProviderModel: {
            /**
             * @description Model identifier
             * @example gpt-4o-mini
             */
            id: string;
            /**
             * @description Human-readable model name
             * @example GPT-4o Mini
             */
            name: string;
            /**
             * @description Model description
             * @example Fast and efficient GPT-4 model optimized for speed
             */
            description?: string;
        };
        TestProviderResponse: {
            /**
             * @description Whether the provider test was successful
             * @example true
             */
            success: boolean;
            /**
             * @description Provider identifier that was tested
             * @example openai
             */
            provider: string;
            /**
             * @description Provider connection status
             * @example connected
             * @enum {string}
             */
            status: "connected" | "disconnected" | "error";
            /**
             * @description Available models from the provider
             * @example [
             *       {
             *         "id": "gpt-4o-mini",
             *         "name": "GPT-4o Mini"
             *       }
             *     ]
             */
            models: components["schemas"]["ProviderModel"][];
            /**
             * @description Response time in milliseconds
             * @example 1250
             */
            responseTime: number;
            /**
             * @description Error message if the test failed
             * @example Invalid API key
             */
            error?: string;
            /**
             * @description Timestamp when the test was performed
             * @example 1716537600000
             */
            testedAt: number;
        };
        TestProviderApiResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TestProviderResponse"];
        };
        TestProviderRequest: {
            /**
             * @description Provider identifier to test connection for
             * @example openai
             */
            provider: string;
            /**
             * @description API key for API-based providers (OpenAI, Anthropic)
             * @example sk-xxxxxxxxxxxxxxxxxxxx
             */
            apiKey?: string;
            /**
             * Format: uri
             * @description Base URL for local providers (Ollama, LMStudio)
             * @example http://localhost:11434
             */
            url?: string;
            /**
             * @description Timeout in milliseconds for the test request
             * @default 10000
             * @example 10000
             */
            timeout: number;
        };
        BatchTestSummary: {
            /**
             * @description Number of successfully connected providers
             * @example 2
             */
            connected: number;
            /**
             * @description Number of disconnected providers
             * @example 0
             */
            disconnected: number;
            /**
             * @description Number of providers with errors
             * @example 1
             */
            error: number;
        };
        BatchTestProviderResponse: {
            /** @description Array of test results for each provider */
            results: components["schemas"]["TestProviderResponse"][];
            summary: components["schemas"]["BatchTestSummary"];
            /**
             * @description Total time taken for all tests in milliseconds
             * @example 3500
             */
            totalTime: number;
        };
        BatchTestProviderApiResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["BatchTestProviderResponse"];
        };
        BatchTestProviderRequest: {
            /** @description Array of provider test requests to execute */
            providers: components["schemas"]["TestProviderRequest"][];
            /**
             * @description Whether to run tests in parallel or sequentially
             * @default true
             * @example true
             */
            parallel: boolean;
        };
        ProviderHealthStatus: {
            /**
             * @description Provider identifier
             * @example openai
             */
            provider: string;
            /**
             * @description Provider health status
             * @example healthy
             * @enum {string}
             */
            status: "healthy" | "degraded" | "unhealthy" | "unknown";
            /**
             * @description Timestamp of last health check
             * @example 1716537600000
             */
            lastChecked: number;
            /**
             * @description Uptime percentage over the monitoring period
             * @example 99.8
             */
            uptime: number;
            /**
             * @description Average response time in milliseconds
             * @example 850
             */
            averageResponseTime: number;
            /**
             * @description Number of available models
             * @example 12
             */
            modelCount: number;
        };
        ProviderHealthStatusListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProviderHealthStatus"][];
        };
        /** @description Detected provider capabilities */
        CustomProviderFeatures: {
            /**
             * @description Supports streaming responses
             * @example true
             */
            streaming: boolean;
            /**
             * @description Supports function/tool calling
             * @example false
             */
            functionCalling: boolean;
            /**
             * @description Supports structured JSON output
             * @example true
             */
            structuredOutput: boolean;
            /**
             * @description Supports image inputs
             * @example false
             */
            vision: boolean;
            /**
             * @description Provides embedding endpoints
             * @example false
             */
            embeddings: boolean;
        };
        ValidateCustomProviderResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /**
                 * @description Whether the endpoint is OpenAI-compatible
                 * @example true
                 */
                compatible: boolean;
                /** @description Available models from the provider */
                models: components["schemas"]["ProviderModel"][];
                features: components["schemas"]["CustomProviderFeatures"];
                /**
                 * Format: uri
                 * @description Validated base URL
                 * @example https://api.example.com/v1
                 */
                baseUrl: string;
            };
        };
        ValidateCustomProviderRequest: {
            /**
             * Format: uri
             * @description Base URL to validate
             * @example https://api.example.com/v1
             */
            baseUrl: string;
            /**
             * @description API key for authentication
             * @example sk-xxxxxxxx
             */
            apiKey: string;
            /**
             * @description Optional custom headers
             * @example {
             *       "X-Custom-Header": "value"
             *     }
             */
            customHeaders?: {
                [key: string]: string;
            };
        };
        Prompt: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            id: number;
            /**
             * @description Prompt name
             * @example Code Refactoring Prompt
             */
            name: string;
            /**
             * @description Prompt content template
             * @example Refactor the following code to be more efficient: {code}
             */
            content: string;
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId?: number;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            created: number;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            updated: number;
        };
        PromptResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Prompt"];
        };
        CreatePromptRequestBody: {
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId?: number;
            /** @example My New Prompt */
            name: string;
            /** @example Translate this text: {text} */
            content: string;
        };
        PromptListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Prompt"][];
        };
        SuggestPromptsResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description Array of suggested prompts ordered by relevance (most relevant first) */
                prompts: components["schemas"]["Prompt"][];
            };
        };
        SuggestPromptsRequest: {
            /**
             * @description The user input describing what they want to accomplish
             * @example help me implement authentication
             */
            userInput: string;
            /**
             * @description Maximum number of prompts to suggest (default: 5, max: 10)
             * @default 5
             * @example 5
             */
            limit: number;
        };
        UpdatePromptRequestBody: {
            /** @example Updated Prompt Name */
            name?: string;
            /** @example Updated content: {variable} */
            content?: string;
        };
        PromptImportResult: {
            /** @description Whether this individual prompt import succeeded */
            success: boolean;
            /**
             * @description The name of the prompt being imported
             * @example Code Refactoring Prompt
             */
            promptName: string;
            /**
             * Format: int64
             * @description ID of the created/updated prompt (only present on success)
             * @example 1716537600000
             */
            promptId?: number;
            /**
             * @description Error message if import failed
             * @example Prompt with this name already exists
             */
            error?: string;
            /**
             * @description Warning message for non-fatal issues
             * @example Missing frontmatter field: created
             */
            warning?: string;
            /**
             * @description Action taken for this prompt
             * @enum {string}
             */
            action: "created" | "updated" | "skipped";
        };
        MarkdownImportResult: {
            /** @description Overall success status of the import operation */
            success: boolean;
            /**
             * @description Name of the imported file
             * @example my-prompts.md
             */
            fileName: string;
            /**
             * @description Total number of prompts found in the file
             * @example 3
             */
            promptsProcessed: number;
            /**
             * @description Number of prompts successfully imported
             * @example 2
             */
            promptsImported: number;
            /** @description Detailed results for each prompt */
            results: components["schemas"]["PromptImportResult"][];
            /**
             * @description Global errors that affected the entire file
             * @default []
             * @example [
             *       "Invalid frontmatter format"
             *     ]
             */
            errors: string[];
            /**
             * @description Global warnings for the import operation
             * @default []
             * @example [
             *       "File contains no valid prompts"
             *     ]
             */
            warnings: string[];
        };
        BulkImportResult: {
            /** @description Overall success status (true if at least one prompt imported) */
            success: boolean;
            /**
             * @description Total number of files processed
             * @example 5
             */
            totalFiles: number;
            /**
             * @description Number of files successfully processed
             * @example 4
             */
            filesProcessed: number;
            /**
             * @description Total number of prompts found across all files
             * @example 15
             */
            totalPrompts: number;
            /**
             * @description Number of prompts successfully imported
             * @example 12
             */
            promptsImported: number;
            /** @description Results for each file processed */
            fileResults: components["schemas"]["MarkdownImportResult"][];
            summary: {
                /**
                 * @description Number of new prompts created
                 * @example 8
                 */
                created: number;
                /**
                 * @description Number of existing prompts updated
                 * @example 4
                 */
                updated: number;
                /**
                 * @description Number of prompts skipped
                 * @example 3
                 */
                skipped: number;
                /**
                 * @description Number of prompts that failed to import
                 * @example 0
                 */
                failed: number;
            };
        };
        BulkImportResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["BulkImportResult"];
        };
        ExportedFile: {
            /**
             * @description Generated filename for the exported prompt
             * @example code-refactoring-prompt.md
             */
            fileName: string;
            /** @description The markdown content of the exported prompt */
            content: string;
            /**
             * Format: int64
             * @description ID of the source prompt
             * @example 1716537600000
             */
            promptId: number;
            /**
             * @description Name of the source prompt
             * @example Code Refactoring Prompt
             */
            promptName: string;
        };
        MarkdownExportResult: {
            /** @description Whether the export operation succeeded */
            success: boolean;
            /**
             * @description The export format used
             * @enum {string}
             */
            format: "single-file" | "multi-file";
            /**
             * @description Number of prompts exported
             * @example 5
             */
            promptCount: number;
            /**
             * @description Filename for single-file export
             * @example exported-prompts.md
             */
            fileName?: string;
            /** @description The markdown content for single-file export */
            content?: string;
            /** @description Array of exported files for multi-file export */
            files?: components["schemas"]["ExportedFile"][];
            /** @description Export metadata and settings */
            metadata: {
                /**
                 * Format: date-time
                 * @description ISO 8601 datetime when export was generated
                 * @example 2024-01-01T12:00:00Z
                 */
                exportedAt: string;
                /**
                 * @description Total size of exported content in bytes
                 * @example 15432
                 */
                totalSize: number;
                /** @description Export settings used */
                settings: {
                    /**
                     * Format: int64
                     * @description Optional project ID to filter prompts by project
                     * @example 1716537600000
                     */
                    projectId?: number;
                    /**
                     * @description Export format: single file with all prompts or separate files per prompt
                     * @default single-file
                     * @example single-file
                     * @enum {string}
                     */
                    format: "single-file" | "multi-file";
                    /**
                     * @description Whether to include frontmatter with metadata
                     * @default true
                     * @example true
                     */
                    includeFrontmatter: boolean;
                    /**
                     * @description Whether to include created date in frontmatter
                     * @default true
                     * @example true
                     */
                    includeCreatedDate: boolean;
                    /**
                     * @description Whether to include updated date in frontmatter
                     * @default true
                     * @example true
                     */
                    includeUpdatedDate: boolean;
                    /**
                     * @description Whether to include tags in frontmatter (if available)
                     * @default true
                     * @example true
                     */
                    includeTags: boolean;
                    /**
                     * @description Whether to sanitize content for safe markdown export
                     * @default true
                     * @example true
                     */
                    sanitizeContent: boolean;
                    /**
                     * @description How to sort the exported prompts
                     * @default name
                     * @example name
                     * @enum {string}
                     */
                    sortBy: "name" | "created" | "updated";
                    /**
                     * @description Sort order for exported prompts
                     * @default asc
                     * @example asc
                     * @enum {string}
                     */
                    sortOrder: "asc" | "desc";
                };
            };
        };
        MarkdownExportResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MarkdownExportResult"];
        };
        BatchExportRequest: {
            /**
             * @description Array of prompt IDs to export
             * @example [
             *       1716537600000,
             *       1716537600001
             *     ]
             */
            promptIds: number[];
            /**
             * @description Export format: single file with all prompts or separate files per prompt
             * @default single-file
             * @example single-file
             * @enum {string}
             */
            format: "single-file" | "multi-file";
            /**
             * @description Whether to include frontmatter with metadata
             * @default true
             * @example true
             */
            includeFrontmatter: boolean;
            /**
             * @description Whether to include created date in frontmatter
             * @default true
             * @example true
             */
            includeCreatedDate: boolean;
            /**
             * @description Whether to include updated date in frontmatter
             * @default true
             * @example true
             */
            includeUpdatedDate: boolean;
            /**
             * @description Whether to include tags in frontmatter (if available)
             * @default true
             * @example true
             */
            includeTags: boolean;
            /**
             * @description Whether to sanitize content for safe markdown export
             * @default true
             * @example true
             */
            sanitizeContent: boolean;
            /**
             * @description How to sort the exported prompts
             * @default name
             * @example name
             * @enum {string}
             */
            sortBy: "name" | "created" | "updated";
            /**
             * @description Sort order for exported prompts
             * @default asc
             * @example asc
             * @enum {string}
             */
            sortOrder: "asc" | "desc";
        };
        MarkdownContentValidation: {
            /** @description Whether the content has valid YAML frontmatter */
            hasValidFrontmatter: boolean;
            /** @description Whether all required frontmatter fields are present */
            hasRequiredFields: boolean;
            /** @description Length of the content after frontmatter */
            contentLength: number;
            /** @description Estimated number of prompts based on content structure */
            estimatedPrompts: number;
            /**
             * @description Content validation warnings
             * @default []
             */
            warnings: string[];
            /**
             * @description Content validation errors
             * @default []
             */
            errors: string[];
        };
        Ticket: {
            id: number;
            /** @description Unix timestamp in milliseconds */
            created: number;
            /** @description Unix timestamp in milliseconds */
            updated: number;
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId: number;
            title: string;
            overview?: string;
            /** @enum {string} */
            status?: "open" | "in_progress" | "closed";
            /** @enum {string} */
            priority?: "low" | "normal" | "high";
            suggestedFileIds?: string[];
            suggestedAgentIds?: string[];
            suggestedPromptIds?: number[];
            /**
             * Format: int64
             * @description Nullable optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            queueId?: number;
            queuePosition?: number | null;
            /** @enum {string|null} */
            queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
            queuePriority?: number;
            /**
             * @description Optional ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            queuedAt?: number;
            /**
             * @description Optional ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            queueStartedAt?: number;
            /**
             * @description Optional ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            queueCompletedAt?: number;
            queueAgentId?: string | null;
            queueErrorMessage?: string | null;
            estimatedProcessingTime?: number | null;
            actualProcessingTime?: number | null;
        };
        TicketResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Ticket"];
        };
        CreateTicketBody: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId: number;
            title: string;
            /** @default  */
            overview: string;
            /**
             * @default open
             * @enum {string}
             */
            status: "open" | "in_progress" | "closed";
            /**
             * @default normal
             * @enum {string}
             */
            priority: "low" | "normal" | "high";
            suggestedFileIds?: string[];
            suggestedAgentIds?: string[];
            suggestedPromptIds?: number[];
        };
        UpdateTicketBody: {
            title?: string;
            overview?: string;
            /** @enum {string} */
            status?: "open" | "in_progress" | "closed";
            /** @enum {string} */
            priority?: "low" | "normal" | "high";
            suggestedFileIds?: string[];
            suggestedAgentIds?: string[];
            suggestedPromptIds?: number[];
        };
        TicketTask: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            id: number;
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            ticketId: number;
            content: string;
            description?: string;
            suggestedFileIds?: string[];
            /** @default false */
            done: boolean;
            orderIndex: number;
            estimatedHours?: number | null;
            dependencies?: number[];
            tags?: string[];
            agentId?: string | null;
            suggestedPromptIds?: number[];
            /**
             * Format: int64
             * @description Nullable optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            queueId?: number;
            queuePosition?: number | null;
            /** @enum {string|null} */
            queueStatus?: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | null;
            queuePriority?: number;
            /**
             * @description Optional ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            queuedAt?: number;
            /**
             * @description Optional ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            queueStartedAt?: number;
            /**
             * @description Optional ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            queueCompletedAt?: number;
            queueAgentId?: string | null;
            queueErrorMessage?: string | null;
            estimatedProcessingTime?: number | null;
            actualProcessingTime?: number | null;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            created: number;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            updated: number;
        };
        CompleteTicketResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                ticket: components["schemas"]["Ticket"];
                tasks: components["schemas"]["TicketTask"][];
            };
        };
        LinkedFilesResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                ticketId: string;
                fileId: string;
            }[];
        };
        LinkFilesBody: {
            fileIds: string[];
        };
        SuggestedFilesResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                recommendedFileIds: string[];
                combinedSummaries?: string;
                message?: string;
            };
        };
        SuggestFilesBody: {
            extraUserInput?: string;
        };
        SuggestedTasksResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                suggestedTasks: string[];
            };
        };
        SuggestTasksBody: {
            userContext?: string;
        };
        TicketListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["Ticket"][];
        };
        TicketWithTaskCount: {
            ticket: components["schemas"]["Ticket"];
            taskCount: number;
            completedTaskCount: number;
        };
        TicketWithTaskCountListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TicketWithTaskCount"][];
        };
        TicketWithTasks: {
            ticket: components["schemas"]["Ticket"];
            tasks: components["schemas"]["TicketTask"][];
        };
        TicketWithTasksListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TicketWithTasks"][];
        };
        TaskResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TicketTask"];
        };
        CreateTaskBody: {
            content: string;
            description?: string;
            suggestedFileIds?: string[];
            estimatedHours?: number | null;
            dependencies?: number[];
            tags?: string[];
            agentId?: string;
            suggestedPromptIds?: number[];
        };
        TaskListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["TicketTask"][];
        };
        UpdateTaskBody: {
            content?: string;
            description?: string;
            suggestedFileIds?: string[];
            done?: boolean;
            estimatedHours?: number | null;
            dependencies?: number[];
            tags?: string[];
            agentId?: string;
            suggestedPromptIds?: number[];
        };
        ReorderTasksBody: {
            tasks: {
                /**
                 * Format: int64
                 * @description Entity ID - positive integer without timestamp conversion
                 * @example 1716537600000
                 */
                taskId: number;
                orderIndex: number;
            }[];
        };
        BulkTasksResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                [key: string]: components["schemas"]["TicketTask"][];
            };
        };
        TaskQueue: {
            id: number;
            /** @description Unix timestamp in milliseconds */
            created: number;
            /** @description Unix timestamp in milliseconds */
            updated: number;
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            projectId: number;
            name: string;
            /** @default  */
            description: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "paused" | "inactive";
            /** @default 1 */
            maxParallelItems: number;
            averageProcessingTime?: number | null;
            /** @default 0 */
            totalCompletedItems: number;
        };
        UpdateQueueBody: {
            name?: string;
            description?: string;
            /** @enum {string} */
            status?: "active" | "paused" | "inactive";
            maxParallelItems?: number;
        };
        QueueStats: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            queueId: number;
            queueName: string;
            totalItems: number;
            queuedItems: number;
            inProgressItems: number;
            completedItems: number;
            failedItems: number;
            cancelledItems: number;
            averageProcessingTime: number | null;
            currentAgents: string[];
            ticketCount?: number;
            taskCount?: number;
            uniqueTickets?: number;
        };
        QueueWithStats: {
            queue: components["schemas"]["TaskQueue"];
            stats: components["schemas"]["QueueStats"];
        };
        QueueItem: {
            id: number;
            /** @description Unix timestamp in milliseconds */
            created: number;
            /** @description Unix timestamp in milliseconds */
            updated: number;
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            queueId: number;
            /**
             * Format: int64
             * @description Nullable optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            ticketId?: number;
            /**
             * Format: int64
             * @description Nullable optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            taskId?: number;
            /**
             * @default queued
             * @enum {string}
             */
            status: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | "timeout";
            /** @default 0 */
            priority: number;
            position?: number | null;
            estimatedProcessingTime?: number | null;
            actualProcessingTime?: number | null;
            agentId?: string | null;
            errorMessage?: string | null;
            /** @default 0 */
            retryCount: number;
            /** @default 3 */
            maxRetries: number;
            timeoutAt?: number | null;
            /**
             * @description Optional ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            startedAt?: number;
            /**
             * @description Optional ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            completedAt?: number;
        } | null;
        GetNextTaskResponse: {
            queueItem: components["schemas"]["QueueItem"];
            ticket?: unknown;
            task?: unknown;
        };
        EnqueueItemBody: {
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            ticketId?: number;
            /**
             * Format: int64
             * @description Optional entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            taskId?: number;
            priority?: number;
            agentId?: string;
        };
        BatchEnqueueBody: {
            items: components["schemas"]["EnqueueItemBody"][];
        };
        QueueTimeline: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            queueId: number;
            currentTime: number;
            items: {
                /**
                 * Format: int64
                 * @description Entity ID - positive integer without timestamp conversion
                 * @example 1716537600000
                 */
                itemId: number;
                /**
                 * Format: int64
                 * @description Nullable optional entity ID - positive integer without timestamp conversion
                 * @example 1716537600000
                 */
                ticketId?: number;
                /**
                 * Format: int64
                 * @description Nullable optional entity ID - positive integer without timestamp conversion
                 * @example 1716537600000
                 */
                taskId?: number;
                title: string;
                estimatedStartTime: number;
                estimatedEndTime: number;
                estimatedProcessingTime: number;
                /** @enum {string} */
                status: "queued" | "in_progress" | "completed" | "failed" | "cancelled" | "timeout";
            }[];
            totalEstimatedTime: number;
            estimatedCompletionTime: number;
        };
        ProvidersListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                id: string;
                name: string;
                isCustom?: boolean;
                baseUrl?: string;
            }[];
        };
        AiGenerateTextRequest: {
            /**
             * @description The text prompt for the AI.
             * @example Suggest 5 suitable filenames for a typescript utility file containing helper functions for string manipulation.
             */
            prompt: string;
            options?: components["schemas"]["AiSdkOptions"] & unknown;
            /**
             * @description Optional system message to guide the AI behavior and persona.
             * @example You are an expert programmer. Provide concise and relevant suggestions.
             */
            systemMessage?: string;
        };
        AiGenerateTextResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description The generated text response from the AI. */
                text: string;
            };
        };
        AiGenerateStructuredResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description The generated structured data, validated against the schema defined by the 'schemaKey'. */
                output?: unknown;
            };
        };
        AiGenerateStructuredRequest: {
            /**
             * @description The key identifying the predefined structured task configuration.
             * @example filenameSuggestion
             */
            schemaKey: string;
            /**
             * @description The user's input or context for the structured generation task.
             * @example A react component for displaying user profiles
             */
            userInput: string;
            options?: components["schemas"]["AiSdkOptions"] & unknown;
        };
        UnifiedModel: {
            /**
             * @description Model identifier
             * @example gpt-4o-mini
             */
            id: string;
            /**
             * @description User-friendly model name
             * @example GPT-4o Mini
             */
            name: string;
            /**
             * @description Provider ID
             * @example openai
             */
            provider: string;
            /**
             * @description Context window size in tokens
             * @example 128000
             */
            context_length?: number;
        };
        ModelsListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["UnifiedModel"][];
        };
        UpdateProviderSettings: {
            /** Format: uri */
            ollamaUrl?: string;
            /** Format: uri */
            lmstudioUrl?: string;
        };
        MCPServerConfig: {
            /**
             * @description Unique identifier for the MCP server configuration
             * @example 1234567890
             */
            id: number;
            /**
             * @description ID of the project this MCP server belongs to
             * @example 1234567890
             */
            projectId: number;
            /**
             * @description Display name for the MCP server
             * @example File System Tools
             */
            name: string;
            /**
             * @description Command to start the MCP server
             * @example npx @modelcontextprotocol/server-filesystem
             */
            command: string;
            /**
             * @description Command line arguments for the server
             * @default []
             * @example [
             *       "--root",
             *       "/path/to/project"
             *     ]
             */
            args: string[];
            /**
             * @description Environment variables for the server
             * @default {}
             * @example {
             *       "NODE_ENV": "production"
             *     }
             */
            env: {
                [key: string]: string;
            };
            /**
             * @description Whether the server is enabled
             * @default true
             * @example true
             */
            enabled: boolean;
            /**
             * @description Whether to auto-start the server when project opens
             * @default false
             * @example false
             */
            autoStart: boolean;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
             * @example 1755878562269
             */
            created: number;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
             * @example 1755878562269
             */
            updated: number;
        };
        MCPServerConfigResponse: {
            success: boolean;
            data: components["schemas"]["MCPServerConfig"];
        };
        CreateMCPServerConfigBody: {
            /**
             * @description ID of the project this MCP server belongs to
             * @example 1234567890
             */
            projectId: number;
            /**
             * @description Display name for the MCP server
             * @example File System Tools
             */
            name: string;
            /**
             * @description Command to start the MCP server
             * @example npx @modelcontextprotocol/server-filesystem
             */
            command: string;
            /**
             * @description Command line arguments for the server
             * @default []
             * @example [
             *       "--root",
             *       "/path/to/project"
             *     ]
             */
            args: string[];
            /**
             * @description Environment variables for the server
             * @default {}
             * @example {
             *       "NODE_ENV": "production"
             *     }
             */
            env: {
                [key: string]: string;
            };
            /**
             * @description Whether the server is enabled
             * @default true
             * @example true
             */
            enabled: boolean;
            /**
             * @description Whether to auto-start the server when project opens
             * @default false
             * @example false
             */
            autoStart: boolean;
        };
        MCPServerConfigListResponse: {
            success: boolean;
            data: components["schemas"]["MCPServerConfig"][];
        };
        UpdateMCPServerConfigBody: {
            /**
             * @description ID of the project this MCP server belongs to
             * @example 1234567890
             */
            projectId?: number;
            /**
             * @description Display name for the MCP server
             * @example File System Tools
             */
            name?: string;
            /**
             * @description Command to start the MCP server
             * @example npx @modelcontextprotocol/server-filesystem
             */
            command?: string;
            /**
             * @description Command line arguments for the server
             * @default []
             * @example [
             *       "--root",
             *       "/path/to/project"
             *     ]
             */
            args: string[];
            /**
             * @description Environment variables for the server
             * @default {}
             * @example {
             *       "NODE_ENV": "production"
             *     }
             */
            env: {
                [key: string]: string;
            };
            /**
             * @description Whether the server is enabled
             * @default true
             * @example true
             */
            enabled: boolean;
            /**
             * @description Whether to auto-start the server when project opens
             * @default false
             * @example false
             */
            autoStart: boolean;
        };
        MCPToolExecutionResult: {
            /**
             * @description Unique ID for this execution
             * @example exec_123456
             */
            id: string;
            toolId: string;
            serverId: number;
            /**
             * @description Status of the execution
             * @example success
             * @enum {string}
             */
            status: "pending" | "running" | "success" | "error";
            /** @description Result from the tool execution */
            result?: unknown;
            /** @description Error message if execution failed */
            error: string | null;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
             * @example 1755878562269
             */
            startedAt: number;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.
             * @example 1755878562269
             */
            completedAt: number;
        };
        MCPToolExecutionResultResponse: {
            success: boolean;
            data: components["schemas"]["MCPToolExecutionResult"];
        };
        MCPToolExecutionRequest: {
            /**
             * @description ID of the tool to execute
             * @example read_file
             */
            toolId: string;
            /** @description ID of the MCP server to execute the tool on */
            serverId: number;
            /**
             * @description Parameters to pass to the tool
             * @default {}
             * @example {
             *       "path": "/path/to/file.txt"
             *     }
             */
            parameters: {
                [key: string]: unknown;
            };
        };
        MCPResource: {
            /**
             * @description URI of the resource
             * @example file:///path/to/file.txt
             */
            uri: string;
            /**
             * @description Display name for the resource
             * @example file.txt
             */
            name: string;
            /** @description Description of the resource */
            description?: string;
            /**
             * @description MIME type of the resource
             * @example text/plain
             */
            mimeType?: string;
            /** @description ID of the MCP server providing this resource */
            serverId: number;
        };
        MCPResourceListResponse: {
            success: boolean;
            data: components["schemas"]["MCPResource"][];
        };
        GitStatusResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @enum {boolean} */
                success: true;
                data: {
                    /** @description Whether the directory is a git repository */
                    isRepo: boolean;
                    /** @description The current branch name */
                    current: string | null;
                    /** @description The tracking branch name */
                    tracking: string | null;
                    /** @description Number of commits ahead of tracking branch */
                    ahead: number;
                    /** @description Number of commits behind tracking branch */
                    behind: number;
                    /** @description List of files with git status */
                    files: {
                        /** @description The file path relative to the repository root */
                        path: string;
                        /**
                         * @description The git status of the file
                         * @enum {string}
                         */
                        status: "added" | "modified" | "deleted" | "renamed" | "copied" | "untracked" | "ignored" | "unchanged";
                        /** @description Whether the file is staged for commit */
                        staged: boolean;
                        /** @description The index status code from git */
                        index: string | null;
                        /** @description The working directory status code from git */
                        workingDir: string | null;
                    }[];
                    /** @description List of staged file paths */
                    staged: string[];
                    /** @description List of modified file paths */
                    modified: string[];
                    /** @description List of created file paths */
                    created: string[];
                    /** @description List of deleted file paths */
                    deleted: string[];
                    /** @description List of renamed file paths */
                    renamed: string[];
                    /** @description List of conflicted file paths */
                    conflicted: string[];
                };
            } | {
                /** @enum {boolean} */
                success: false;
                error: {
                    /** @enum {string} */
                    type: "not_a_repo" | "git_not_installed" | "permission_denied" | "unknown";
                    message: string;
                };
            };
        };
        CommitLogResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description Commit hash */
                hash: string;
                /** @description Commit message */
                message: string;
                author: {
                    name: string;
                    email: string;
                    /** @description ISO date string */
                    date: string;
                };
                committer: {
                    name: string;
                    email: string;
                    /** @description ISO date string */
                    date: string;
                };
                /** @description Parent commit hashes */
                parents: string[];
                /** @description Files changed in this commit */
                files?: string[];
            }[];
        };
        CommitLogEnhancedResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                success: boolean;
                data?: {
                    commits: {
                        /** @description Full SHA-1 commit hash */
                        hash: string;
                        /** @description Abbreviated commit hash (7-8 chars) */
                        abbreviatedHash: string;
                        /** @description First line of commit message */
                        subject: string;
                        /** @description Full commit message including subject */
                        body: string;
                        /** @description Commit author information */
                        author: {
                            name: string;
                            email: string;
                            /**
                             * Format: uri
                             * @description Gravatar or other avatar URL
                             */
                            avatarUrl?: string;
                        };
                        /** @description Committer information (may differ from author) */
                        committer: {
                            name: string;
                            email: string;
                            /**
                             * Format: uri
                             * @description Gravatar or other avatar URL
                             */
                            avatarUrl?: string;
                        };
                        /** @description ISO 8601 timestamp when authored */
                        authoredDate: string;
                        /** @description ISO 8601 timestamp when committed */
                        committedDate: string;
                        /** @description Human-readable relative time (e.g., "2 hours ago") */
                        relativeTime: string;
                        /** @description Parent commit hashes */
                        parents: string[];
                        /** @description Branch and tag references pointing to this commit */
                        refs: string[];
                        /** @description Summary statistics for the commit */
                        stats: {
                            /** @description Total number of files changed */
                            filesChanged: number;
                            /** @description Total lines added */
                            additions: number;
                            /** @description Total lines removed */
                            deletions: number;
                        };
                        /** @description Per-file change statistics */
                        fileStats?: {
                            /** @description File path relative to repository root */
                            path: string;
                            /** @description Number of lines added */
                            additions: number;
                            /** @description Number of lines removed */
                            deletions: number;
                            /**
                             * @description Change type
                             * @enum {string}
                             */
                            status: "added" | "modified" | "deleted" | "renamed" | "copied";
                            /** @description Previous path for renamed/moved files */
                            oldPath?: string;
                        }[];
                    }[];
                    pagination: {
                        /** @description Current page number (1-based) */
                        page: number;
                        /** @description Number of items per page */
                        perPage: number;
                        /** @description Total number of items if available */
                        totalCount?: number;
                        /** @description Whether more items are available */
                        hasMore: boolean;
                        /** @description Cursor for cursor-based pagination */
                        cursor?: string;
                    };
                    /** @description Branch name these commits are from */
                    branch: string;
                };
                message?: string;
            };
        };
        CommitDetailResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                success: boolean;
                data?: {
                    commit: {
                        /** @description Full SHA-1 commit hash */
                        hash: string;
                        /** @description Abbreviated commit hash (7-8 chars) */
                        abbreviatedHash: string;
                        /** @description First line of commit message */
                        subject: string;
                        /** @description Full commit message including subject */
                        body: string;
                        /** @description Commit author information */
                        author: {
                            name: string;
                            email: string;
                            /**
                             * Format: uri
                             * @description Gravatar or other avatar URL
                             */
                            avatarUrl?: string;
                        };
                        /** @description Committer information (may differ from author) */
                        committer: {
                            name: string;
                            email: string;
                            /**
                             * Format: uri
                             * @description Gravatar or other avatar URL
                             */
                            avatarUrl?: string;
                        };
                        /** @description ISO 8601 timestamp when authored */
                        authoredDate: string;
                        /** @description ISO 8601 timestamp when committed */
                        committedDate: string;
                        /** @description Human-readable relative time (e.g., "2 hours ago") */
                        relativeTime: string;
                        /** @description Parent commit hashes */
                        parents: string[];
                        /** @description Branch and tag references pointing to this commit */
                        refs: string[];
                        /** @description Summary statistics for the commit */
                        stats: {
                            /** @description Total number of files changed */
                            filesChanged: number;
                            /** @description Total lines added */
                            additions: number;
                            /** @description Total lines removed */
                            deletions: number;
                        };
                        /** @description Per-file change statistics */
                        fileStats?: {
                            /** @description File path relative to repository root */
                            path: string;
                            /** @description Number of lines added */
                            additions: number;
                            /** @description Number of lines removed */
                            deletions: number;
                            /**
                             * @description Change type
                             * @enum {string}
                             */
                            status: "added" | "modified" | "deleted" | "renamed" | "copied";
                            /** @description Previous path for renamed/moved files */
                            oldPath?: string;
                        }[];
                    };
                    /** @description Detailed file changes */
                    files: {
                        path: string;
                        /** @enum {string} */
                        status: "added" | "modified" | "deleted" | "renamed" | "copied";
                        additions: number;
                        deletions: number;
                        binary: boolean;
                        oldPath?: string;
                        /** @description Unified diff content if requested */
                        diff?: string;
                    }[];
                    /** @description Full unified diff if requested */
                    totalDiff?: string;
                };
                message?: string;
            };
        };
        DiffResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                files: {
                    path: string;
                    /** @enum {string} */
                    type: "added" | "modified" | "deleted" | "renamed";
                    additions: number;
                    deletions: number;
                    binary: boolean;
                    /** @description For renamed files */
                    oldPath?: string;
                }[];
                /** @description Total additions */
                additions: number;
                /** @description Total deletions */
                deletions: number;
                /** @description Diff content for single file */
                content?: string;
            };
        };
        BranchListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description Branch name */
                name: string;
                /** @description Whether this is the current branch */
                current: boolean;
                /** @description Whether this is a remote branch */
                isRemote: boolean;
                /** @description Latest commit hash */
                commit: string;
                /** @description Tracking branch name */
                tracking: string | null;
                /** @description Commits ahead of tracking branch */
                ahead: number;
                /** @description Commits behind tracking branch */
                behind: number;
            }[];
        };
        BranchListEnhancedResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                success: boolean;
                data?: {
                    branches: {
                        /** @description Branch name */
                        name: string;
                        /** @description Whether this is the currently checked out branch */
                        current: boolean;
                        /** @description Whether this is a remote branch */
                        isRemote: boolean;
                        /** @description Whether the branch is protected */
                        isProtected?: boolean;
                        /** @description Summary of the latest commit on this branch */
                        latestCommit: {
                            hash: string;
                            abbreviatedHash: string;
                            subject: string;
                            /** @description Author name */
                            author: string;
                            relativeTime: string;
                        };
                        /** @description Remote tracking branch */
                        tracking: string | null;
                        /** @description Commits ahead of tracking/main branch */
                        ahead: number;
                        /** @description Commits behind tracking/main branch */
                        behind: number;
                        /** @description ISO 8601 timestamp of last activity */
                        lastActivity?: string;
                    }[];
                    /** @description Name of current branch */
                    current: string | null;
                    /** @description Default branch name (e.g., main, master) */
                    defaultBranch: string;
                };
                message?: string;
            };
        };
        StashListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                index: number;
                message: string;
                /** @description Branch where stash was created */
                branch: string;
                date: string;
            }[];
        };
        WorktreeListResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @description Absolute path to the worktree */
                path: string;
                /** @description Branch checked out in this worktree */
                branch: string;
                /** @description Current commit hash */
                commit: string;
                /** @description Whether this is the main worktree */
                isMain: boolean;
                /** @description Whether the worktree is locked */
                isLocked: boolean;
                /** @description Reason for locking if locked */
                lockReason?: string;
                /** @description Whether the worktree can be pruned */
                prunable?: boolean;
            }[];
        };
        PruneWorktreesResponse: {
            /** @enum {boolean} */
            success: true;
            data: string[];
            message: string;
        };
        RemotesResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                name: string;
                /** @description Fetch URL */
                fetch: string;
                /** @description Push URL */
                push: string;
            }[];
        };
        TagsResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                name: string;
                /** @description Commit hash */
                commit: string;
                /** @description Tag message for annotated tags */
                annotation?: string;
                /** @description Tagger info for annotated tags */
                tagger?: {
                    name: string;
                    email: string;
                    /** @description ISO date string */
                    date: string;
                };
            }[];
        };
        ActiveTabData: {
            activeTabId: number;
            lastUpdated: number;
            clientId?: string;
            tabMetadata?: {
                displayName?: string;
                selectedFiles?: number[];
                selectedPrompts?: number[];
                userPrompt?: string;
                fileSearch?: string;
                contextLimit?: number;
                /** @enum {string} */
                preferredEditor?: "vscode" | "cursor" | "webstorm";
                suggestedFileIds?: number[];
                ticketSearch?: string;
                /** @enum {string} */
                ticketSort?: "created_asc" | "created_desc" | "status" | "priority";
                /** @enum {string} */
                ticketStatusFilter?: "all" | "open" | "in_progress" | "closed" | "non_closed";
            };
        } | null;
        ActiveTabResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ActiveTabData"];
        };
        ActiveTabResponseRequired: {
            /** @enum {boolean} */
            success: true;
            data: {
                activeTabId: number;
                lastUpdated: number;
                clientId?: string;
                tabMetadata?: {
                    displayName?: string;
                    selectedFiles?: number[];
                    selectedPrompts?: number[];
                    userPrompt?: string;
                    fileSearch?: string;
                    contextLimit?: number;
                    /** @enum {string} */
                    preferredEditor?: "vscode" | "cursor" | "webstorm";
                    suggestedFileIds?: number[];
                    ticketSearch?: string;
                    /** @enum {string} */
                    ticketSort?: "created_asc" | "created_desc" | "status" | "priority";
                    /** @enum {string} */
                    ticketStatusFilter?: "all" | "open" | "in_progress" | "closed" | "non_closed";
                };
            };
        };
        ClaudeAgent: {
            /**
             * @description Agent ID (filename without .md extension)
             * @example frontend-expert
             */
            id: string;
            /**
             * @description Descriptive name for the agent
             * @example Frontend Expert
             */
            name: string;
            /**
             * @description Brief description of agent capabilities and specialization
             * @example Specializes in React, TypeScript, and modern frontend development
             */
            description: string;
            /**
             * @description Color identifier for visual agent differentiation
             * @example blue
             * @enum {string}
             */
            color: "blue" | "green" | "red" | "yellow" | "purple" | "cyan" | "orange" | "pink";
            /**
             * @description Relative path to the agent markdown file
             * @example agents/frontend-expert.md
             */
            filePath: string;
            /**
             * @description Full markdown content of the agent definition
             * @example # Frontend Expert Agent
             *
             *     Specialized instructions for frontend development...
             */
            content: string;
            /** @description Optional project association for project-specific agents */
            projectId?: number;
            /** @description Creation timestamp */
            created: number;
            /** @description Last update timestamp */
            updated: number;
        };
        ClaudeAgentResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ClaudeAgent"];
        };
        CreateClaudeAgentBody: {
            /**
             * @description Agent name (required)
             * @example Backend Architect
             */
            name: string;
            /**
             * @description Agent description (required)
             * @example Expert in API design, database architecture, and backend systems
             */
            description: string;
            /**
             * @description Color identifier for visual agent differentiation
             * @example blue
             * @enum {string}
             */
            color: "blue" | "green" | "red" | "yellow" | "purple" | "cyan" | "orange" | "pink";
            /**
             * @description Optional custom file path (will be auto-generated if not provided)
             * @example agents/backend-architect.md
             */
            filePath?: string;
            /**
             * @description Initial agent markdown content
             * @example # Backend Architect
             *
             *     You are an expert backend developer...
             */
            content: string;
            /** @description Optional project ID for project-specific agent */
            projectId?: number;
        };
        ClaudeAgentListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ClaudeAgent"][];
        };
        UpdateClaudeAgentBody: {
            /**
             * @description New agent name
             * @example Updated Agent Name
             */
            name?: string;
            /**
             * @description New agent description
             * @example Updated agent description with new capabilities
             */
            description?: string;
            /**
             * @description Color identifier for visual agent differentiation
             * @example blue
             * @enum {string}
             */
            color?: "blue" | "green" | "red" | "yellow" | "purple" | "cyan" | "orange" | "pink";
            /**
             * @description New file path (will move the file if changed)
             * @example agents/updated-path.md
             */
            filePath?: string;
            /**
             * @description Updated markdown content
             * @example # Updated Agent Content
             *
             *     New instructions...
             */
            content?: string;
        };
        AgentSuggestions: {
            agents: {
                /**
                 * @description Suggested agent name
                 * @example Testing Specialist
                 */
                name: string;
                /**
                 * @description Suggested agent description
                 * @example Expert in unit testing, integration testing, and TDD
                 */
                description: string;
                /**
                 * @description Color identifier for visual agent differentiation
                 * @example blue
                 * @enum {string}
                 */
                color: "blue" | "green" | "red" | "yellow" | "purple" | "cyan" | "orange" | "pink";
                /**
                 * @description AI-generated agent content suggestion
                 * @example # Testing Specialist
                 *
                 *     You are an expert in testing...
                 */
                suggestedContent: string;
                /**
                 * @description Relevance score based on project context (0-1)
                 * @example 0.85
                 */
                relevanceScore: number;
                /**
                 * @description Explanation for why this agent is suggested
                 * @example Based on the presence of test files and testing frameworks in the project
                 */
                rationale: string;
            }[];
        };
        AgentSuggestionsResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["AgentSuggestions"];
        };
        SuggestAgentsRequest: {
            /** @description Project ID to analyze for agent suggestions */
            projectId: number;
            /**
             * @description Optional user context to guide suggestions
             * @example I need help with performance optimization and database queries
             */
            userContext?: string;
            /**
             * @description Maximum number of agents to suggest (default: 5, max: 10)
             * @default 5
             * @example 5
             */
            limit: number;
        };
        ClaudeCommandFrontmatter: {
            /**
             * @description Comma-separated list of allowed tools
             * @example Edit, Read, Bash(git:*)
             */
            "allowed-tools"?: string;
            /**
             * @description Brief description of the command
             * @example Performs comprehensive code review
             */
            description?: string;
            /**
             * @description Hint for expected arguments
             * @example [file-path]
             */
            "argument-hint"?: string;
            /**
             * @description Preferred model for command execution
             * @example claude-3-5-sonnet-20241022
             */
            model?: string;
            /**
             * @description Maximum conversation turns
             * @example 10
             */
            "max-turns"?: number;
            /**
             * @description Preferred output format
             * @example json
             * @enum {string}
             */
            "output-format"?: "text" | "json";
        };
        ClaudeCommand: {
            /**
             * Format: int64
             * @description Entity ID - positive integer without timestamp conversion
             * @example 1716537600000
             */
            id: number;
            /**
             * @description Command name (derived from filename)
             * @example security-audit
             */
            name: string;
            /**
             * @description Command namespace (from subdirectory)
             * @example frontend
             */
            namespace?: string;
            /**
             * @description Command scope - project-specific or user-global
             * @example project
             * @enum {string}
             */
            scope: "project" | "user";
            /**
             * @description Command description from frontmatter
             * @example Comprehensive security audit for the codebase
             */
            description?: string;
            /**
             * @description Relative path to command file
             * @example .claude/commands/security-audit.md
             */
            filePath: string;
            /**
             * @description Command markdown content (without frontmatter)
             * @example # Security Audit
             *
             *     Perform comprehensive analysis...
             */
            content: string;
            frontmatter: components["schemas"]["ClaudeCommandFrontmatter"];
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            created: number;
            /**
             * @description ID or Timestamp in unix timestamp (milliseconds)
             * @example 1716537600000
             */
            updated: number;
        };
        ClaudeCommandResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ClaudeCommand"];
        };
        CreateClaudeCommandBody: {
            /**
             * @description Command name (lowercase, alphanumeric with hyphens)
             * @example code-review
             */
            name: string;
            /**
             * @description Optional namespace/subdirectory
             * @example analysis
             */
            namespace?: string;
            /**
             * @description Command scope - project-specific or user-global
             * @default project
             * @example project
             * @enum {string}
             */
            scope: "project" | "user";
            /**
             * @description Command content with optional $ARGUMENTS placeholder
             * @example Analyze code for: $ARGUMENTS
             *
             *     ## Steps
             *     1. Check syntax...
             */
            content: string;
            frontmatter?: components["schemas"]["ClaudeCommandFrontmatter"];
        };
        ClaudeCommandListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ClaudeCommand"][];
        };
        UpdateClaudeCommandBody: {
            /**
             * @description New command content
             * @example Updated command content...
             */
            content?: string;
            frontmatter?: components["schemas"]["ClaudeCommandFrontmatter"];
            /**
             * @description Move command to different namespace
             * @example utilities
             */
            namespace?: string;
        };
        CommandExecutionResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                result: string;
                usage?: {
                    inputTokens: number;
                    outputTokens: number;
                    totalTokens: number;
                };
                model?: string;
                sessionId?: string;
            };
        };
        ExecuteClaudeCommandBody: {
            /**
             * @description Arguments to substitute for $ARGUMENTS
             * @example src/auth
             */
            arguments?: string;
            options?: {
                maxTurns?: number;
                /** @enum {string} */
                outputFormat?: "text" | "json";
                model?: string;
            };
        };
        CommandGenerationResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /**
                 * @description Generated command name
                 * @example test-runner
                 */
                name: string;
                /**
                 * @description Suggested namespace
                 * @example testing
                 */
                namespace?: string;
                /**
                 * @description Generated command content with instructions
                 * @example Run tests for: $ARGUMENTS
                 *
                 *     1. Detect test framework...
                 *     2. Run tests with coverage...
                 */
                content: string;
                frontmatter: components["schemas"]["ClaudeCommandFrontmatter"] & unknown;
                /**
                 * @description Generated command description
                 * @example Runs tests with coverage reporting and threshold checking
                 */
                description: string;
                /**
                 * @description Explanation of design choices made during generation
                 * @example Based on Jest configuration found in the project, included coverage flags...
                 */
                rationale: string;
                /** @description Alternative command variations the user might want */
                suggestedVariations?: {
                    /** @example test-watch */
                    name: string;
                    /** @example Run tests in watch mode */
                    description: string;
                    /** @example Add --watch flag and interactive mode */
                    changes: string;
                }[];
            };
        };
        CommandGenerationRequest: {
            /**
             * @description Command name (lowercase, alphanumeric with hyphens)
             * @example test-runner
             */
            name: string;
            /**
             * @description Brief description of what the command should do
             * @example Run all tests for the current file or directory
             */
            description: string;
            /**
             * @description Detailed explanation of what the user wants the command to accomplish
             * @example I want a command that runs tests for the current file, shows coverage, and fails if coverage is below 80%
             */
            userIntent: string;
            /**
             * @description Optional namespace/subdirectory for the command
             * @example testing
             */
            namespace?: string;
            /**
             * @description Command scope - project-specific or user-global
             * @default project
             * @example project
             * @enum {string}
             */
            scope: "project" | "user";
            /** @description Context options for command generation */
            context?: {
                /**
                 * @description Include project structure and tech stack in generation context
                 * @default true
                 */
                includeProjectSummary: boolean;
                /**
                 * @description Include file tree structure in generation context
                 * @default true
                 */
                includeFileStructure: boolean;
                /**
                 * @description Include detected technologies in generation context
                 * @default true
                 */
                includeTechStack: boolean;
                /**
                 * @description Specific files to consider when generating the command
                 * @example [
                 *       "src/test-utils.ts",
                 *       "jest.config.js"
                 *     ]
                 */
                selectedFiles?: string[];
                /**
                 * @description Additional context to help generate a better command
                 * @example We use Jest for testing and have custom test utilities in src/test-utils.ts
                 */
                additionalContext?: string;
            };
        };
        CommandSuggestions: {
            commands: {
                /**
                 * @description Suggested command name
                 * @example performance-audit
                 */
                name: string;
                /**
                 * @description Suggested namespace
                 * @example analysis
                 */
                namespace?: string;
                /**
                 * @description Command description
                 * @example Analyze performance bottlenecks
                 */
                description: string;
                /**
                 * @description AI-generated command content
                 * @example Analyze performance for: $ARGUMENTS
                 *
                 *     ...
                 */
                suggestedContent: string;
                suggestedFrontmatter?: components["schemas"]["ClaudeCommandFrontmatter"];
                /**
                 * @description Relevance score based on context
                 * @example 0.92
                 */
                relevanceScore: number;
                /**
                 * @description Explanation for suggestion
                 * @example Based on the performance-critical nature of the project
                 */
                rationale: string;
            }[];
        };
        CommandSuggestionsResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["CommandSuggestions"];
        };
        MCPStatusResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                claudeDesktop: {
                    installed: boolean;
                    configExists: boolean;
                    hasPromptliano: boolean;
                    configPath?: string;
                    error?: string;
                };
                claudeCode: {
                    globalConfigExists: boolean;
                    globalHasPromptliano: boolean;
                    globalConfigPath?: string;
                    projectConfigExists: boolean;
                    projectHasPromptliano: boolean;
                    projectConfigPath?: string;
                    localConfigExists: boolean;
                    localHasPromptliano: boolean;
                    localConfigPath?: string;
                    error?: string;
                };
                projectId: string;
                installCommand: string;
            };
        };
        ClaudeSessionsMetadataResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                sessionId: string;
                projectPath: string;
                startTime: string;
                lastUpdate: string;
                messageCount: number;
                fileSize: number;
                hasGitBranch: boolean;
                hasCwd: boolean;
                firstMessagePreview?: string;
                lastMessagePreview?: string;
            }[];
            pagination?: {
                hasMore: boolean;
                nextCursor?: string;
                total?: number;
            };
        };
        ClaudeSessionsResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                sessionId: string;
                projectPath: string;
                startTime: string;
                lastUpdate: string;
                messageCount: number;
                gitBranch?: string;
                cwd?: string;
                tokenUsage?: {
                    totalInputTokens: number;
                    totalCacheCreationTokens: number;
                    totalCacheReadTokens: number;
                    totalOutputTokens: number;
                    totalTokens: number;
                };
                serviceTiers?: string[];
                totalTokensUsed?: number;
                totalCostUsd?: number;
            }[];
        };
        ClaudeSessionsPaginatedResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                sessionId: string;
                projectPath: string;
                startTime: string;
                lastUpdate: string;
                messageCount: number;
                gitBranch?: string;
                cwd?: string;
                tokenUsage?: {
                    totalInputTokens: number;
                    totalCacheCreationTokens: number;
                    totalCacheReadTokens: number;
                    totalOutputTokens: number;
                    totalTokens: number;
                };
                serviceTiers?: string[];
                totalTokensUsed?: number;
                totalCostUsd?: number;
            }[];
            pagination: {
                hasMore: boolean;
                nextCursor?: string;
                total?: number;
            };
        };
        ClaudeFullSessionResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                sessionId: string;
                projectPath: string;
                startTime: string;
                lastUpdate: string;
                messageCount: number;
                gitBranch?: string;
                cwd?: string;
                tokenUsage?: {
                    totalInputTokens: number;
                    totalCacheCreationTokens: number;
                    totalCacheReadTokens: number;
                    totalOutputTokens: number;
                    totalTokens: number;
                };
                serviceTiers?: string[];
                totalTokensUsed?: number;
                totalCostUsd?: number;
            } | null;
        };
        ClaudeMessagesResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @enum {string} */
                type: "user" | "assistant" | "result" | "system" | "summary";
                message?: {
                    /** @enum {string} */
                    role: "user" | "assistant" | "system";
                    content: string | ({
                        /** @enum {string} */
                        type: "text";
                        text: string;
                    } | {
                        /** @enum {string} */
                        type: "image";
                        source: {
                            /** @enum {string} */
                            type: "base64";
                            media_type: string;
                            data: string;
                        };
                    } | {
                        /** @enum {string} */
                        type: "tool_result";
                        tool_use_id: string;
                        content: string | unknown[];
                    } | {
                        /** @enum {string} */
                        type: "tool_use";
                        id: string;
                        name: string;
                        input?: unknown;
                    } | string)[] | unknown | unknown;
                    id?: string | null;
                    model?: string | null;
                    stop_reason?: string | null;
                    stop_sequence?: string | null;
                    usage?: {
                        input_tokens?: number | null;
                        cache_creation_input_tokens?: number | null;
                        cache_read_input_tokens?: number | null;
                        output_tokens?: number | null;
                        service_tier?: string;
                    };
                };
                timestamp: string;
                sessionId: string;
                uuid?: string | null;
                parentUuid?: string | null;
                requestId?: string | null;
                userType?: string | null;
                isSidechain?: boolean;
                cwd?: string | null;
                version?: string | null;
                gitBranch?: string | null;
                toolUseResult?: {
                    oldTodos?: unknown[];
                    newTodos?: unknown[];
                } | string | unknown[] | unknown | unknown;
                content?: string | ({
                    /** @enum {string} */
                    type: "text";
                    text: string;
                } | {
                    /** @enum {string} */
                    type: "image";
                    source: {
                        /** @enum {string} */
                        type: "base64";
                        media_type: string;
                        data: string;
                    };
                } | {
                    /** @enum {string} */
                    type: "tool_result";
                    tool_use_id: string;
                    content: string | unknown[];
                } | {
                    /** @enum {string} */
                    type: "tool_use";
                    id: string;
                    name: string;
                    input?: unknown;
                } | string)[] | unknown | unknown;
                isMeta?: boolean;
                toolUseID?: string | null;
                level?: string;
                tokensUsed?: number | null;
                costUsd?: number | null;
                durationMs?: number | null;
                model?: string | null;
            }[];
        };
        ClaudeSessionsEnhancedResponse: components["schemas"]["ClaudeSessionsResponse"] & {
            pagination?: {
                hasMore: boolean;
                nextCursor?: string;
                total?: number;
            };
        };
        ClaudeProjectDataResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                projectPath: string;
                encodedPath: string;
                sessions: {
                    sessionId: string;
                    projectPath: string;
                    startTime: string;
                    lastUpdate: string;
                    messageCount: number;
                    gitBranch?: string;
                    cwd?: string;
                    tokenUsage?: {
                        totalInputTokens: number;
                        totalCacheCreationTokens: number;
                        totalCacheReadTokens: number;
                        totalOutputTokens: number;
                        totalTokens: number;
                    };
                    serviceTiers?: string[];
                    totalTokensUsed?: number;
                    totalCostUsd?: number;
                }[];
                totalMessages: number;
                firstMessageTime?: string;
                lastMessageTime?: string;
                branches: string[];
                workingDirectories: string[];
            };
        };
        HookListItem: {
            /**
             * @description Hook event type that triggers the hook execution
             * @example PreToolUse
             * @enum {string}
             */
            event: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
            matcherIndex: number;
            matcher: string;
            command: string;
            timeout?: number;
        };
        HookListResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["HookListItem"][];
        };
        HookResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["HookListItem"];
        };
        HookGenerationResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /**
                 * @description Hook event type that triggers the hook execution
                 * @example PreToolUse
                 * @enum {string}
                 */
                event: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
                matcher: string;
                command: string;
                timeout?: number;
                description: string;
                security_warnings?: string[];
            };
        };
        HookGenerationRequest: {
            /**
             * @description Natural language description of what the hook should do
             * @example Run tests after editing source files
             */
            description: string;
            context?: {
                /**
                 * @description Hook event type that triggers the hook execution
                 * @example PreToolUse
                 * @enum {string}
                 */
                suggestedEvent?: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
                examples?: string[];
            };
        };
        HookTestResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                /** @example Hook testing is not implemented. Claude Code handles hook execution. */
                message: string;
            };
        };
        HookTestRequest: {
            /**
             * @description Hook event type that triggers the hook execution
             * @example PreToolUse
             * @enum {string}
             */
            event: "PreToolUse" | "PostToolUse" | "UserPromptSubmit" | "Notification" | "Stop" | "SubagentStop" | "SessionStart" | "PreCompact";
            matcher: string;
            command: string;
            timeout?: number;
            sampleToolName?: string;
        };
        DetectToolsResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                tools: {
                    tool: string;
                    name: string;
                    installed: boolean;
                    configPath?: string;
                    configExists?: boolean;
                    hasPromptliano?: boolean;
                }[];
                platform: string;
            };
        };
        InstallationStatusResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                projectConfig: {
                    projectId: number;
                    projectName: string;
                    mcpEnabled: boolean;
                    installedTools: {
                        tool: string;
                        installedAt: number;
                        configPath?: string;
                        serverName: string;
                    }[];
                    customInstructions?: string;
                } | null;
                connectionStatus: {
                    connected: boolean;
                    sessionId?: string;
                    lastActivity?: number;
                    projectId?: number;
                };
            };
        };
        InstallResultResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                message: string;
                configPath?: string;
                backedUp?: boolean;
                backupPath?: string;
            };
        };
        UninstallResultResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                message: string;
            };
        };
        ConfigLocationsData: {
            locations: {
                path: string;
                exists: boolean;
                priority: number;
            }[];
        };
        ConfigLocationsResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ConfigLocationsData"];
        };
        MergedConfigData: {
            config: {
                mcpServers?: {
                    [key: string]: {
                        /**
                         * @default stdio
                         * @enum {string}
                         */
                        type: "stdio" | "http";
                        command: string;
                        args?: string[];
                        env?: {
                            [key: string]: string;
                        };
                        timeout?: number;
                    };
                };
                inputs?: {
                    /** @enum {string} */
                    type: "promptString" | "promptNumber" | "promptBoolean";
                    id: string;
                    description: string;
                    default?: unknown;
                    password?: boolean;
                }[];
                extends?: string | string[];
            };
        };
        MergedConfigResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["MergedConfigData"];
        };
        ProjectConfigData: {
            config: {
                mcpServers?: {
                    [key: string]: {
                        /**
                         * @default stdio
                         * @enum {string}
                         */
                        type: "stdio" | "http";
                        command: string;
                        args?: string[];
                        env?: {
                            [key: string]: string;
                        };
                        timeout?: number;
                    };
                };
                inputs?: {
                    /** @enum {string} */
                    type: "promptString" | "promptNumber" | "promptBoolean";
                    id: string;
                    description: string;
                    default?: unknown;
                    password?: boolean;
                }[];
                extends?: string | string[];
            } | null;
            source?: string;
        };
        ProjectConfigResponse: {
            /** @enum {boolean} */
            success: true;
            data: components["schemas"]["ProjectConfigData"];
        };
        GlobalMCPConfigResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                servers: {
                    [key: string]: {
                        /**
                         * @default stdio
                         * @enum {string}
                         */
                        type: "stdio" | "http";
                        command: string;
                        args?: string[];
                        env?: {
                            [key: string]: string;
                        };
                        timeout?: number;
                    };
                };
                /** @default http://localhost:3147/api/mcp */
                defaultServerUrl: string;
                /** @default false */
                debugMode: boolean;
                defaultTimeout?: number;
                globalEnv?: {
                    [key: string]: string;
                };
            };
        };
        GlobalInstallationsResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                installations: {
                    tool: string;
                    installedAt: number;
                    configPath: string;
                    serverName: string;
                    version?: string;
                }[];
                toolStatuses: {
                    tool: string;
                    name: string;
                    installed: boolean;
                    hasGlobalPromptliano: boolean;
                    configPath?: string;
                }[];
            };
        };
        GlobalInstallResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                message: string;
                configPath?: string;
                backedUp?: boolean;
                backupPath?: string;
            };
        };
        GlobalUninstallResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                message: string;
            };
        };
        GlobalStatusResponse: {
            /** @enum {boolean} */
            success: true;
            data: {
                configExists: boolean;
                configPath: string;
                lastModified?: number;
                totalInstallations: number;
                installedTools: string[];
                installation: {
                    supported: boolean;
                    scriptPath: string;
                    scriptExists: boolean;
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    generateProjectTabName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tabId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    projectId: number;
                    tabData?: {
                        selectedFiles?: number[];
                        userPrompt?: string;
                    };
                    existingNames?: string[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        success: true;
                        data: {
                            name: string;
                            /** @enum {string} */
                            status: "success";
                            generatedAt: string;
                        };
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Resource Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
}
