{
  "openapi": "3.1.1",
  "info": {
    "description": "Promptliano OpenAPI Server Spec",
    "version": "0.12.0",
    "title": "@promptliano/server"
  },
  "components": {
    "schemas": {
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "path": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "path",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProjectResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectResponseMultiStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectResponse"
          },
          {
            "type": "object",
            "properties": {
              "warning": {
                "type": "string"
              },
              "error": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "An error occurred"
              },
              "code": {
                "type": "string",
                "example": "ERROR_CODE"
              },
              "details": {
                "type": "object",
                "additionalProperties": {}
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "CreateProjectRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "example": "My Awesome Project"
          },
          "path": {
            "type": "string",
            "minLength": 1,
            "example": "/path/to/project"
          },
          "description": {
            "type": "string",
            "example": "Optional project description"
          }
        },
        "required": [
          "name",
          "path"
        ]
      },
      "ProjectListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateProjectRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "example": "My Awesome Project"
          },
          "path": {
            "type": "string",
            "minLength": 1,
            "example": "/path/to/project"
          },
          "description": {
            "type": "string",
            "example": "Optional project description"
          }
        }
      },
      "OperationSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "extension": {
            "type": [
              "string",
              "null"
            ]
          },
          "size": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "lastModified": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "contentType": {
            "type": [
              "string",
              "null"
            ]
          },
          "content": {
            "type": [
              "string",
              "null"
            ]
          },
          "meta": {
            "type": [
              "string",
              "null"
            ]
          },
          "checksum": {
            "type": [
              "string",
              "null"
            ]
          },
          "imports": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "exports": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "isRelevant": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "relevanceScore": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "createdAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "updatedAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "path",
          "extension",
          "size",
          "lastModified",
          "contentType",
          "content",
          "meta",
          "checksum",
          "imports",
          "exports",
          "isRelevant",
          "relevanceScore",
          "createdAt",
          "updatedAt"
        ]
      },
      "SuggestFilesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "suggestedFiles": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "relevance": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1
                    },
                    "reason": {
                      "type": "string"
                    },
                    "fileType": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "path",
                    "relevance",
                    "reason",
                    "fileType"
                  ]
                }
              },
              "totalFiles": {
                "type": "number"
              },
              "processingTime": {
                "type": "number"
              }
            },
            "required": [
              "suggestedFiles",
              "totalFiles",
              "processingTime"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "projectId": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "title": {
            "type": "string"
          },
          "overview": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ]
          },
          "suggestedFileIds": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "suggestedAgentIds": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "suggestedPromptIds": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "queueId": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queuePosition": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queueStatus": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "queuePriority": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queuedAt": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queueStartedAt": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queueCompletedAt": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queueAgentId": {
            "type": [
              "string",
              "null"
            ]
          },
          "queueErrorMessage": {
            "type": [
              "string",
              "null"
            ]
          },
          "estimatedProcessingTime": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "actualProcessingTime": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "createdAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "updatedAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "overview",
          "status",
          "priority",
          "suggestedFileIds",
          "suggestedAgentIds",
          "suggestedPromptIds",
          "queueId",
          "queuePosition",
          "queueStatus",
          "queuePriority",
          "queuedAt",
          "queueStartedAt",
          "queueCompletedAt",
          "queueAgentId",
          "queueErrorMessage",
          "estimatedProcessingTime",
          "actualProcessingTime",
          "createdAt",
          "updatedAt"
        ]
      },
      "TicketResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Ticket"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateTicketBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "number"
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "type": [
              "string",
              "null"
            ],
            "default": null
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ],
            "default": "open"
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ],
            "default": "normal"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "projectId",
          "title",
          "suggestedFileIds",
          "suggestedAgentIds",
          "suggestedPromptIds"
        ]
      },
      "UpdateTicketBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "number"
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "type": [
              "string",
              "null"
            ],
            "default": null
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ],
            "default": "open"
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ],
            "default": "normal"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "TicketTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "ticketId": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "content": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "suggestedFileIds": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "done": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "cancelled"
            ]
          },
          "orderIndex": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "estimatedHours": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "dependencies": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "tags": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "agentId": {
            "type": [
              "string",
              "null"
            ]
          },
          "suggestedPromptIds": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "queueId": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queuePosition": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queueStatus": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "queuePriority": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queuedAt": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queueStartedAt": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queueCompletedAt": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "queueAgentId": {
            "type": [
              "string",
              "null"
            ]
          },
          "queueErrorMessage": {
            "type": [
              "string",
              "null"
            ]
          },
          "estimatedProcessingTime": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "actualProcessingTime": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "createdAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "updatedAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          }
        },
        "required": [
          "id",
          "ticketId",
          "content",
          "description",
          "suggestedFileIds",
          "done",
          "status",
          "orderIndex",
          "estimatedHours",
          "dependencies",
          "tags",
          "agentId",
          "suggestedPromptIds",
          "queueId",
          "queuePosition",
          "queueStatus",
          "queuePriority",
          "queuedAt",
          "queueStartedAt",
          "queueCompletedAt",
          "queueAgentId",
          "queueErrorMessage",
          "estimatedProcessingTime",
          "actualProcessingTime",
          "createdAt",
          "updatedAt"
        ]
      },
      "CompleteTicketResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "ticket": {
                "$ref": "#/components/schemas/Ticket"
              },
              "tasks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketTask"
                }
              }
            },
            "required": [
              "ticket",
              "tasks"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "LinkedFilesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ticketId": {
                  "type": "string"
                },
                "fileId": {
                  "type": "string"
                }
              },
              "required": [
                "ticketId",
                "fileId"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "LinkFilesBody": {
        "type": "object",
        "properties": {
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "fileIds"
        ]
      },
      "SuggestFilesBody": {
        "type": "object",
        "properties": {
          "extraUserInput": {
            "type": "string"
          }
        }
      },
      "SuggestedTasksResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "suggestedTasks": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "suggestedTasks"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestTasksBody": {
        "type": "object",
        "properties": {
          "userContext": {
            "type": "string"
          }
        }
      },
      "TicketListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TicketWithTaskCount": {
        "type": "object",
        "properties": {
          "ticket": {
            "$ref": "#/components/schemas/Ticket"
          },
          "taskCount": {
            "type": "number"
          },
          "completedTaskCount": {
            "type": "number"
          }
        },
        "required": [
          "ticket",
          "taskCount",
          "completedTaskCount"
        ]
      },
      "TicketWithTaskCountListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketWithTaskCount"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TicketWithTasks": {
        "type": "object",
        "properties": {
          "ticket": {
            "$ref": "#/components/schemas/Ticket"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTask"
            }
          }
        },
        "required": [
          "ticket",
          "tasks"
        ]
      },
      "TicketWithTasksListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketWithTasks"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TicketTask"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateTaskBody": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "number"
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimatedHours": {
            "type": [
              "number",
              "null"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agentId": {
            "type": [
              "string",
              "null"
            ]
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": [
          "ticketId",
          "content",
          "description",
          "suggestedFileIds",
          "estimatedHours",
          "dependencies",
          "tags",
          "agentId",
          "suggestedPromptIds"
        ]
      },
      "TaskListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTask"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateTaskBody": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimatedHours": {
            "type": [
              "number",
              "null"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agentId": {
            "type": [
              "string",
              "null"
            ]
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "done": {
            "type": "boolean"
          },
          "orderIndex": {
            "type": "number"
          }
        }
      },
      "ReorderTasksBody": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1716537600000,
                  "description": "Entity ID - positive integer without timestamp conversion"
                },
                "orderIndex": {
                  "type": "number",
                  "minimum": 0
                }
              },
              "required": [
                "taskId",
                "orderIndex"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      },
      "BulkTasksResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TicketTask"
              }
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ChatListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "projectId": {
                  "type": [
                    "number",
                    "null"
                  ]
                },
                "title": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "number"
                },
                "updatedAt": {
                  "type": "number"
                }
              },
              "required": [
                "id",
                "projectId",
                "title",
                "createdAt",
                "updatedAt"
              ],
              "description": "Chat"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "projectId": {
                "type": [
                  "number",
                  "null"
                ]
              },
              "title": {
                "type": "string"
              },
              "createdAt": {
                "type": "number"
              },
              "updatedAt": {
                "type": "number"
              }
            },
            "required": [
              "id",
              "projectId",
              "title",
              "createdAt",
              "updatedAt"
            ],
            "description": "Chat"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateChatBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "projectId": {
            "type": "integer",
            "exclusiveMinimum": 0
          },
          "copyExisting": {
            "type": "boolean"
          },
          "currentChatId": {
            "type": "integer",
            "exclusiveMinimum": 0
          }
        },
        "required": [
          "title"
        ]
      },
      "MessageListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "chatId": {
                  "type": "number"
                },
                "role": {
                  "type": "string",
                  "enum": [
                    "assistant",
                    "user",
                    "system"
                  ]
                },
                "content": {
                  "type": "string"
                },
                "metadata": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {}
                },
                "createdAt": {
                  "type": "number"
                }
              },
              "required": [
                "id",
                "chatId",
                "role",
                "content",
                "metadata",
                "createdAt"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiChatStreamRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "integer",
            "exclusiveMinimum": 0
          },
          "userMessage": {
            "type": "string",
            "minLength": 1
          },
          "systemMessage": {
            "type": "string"
          },
          "tempId": {
            "type": "string"
          },
          "enableChatAutoNaming": {
            "type": "boolean",
            "default": false
          },
          "options": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "temperature": {
                "type": "number",
                "minimum": 0,
                "maximum": 2
              },
              "maxTokens": {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              "topP": {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              },
              "stream": {
                "type": "boolean",
                "default": true
              }
            },
            "required": [
              "provider",
              "model"
            ]
          }
        },
        "required": [
          "chatId",
          "userMessage"
        ]
      },
      "ForkChatBody": {
        "type": "object",
        "properties": {
          "excludedMessageIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "default": []
          }
        }
      },
      "ForkChatFromMessageBody": {
        "type": "object",
        "properties": {
          "excludedMessageIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "default": []
          }
        }
      },
      "UpdateChatBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "title"
        ]
      },
      "Prompt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "projectId": {
            "type": [
              "number",
              "null"
            ]
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "projectId",
          "title",
          "content",
          "description",
          "tags",
          "createdAt",
          "updatedAt"
        ]
      },
      "PromptResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Prompt"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreatePromptRequestBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "example": "My New Prompt"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "example": "Translate this text: {text}"
          },
          "projectId": {
            "type": "integer",
            "format": "int64",
            "example": 1716537600000,
            "description": "Optional entity ID - positive integer without timestamp conversion"
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "PromptListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Prompt"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestPromptsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "prompts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Prompt"
                },
                "description": "Array of suggested prompts ordered by relevance (most relevant first)"
              }
            },
            "required": [
              "prompts"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestPromptsRequest": {
        "type": "object",
        "properties": {
          "userInput": {
            "type": "string",
            "minLength": 1,
            "example": "help me implement authentication",
            "description": "The user input describing what they want to accomplish"
          },
          "limit": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "maximum": 10,
            "default": 5,
            "example": 5,
            "description": "Maximum number of prompts to suggest (default: 5, max: 10)"
          }
        },
        "required": [
          "userInput"
        ]
      },
      "UpdatePromptRequestBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "example": "My New Prompt"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "example": "Translate this text: {text}"
          }
        }
      },
      "PromptImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether this individual prompt import succeeded"
          },
          "promptName": {
            "type": "string",
            "example": "Code Refactoring Prompt",
            "description": "The name of the prompt being imported"
          },
          "promptId": {
            "type": "integer",
            "format": "int64",
            "example": 1716537600000,
            "description": "ID of the created/updated prompt (only present on success)"
          },
          "error": {
            "type": "string",
            "example": "Prompt with this name already exists",
            "description": "Error message if import failed"
          },
          "warning": {
            "type": "string",
            "example": "Missing frontmatter field: created",
            "description": "Warning message for non-fatal issues"
          },
          "action": {
            "type": "string",
            "enum": [
              "created",
              "updated",
              "skipped"
            ],
            "description": "Action taken for this prompt"
          }
        },
        "required": [
          "success",
          "promptName",
          "action"
        ]
      },
      "MarkdownImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Overall success status of the import operation"
          },
          "fileName": {
            "type": "string",
            "example": "my-prompts.md",
            "description": "Name of the imported file"
          },
          "promptsProcessed": {
            "type": "integer",
            "minimum": 0,
            "example": 3,
            "description": "Total number of prompts found in the file"
          },
          "promptsImported": {
            "type": "integer",
            "minimum": 0,
            "example": 2,
            "description": "Number of prompts successfully imported"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromptImportResult"
            },
            "description": "Detailed results for each prompt"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": [
              "Invalid frontmatter format"
            ],
            "description": "Global errors that affected the entire file"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": [
              "File contains no valid prompts"
            ],
            "description": "Global warnings for the import operation"
          }
        },
        "required": [
          "success",
          "fileName",
          "promptsProcessed",
          "promptsImported",
          "results"
        ]
      },
      "BulkImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Overall success status (true if at least one prompt imported)"
          },
          "totalFiles": {
            "type": "integer",
            "minimum": 0,
            "example": 5,
            "description": "Total number of files processed"
          },
          "filesProcessed": {
            "type": "integer",
            "minimum": 0,
            "example": 4,
            "description": "Number of files successfully processed"
          },
          "totalPrompts": {
            "type": "integer",
            "minimum": 0,
            "example": 15,
            "description": "Total number of prompts found across all files"
          },
          "promptsImported": {
            "type": "integer",
            "minimum": 0,
            "example": 12,
            "description": "Number of prompts successfully imported"
          },
          "fileResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkdownImportResult"
            },
            "description": "Results for each file processed"
          },
          "summary": {
            "type": "object",
            "properties": {
              "created": {
                "type": "integer",
                "minimum": 0,
                "example": 8,
                "description": "Number of new prompts created"
              },
              "updated": {
                "type": "integer",
                "minimum": 0,
                "example": 4,
                "description": "Number of existing prompts updated"
              },
              "skipped": {
                "type": "integer",
                "minimum": 0,
                "example": 3,
                "description": "Number of prompts skipped"
              },
              "failed": {
                "type": "integer",
                "minimum": 0,
                "example": 0,
                "description": "Number of prompts that failed to import"
              }
            },
            "required": [
              "created",
              "updated",
              "skipped",
              "failed"
            ]
          }
        },
        "required": [
          "success",
          "totalFiles",
          "filesProcessed",
          "totalPrompts",
          "promptsImported",
          "fileResults",
          "summary"
        ]
      },
      "BulkImportResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BulkImportResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ExportedFile": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "example": "code-refactoring-prompt.md",
            "description": "Generated filename for the exported prompt"
          },
          "content": {
            "type": "string",
            "description": "The markdown content of the exported prompt"
          },
          "promptId": {
            "type": "integer",
            "format": "int64",
            "example": 1716537600000,
            "description": "ID of the source prompt"
          },
          "promptName": {
            "type": "string",
            "example": "Code Refactoring Prompt",
            "description": "Name of the source prompt"
          }
        },
        "required": [
          "fileName",
          "content",
          "promptId",
          "promptName"
        ]
      },
      "MarkdownExportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the export operation succeeded"
          },
          "format": {
            "type": "string",
            "enum": [
              "single-file",
              "multi-file"
            ],
            "description": "The export format used"
          },
          "promptCount": {
            "type": "integer",
            "minimum": 0,
            "example": 5,
            "description": "Number of prompts exported"
          },
          "fileName": {
            "type": "string",
            "example": "exported-prompts.md",
            "description": "Filename for single-file export"
          },
          "content": {
            "type": "string",
            "description": "The markdown content for single-file export"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportedFile"
            },
            "description": "Array of exported files for multi-file export"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "exportedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2024-01-01T12:00:00Z",
                "description": "ISO 8601 datetime when export was generated"
              },
              "totalSize": {
                "type": "integer",
                "minimum": 0,
                "example": 15432,
                "description": "Total size of exported content in bytes"
              },
              "settings": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1716537600000,
                    "description": "Optional project ID to filter prompts by project"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "single-file",
                      "multi-file"
                    ],
                    "default": "single-file",
                    "example": "single-file",
                    "description": "Export format: single file with all prompts or separate files per prompt"
                  },
                  "includeFrontmatter": {
                    "type": "boolean",
                    "default": true,
                    "example": true,
                    "description": "Whether to include frontmatter with metadata"
                  },
                  "includeCreatedDate": {
                    "type": "boolean",
                    "default": true,
                    "example": true,
                    "description": "Whether to include created date in frontmatter"
                  },
                  "includeUpdatedDate": {
                    "type": "boolean",
                    "default": true,
                    "example": true,
                    "description": "Whether to include updated date in frontmatter"
                  },
                  "includeTags": {
                    "type": "boolean",
                    "default": true,
                    "example": true,
                    "description": "Whether to include tags in frontmatter (if available)"
                  },
                  "sanitizeContent": {
                    "type": "boolean",
                    "default": true,
                    "example": true,
                    "description": "Whether to sanitize content for safe markdown export"
                  },
                  "sortBy": {
                    "type": "string",
                    "enum": [
                      "name",
                      "created",
                      "updated"
                    ],
                    "default": "name",
                    "example": "name",
                    "description": "How to sort the exported prompts"
                  },
                  "sortOrder": {
                    "type": "string",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "default": "asc",
                    "example": "asc",
                    "description": "Sort order for exported prompts"
                  }
                },
                "description": "Export settings used"
              }
            },
            "required": [
              "exportedAt",
              "totalSize",
              "settings"
            ],
            "description": "Export metadata and settings"
          }
        },
        "required": [
          "success",
          "format",
          "promptCount",
          "metadata"
        ]
      },
      "MarkdownExportResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MarkdownExportResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BatchExportRequest": {
        "type": "object",
        "properties": {
          "promptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - positive integer without timestamp conversion"
            },
            "example": [
              1716537600000,
              1716537600001
            ],
            "description": "Array of prompt IDs to export"
          },
          "format": {
            "type": "string",
            "enum": [
              "single-file",
              "multi-file"
            ],
            "default": "single-file",
            "example": "single-file",
            "description": "Export format: single file with all prompts or separate files per prompt"
          },
          "includeFrontmatter": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Whether to include frontmatter with metadata"
          },
          "includeCreatedDate": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Whether to include created date in frontmatter"
          },
          "includeUpdatedDate": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Whether to include updated date in frontmatter"
          },
          "includeTags": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Whether to include tags in frontmatter (if available)"
          },
          "sanitizeContent": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Whether to sanitize content for safe markdown export"
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "name",
              "created",
              "updated"
            ],
            "default": "name",
            "example": "name",
            "description": "How to sort the exported prompts"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "asc",
            "example": "asc",
            "description": "Sort order for exported prompts"
          }
        },
        "required": [
          "promptIds"
        ]
      },
      "MarkdownContentValidation": {
        "type": "object",
        "properties": {
          "hasValidFrontmatter": {
            "type": "boolean",
            "description": "Whether the content has valid YAML frontmatter (optional for prompts)"
          },
          "hasRequiredFields": {
            "type": "boolean",
            "description": "Whether content can be processed (frontmatter is optional for prompts)"
          },
          "contentLength": {
            "type": "integer",
            "minimum": 0,
            "description": "Length of the content after frontmatter"
          },
          "estimatedPrompts": {
            "type": "integer",
            "minimum": 0,
            "description": "Estimated number of prompts based on content structure"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Content validation warnings"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Content validation errors"
          }
        },
        "required": [
          "hasValidFrontmatter",
          "hasRequiredFields",
          "contentLength",
          "estimatedPrompts"
        ]
      },
      "TaskQueue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "projectId": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "maxParallelItems": {
            "type": "number"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "description",
          "maxParallelItems",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateQueueBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "maxParallelItems": {
            "type": "number",
            "minimum": 1,
            "maximum": 10
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused",
              "inactive"
            ]
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "QueueStats": {
        "type": "object",
        "properties": {
          "queueId": {
            "type": "integer",
            "format": "int64",
            "example": 1716537600000,
            "description": "Entity ID - positive integer without timestamp conversion"
          },
          "queueName": {
            "type": "string"
          },
          "totalItems": {
            "type": "number"
          },
          "queuedItems": {
            "type": "number"
          },
          "inProgressItems": {
            "type": "number"
          },
          "completedItems": {
            "type": "number"
          },
          "failedItems": {
            "type": "number"
          },
          "cancelledItems": {
            "type": "number"
          },
          "averageProcessingTime": {
            "type": [
              "number",
              "null"
            ]
          },
          "currentAgents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ticketCount": {
            "type": "number"
          },
          "taskCount": {
            "type": "number"
          },
          "uniqueTickets": {
            "type": "number"
          }
        },
        "required": [
          "queueId",
          "queueName",
          "totalItems",
          "queuedItems",
          "inProgressItems",
          "completedItems",
          "failedItems",
          "cancelledItems",
          "averageProcessingTime",
          "currentAgents"
        ]
      },
      "QueueWithStats": {
        "type": "object",
        "properties": {
          "queue": {
            "$ref": "#/components/schemas/TaskQueue"
          },
          "stats": {
            "$ref": "#/components/schemas/QueueStats"
          }
        },
        "required": [
          "queue",
          "stats"
        ]
      },
      "QueueItem": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "queueId": {
            "type": "number"
          },
          "itemType": {
            "type": "string",
            "enum": [
              "ticket",
              "task",
              "chat",
              "prompt"
            ]
          },
          "itemId": {
            "type": "number"
          },
          "priority": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "agentId": {
            "type": [
              "string",
              "null"
            ]
          },
          "errorMessage": {
            "type": [
              "string",
              "null"
            ]
          },
          "estimatedProcessingTime": {
            "type": [
              "number",
              "null"
            ]
          },
          "actualProcessingTime": {
            "type": [
              "number",
              "null"
            ]
          },
          "startedAt": {
            "type": [
              "number",
              "null"
            ]
          },
          "completedAt": {
            "type": [
              "number",
              "null"
            ]
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "queueId",
          "itemType",
          "itemId",
          "priority",
          "status",
          "agentId",
          "errorMessage",
          "estimatedProcessingTime",
          "actualProcessingTime",
          "startedAt",
          "completedAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "GetNextTaskResponse": {
        "type": "object",
        "properties": {
          "queueItem": {
            "$ref": "#/components/schemas/QueueItem"
          },
          "ticket": {},
          "task": {}
        },
        "required": [
          "queueItem"
        ]
      },
      "EnqueueItemBody": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int64",
            "example": 1716537600000,
            "description": "Optional entity ID - positive integer without timestamp conversion"
          },
          "taskId": {
            "type": "integer",
            "format": "int64",
            "example": 1716537600000,
            "description": "Optional entity ID - positive integer without timestamp conversion"
          },
          "priority": {
            "type": "number"
          },
          "agentId": {
            "type": "string"
          }
        }
      },
      "BatchEnqueueBody": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnqueueItemBody"
            },
            "minItems": 1,
            "maxItems": 100
          }
        },
        "required": [
          "items"
        ]
      },
      "QueueTimeline": {
        "type": "object",
        "properties": {
          "queueId": {
            "type": "integer",
            "format": "int64",
            "example": 1716537600000,
            "description": "Entity ID - positive integer without timestamp conversion"
          },
          "currentTime": {
            "type": "number"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1716537600000,
                  "description": "Entity ID - positive integer without timestamp conversion"
                },
                "ticketId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1716537600000,
                  "description": "Nullable optional entity ID - positive integer without timestamp conversion"
                },
                "taskId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1716537600000,
                  "description": "Nullable optional entity ID - positive integer without timestamp conversion"
                },
                "title": {
                  "type": "string"
                },
                "estimatedStartTime": {
                  "type": "number"
                },
                "estimatedEndTime": {
                  "type": "number"
                },
                "estimatedProcessingTime": {
                  "type": "number"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "queued",
                    "in_progress",
                    "completed",
                    "failed",
                    "cancelled",
                    "timeout"
                  ]
                }
              },
              "required": [
                "itemId",
                "title",
                "estimatedStartTime",
                "estimatedEndTime",
                "estimatedProcessingTime",
                "status"
              ]
            }
          },
          "totalEstimatedTime": {
            "type": "number"
          },
          "estimatedCompletionTime": {
            "type": "number"
          }
        },
        "required": [
          "queueId",
          "currentTime",
          "items",
          "totalEstimatedTime",
          "estimatedCompletionTime"
        ]
      },
      "ProviderKeyPublic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "exclusiveMinimum": 0
          },
          "provider": {
            "type": "string"
          },
          "keyName": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "key": {
            "type": [
              "string",
              "null"
            ]
          },
          "secretRef": {
            "type": [
              "string",
              "null"
            ]
          },
          "baseUrl": {
            "type": [
              "string",
              "null"
            ]
          },
          "customHeaders": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            }
          },
          "isDefault": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "expiresAt": {
            "type": [
              "number",
              "null"
            ]
          },
          "lastUsed": {
            "type": [
              "number",
              "null"
            ]
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "storageMethod": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "direct",
              "env"
            ]
          },
          "displayValue": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "provider",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProviderKeyResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ProviderKeyPublic"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateProviderKey": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "minLength": 1
          },
          "keyName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "secretRef": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isDefault": {
            "type": "boolean",
            "default": false
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "environment": {
            "type": "string",
            "default": "production"
          },
          "description": {
            "type": "string"
          },
          "expiresAt": {
            "type": "number"
          },
          "lastUsed": {
            "type": "number"
          }
        },
        "required": [
          "provider"
        ]
      },
      "ProviderKeyListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderKeyPublic"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateProviderKey": {
        "type": "object",
        "properties": {
          "keyName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "secretRef": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isDefault": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "environment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "expiresAt": {
            "type": "number"
          },
          "lastUsed": {
            "type": "number"
          }
        }
      },
      "TestProviderApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              },
              "providerId": {
                "type": "number"
              },
              "provider": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "latency": {
                "type": "number"
              },
              "error": {
                "type": "string"
              },
              "response": {
                "type": "string"
              }
            },
            "required": [
              "success",
              "providerId",
              "provider",
              "latency"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TestProviderRequest": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "testPrompt": {
            "type": "string",
            "default": "Hello, this is a test message."
          }
        },
        "required": [
          "providerId"
        ]
      },
      "BatchTestProviderApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "providerId": {
                      "type": "number"
                    },
                    "provider": {
                      "type": "string"
                    },
                    "model": {
                      "type": "string"
                    },
                    "latency": {
                      "type": "number"
                    },
                    "error": {
                      "type": "string"
                    },
                    "response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "providerId",
                    "provider",
                    "latency"
                  ]
                }
              },
              "summary": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "number"
                  },
                  "successful": {
                    "type": "number"
                  },
                  "failed": {
                    "type": "number"
                  },
                  "averageLatency": {
                    "type": "number"
                  }
                },
                "required": [
                  "total",
                  "successful",
                  "failed"
                ]
              }
            },
            "required": [
              "results",
              "summary"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BatchTestProviderRequest": {
        "type": "object",
        "properties": {
          "providerIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "testPrompt": {
            "type": "string",
            "default": "Hello, this is a test message."
          },
          "includeInactive": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ProviderHealthStatusListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "healthy",
                    "degraded",
                    "down",
                    "unhealthy",
                    "unknown"
                  ]
                },
                "latency": {
                  "type": "number"
                },
                "averageResponseTime": {
                  "type": "number"
                },
                "modelCount": {
                  "type": "number"
                },
                "lastChecked": {
                  "type": "number"
                },
                "error": {
                  "type": "string"
                }
              },
              "required": [
                "status",
                "lastChecked"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProviderModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "contextLength": {
            "type": "number"
          },
          "maxTokens": {
            "type": "number"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "provider"
        ]
      },
      "CustomProviderFeatures": {
        "type": "object",
        "properties": {
          "streaming": {
            "type": "boolean"
          },
          "functionCalling": {
            "type": "boolean"
          },
          "structuredOutput": {
            "type": "boolean"
          },
          "vision": {
            "type": "boolean"
          },
          "embeddings": {
            "type": "boolean"
          }
        },
        "required": [
          "streaming",
          "functionCalling",
          "structuredOutput",
          "vision",
          "embeddings"
        ]
      },
      "ValidateCustomProviderResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "compatible": {
                "type": "boolean"
              },
              "models": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProviderModel"
                }
              },
              "features": {
                "$ref": "#/components/schemas/CustomProviderFeatures"
              },
              "baseUrl": {
                "type": "string"
              }
            },
            "required": [
              "compatible",
              "models",
              "features",
              "baseUrl"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "ValidateCustomProviderRequest": {
        "type": "object",
        "properties": {
          "baseUrl": {
            "type": "string",
            "format": "uri"
          },
          "apiKey": {
            "type": "string"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "baseUrl",
          "apiKey"
        ]
      },
      "AiSdkChatRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Chat/session identifier (maps to chatId)"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant",
                    "system"
                  ]
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "role",
                "content"
              ]
            },
            "minItems": 1
          },
          "provider": {
            "type": "string",
            "default": "openai"
          },
          "model": {
            "type": "string"
          },
          "temperature": {
            "type": "number"
          },
          "maxTokens": {
            "type": "integer"
          },
          "topP": {
            "type": "number"
          }
        },
        "required": [
          "messages",
          "model"
        ]
      },
      "ProvidersListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "isCustom": {
                  "type": "boolean"
                },
                "baseUrl": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiSdkOptions": {
        "type": "object",
        "properties": {
          "ollamaUrl": {
            "type": "string",
            "format": "uri",
            "description": "Custom Ollama server URL to use instead of the default.",
            "example": "http://192.168.1.100:11434"
          },
          "lmstudioUrl": {
            "type": "string",
            "format": "uri",
            "description": "Custom LMStudio server URL to use instead of the default.",
            "example": "http://localhost:1234"
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "description": "Controls the randomness of the output. Lower values (e.g., 0.2) make the output more focused, deterministic, and suitable for factual tasks. Higher values (e.g., 0.8) increase randomness and creativity, useful for brainstorming or creative writing. A value of 0 typically means greedy decoding (always picking the most likely token).",
            "example": 0.7
          },
          "maxTokens": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "description": "The maximum number of tokens (words or parts of words) the model is allowed to generate in the response. This limits the output length and can affect cost. Note: This limit usually applies only to the *generated* tokens, not the input prompt tokens.",
            "example": 4000
          },
          "topP": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Controls diversity via nucleus sampling. It defines a probability threshold (e.g., 0.9). The model considers only the smallest set of most probable tokens whose cumulative probability exceeds this threshold for the next token selection. Lower values (e.g., 0.5) restrict choices more, leading to less random outputs. A value of 1 considers all tokens. It's often recommended to alter *either* `temperature` *or* `topP`, not both.",
            "example": 1
          },
          "frequencyPenalty": {
            "type": "number",
            "minimum": -2,
            "maximum": 2,
            "description": "Applies a penalty to tokens based on how frequently they have already appeared in the generated text *and* the prompt. Positive values (e.g., 0.5) decrease the likelihood of the model repeating the same words or phrases verbatim, making the output less repetitive. Negative values encourage repetition.",
            "example": 0.2
          },
          "presencePenalty": {
            "type": "number",
            "minimum": -2,
            "maximum": 2,
            "description": "Applies a penalty to tokens based on whether they have appeared *at all* in the generated text *and* the prompt so far (regardless of frequency). Positive values (e.g., 0.5) encourage the model to introduce new concepts and topics, reducing the likelihood of repeating *any* previously mentioned word. Negative values encourage staying on topic.",
            "example": 0.1
          },
          "topK": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "description": "Restricts the model's choices for the next token to the `k` most likely candidates. For example, if `topK` is 40, the model will only consider the top 40 most probable tokens at each step. A lower value restricts choices more. Setting `topK` to 1 is equivalent to greedy decoding (same as `temperature: 0`). Less commonly used than `topP`.",
            "example": 40
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Specifies one or more sequences of text where the AI should stop generating. Once the model generates a stop sequence, it will halt output immediately, even if `maxTokens` hasn't been reached. Useful for structured output or controlling conversational turns.",
            "example": [
              "\nHuman:",
              "\n---"
            ]
          },
          "response_format": {
            "description": "Specifies the desired format for the model's response. This is highly provider-specific. A common use case is enforcing JSON output, often requiring specific model versions.",
            "example": {
              "type": "json_object"
            }
          },
          "provider": {
            "type": "string",
            "description": "The provider to use for the AI request.",
            "example": "openai"
          },
          "model": {
            "type": "string",
            "description": "The model to use for the AI request.",
            "example": "gpt-4o-mini"
          }
        },
        "description": "Optional parameters to override default model behavior (temperature, maxTokens, etc.)."
      },
      "AiGenerateTextRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "minLength": 1,
            "description": "The text prompt for the AI.",
            "example": "Suggest 5 suitable filenames for a typescript utility file containing helper functions for string manipulation."
          },
          "options": {
            "$ref": "#/components/schemas/AiSdkOptions"
          },
          "systemMessage": {
            "type": "string",
            "example": "You are an expert programmer. Provide concise and relevant suggestions.",
            "description": "Optional system message to guide the AI behavior and persona."
          }
        },
        "required": [
          "prompt"
        ]
      },
      "AiGenerateTextResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The generated text response from the AI."
              }
            },
            "required": [
              "text"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiGenerateStructuredResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "output": {
                "description": "The generated structured data, validated against the schema defined by the 'schemaKey'."
              }
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiGenerateStructuredRequest": {
        "type": "object",
        "properties": {
          "schemaKey": {
            "type": "string",
            "minLength": 1,
            "description": "The key identifying the predefined structured task configuration.",
            "example": "filenameSuggestion"
          },
          "userInput": {
            "type": "string",
            "minLength": 1,
            "description": "The user's input or context for the structured generation task.",
            "example": "A react component for displaying user profiles"
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AiSdkOptions"
              },
              {
                "description": "Optional: Override default model options (temperature, etc.) defined in the task configuration."
              }
            ]
          }
        },
        "required": [
          "schemaKey",
          "userInput"
        ]
      },
      "UnifiedModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "gpt-4o-mini",
            "description": "Model identifier"
          },
          "name": {
            "type": "string",
            "example": "GPT-4o Mini",
            "description": "User-friendly model name"
          },
          "provider": {
            "type": "string",
            "example": "openai",
            "description": "Provider ID"
          },
          "context_length": {
            "type": "number",
            "example": 128000,
            "description": "Context window size in tokens"
          }
        },
        "required": [
          "id",
          "name",
          "provider"
        ]
      },
      "ModelsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnifiedModel"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateProviderSettings": {
        "type": "object",
        "properties": {
          "ollamaUrl": {
            "type": "string",
            "format": "uri"
          },
          "lmstudioUrl": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "Queue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "exclusiveMinimum": 0
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "maxConcurrency": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "default": 1
          },
          "retryConfig": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {}
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {}
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "retryConfig",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "FlowData": {
        "type": "object",
        "properties": {
          "unqueued": {
            "type": "object",
            "properties": {
              "tickets": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Ticket"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "projectId": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "title": {
                          "type": "string"
                        },
                        "overview": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "open",
                            "in_progress",
                            "closed"
                          ]
                        },
                        "priority": {
                          "type": "string",
                          "enum": [
                            "low",
                            "normal",
                            "high"
                          ]
                        },
                        "suggestedFileIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "suggestedAgentIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "suggestedPromptIds": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "queueId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuePosition": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStatus": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStartedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueCompletedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueAgentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "queueErrorMessage": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "estimatedProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "actualProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      }
                    }
                  ]
                }
              },
              "tasks": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TicketTask"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "ticketId": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "suggestedFileIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "done": {
                          "type": "boolean"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "in_progress",
                            "completed",
                            "cancelled"
                          ]
                        },
                        "orderIndex": {
                          "type": "number"
                        },
                        "estimatedHours": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "dependencies": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "agentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "suggestedPromptIds": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "queueId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuePosition": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStatus": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStartedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueCompletedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueAgentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "queueErrorMessage": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "estimatedProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "actualProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      }
                    }
                  ]
                }
              }
            },
            "required": [
              "tickets",
              "tasks"
            ]
          },
          "queues": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "queue": {
                  "$ref": "#/components/schemas/Queue"
                },
                "tickets": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Ticket"
                      },
                      {
                        "properties": {
                          "id": {
                            "type": "integer",
                            "exclusiveMinimum": 0
                          },
                          "projectId": {
                            "type": "integer",
                            "exclusiveMinimum": 0
                          },
                          "title": {
                            "type": "string"
                          },
                          "overview": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "open",
                              "in_progress",
                              "closed"
                            ]
                          },
                          "priority": {
                            "type": "string",
                            "enum": [
                              "low",
                              "normal",
                              "high"
                            ]
                          },
                          "suggestedFileIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "suggestedAgentIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "suggestedPromptIds": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          },
                          "queueId": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queuePosition": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queueStatus": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "queued",
                              "in_progress",
                              "completed",
                              "failed",
                              "cancelled"
                            ]
                          },
                          "queuePriority": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queuedAt": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queueStartedAt": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queueCompletedAt": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queueAgentId": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "queueErrorMessage": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "estimatedProcessingTime": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "actualProcessingTime": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        }
                      }
                    ]
                  }
                },
                "tasks": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TicketTask"
                      },
                      {
                        "properties": {
                          "id": {
                            "type": "integer",
                            "exclusiveMinimum": 0
                          },
                          "ticketId": {
                            "type": "integer",
                            "exclusiveMinimum": 0
                          },
                          "content": {
                            "type": "string"
                          },
                          "description": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "suggestedFileIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "done": {
                            "type": "boolean"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "pending",
                              "in_progress",
                              "completed",
                              "cancelled"
                            ]
                          },
                          "orderIndex": {
                            "type": "number"
                          },
                          "estimatedHours": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "dependencies": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "agentId": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "suggestedPromptIds": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          },
                          "queueId": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queuePosition": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queueStatus": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "queued",
                              "in_progress",
                              "completed",
                              "failed",
                              "cancelled"
                            ]
                          },
                          "queuePriority": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queuedAt": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queueStartedAt": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queueCompletedAt": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "queueAgentId": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "queueErrorMessage": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "estimatedProcessingTime": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "actualProcessingTime": {
                            "type": [
                              "number",
                              "null"
                            ]
                          },
                          "createdAt": {
                            "type": "number"
                          },
                          "updatedAt": {
                            "type": "number"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "required": [
                "queue",
                "tickets",
                "tasks"
              ]
            }
          }
        },
        "required": [
          "unqueued",
          "queues"
        ]
      },
      "FlowItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "ticket",
              "task"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ticket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ticket"
              },
              {
                "properties": {
                  "id": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  },
                  "projectId": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  },
                  "title": {
                    "type": "string"
                  },
                  "overview": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "in_progress",
                      "closed"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "low",
                      "normal",
                      "high"
                    ]
                  },
                  "suggestedFileIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "suggestedAgentIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "suggestedPromptIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "queueId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queuePosition": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queueStatus": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "queued",
                      "in_progress",
                      "completed",
                      "failed",
                      "cancelled"
                    ]
                  },
                  "queuePriority": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queuedAt": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queueStartedAt": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queueCompletedAt": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queueAgentId": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "queueErrorMessage": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "estimatedProcessingTime": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "actualProcessingTime": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "createdAt": {
                    "type": "number"
                  },
                  "updatedAt": {
                    "type": "number"
                  }
                }
              }
            ]
          },
          "task": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TicketTask"
              },
              {
                "properties": {
                  "id": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  },
                  "ticketId": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  },
                  "content": {
                    "type": "string"
                  },
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "suggestedFileIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "done": {
                    "type": "boolean"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "in_progress",
                      "completed",
                      "cancelled"
                    ]
                  },
                  "orderIndex": {
                    "type": "number"
                  },
                  "estimatedHours": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "dependencies": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "agentId": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "suggestedPromptIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "queueId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queuePosition": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queueStatus": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "enum": [
                      "queued",
                      "in_progress",
                      "completed",
                      "failed",
                      "cancelled"
                    ]
                  },
                  "queuePriority": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queuedAt": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queueStartedAt": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queueCompletedAt": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "queueAgentId": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "queueErrorMessage": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "estimatedProcessingTime": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "actualProcessingTime": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "createdAt": {
                    "type": "number"
                  },
                  "updatedAt": {
                    "type": "number"
                  }
                }
              }
            ]
          },
          "queueId": {
            "type": [
              "number",
              "null"
            ]
          },
          "queuePosition": {
            "type": [
              "number",
              "null"
            ]
          },
          "queueStatus": {
            "type": [
              "string",
              "null"
            ]
          },
          "queuePriority": {
            "type": "number"
          },
          "created": {
            "type": "number"
          },
          "updated": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "type",
          "title",
          "created",
          "updated"
        ]
      },
      "FlowItemsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FlowItem"
        }
      },
      "UnqueuedItems": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ticket"
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer",
                      "exclusiveMinimum": 0
                    },
                    "projectId": {
                      "type": "integer",
                      "exclusiveMinimum": 0
                    },
                    "title": {
                      "type": "string"
                    },
                    "overview": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "open",
                        "in_progress",
                        "closed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "low",
                        "normal",
                        "high"
                      ]
                    },
                    "suggestedFileIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "suggestedAgentIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "suggestedPromptIds": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "queueId": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queuePosition": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueStatus": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "queued",
                        "in_progress",
                        "completed",
                        "failed",
                        "cancelled"
                      ]
                    },
                    "queuePriority": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queuedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueStartedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueCompletedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueAgentId": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "queueErrorMessage": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "estimatedProcessingTime": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "actualProcessingTime": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    }
                  }
                }
              ]
            }
          },
          "tasks": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TicketTask"
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer",
                      "exclusiveMinimum": 0
                    },
                    "ticketId": {
                      "type": "integer",
                      "exclusiveMinimum": 0
                    },
                    "content": {
                      "type": "string"
                    },
                    "description": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "suggestedFileIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "done": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed",
                        "cancelled"
                      ]
                    },
                    "orderIndex": {
                      "type": "number"
                    },
                    "estimatedHours": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "dependencies": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "agentId": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "suggestedPromptIds": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "queueId": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queuePosition": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueStatus": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "queued",
                        "in_progress",
                        "completed",
                        "failed",
                        "cancelled"
                      ]
                    },
                    "queuePriority": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queuedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueStartedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueCompletedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueAgentId": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "queueErrorMessage": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "estimatedProcessingTime": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "actualProcessingTime": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    }
                  }
                }
              ]
            }
          }
        },
        "required": [
          "tickets",
          "tasks"
        ]
      },
      "QueueItems": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ticket"
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer",
                      "exclusiveMinimum": 0
                    },
                    "projectId": {
                      "type": "integer",
                      "exclusiveMinimum": 0
                    },
                    "title": {
                      "type": "string"
                    },
                    "overview": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "open",
                        "in_progress",
                        "closed"
                      ]
                    },
                    "priority": {
                      "type": "string",
                      "enum": [
                        "low",
                        "normal",
                        "high"
                      ]
                    },
                    "suggestedFileIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "suggestedAgentIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "suggestedPromptIds": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "queueId": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queuePosition": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueStatus": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "queued",
                        "in_progress",
                        "completed",
                        "failed",
                        "cancelled"
                      ]
                    },
                    "queuePriority": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queuedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueStartedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueCompletedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueAgentId": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "queueErrorMessage": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "estimatedProcessingTime": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "actualProcessingTime": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    }
                  }
                }
              ]
            }
          },
          "tasks": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TicketTask"
                },
                {
                  "properties": {
                    "id": {
                      "type": "integer",
                      "exclusiveMinimum": 0
                    },
                    "ticketId": {
                      "type": "integer",
                      "exclusiveMinimum": 0
                    },
                    "content": {
                      "type": "string"
                    },
                    "description": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "suggestedFileIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "done": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "in_progress",
                        "completed",
                        "cancelled"
                      ]
                    },
                    "orderIndex": {
                      "type": "number"
                    },
                    "estimatedHours": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "dependencies": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "agentId": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "suggestedPromptIds": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "queueId": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queuePosition": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueStatus": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "queued",
                        "in_progress",
                        "completed",
                        "failed",
                        "cancelled"
                      ]
                    },
                    "queuePriority": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queuedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueStartedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueCompletedAt": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "queueAgentId": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "queueErrorMessage": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "estimatedProcessingTime": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "actualProcessingTime": {
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "createdAt": {
                      "type": "number"
                    },
                    "updatedAt": {
                      "type": "number"
                    }
                  }
                }
              ]
            }
          }
        },
        "required": [
          "tickets",
          "tasks"
        ]
      },
      "DirectoryEntry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "isHidden": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "path",
          "isDirectory",
          "isHidden"
        ]
      },
      "BrowseDirectoryData": {
        "type": "object",
        "properties": {
          "currentPath": {
            "type": "string"
          },
          "parentPath": {
            "type": [
              "string",
              "null"
            ]
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectoryEntry"
            }
          }
        },
        "required": [
          "currentPath",
          "parentPath",
          "entries"
        ],
        "description": "BrowseDirectoryData"
      },
      "BrowseDirectoryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BrowseDirectoryData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BrowseDirectoryRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The directory path to browse. If not provided, defaults to home directory"
          }
        }
      },
      "MCPServerConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "description": "Unique identifier for the MCP server configuration",
            "example": 1234567890
          },
          "projectId": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "description": "ID of the project this MCP server belongs to",
            "example": 1234567890
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name for the MCP server",
            "example": "File System Tools"
          },
          "command": {
            "type": "string",
            "minLength": 1,
            "description": "Command to start the MCP server",
            "example": "npx @modelcontextprotocol/server-filesystem"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Command line arguments for the server",
            "example": [
              "--root",
              "/path/to/project"
            ]
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Environment variables for the server",
            "example": {
              "NODE_ENV": "production"
            }
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the server is enabled",
            "example": true
          },
          "autoStart": {
            "type": "boolean",
            "default": false,
            "description": "Whether to auto-start the server when project opens",
            "example": false
          },
          "created": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "example": 1757819441667
          },
          "updated": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "example": 1757819441667
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "command",
          "created",
          "updated"
        ]
      },
      "MCPServerConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/MCPServerConfig"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MCPServerConfigListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCPServerConfig"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateMCPServerConfigBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "description": "ID of the project this MCP server belongs to",
            "example": 1234567890
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name for the MCP server",
            "example": "File System Tools"
          },
          "command": {
            "type": "string",
            "minLength": 1,
            "description": "Command to start the MCP server",
            "example": "npx @modelcontextprotocol/server-filesystem"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Command line arguments for the server",
            "example": [
              "--root",
              "/path/to/project"
            ]
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Environment variables for the server",
            "example": {
              "NODE_ENV": "production"
            }
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the server is enabled",
            "example": true
          },
          "autoStart": {
            "type": "boolean",
            "default": false,
            "description": "Whether to auto-start the server when project opens",
            "example": false
          }
        }
      },
      "MCPToolExecutionResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for this execution",
            "example": "exec_123456"
          },
          "toolId": {
            "type": "string"
          },
          "serverId": {
            "type": "integer",
            "exclusiveMinimum": 0
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "running",
              "success",
              "error"
            ],
            "description": "Status of the execution",
            "example": "success"
          },
          "result": {
            "description": "Result from the tool execution"
          },
          "error": {
            "type": [
              "string",
              "null"
            ],
            "description": "Error message if execution failed"
          },
          "startedAt": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "example": 1757819441667
          },
          "completedAt": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "example": 1757819441667
          }
        },
        "required": [
          "id",
          "toolId",
          "serverId",
          "status",
          "error",
          "startedAt",
          "completedAt"
        ]
      },
      "MCPToolExecutionResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/MCPToolExecutionResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MCPToolExecutionRequest": {
        "type": "object",
        "properties": {
          "toolId": {
            "type": "string",
            "description": "ID of the tool to execute",
            "example": "read_file"
          },
          "serverId": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "description": "ID of the MCP server to execute the tool on"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "default": {},
            "description": "Parameters to pass to the tool",
            "example": {
              "path": "/path/to/file.txt"
            }
          }
        },
        "required": [
          "toolId",
          "serverId"
        ]
      },
      "MCPResource": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "URI of the resource",
            "example": "file:///path/to/file.txt"
          },
          "name": {
            "type": "string",
            "description": "Display name for the resource",
            "example": "file.txt"
          },
          "description": {
            "type": "string",
            "description": "Description of the resource"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the resource",
            "example": "text/plain"
          },
          "serverId": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "description": "ID of the MCP server providing this resource"
          }
        },
        "required": [
          "uri",
          "name",
          "serverId"
        ]
      },
      "MCPResourceListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCPResource"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ConfigLocationsData": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "exists": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "number"
                }
              },
              "required": [
                "path",
                "exists",
                "priority"
              ]
            }
          }
        },
        "required": [
          "locations"
        ]
      },
      "ConfigLocationsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ConfigLocationsData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MergedConfigData": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "properties": {
              "mcpServers": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "stdio",
                        "http"
                      ],
                      "default": "stdio"
                    },
                    "command": {
                      "type": "string"
                    },
                    "args": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "env": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "timeout": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "command"
                  ]
                }
              },
              "inputs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "promptString",
                        "promptNumber",
                        "promptBoolean"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "default": {},
                    "password": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "description"
                  ]
                }
              },
              "extends": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            }
          }
        },
        "required": [
          "config"
        ]
      },
      "MergedConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MergedConfigData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectConfigData": {
        "type": "object",
        "properties": {
          "config": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "mcpServers": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "stdio",
                        "http"
                      ],
                      "default": "stdio"
                    },
                    "command": {
                      "type": "string"
                    },
                    "args": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "env": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "timeout": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "command"
                  ]
                }
              },
              "inputs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "promptString",
                        "promptNumber",
                        "promptBoolean"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "default": {},
                    "password": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "description"
                  ]
                }
              },
              "extends": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            }
          },
          "source": {
            "type": "string"
          }
        },
        "required": [
          "config"
        ]
      },
      "ProjectConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ProjectConfigData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitFileStatus": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "The file path relative to the repository root"
          },
          "status": {
            "type": "string",
            "enum": [
              "added",
              "modified",
              "deleted",
              "renamed",
              "copied",
              "untracked",
              "ignored",
              "unchanged"
            ],
            "description": "The git status of the file"
          },
          "staged": {
            "type": "boolean",
            "description": "Whether the file is staged for commit"
          },
          "index": {
            "type": [
              "string",
              "null"
            ],
            "description": "The index status code from git"
          },
          "workingDir": {
            "type": [
              "string",
              "null"
            ],
            "description": "The working directory status code from git"
          }
        },
        "required": [
          "path",
          "status",
          "staged",
          "index",
          "workingDir"
        ]
      },
      "GitStatus": {
        "type": "object",
        "properties": {
          "isRepo": {
            "type": "boolean",
            "description": "Whether the directory is a git repository"
          },
          "current": {
            "type": [
              "string",
              "null"
            ],
            "description": "The current branch name"
          },
          "tracking": {
            "type": [
              "string",
              "null"
            ],
            "description": "The tracking branch name"
          },
          "ahead": {
            "type": "number",
            "description": "Number of commits ahead of tracking branch"
          },
          "behind": {
            "type": "number",
            "description": "Number of commits behind tracking branch"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitFileStatus"
            },
            "description": "List of files with git status"
          },
          "staged": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of staged file paths"
          },
          "modified": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of modified file paths"
          },
          "created": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of created file paths"
          },
          "deleted": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of deleted file paths"
          },
          "renamed": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of renamed file paths"
          },
          "conflicted": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of conflicted file paths"
          }
        },
        "required": [
          "isRepo",
          "current",
          "tracking",
          "ahead",
          "behind",
          "files",
          "staged",
          "modified",
          "created",
          "deleted",
          "renamed",
          "conflicted"
        ]
      },
      "GitStatusResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitStatus"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitStatusError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "not_a_repo",
              "git_not_installed",
              "permission_denied",
              "unknown"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "message"
        ]
      },
      "GitStatusResult": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/GitStatusResultResponse"
          },
          {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "enum": [
                  false
                ]
              },
              "error": {
                "$ref": "#/components/schemas/GitStatusError"
              }
            },
            "required": [
              "success",
              "error"
            ]
          }
        ]
      },
      "GitStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitStatusResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "StageFilesRequest": {
        "type": "object",
        "properties": {
          "filePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of file paths to stage"
          }
        },
        "required": [
          "filePaths"
        ]
      },
      "UnstageFilesRequest": {
        "type": "object",
        "properties": {
          "filePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of file paths to unstage"
          }
        },
        "required": [
          "filePaths"
        ]
      },
      "GitLogEntry": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "abbreviatedHash": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "email"
            ]
          },
          "date": {
            "type": "string"
          },
          "refs": {
            "type": "string",
            "description": "Branch/tag references"
          }
        },
        "required": [
          "hash",
          "abbreviatedHash",
          "message",
          "author",
          "date"
        ]
      },
      "GitLogResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitLogEntry"
            }
          },
          "hasMore": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success"
        ]
      },
      "GitAuthorEnhanced": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string",
            "format": "uri",
            "description": "Gravatar or other avatar URL"
          }
        },
        "required": [
          "name",
          "email"
        ],
        "description": "Commit author information"
      },
      "GitFileStats": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "File path relative to repository root"
          },
          "additions": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of lines added"
          },
          "deletions": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of lines removed"
          },
          "status": {
            "type": "string",
            "enum": [
              "added",
              "modified",
              "deleted",
              "renamed",
              "copied"
            ],
            "description": "Change type"
          },
          "oldPath": {
            "type": "string",
            "description": "Previous path for renamed/moved files"
          }
        },
        "required": [
          "path",
          "additions",
          "deletions",
          "status"
        ]
      },
      "GitCommitEnhanced": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Full SHA-1 commit hash"
          },
          "abbreviatedHash": {
            "type": "string",
            "description": "Abbreviated commit hash (7-8 chars)"
          },
          "subject": {
            "type": "string",
            "description": "First line of commit message"
          },
          "body": {
            "type": "string",
            "description": "Full commit message including subject"
          },
          "author": {
            "$ref": "#/components/schemas/GitAuthorEnhanced"
          },
          "committer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitAuthorEnhanced"
              },
              {
                "description": "Committer information (may differ from author)"
              }
            ]
          },
          "authoredDate": {
            "type": "string",
            "description": "ISO 8601 timestamp when authored"
          },
          "committedDate": {
            "type": "string",
            "description": "ISO 8601 timestamp when committed"
          },
          "relativeTime": {
            "type": "string",
            "description": "Human-readable relative time (e.g., \"2 hours ago\")"
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Parent commit hashes"
          },
          "refs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Branch and tag references pointing to this commit"
          },
          "stats": {
            "type": "object",
            "properties": {
              "filesChanged": {
                "type": "integer",
                "minimum": 0,
                "description": "Total number of files changed"
              },
              "additions": {
                "type": "integer",
                "minimum": 0,
                "description": "Total lines added"
              },
              "deletions": {
                "type": "integer",
                "minimum": 0,
                "description": "Total lines removed"
              }
            },
            "required": [
              "filesChanged",
              "additions",
              "deletions"
            ],
            "description": "Summary statistics for the commit"
          },
          "fileStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitFileStats"
            },
            "description": "Per-file change statistics"
          }
        },
        "required": [
          "hash",
          "abbreviatedHash",
          "subject",
          "body",
          "author",
          "committer",
          "authoredDate",
          "committedDate",
          "relativeTime",
          "parents",
          "refs",
          "stats"
        ]
      },
      "GitPagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "description": "Current page number (1-based)"
          },
          "perPage": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "description": "Number of items per page"
          },
          "totalCount": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of items if available"
          },
          "hasMore": {
            "type": "boolean",
            "description": "Whether more items are available"
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for cursor-based pagination"
          }
        },
        "required": [
          "page",
          "perPage",
          "hasMore"
        ]
      },
      "GitCommitLogEnhanced": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "commits": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GitCommitEnhanced"
                }
              },
              "pagination": {
                "$ref": "#/components/schemas/GitPagination"
              },
              "branch": {
                "type": "string",
                "description": "Branch name these commits are from"
              }
            },
            "required": [
              "commits",
              "pagination",
              "branch"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success"
        ]
      },
      "CommitLogEnhancedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitCommitLogEnhanced"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitFileDiff": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "added",
              "modified",
              "deleted",
              "renamed",
              "copied"
            ]
          },
          "additions": {
            "type": "integer",
            "minimum": 0
          },
          "deletions": {
            "type": "integer",
            "minimum": 0
          },
          "binary": {
            "type": "boolean"
          },
          "oldPath": {
            "type": "string"
          },
          "diff": {
            "type": "string",
            "description": "Unified diff content if requested"
          }
        },
        "required": [
          "path",
          "status",
          "additions",
          "deletions",
          "binary"
        ]
      },
      "GitCommitDetail": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "commit": {
                "$ref": "#/components/schemas/GitCommitEnhanced"
              },
              "files": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GitFileDiff"
                },
                "description": "Detailed file changes"
              },
              "totalDiff": {
                "type": "string",
                "description": "Full unified diff if requested"
              }
            },
            "required": [
              "commit",
              "files"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success"
        ]
      },
      "CommitDetailResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitCommitDetail"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitDiffResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "filePath": {
                "type": "string"
              },
              "diff": {
                "type": "string",
                "description": "The raw diff content"
              },
              "staged": {
                "type": "boolean"
              },
              "commit": {
                "type": "string"
              }
            },
            "required": [
              "filePath",
              "diff",
              "staged"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success"
        ]
      },
      "GitBranch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Branch name"
          },
          "current": {
            "type": "boolean",
            "description": "Whether this is the current branch"
          },
          "isRemote": {
            "type": "boolean",
            "description": "Whether this is a remote branch"
          },
          "commit": {
            "type": "string",
            "description": "Latest commit hash"
          },
          "tracking": {
            "type": [
              "string",
              "null"
            ],
            "description": "Tracking branch name"
          },
          "ahead": {
            "type": "number",
            "description": "Commits ahead of tracking branch"
          },
          "behind": {
            "type": "number",
            "description": "Commits behind tracking branch"
          }
        },
        "required": [
          "name",
          "current",
          "isRemote",
          "commit",
          "tracking",
          "ahead",
          "behind"
        ]
      },
      "BranchListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitBranch"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitBranchEnhanced": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Branch name"
          },
          "current": {
            "type": "boolean",
            "description": "Whether this is the currently checked out branch"
          },
          "isRemote": {
            "type": "boolean",
            "description": "Whether this is a remote branch"
          },
          "isProtected": {
            "type": "boolean",
            "description": "Whether the branch is protected"
          },
          "latestCommit": {
            "type": "object",
            "properties": {
              "hash": {
                "type": "string"
              },
              "abbreviatedHash": {
                "type": "string"
              },
              "subject": {
                "type": "string"
              },
              "author": {
                "type": "string",
                "description": "Author name"
              },
              "relativeTime": {
                "type": "string"
              }
            },
            "required": [
              "hash",
              "abbreviatedHash",
              "subject",
              "author",
              "relativeTime"
            ],
            "description": "Summary of the latest commit on this branch"
          },
          "tracking": {
            "type": [
              "string",
              "null"
            ],
            "description": "Remote tracking branch"
          },
          "ahead": {
            "type": "integer",
            "minimum": 0,
            "description": "Commits ahead of tracking/main branch"
          },
          "behind": {
            "type": "integer",
            "minimum": 0,
            "description": "Commits behind tracking/main branch"
          },
          "lastActivity": {
            "type": "string",
            "description": "ISO 8601 timestamp of last activity"
          }
        },
        "required": [
          "name",
          "current",
          "isRemote",
          "latestCommit",
          "tracking",
          "ahead",
          "behind"
        ]
      },
      "GitBranchListEnhancedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "branches": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GitBranchEnhanced"
                }
              },
              "current": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Name of current branch"
              },
              "defaultBranch": {
                "type": "string",
                "description": "Default branch name (e.g., main, master)"
              }
            },
            "required": [
              "branches",
              "current",
              "defaultBranch"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success"
        ]
      },
      "BranchListEnhancedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/GitBranchListEnhancedResponse"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitCreateBranchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "startPoint": {
            "type": "string",
            "description": "Branch or commit to start from"
          }
        },
        "required": [
          "name"
        ]
      },
      "GitSwitchBranchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "createIfNotExists": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "GitStash": {
        "type": "object",
        "properties": {
          "index": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "branch": {
            "type": "string",
            "description": "Branch where stash was created"
          },
          "date": {
            "type": "string"
          }
        },
        "required": [
          "index",
          "message",
          "branch",
          "date"
        ]
      },
      "StashListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitStash"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitWorktree": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Absolute path to the worktree"
          },
          "branch": {
            "type": "string",
            "description": "Branch checked out in this worktree"
          },
          "commit": {
            "type": "string",
            "description": "Current commit hash"
          },
          "isMain": {
            "type": "boolean",
            "description": "Whether this is the main worktree"
          },
          "isLocked": {
            "type": "boolean",
            "description": "Whether the worktree is locked"
          },
          "lockReason": {
            "type": "string",
            "description": "Reason for locking if locked"
          },
          "prunable": {
            "type": "boolean",
            "description": "Whether the worktree can be pruned"
          }
        },
        "required": [
          "path",
          "branch",
          "commit",
          "isMain",
          "isLocked"
        ]
      },
      "WorktreeListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitWorktree"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitWorktreeAddRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path where to create the worktree"
          },
          "branch": {
            "type": "string",
            "description": "Branch to check out"
          },
          "newBranch": {
            "type": "string",
            "description": "Create new branch with this name"
          },
          "commitish": {
            "type": "string",
            "description": "Commit/tag to check out"
          },
          "detach": {
            "type": "boolean",
            "description": "Detach HEAD at specified commit"
          }
        },
        "required": [
          "path"
        ]
      },
      "GitWorktreeRemoveRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path of the worktree to remove"
          },
          "force": {
            "type": "boolean",
            "description": "Force removal even with uncommitted changes"
          }
        },
        "required": [
          "path"
        ]
      },
      "GitWorktreeLockRequest": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path of the worktree to lock"
          },
          "reason": {
            "type": "string",
            "description": "Reason for locking"
          }
        },
        "required": [
          "path"
        ]
      },
      "PruneWorktreesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "GitRemote": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "fetch": {
            "type": "string",
            "description": "Fetch URL"
          },
          "push": {
            "type": "string",
            "description": "Push URL"
          }
        },
        "required": [
          "name",
          "fetch",
          "push"
        ]
      },
      "RemotesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitRemote"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitOperationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "GitPushRequest": {
        "type": "object",
        "properties": {
          "remote": {
            "type": "string",
            "default": "origin"
          },
          "branch": {
            "type": "string",
            "description": "Current branch if not specified"
          },
          "force": {
            "type": "boolean"
          },
          "setUpstream": {
            "type": "boolean"
          }
        }
      },
      "GitCommitAuthor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "description": "ISO date string"
          }
        },
        "required": [
          "name",
          "email",
          "date"
        ],
        "description": "Tagger info for annotated tags"
      },
      "GitTag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "commit": {
            "type": "string",
            "description": "Commit hash"
          },
          "annotation": {
            "type": "string",
            "description": "Tag message for annotated tags"
          },
          "tagger": {
            "$ref": "#/components/schemas/GitCommitAuthor"
          }
        },
        "required": [
          "name",
          "commit"
        ]
      },
      "TagsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitTag"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitResetRequest": {
        "type": "object",
        "properties": {
          "ref": {
            "type": "string",
            "description": "Commit reference to reset to"
          },
          "mode": {
            "type": "string",
            "enum": [
              "soft",
              "mixed",
              "hard"
            ],
            "default": "mixed"
          }
        },
        "required": [
          "ref"
        ]
      },
      "DetectToolsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "tools": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "tool": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "installed": {
                      "type": "boolean"
                    },
                    "configPath": {
                      "type": "string"
                    },
                    "configExists": {
                      "type": "boolean"
                    },
                    "hasPromptliano": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "tool",
                    "name",
                    "installed"
                  ]
                }
              },
              "platform": {
                "type": "string"
              }
            },
            "required": [
              "tools",
              "platform"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "InstallationStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "projectConfig": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "mcpEnabled": {
                    "type": "boolean"
                  },
                  "installedTools": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "tool": {
                          "type": "string"
                        },
                        "installedAt": {
                          "type": "number"
                        },
                        "configPath": {
                          "type": "string"
                        },
                        "serverName": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "tool",
                        "installedAt",
                        "serverName"
                      ]
                    }
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "projectName",
                  "mcpEnabled",
                  "installedTools"
                ]
              },
              "connectionStatus": {
                "type": "object",
                "properties": {
                  "connected": {
                    "type": "boolean"
                  },
                  "sessionId": {
                    "type": "string"
                  },
                  "lastActivity": {
                    "type": "number"
                  },
                  "projectId": {
                    "type": "number"
                  }
                },
                "required": [
                  "connected"
                ]
              }
            },
            "required": [
              "projectConfig",
              "connectionStatus"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "InstallResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "configPath": {
                "type": "string"
              },
              "backedUp": {
                "type": "boolean"
              },
              "backupPath": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UninstallResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProcessInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal process identifier"
          },
          "projectId": {
            "type": "number",
            "description": "Associated project ID"
          },
          "pid": {
            "type": [
              "number",
              "null"
            ],
            "description": "OS process PID (if available)"
          },
          "name": {
            "type": "string",
            "description": "Optional display name"
          },
          "command": {
            "type": "string",
            "description": "Command executable"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Command arguments"
          },
          "cwd": {
            "type": "string",
            "description": "Working directory for the process"
          },
          "status": {
            "type": "string",
            "enum": [
              "running",
              "stopped",
              "exited",
              "error"
            ],
            "description": "Current process status"
          },
          "startedAt": {
            "type": "number",
            "description": "Start timestamp (ms since epoch)"
          },
          "exitedAt": {
            "type": [
              "number",
              "null"
            ],
            "description": "Exit timestamp (ms since epoch)"
          },
          "exitCode": {
            "type": [
              "number",
              "null"
            ],
            "description": "Exit code if exited"
          },
          "lastOutput": {
            "type": "object",
            "properties": {
              "stdout": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stderr": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "default": {
              "stdout": [],
              "stderr": []
            },
            "required": [
              "stdout",
              "stderr"
            ],
            "description": "Recent output lines"
          }
        },
        "required": [
          "id",
          "projectId",
          "pid",
          "command",
          "cwd",
          "status",
          "startedAt"
        ]
      },
      "ProcessListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessInfo"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectScript": {
        "type": "object",
        "properties": {
          "packageName": {
            "type": "string",
            "description": "Name from the package.json"
          },
          "packagePath": {
            "type": "string",
            "description": "Absolute path to the package directory"
          },
          "scriptName": {
            "type": "string",
            "description": "Script key in package.json"
          },
          "command": {
            "type": "string",
            "description": "Script command content"
          },
          "packageManager": {
            "type": "string",
            "enum": [
              "npm",
              "bun",
              "yarn",
              "pnpm"
            ],
            "description": "Inferred package manager"
          },
          "workspace": {
            "type": "boolean",
            "description": "True if located under a workspace directory like packages/*"
          }
        },
        "required": [
          "packageName",
          "packagePath",
          "scriptName",
          "command",
          "packageManager",
          "workspace"
        ]
      },
      "ProjectScriptListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectScript"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProcessDetailResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ProcessInfo"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProcessStartRequest": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "minLength": 1,
            "description": "Command to execute (binary/script)"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "name": {
            "type": "string"
          },
          "cwd": {
            "type": "string",
            "description": "Override working directory; defaults to project path"
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "command"
        ]
      },
      "ProcessStopResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ProcessInfo"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProcessHistoryListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "projectId": {
                  "type": "number"
                },
                "processId": {
                  "type": "string"
                },
                "pid": {
                  "type": [
                    "number",
                    "null"
                  ]
                },
                "name": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "command": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "running",
                    "stopped",
                    "exited",
                    "error",
                    "killed"
                  ]
                },
                "startedAt": {
                  "type": "number"
                },
                "exitedAt": {
                  "type": [
                    "number",
                    "null"
                  ]
                },
                "exitCode": {
                  "type": [
                    "number",
                    "null"
                  ]
                }
              },
              "required": [
                "id",
                "projectId",
                "processId",
                "command",
                "status",
                "startedAt"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProcessLogsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "runId": {
                  "type": "number"
                },
                "timestamp": {
                  "type": "number"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "stdout",
                    "stderr",
                    "system"
                  ]
                },
                "content": {
                  "type": "string"
                },
                "lineNumber": {
                  "type": "number"
                }
              },
              "required": [
                "id",
                "runId",
                "timestamp",
                "type",
                "content",
                "lineNumber"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProcessPortsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "port": {
                  "type": "number"
                },
                "protocol": {
                  "type": "string",
                  "enum": [
                    "tcp",
                    "udp"
                  ]
                },
                "address": {
                  "type": "string"
                },
                "pid": {
                  "type": [
                    "number",
                    "null"
                  ]
                },
                "processName": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "listening",
                    "established",
                    "closed"
                  ]
                }
              },
              "required": [
                "id",
                "port",
                "protocol",
                "address",
                "state"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "KillByPortResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "pid": {
                "type": "number"
              }
            },
            "required": [
              "pid"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ScanPortsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "port": {
                  "type": "number"
                },
                "protocol": {
                  "type": "string",
                  "enum": [
                    "tcp",
                    "udp"
                  ]
                },
                "address": {
                  "type": "string"
                },
                "pid": {
                  "type": [
                    "number",
                    "null"
                  ]
                },
                "processName": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "state": {
                  "type": "string",
                  "enum": [
                    "listening",
                    "established",
                    "closed"
                  ]
                }
              },
              "required": [
                "id",
                "port",
                "protocol",
                "address",
                "state"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CopilotProxyHealth": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "upstream": {
            "type": "string"
          },
          "checked": {
            "type": "boolean"
          },
          "status": {
            "type": "number"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "upstream"
        ]
      },
      "ModelConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "maxTokens": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "topP": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "topK": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "frequencyPenalty": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "presencePenalty": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "responseFormat": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "systemPrompt": {
            "type": [
              "string",
              "null"
            ]
          },
          "isSystemPreset": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "presetCategory": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "low",
              "medium",
              "high",
              "planning",
              "custom"
            ]
          },
          "uiIcon": {
            "type": [
              "string",
              "null"
            ]
          },
          "uiColor": {
            "type": [
              "string",
              "null"
            ]
          },
          "uiOrder": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "createdAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "updatedAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          }
        },
        "required": [
          "id",
          "name",
          "displayName",
          "provider",
          "model",
          "temperature",
          "maxTokens",
          "topP",
          "topK",
          "frequencyPenalty",
          "presencePenalty",
          "responseFormat",
          "systemPrompt",
          "isSystemPreset",
          "isDefault",
          "isActive",
          "description",
          "presetCategory",
          "uiIcon",
          "uiColor",
          "uiOrder",
          "createdAt",
          "updatedAt"
        ]
      },
      "ModelConfigListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelConfig"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ModelConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ModelConfig"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateModelConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "maxTokens": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "topP": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "topK": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "frequencyPenalty": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "presencePenalty": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "responseFormat": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "systemPrompt": {
            "type": [
              "string",
              "null"
            ]
          },
          "isSystemPreset": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "presetCategory": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "low",
              "medium",
              "high",
              "planning",
              "custom"
            ]
          },
          "uiIcon": {
            "type": [
              "string",
              "null"
            ]
          },
          "uiColor": {
            "type": [
              "string",
              "null"
            ]
          },
          "uiOrder": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          }
        },
        "required": [
          "name",
          "provider",
          "model"
        ]
      },
      "UpdateModelConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "maxTokens": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "topP": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "topK": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "frequencyPenalty": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "presencePenalty": {
            "type": [
              "number",
              "null"
            ],
            "minimum": -140737488355328,
            "maximum": 140737488355327
          },
          "responseFormat": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "systemPrompt": {
            "type": [
              "string",
              "null"
            ]
          },
          "isSystemPreset": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "presetCategory": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "low",
              "medium",
              "high",
              "planning",
              "custom"
            ]
          },
          "uiIcon": {
            "type": [
              "string",
              "null"
            ]
          },
          "uiColor": {
            "type": [
              "string",
              "null"
            ]
          },
          "uiOrder": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          }
        }
      },
      "ModelPresetWithConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "configId": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "category": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "general",
              "coding",
              "creative",
              "analysis",
              "custom",
              "chat",
              "productivity"
            ]
          },
          "isSystemPreset": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "usageCount": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "lastUsedAt": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "createdAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "updatedAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "config": {
            "$ref": "#/components/schemas/ModelConfig"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "configId",
          "category",
          "isSystemPreset",
          "isActive",
          "usageCount",
          "lastUsedAt",
          "metadata",
          "createdAt",
          "updatedAt",
          "config"
        ]
      },
      "ModelPresetsWithConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelPresetWithConfig"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ModelPreset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "configId": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "category": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "general",
              "coding",
              "creative",
              "analysis",
              "custom",
              "chat",
              "productivity"
            ]
          },
          "isSystemPreset": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "usageCount": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "lastUsedAt": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          },
          "createdAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "updatedAt": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "configId",
          "category",
          "isSystemPreset",
          "isActive",
          "usageCount",
          "lastUsedAt",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "ModelPresetListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelPreset"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ModelPresetWithConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ModelPresetWithConfig"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ModelPresetResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ModelPreset"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateModelPreset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "configId": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "category": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "general",
              "coding",
              "creative",
              "analysis",
              "custom",
              "chat",
              "productivity"
            ]
          },
          "isSystemPreset": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "name",
          "configId"
        ]
      },
      "UpdateModelPreset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "configId": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "category": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "general",
              "coding",
              "creative",
              "analysis",
              "custom",
              "chat",
              "productivity"
            ]
          },
          "isSystemPreset": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "ExportDataResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "configs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModelConfig"
                }
              },
              "presets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModelPreset"
                }
              }
            },
            "required": [
              "configs",
              "presets"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ImportResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "configsImported": {
                "type": "number"
              },
              "presetsImported": {
                "type": "number"
              }
            },
            "required": [
              "configsImported",
              "presetsImported"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      }
    },
    "parameters": {}
  },
  "paths": {
    "/api/projects": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a new project and sync its files",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created and initial sync started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "207": {
            "description": "Project created, but post-creation steps encountered issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseMultiStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List all projects",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a specific project by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a project's details",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project and its associated data",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/search": {
      "post": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Search project files (AST-grep by default)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "minLength": 1
                  },
                  "searchType": {
                    "type": "string",
                    "enum": [
                      "ast",
                      "exact",
                      "fuzzy",
                      "regex",
                      "semantic"
                    ],
                    "default": "ast"
                  },
                  "fileTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "limit": {
                    "type": "integer",
                    "exclusiveMinimum": 0,
                    "maximum": 1000
                  },
                  "offset": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "includeContext": {
                    "type": "boolean"
                  },
                  "contextLines": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 20
                  },
                  "caseSensitive": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "file": {
                                "$ref": "#/components/schemas/File"
                              },
                              "score": {
                                "type": "number"
                              },
                              "matches": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "line": {
                                      "type": "integer",
                                      "minimum": 0
                                    },
                                    "column": {
                                      "type": "integer",
                                      "minimum": 0
                                    },
                                    "text": {
                                      "type": "string"
                                    },
                                    "context": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "line",
                                    "column",
                                    "text"
                                  ]
                                }
                              },
                              "snippet": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "file",
                              "score",
                              "matches"
                            ]
                          }
                        },
                        "stats": {
                          "type": "object",
                          "properties": {
                            "totalResults": {
                              "type": "integer",
                              "minimum": 0
                            },
                            "searchTime": {
                              "type": "integer",
                              "minimum": 0
                            },
                            "cached": {
                              "type": "boolean"
                            },
                            "indexCoverage": {
                              "type": "integer",
                              "minimum": 0
                            }
                          },
                          "required": [
                            "totalResults",
                            "searchTime",
                            "cached",
                            "indexCoverage"
                          ]
                        }
                      },
                      "required": [
                        "results",
                        "stats"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/sync": {
      "post": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Manually trigger a full file sync for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/sync-stream": {
      "get": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Trigger a file sync with real-time progress updates via SSE",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync progress stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-sent events stream with sync progress updates"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/files": {
      "get": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Get the list of files associated with a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": false
            },
            "required": false,
            "name": "includeAllVersions",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Maximum number of files to return"
            },
            "required": false,
            "description": "Maximum number of files to return",
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "minimum": 0,
              "default": 0,
              "description": "Number of files to skip"
            },
            "required": false,
            "description": "Number of files to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/File"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/files/metadata": {
      "get": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Get project files metadata without content (for performance)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Maximum number of files to return"
            },
            "required": false,
            "description": "Maximum number of files to return",
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "minimum": 0,
              "default": 0,
              "description": "Number of files to skip"
            },
            "required": false,
            "description": "Number of files to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "projectId": {
                            "type": "integer",
                            "minimum": -9007199254740991,
                            "maximum": 9007199254740991
                          },
                          "name": {
                            "type": "string"
                          },
                          "path": {
                            "type": "string"
                          },
                          "extension": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "size": {
                            "type": [
                              "integer",
                              "null"
                            ],
                            "minimum": -9007199254740991,
                            "maximum": 9007199254740991
                          },
                          "lastModified": {
                            "type": [
                              "integer",
                              "null"
                            ],
                            "minimum": -9007199254740991,
                            "maximum": 9007199254740991
                          },
                          "contentType": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "meta": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "checksum": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "imports": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              },
                              {
                                "type": "null"
                              },
                              {
                                "type": "object",
                                "additionalProperties": {}
                              },
                              {
                                "type": "array",
                                "items": {}
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "exports": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              },
                              {
                                "type": "boolean"
                              },
                              {
                                "type": "null"
                              },
                              {
                                "type": "object",
                                "additionalProperties": {}
                              },
                              {
                                "type": "array",
                                "items": {}
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "isRelevant": {
                            "type": [
                              "boolean",
                              "null"
                            ]
                          },
                          "relevanceScore": {
                            "type": [
                              "number",
                              "null"
                            ],
                            "minimum": -140737488355328,
                            "maximum": 140737488355327
                          },
                          "createdAt": {
                            "type": "integer",
                            "minimum": -9007199254740991,
                            "maximum": 9007199254740991
                          },
                          "updatedAt": {
                            "type": "integer",
                            "minimum": -9007199254740991,
                            "maximum": 9007199254740991
                          }
                        },
                        "required": [
                          "id",
                          "projectId",
                          "name",
                          "path",
                          "extension",
                          "size",
                          "lastModified",
                          "contentType",
                          "meta",
                          "checksum",
                          "imports",
                          "exports",
                          "isRelevant",
                          "relevanceScore",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/files/bulk": {
      "put": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Update content of multiple files in a project (creates new versions)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fileId": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "content": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "fileId",
                        "content"
                      ]
                    }
                  }
                },
                "required": [
                  "updates"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/File"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/files/{fileId}": {
      "put": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Update the content of a specific file (creates new version)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "fileId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/File"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/refresh": {
      "post": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Refresh project files (sync) optionally limited to a folder",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "example": "src/components",
              "description": "Optional folder path to limit the refresh scope"
            },
            "required": false,
            "description": "Optional folder path to limit the refresh scope",
            "name": "folder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/File"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/suggest-files": {
      "post": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Suggest relevant files based on user input and project context",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The prompt to analyze for file suggestions"
                  },
                  "userInput": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Alias for prompt for backward compatibility"
                  },
                  "limit": {
                    "type": "integer",
                    "exclusiveMinimum": 0,
                    "default": 10,
                    "description": "Maximum number of files to suggest"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestFilesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/statistics": {
      "get": {
        "tags": [
          "Projects",
          "Statistics"
        ],
        "summary": "Get comprehensive statistics for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fileStats": {
                          "type": "object",
                          "properties": {
                            "totalFiles": {
                              "type": "number"
                            },
                            "totalSize": {
                              "type": "number"
                            },
                            "filesByType": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "sizeByType": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "filesByCategory": {
                              "type": "object",
                              "properties": {
                                "source": {
                                  "type": "number"
                                },
                                "tests": {
                                  "type": "number"
                                },
                                "docs": {
                                  "type": "number"
                                },
                                "config": {
                                  "type": "number"
                                },
                                "other": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "source",
                                "tests",
                                "docs",
                                "config",
                                "other"
                              ]
                            }
                          },
                          "required": [
                            "totalFiles",
                            "totalSize",
                            "filesByType",
                            "sizeByType",
                            "filesByCategory"
                          ]
                        },
                        "ticketStats": {
                          "type": "object",
                          "properties": {
                            "totalTickets": {
                              "type": "number"
                            },
                            "ticketsByStatus": {
                              "type": "object",
                              "properties": {
                                "open": {
                                  "type": "number"
                                },
                                "in_progress": {
                                  "type": "number"
                                },
                                "closed": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "open",
                                "in_progress",
                                "closed"
                              ]
                            },
                            "ticketsByPriority": {
                              "type": "object",
                              "properties": {
                                "low": {
                                  "type": "number"
                                },
                                "normal": {
                                  "type": "number"
                                },
                                "high": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "low",
                                "normal",
                                "high"
                              ]
                            },
                            "averageTasksPerTicket": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "totalTickets",
                            "ticketsByStatus",
                            "ticketsByPriority",
                            "averageTasksPerTicket"
                          ]
                        },
                        "taskStats": {
                          "type": "object",
                          "properties": {
                            "totalTasks": {
                              "type": "number"
                            },
                            "completedTasks": {
                              "type": "number"
                            },
                            "completionRate": {
                              "type": "number"
                            },
                            "tasksByTicket": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ticketId": {
                                    "type": "number"
                                  },
                                  "ticketTitle": {
                                    "type": "string"
                                  },
                                  "totalTasks": {
                                    "type": "number"
                                  },
                                  "completedTasks": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "ticketId",
                                  "ticketTitle",
                                  "totalTasks",
                                  "completedTasks"
                                ]
                              }
                            }
                          },
                          "required": [
                            "totalTasks",
                            "completedTasks",
                            "completionRate",
                            "tasksByTicket"
                          ]
                        },
                        "promptStats": {
                          "type": "object",
                          "properties": {
                            "totalPrompts": {
                              "type": "number"
                            },
                            "totalTokens": {
                              "type": "number"
                            },
                            "averagePromptLength": {
                              "type": "number"
                            },
                            "promptTypes": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            }
                          },
                          "required": [
                            "totalPrompts",
                            "totalTokens",
                            "averagePromptLength",
                            "promptTypes"
                          ]
                        },
                        "activityStats": {
                          "type": "object",
                          "properties": {
                            "recentUpdates": {
                              "type": "number"
                            },
                            "lastUpdateTime": {
                              "type": "number"
                            },
                            "creationTrend": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "date": {
                                    "type": "string"
                                  },
                                  "files": {
                                    "type": "number"
                                  },
                                  "tickets": {
                                    "type": "number"
                                  },
                                  "tasks": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "date",
                                  "files",
                                  "tickets",
                                  "tasks"
                                ]
                              }
                            }
                          },
                          "required": [
                            "recentUpdates",
                            "lastUpdateTime",
                            "creationTrend"
                          ]
                        }
                      },
                      "required": [
                        "fileStats",
                        "ticketStats",
                        "taskStats",
                        "promptStats",
                        "activityStats"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Create a new ticket",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTicketBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ticket created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get a ticket by ID",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tickets"
        ],
        "summary": "Update a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Delete a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/complete": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Complete a ticket and mark all tasks as done",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteTicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/link-files": {
      "post": {
        "tags": [
          "Tickets",
          "Files"
        ],
        "summary": "Link files to a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkFilesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedFilesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/suggest-files": {
      "post": {
        "tags": [
          "Tickets",
          "Files",
          "AI"
        ],
        "summary": "Get AI suggestions for relevant files",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestFilesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestFilesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/suggest-files/stream": {
      "post": {
        "tags": [
          "Tickets",
          "Files",
          "AI"
        ],
        "summary": "Stream progressive AI suggestions for relevant files",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestFilesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/suggest-tasks": {
      "post": {
        "tags": [
          "Tickets",
          "AI"
        ],
        "summary": "Get AI suggestions for tasks",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestTasksBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestedTasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/tickets": {
      "get": {
        "tags": [
          "Projects",
          "Tickets"
        ],
        "summary": "List all tickets for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter tickets by status"
            },
            "required": false,
            "description": "Filter tickets by status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/tickets-with-count": {
      "get": {
        "tags": [
          "Projects",
          "Tickets"
        ],
        "summary": "List tickets with task counts",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter tickets by status"
            },
            "required": false,
            "description": "Filter tickets by status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketWithTaskCountListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/tickets-with-tasks": {
      "get": {
        "tags": [
          "Projects",
          "Tickets",
          "Tasks"
        ],
        "summary": "List tickets with their tasks",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter tickets by status"
            },
            "required": false,
            "description": "Filter tickets by status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketWithTasksListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/tasks": {
      "post": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Create a new task for a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Get all tasks for a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/tasks/{taskId}": {
      "patch": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Update a task",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Task identifier"
            },
            "required": true,
            "description": "Task identifier",
            "name": "taskId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Delete a task",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Task identifier"
            },
            "required": true,
            "description": "Task identifier",
            "name": "taskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/tasks/reorder": {
      "patch": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Reorder tasks within a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderTasksBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/auto-generate-tasks": {
      "post": {
        "tags": [
          "Tickets",
          "Tasks",
          "AI"
        ],
        "summary": "Auto-generate tasks from ticket overview",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "description": "Ticket identifier",
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/bulk-tasks": {
      "get": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Get tasks for multiple tickets",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Comma-separated list of ticket IDs"
            },
            "required": true,
            "description": "Comma-separated list of ticket IDs",
            "name": "ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{id}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get a ticket by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tickets"
        ],
        "summary": "Update a ticket by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Delete a ticket by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Get all chat sessions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Create a new chat session",
        "requestBody": {
          "required": true,
          "description": "Data for the new chat session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/messages": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Get messages for a specific chat",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/chat/legacy": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Chat completion (streaming, chat-associated)",
        "description": "Continues a chat session identified by chatId, streams response using Vercel AI SDK via UnifiedProviderService.",
        "requestBody": {
          "required": true,
          "description": "Chat ID, user message, provider, model, and options for the streaming AI chat completion.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiChatStreamRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated AI response stream.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Stream of response tokens (Vercel AI SDK format)"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/fork": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Fork a chat session",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Optional message IDs to exclude from the fork",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForkChatBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat forked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/fork/{messageId}": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Fork a chat session from a specific message",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "messageId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Optional message IDs to exclude from the fork",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForkChatFromMessageBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat forked successfully from message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/messages/{messageId}": {
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Delete a specific message",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "messageId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}": {
      "patch": {
        "tags": [
          "Chats"
        ],
        "summary": "Update chat properties (e.g., title)",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data to update for the chat",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChatBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Chats"
        ],
        "summary": "Delete a chat session and its messages",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{id}": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Get a chat by ID",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Chats"
        ],
        "summary": "Update a chat by ID",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChatBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Chats"
        ],
        "summary": "Delete a chat by ID",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts": {
      "post": {
        "tags": [
          "Prompts"
        ],
        "summary": "Create a new prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Prompt created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Prompts"
        ],
        "summary": "List all available prompts",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/prompts": {
      "get": {
        "tags": [
          "Projects",
          "Prompts"
        ],
        "summary": "List prompts associated with a specific project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/suggest-prompts": {
      "post": {
        "tags": [
          "Projects",
          "Prompts",
          "AI"
        ],
        "summary": "Get AI-suggested prompts based on user input",
        "description": "Uses AI to analyze user input and suggest the most relevant prompts from the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestPromptsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestPromptsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/prompts/{promptId}": {
      "post": {
        "tags": [
          "Projects",
          "Prompts"
        ],
        "summary": "Associate a prompt with a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects",
          "Prompts"
        ],
        "summary": "Disassociate a prompt from a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/{id}": {
      "get": {
        "tags": [
          "Prompts"
        ],
        "summary": "Get a prompt by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Prompts"
        ],
        "summary": "Update a prompt's details",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Prompts"
        ],
        "summary": "Delete a prompt by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Prompts"
        ],
        "summary": "Update a prompt by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/import": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Import prompts from markdown files",
        "description": "Upload and import one or more markdown files containing prompts with frontmatter",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "binary"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "binary"
                        }
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "description": "Markdown file(s) to import (max 10MB per file)"
                  },
                  "projectId": {
                    "type": "integer",
                    "exclusiveMinimum": 0,
                    "description": "Optional project ID to associate imported prompts with"
                  },
                  "overwriteExisting": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "default": false,
                    "description": "Whether to overwrite existing prompts with the same name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/{id}/export": {
      "get": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Export a single prompt as markdown",
        "description": "Download a prompt as a markdown file with frontmatter",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt exported successfully",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "default": "text/plain; charset=utf-8"
                },
                "required": false
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Markdown file content"
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/export-batch": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Export multiple prompts as markdown",
        "description": "Export multiple prompts to markdown format",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkdownExportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/prompts/import": {
      "post": {
        "tags": [
          "Projects",
          "Prompts",
          "Import/Export"
        ],
        "summary": "Import prompts to a specific project",
        "description": "Upload and import markdown files with prompts directly to a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "binary"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "binary"
                        }
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "description": "Markdown file(s) to import (max 10MB per file)"
                  },
                  "overwriteExisting": {
                    "type": [
                      "boolean",
                      "null"
                    ],
                    "default": false,
                    "description": "Whether to overwrite existing prompts with the same name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/prompts/export": {
      "get": {
        "tags": [
          "Projects",
          "Prompts",
          "Import/Export"
        ],
        "summary": "Export all prompts from a project",
        "description": "Download all prompts from a project as markdown file(s)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "single-file",
                "multi-file"
              ],
              "default": "single-file",
              "description": "Export format"
            },
            "required": false,
            "description": "Export format",
            "name": "format",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "created",
                "updated"
              ],
              "default": "name",
              "description": "Sort order for prompts"
            },
            "required": false,
            "description": "Sort order for prompts",
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc",
              "description": "Sort direction"
            },
            "required": false,
            "description": "Sort direction",
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkdownExportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/validate-markdown": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Validate markdown content for prompt import",
        "description": "Validates markdown content structure and frontmatter for prompt import",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Markdown content to validate"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/MarkdownContentValidation"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/:projectId/queues": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "description": {
                    "type": "string"
                  },
                  "maxParallelItems": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 10
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskQueue"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueueBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "deleted"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/:ticketId/enqueue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number"
                  },
                  "priority": {
                    "type": "number"
                  },
                  "includeTasks": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Ticket"
                        },
                        {
                          "properties": {
                            "id": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "projectId": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "title": {
                              "type": "string"
                            },
                            "overview": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "open",
                                "in_progress",
                                "closed"
                              ]
                            },
                            "priority": {
                              "type": "string",
                              "enum": [
                                "low",
                                "normal",
                                "high"
                              ]
                            },
                            "suggestedFileIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "suggestedAgentIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "suggestedPromptIds": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "queueId": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queuePosition": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueStatus": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "queued",
                                "in_progress",
                                "completed",
                                "failed",
                                "cancelled"
                              ]
                            },
                            "queuePriority": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queuedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueStartedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueCompletedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueAgentId": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "queueErrorMessage": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "estimatedProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "actualProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/:ticketId/tasks/:taskId/enqueue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number"
                  },
                  "priority": {
                    "type": "number"
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TicketTask"
                        },
                        {
                          "properties": {
                            "id": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "ticketId": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "content": {
                              "type": "string"
                            },
                            "description": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "suggestedFileIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "done": {
                              "type": "boolean"
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "pending",
                                "in_progress",
                                "completed",
                                "cancelled"
                              ]
                            },
                            "orderIndex": {
                              "type": "number"
                            },
                            "estimatedHours": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "dependencies": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "tags": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "agentId": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "suggestedPromptIds": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "queueId": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queuePosition": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueStatus": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "queued",
                                "in_progress",
                                "completed",
                                "failed",
                                "cancelled"
                              ]
                            },
                            "queuePriority": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queuedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueStartedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueCompletedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueAgentId": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "queueErrorMessage": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "estimatedProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "actualProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/:ticketId/dequeue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Ticket"
                        },
                        {
                          "properties": {
                            "id": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "projectId": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "title": {
                              "type": "string"
                            },
                            "overview": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "open",
                                "in_progress",
                                "closed"
                              ]
                            },
                            "priority": {
                              "type": "string",
                              "enum": [
                                "low",
                                "normal",
                                "high"
                              ]
                            },
                            "suggestedFileIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "suggestedAgentIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "suggestedPromptIds": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "queueId": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queuePosition": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueStatus": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "queued",
                                "in_progress",
                                "completed",
                                "failed",
                                "cancelled"
                              ]
                            },
                            "queuePriority": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queuedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueStartedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueCompletedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueAgentId": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "queueErrorMessage": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "estimatedProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "actualProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/:ticketId/tasks/:taskId/dequeue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/TicketTask"
                        },
                        {
                          "properties": {
                            "id": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "ticketId": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "content": {
                              "type": "string"
                            },
                            "description": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "suggestedFileIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "done": {
                              "type": "boolean"
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "pending",
                                "in_progress",
                                "completed",
                                "cancelled"
                              ]
                            },
                            "orderIndex": {
                              "type": "number"
                            },
                            "estimatedHours": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "dependencies": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "tags": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "agentId": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "suggestedPromptIds": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            },
                            "queueId": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queuePosition": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueStatus": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "enum": [
                                "queued",
                                "in_progress",
                                "completed",
                                "failed",
                                "cancelled"
                              ]
                            },
                            "queuePriority": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queuedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueStartedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueCompletedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "queueAgentId": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "queueErrorMessage": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "estimatedProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "actualProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/stats": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/QueueStats"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/:projectId/queues-with-stats": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QueueWithStats"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/next-task": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agentId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/GetNextTaskResponse"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/:projectId/unqueued-items": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tickets": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Ticket"
                              },
                              {
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "exclusiveMinimum": 0
                                  },
                                  "projectId": {
                                    "type": "integer",
                                    "exclusiveMinimum": 0
                                  },
                                  "title": {
                                    "type": "string"
                                  },
                                  "overview": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "open",
                                      "in_progress",
                                      "closed"
                                    ]
                                  },
                                  "priority": {
                                    "type": "string",
                                    "enum": [
                                      "low",
                                      "normal",
                                      "high"
                                    ]
                                  },
                                  "suggestedFileIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "suggestedAgentIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "suggestedPromptIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  },
                                  "queueId": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queuePosition": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queueStatus": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "enum": [
                                      "queued",
                                      "in_progress",
                                      "completed",
                                      "failed",
                                      "cancelled"
                                    ]
                                  },
                                  "queuePriority": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queuedAt": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queueStartedAt": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queueCompletedAt": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queueAgentId": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "queueErrorMessage": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "estimatedProcessingTime": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "actualProcessingTime": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "tasks": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/TicketTask"
                              },
                              {
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "exclusiveMinimum": 0
                                  },
                                  "ticketId": {
                                    "type": "integer",
                                    "exclusiveMinimum": 0
                                  },
                                  "content": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "suggestedFileIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "done": {
                                    "type": "boolean"
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "pending",
                                      "in_progress",
                                      "completed",
                                      "cancelled"
                                    ]
                                  },
                                  "orderIndex": {
                                    "type": "number"
                                  },
                                  "estimatedHours": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "dependencies": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  },
                                  "tags": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "agentId": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "suggestedPromptIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "number"
                                    }
                                  },
                                  "queueId": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queuePosition": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queueStatus": {
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "enum": [
                                      "queued",
                                      "in_progress",
                                      "completed",
                                      "failed",
                                      "cancelled"
                                    ]
                                  },
                                  "queuePriority": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queuedAt": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queueStartedAt": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queueCompletedAt": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "queueAgentId": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "queueErrorMessage": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "estimatedProcessingTime": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "actualProcessingTime": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "required": [
                        "tickets",
                        "tasks"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/pause": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/resume": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/:itemType/:itemId/complete": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "ticket",
                "task"
              ]
            },
            "required": true,
            "name": "itemType",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "itemId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticketId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "completed": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "completed"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/:itemType/:itemId/fail": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "ticket",
                "task"
              ]
            },
            "required": true,
            "name": "itemType",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "itemId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "errorMessage": {
                    "type": "string"
                  },
                  "ticketId": {
                    "type": "number"
                  }
                },
                "required": [
                  "errorMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "failed": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "failed"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/:itemType/:itemId/move": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "ticket",
                "task"
              ]
            },
            "required": true,
            "name": "itemType",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "itemId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetQueueId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "ticketId": {
                    "type": "number"
                  }
                },
                "required": [
                  "targetQueueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "moved": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "moved"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/enqueue-ticket": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticketId": {
                    "type": "number"
                  },
                  "priority": {
                    "type": "number"
                  }
                },
                "required": [
                  "ticketId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/QueueItem"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "exclusiveMinimum": 0
                              },
                              "queueId": {
                                "type": "integer",
                                "exclusiveMinimum": 0
                              },
                              "itemType": {
                                "type": "string",
                                "enum": [
                                  "ticket",
                                  "task",
                                  "chat",
                                  "prompt"
                                ]
                              },
                              "itemId": {
                                "type": "integer",
                                "exclusiveMinimum": 0
                              },
                              "priority": {
                                "type": "number",
                                "default": 0
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "queued",
                                  "in_progress",
                                  "completed",
                                  "failed",
                                  "cancelled"
                                ]
                              },
                              "agentId": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "errorMessage": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "estimatedProcessingTime": {
                                "type": [
                                  "number",
                                  "null"
                                ]
                              },
                              "actualProcessingTime": {
                                "type": [
                                  "number",
                                  "null"
                                ]
                              },
                              "startedAt": {
                                "type": [
                                  "number",
                                  "null"
                                ]
                              },
                              "completedAt": {
                                "type": [
                                  "number",
                                  "null"
                                ]
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "updatedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "queueId",
                              "itemType",
                              "itemId",
                              "status",
                              "agentId",
                              "errorMessage",
                              "estimatedProcessingTime",
                              "actualProcessingTime",
                              "startedAt",
                              "completedAt",
                              "createdAt",
                              "updatedAt"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/items": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "queueItem": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/QueueItem"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "exclusiveMinimum": 0
                                  },
                                  "queueId": {
                                    "type": "integer",
                                    "exclusiveMinimum": 0
                                  },
                                  "itemType": {
                                    "type": "string",
                                    "enum": [
                                      "ticket",
                                      "task",
                                      "chat",
                                      "prompt"
                                    ]
                                  },
                                  "itemId": {
                                    "type": "integer",
                                    "exclusiveMinimum": 0
                                  },
                                  "priority": {
                                    "type": "number",
                                    "default": 0
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "queued",
                                      "in_progress",
                                      "completed",
                                      "failed",
                                      "cancelled"
                                    ]
                                  },
                                  "agentId": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "errorMessage": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "estimatedProcessingTime": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "actualProcessingTime": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "startedAt": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "completedAt": {
                                    "type": [
                                      "number",
                                      "null"
                                    ]
                                  },
                                  "createdAt": {
                                    "type": "number"
                                  },
                                  "updatedAt": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "id",
                                  "queueId",
                                  "itemType",
                                  "itemId",
                                  "status",
                                  "agentId",
                                  "errorMessage",
                                  "estimatedProcessingTime",
                                  "actualProcessingTime",
                                  "startedAt",
                                  "completedAt",
                                  "createdAt",
                                  "updatedAt"
                                ]
                              }
                            ]
                          },
                          "ticket": {},
                          "task": {}
                        },
                        "required": [
                          "queueItem"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticketId": {
                    "type": "number"
                  },
                  "taskId": {
                    "type": "number"
                  },
                  "priority": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/QueueItem"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "queueId": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "itemType": {
                              "type": "string",
                              "enum": [
                                "ticket",
                                "task",
                                "chat",
                                "prompt"
                              ]
                            },
                            "itemId": {
                              "type": "integer",
                              "exclusiveMinimum": 0
                            },
                            "priority": {
                              "type": "number",
                              "default": 0
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "queued",
                                "in_progress",
                                "completed",
                                "failed",
                                "cancelled"
                              ]
                            },
                            "agentId": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "errorMessage": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "estimatedProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "actualProcessingTime": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "startedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "completedAt": {
                              "type": [
                                "number",
                                "null"
                              ]
                            },
                            "createdAt": {
                              "type": "number"
                            },
                            "updatedAt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "id",
                            "queueId",
                            "itemType",
                            "itemId",
                            "status",
                            "agentId",
                            "errorMessage",
                            "estimatedProcessingTime",
                            "actualProcessingTime",
                            "startedAt",
                            "completedAt",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/batch-enqueue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchEnqueueBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/QueueItem"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "exclusiveMinimum": 0
                              },
                              "queueId": {
                                "type": "integer",
                                "exclusiveMinimum": 0
                              },
                              "itemType": {
                                "type": "string",
                                "enum": [
                                  "ticket",
                                  "task",
                                  "chat",
                                  "prompt"
                                ]
                              },
                              "itemId": {
                                "type": "integer",
                                "exclusiveMinimum": 0
                              },
                              "priority": {
                                "type": "number",
                                "default": 0
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "queued",
                                  "in_progress",
                                  "completed",
                                  "failed",
                                  "cancelled"
                                ]
                              },
                              "agentId": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "errorMessage": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "estimatedProcessingTime": {
                                "type": [
                                  "number",
                                  "null"
                                ]
                              },
                              "actualProcessingTime": {
                                "type": [
                                  "number",
                                  "null"
                                ]
                              },
                              "startedAt": {
                                "type": [
                                  "number",
                                  "null"
                                ]
                              },
                              "completedAt": {
                                "type": [
                                  "number",
                                  "null"
                                ]
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "updatedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "queueId",
                              "itemType",
                              "itemId",
                              "status",
                              "agentId",
                              "errorMessage",
                              "estimatedProcessingTime",
                              "actualProcessingTime",
                              "startedAt",
                              "completedAt",
                              "createdAt",
                              "updatedAt"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/timeline": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/QueueTimeline"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/{id}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get a queue by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Queues"
        ],
        "summary": "Update a queue by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueueBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Queues"
        ],
        "summary": "Delete a queue by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "deleted"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/keys": {
      "post": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Add a new API key for an AI provider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderKey"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider key created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "List all configured provider keys (excluding secrets)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/keys/{id}": {
      "get": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Get a provider key by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Update a provider key's details",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Delete a provider key by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Update a provider key by ID (basic)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/test": {
      "post": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Test a single provider connection",
        "description": "Test the connection to a specific AI provider and retrieve available models",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestProviderApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/batch-test": {
      "post": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Test multiple providers at once",
        "description": "Test connections to multiple AI providers in parallel or sequentially",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchTestProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchTestProviderApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/health": {
      "get": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Get health status of all configured providers",
        "description": "Retrieve health status information for all configured AI providers",
        "parameters": [
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "example": "true"
            },
            "required": false,
            "name": "refresh",
            "in": "query",
            "description": "Force fresh health check instead of using cached data"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderHealthStatusListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/settings": {
      "put": {
        "tags": [
          "Provider Settings"
        ],
        "summary": "Update provider settings (URLs for local providers)",
        "description": "Update custom URLs for local AI providers like Ollama and LMStudio",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ollamaUrl": {
                    "type": "string"
                  },
                  "lmstudioUrl": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/keys/validate-custom": {
      "post": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Validate a custom OpenAI-compatible provider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateCustomProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateCustomProviderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/chat": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Chat completion (Vercel AI SDK compatible, streaming)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiSdkChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated AI response stream.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Stream of response tokens (Vercel AI SDK format)"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid chat request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers": {
      "get": {
        "tags": [
          "AI"
        ],
        "summary": "Get all available providers including custom ones",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvidersListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/stream": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate text using a specified model and prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated AI response stream.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Stream of response tokens (Vercel AI SDK format)"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/text": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate text using a specified model and prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateTextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/structured": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate structured data based on a predefined schema key and user input",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateStructuredRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateStructuredResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/models": {
      "get": {
        "tags": [
          "AI"
        ],
        "summary": "List available AI models for a provider",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Filter models by provider",
              "example": "openai"
            },
            "required": false,
            "description": "Filter models by provider",
            "name": "provider",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "description": "Include disabled models in the response",
              "example": false
            },
            "required": false,
            "description": "Include disabled models in the response",
            "name": "includeDisabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/_debug-config": {
      "get": {
        "tags": [
          "AI"
        ],
        "summary": "Debug provider key resolution (no secrets)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "providerKeysConfig": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "boolean"
                          }
                        },
                        "envFallback": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "boolean"
                          }
                        },
                        "keys": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number"
                              },
                              "provider": {
                                "type": "string"
                              },
                              "normalized": {
                                "type": "string"
                              },
                              "isDefault": {
                                "type": "boolean"
                              },
                              "decrypted": {
                                "type": "boolean"
                              },
                              "createdAt": {
                                "type": "number"
                              },
                              "updatedAt": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "provider",
                              "normalized",
                              "decrypted",
                              "createdAt",
                              "updatedAt"
                            ]
                          }
                        }
                      },
                      "required": [
                        "providerKeysConfig",
                        "envFallback",
                        "keys"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/generate/text": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Generate text (one-off, non-streaming)",
        "description": "Generates text based on a prompt using the specified provider and model. Does not use chat history or save messages.",
        "requestBody": {
          "required": true,
          "description": "Prompt, provider, model, and options for text generation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateTextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/provider-settings": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Update provider settings",
        "description": "Updates custom URLs for local AI providers like Ollama and LMStudio",
        "requestBody": {
          "required": true,
          "description": "Provider settings to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/OperationSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UpdateProviderSettings"
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/flow": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get complete flow data for a project",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/flow/items": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get all flow items as a flat list",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowItemsList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/flow/unqueued": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get all unqueued tickets and tasks",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnqueuedItems"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/queues": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a queue (Flow)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string"
                  },
                  "maxParallelItems": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 10
                  }
                },
                "required": [
                  "projectId",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {}
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/flow/queues": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "List queues for a project (Flow)",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/flow/queues-with-stats": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get queues with stats (Flow)",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/queues/{queueId}/items": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get items in a queue (Flow)",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "queueId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItems"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/queues/{queueId}/stats": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get queue statistics (Flow)",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalItems": {
                      "type": "number"
                    },
                    "queuedItems": {
                      "type": "number"
                    },
                    "inProgressItems": {
                      "type": "number"
                    },
                    "completedItems": {
                      "type": "number"
                    },
                    "failedItems": {
                      "type": "number"
                    },
                    "currentAgents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "totalItems",
                    "queuedItems",
                    "inProgressItems",
                    "completedItems",
                    "failedItems",
                    "currentAgents"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/queues/{queueId}": {
      "patch": {
        "tags": [
          "Flow"
        ],
        "summary": "Update queue (Flow)",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "maxParallelItems": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 10
                  },
                  "isActive": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "summary": "Delete queue (Flow)",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deleted": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "deleted"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tickets/{ticketId}/enqueue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Enqueue a ticket to a queue",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  },
                  "includeTasks": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Ticket"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "projectId": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "title": {
                          "type": "string"
                        },
                        "overview": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "open",
                            "in_progress",
                            "closed"
                          ]
                        },
                        "priority": {
                          "type": "string",
                          "enum": [
                            "low",
                            "normal",
                            "high"
                          ]
                        },
                        "suggestedFileIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "suggestedAgentIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "suggestedPromptIds": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "queueId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuePosition": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStatus": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStartedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueCompletedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueAgentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "queueErrorMessage": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "estimatedProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "actualProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tasks/{taskId}/enqueue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Enqueue a task to a queue",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "taskId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TicketTask"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "ticketId": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "suggestedFileIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "done": {
                          "type": "boolean"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "in_progress",
                            "completed",
                            "cancelled"
                          ]
                        },
                        "orderIndex": {
                          "type": "number"
                        },
                        "estimatedHours": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "dependencies": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "agentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "suggestedPromptIds": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "queueId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuePosition": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStatus": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStartedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueCompletedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueAgentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "queueErrorMessage": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "estimatedProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "actualProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tickets/{ticketId}/dequeue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Remove a ticket from its queue",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "includeTasks",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Ticket"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "projectId": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "title": {
                          "type": "string"
                        },
                        "overview": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "open",
                            "in_progress",
                            "closed"
                          ]
                        },
                        "priority": {
                          "type": "string",
                          "enum": [
                            "low",
                            "normal",
                            "high"
                          ]
                        },
                        "suggestedFileIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "suggestedAgentIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "suggestedPromptIds": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "queueId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuePosition": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStatus": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStartedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueCompletedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueAgentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "queueErrorMessage": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "estimatedProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "actualProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tasks/{taskId}/dequeue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Remove a task from its queue",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "taskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TicketTask"
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "ticketId": {
                          "type": "integer",
                          "exclusiveMinimum": 0
                        },
                        "content": {
                          "type": "string"
                        },
                        "description": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "suggestedFileIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "done": {
                          "type": "boolean"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "in_progress",
                            "completed",
                            "cancelled"
                          ]
                        },
                        "orderIndex": {
                          "type": "number"
                        },
                        "estimatedHours": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "dependencies": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "agentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "suggestedPromptIds": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "queueId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuePosition": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStatus": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "queued",
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled"
                          ]
                        },
                        "queuePriority": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queuedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueStartedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueCompletedAt": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "queueAgentId": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "queueErrorMessage": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "estimatedProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "actualProcessingTime": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "createdAt": {
                          "type": "number"
                        },
                        "updatedAt": {
                          "type": "number"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/move": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Move an item between queues or to unqueued",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "targetQueueId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  },
                  "includeTasks": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "targetQueueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/reorder": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Persist new order for items in a queue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "itemType": {
                          "type": "string",
                          "enum": [
                            "ticket",
                            "task"
                          ]
                        },
                        "itemId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        },
                        "ticketId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "itemType",
                        "itemId"
                      ]
                    }
                  }
                },
                "required": [
                  "queueId",
                  "items"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/start": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as being processed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "agentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "agentId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/complete": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as completed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "processingTime": {
                    "type": "number"
                  }
                },
                "required": [
                  "itemType",
                  "itemId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/fail": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as failed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "errorMessage": {
                    "type": "string"
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "errorMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/bulk-move": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Move multiple items to a queue or unqueued",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "itemType": {
                          "type": "string",
                          "enum": [
                            "ticket",
                            "task"
                          ]
                        },
                        "itemId": {
                          "type": [
                            "number",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "itemType",
                        "itemId"
                      ]
                    }
                  },
                  "targetQueueId": {
                    "type": [
                      "number",
                      "null"
                    ]
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  }
                },
                "required": [
                  "items",
                  "targetQueueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "movedCount": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "success",
                    "movedCount"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/browse-directory": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Browse directories on the file system",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowseDirectoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowseDirectoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/servers": {
      "post": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Create MCP server configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Display name for the MCP server",
                    "example": "File System Tools"
                  },
                  "command": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Command to start the MCP server",
                    "example": "npx @modelcontextprotocol/server-filesystem"
                  },
                  "args": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": [],
                    "description": "Command line arguments for the server",
                    "example": [
                      "--root",
                      "/path/to/project"
                    ]
                  },
                  "env": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "default": {},
                    "description": "Environment variables for the server",
                    "example": {
                      "NODE_ENV": "production"
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether the server is enabled",
                    "example": true
                  },
                  "autoStart": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to auto-start the server when project opens",
                    "example": false
                  }
                },
                "required": [
                  "name",
                  "command"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "201": {
            "description": "MCP server configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "List all MCP server configurations for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/servers/{serverId}": {
      "get": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Get MCP server configuration by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Update MCP server configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMCPServerConfigBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Delete MCP server configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools": {
      "get": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "List available MCP tools",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "serverId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "description"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools/execute": {
      "post": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "Execute an MCP tool",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MCPToolExecutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPToolExecutionResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources": {
      "get": {
        "tags": [
          "MCP",
          "Resources"
        ],
        "summary": "List available MCP resources",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPResourceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources/read": {
      "post": {
        "tags": [
          "MCP",
          "Resources"
        ],
        "summary": "Read MCP resource content",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uri": {
                    "type": "string"
                  },
                  "serverId": {
                    "type": "string"
                  }
                },
                "required": [
                  "uri"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "uri": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "mimeType": {
                          "type": "string"
                        },
                        "content": {}
                      },
                      "required": [
                        "uri",
                        "name",
                        "description",
                        "mimeType"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/builtin-tools": {
      "get": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "Get list of built-in MCP tools",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "category": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "description",
                          "category"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/start": {
      "post": {
        "tags": [
          "MCP",
          "Execution"
        ],
        "summary": "Start an MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/stop": {
      "post": {
        "tags": [
          "MCP",
          "Execution"
        ],
        "summary": "Stop an MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP usage analytics",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "start",
                            "end"
                          ]
                        },
                        "servers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "serverId": {
                                "type": "string"
                              },
                              "totalRequests": {
                                "type": "number"
                              },
                              "successRate": {
                                "type": "number"
                              },
                              "avgResponseTime": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "serverId",
                              "totalRequests",
                              "successRate",
                              "avgResponseTime"
                            ]
                          }
                        },
                        "tools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "executions": {
                                "type": "number"
                              },
                              "avgDuration": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "name",
                              "executions",
                              "avgDuration"
                            ]
                          }
                        },
                        "totalRequests": {
                          "type": "number"
                        },
                        "totalErrors": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "servers",
                        "tools",
                        "totalRequests",
                        "totalErrors"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get statistics for a specific MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "serverId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "connected",
                            "disconnected",
                            "error"
                          ]
                        },
                        "uptime": {
                          "type": "number"
                        },
                        "totalRequests": {
                          "type": "number"
                        },
                        "successRate": {
                          "type": "number"
                        },
                        "avgResponseTime": {
                          "type": "number"
                        },
                        "lastActivity": {
                          "type": "string"
                        },
                        "capabilities": {}
                      },
                      "required": [
                        "serverId",
                        "status",
                        "uptime",
                        "totalRequests",
                        "successRate",
                        "avgResponseTime",
                        "lastActivity"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get tool usage statistics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ],
              "default": "day"
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "default": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "string"
                        },
                        "topTools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "count": {
                                "type": "number"
                              },
                              "avgExecutionTime": {
                                "type": "number"
                              },
                              "successRate": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "name",
                              "count",
                              "avgExecutionTime",
                              "successRate"
                            ]
                          }
                        },
                        "totalExecutions": {
                          "type": "number"
                        },
                        "totalErrors": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "topTools",
                        "totalExecutions",
                        "totalErrors"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get resource access statistics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ],
              "default": "day"
            },
            "required": false,
            "name": "period",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "string"
                        },
                        "topResources": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "uri": {
                                "type": "string"
                              },
                              "accessCount": {
                                "type": "number"
                              },
                              "avgResponseTime": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "uri",
                              "accessCount",
                              "avgResponseTime"
                            ]
                          }
                        },
                        "totalAccesses": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "topResources",
                        "totalAccesses"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics/report": {
      "post": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Generate MCP usage report",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "json",
                      "csv",
                      "pdf"
                    ],
                    "default": "json"
                  },
                  "includeServerDetails": {
                    "type": "boolean",
                    "default": true
                  },
                  "includeToolDetails": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": [
                  "startDate",
                  "endDate"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "reportId": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string"
                        },
                        "period": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "start",
                            "end"
                          ]
                        },
                        "format": {
                          "type": "string"
                        },
                        "content": {},
                        "downloadUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "reportId",
                        "generatedAt",
                        "period",
                        "format"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP session statistics",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activeSessions": {
                          "type": "number"
                        },
                        "totalSessionsToday": {
                          "type": "number"
                        },
                        "avgSessionDuration": {
                          "type": "number"
                        },
                        "peakConcurrentSessions": {
                          "type": "number"
                        },
                        "sessionsByServer": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "activeSessions",
                        "totalSessionsToday",
                        "avgSessionDuration",
                        "peakConcurrentSessions",
                        "sessionsByServer"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics/performance": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP performance metrics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "latency",
                "throughput",
                "error_rate"
              ]
            },
            "required": false,
            "name": "metricType",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "avg",
                "min",
                "max",
                "p50",
                "p95",
                "p99"
              ],
              "default": "avg"
            },
            "required": false,
            "name": "aggregation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "metrics": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string"
                              },
                              "value": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "timestamp",
                              "value",
                              "type"
                            ]
                          }
                        },
                        "aggregation": {
                          "type": "string"
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "current": {
                              "type": "number"
                            },
                            "trend": {
                              "type": "string",
                              "enum": [
                                "up",
                                "down",
                                "stable"
                              ]
                            },
                            "changePercent": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "current",
                            "trend",
                            "changePercent"
                          ]
                        }
                      },
                      "required": [
                        "metrics",
                        "aggregation",
                        "summary"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/analytics/overview": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP analytics overview for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalExecutions": {
                          "type": "number"
                        },
                        "uniqueTools": {
                          "type": "number"
                        },
                        "overallSuccessRate": {
                          "type": "number"
                        },
                        "avgExecutionTime": {
                          "type": "number"
                        },
                        "topTools": {
                          "type": "array",
                          "items": {}
                        },
                        "recentErrors": {
                          "type": "array",
                          "items": {}
                        },
                        "executionTrend": {
                          "type": "array",
                          "items": {}
                        }
                      },
                      "required": [
                        "totalExecutions",
                        "uniqueTools",
                        "overallSuccessRate",
                        "avgExecutionTime",
                        "topTools",
                        "recentErrors",
                        "executionTrend"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/analytics/statistics": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP tool statistics for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/analytics/timeline": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP execution timeline for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/analytics/error-patterns": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP error patterns for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {}
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/analytics/executions": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP tool executions for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolName",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "success",
                "error",
                "timeout"
              ]
            },
            "required": false,
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "startedAt",
                "duration",
                "toolName"
              ]
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "executions": {
                          "type": "array",
                          "items": {}
                        },
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "pageSize": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "executions",
                        "total",
                        "page",
                        "pageSize"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/connection": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP server connection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "MCP server URL to test"
                  },
                  "timeout": {
                    "type": "integer",
                    "exclusiveMinimum": 0,
                    "default": 5000
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "connected": {
                          "type": "boolean"
                        },
                        "responseTime": {
                          "type": "number"
                        },
                        "error": {
                          "type": "string"
                        },
                        "serverInfo": {}
                      },
                      "required": [
                        "connected",
                        "responseTime"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/initialize": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP initialize handshake",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "MCP server URL to test"
                  },
                  "capabilities": {
                    "type": "object",
                    "properties": {
                      "tools": {
                        "type": "boolean",
                        "default": true
                      },
                      "resources": {
                        "type": "boolean",
                        "default": true
                      },
                      "prompts": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "initialized": {
                          "type": "boolean"
                        },
                        "sessionId": {
                          "type": "string"
                        },
                        "capabilities": {},
                        "serverInfo": {},
                        "error": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "initialized"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/tool": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP tool execution",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "toolName": {
                    "type": "string"
                  },
                  "arguments": {
                    "type": "object",
                    "additionalProperties": {},
                    "default": {}
                  },
                  "validateOnly": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "toolName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "executed": {
                          "type": "boolean"
                        },
                        "result": {},
                        "executionTime": {
                          "type": "number"
                        },
                        "error": {
                          "type": "string"
                        },
                        "validationErrors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "executed",
                        "executionTime"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/validate-config": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Validate MCP server configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "checkConnectivity": {
                    "type": "boolean",
                    "default": true
                  },
                  "checkCapabilities": {
                    "type": "boolean",
                    "default": true
                  },
                  "checkTools": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": [
                  "serverId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "valid": {
                          "type": "boolean"
                        },
                        "checks": {
                          "type": "object",
                          "properties": {
                            "connectivity": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "passed"
                              ]
                            },
                            "capabilities": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "details": {}
                              },
                              "required": [
                                "passed"
                              ]
                            },
                            "tools": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "availableTools": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "passed"
                              ]
                            }
                          }
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "warnings": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "valid",
                        "checks"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/debug": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Debug MCP communication",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "list-tools",
                      "list-resources",
                      "get-capabilities",
                      "raw-request"
                    ]
                  },
                  "rawRequest": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string"
                      },
                      "params": {}
                    },
                    "required": [
                      "method"
                    ]
                  }
                },
                "required": [
                  "serverId",
                  "action"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "request": {},
                        "response": {},
                        "timing": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            },
                            "duration": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "start",
                            "end",
                            "duration"
                          ]
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "serverId": {
                              "type": "string"
                            },
                            "action": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "serverId",
                            "action"
                          ]
                        }
                      },
                      "required": [
                        "timing",
                        "metadata"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Create a new MCP session",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "clientInfo": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "version"
                    ]
                  },
                  "capabilities": {
                    "type": "object",
                    "properties": {
                      "tools": {
                        "type": "boolean"
                      },
                      "resources": {
                        "type": "boolean"
                      },
                      "prompts": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "required": [
                  "serverId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "serverId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "idle",
                        "disconnected"
                      ]
                    },
                    "startedAt": {
                      "type": "string"
                    },
                    "lastActivity": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "clientInfo": {},
                        "serverInfo": {},
                        "capabilities": {}
                      }
                    }
                  },
                  "required": [
                    "id",
                    "serverId",
                    "status",
                    "startedAt",
                    "lastActivity"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "serverId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "idle",
                            "disconnected"
                          ]
                        },
                        "startedAt": {
                          "type": "string"
                        },
                        "lastActivity": {
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "clientInfo": {},
                            "serverInfo": {},
                            "capabilities": {}
                          }
                        }
                      },
                      "required": [
                        "id",
                        "serverId",
                        "status",
                        "startedAt",
                        "lastActivity"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "List all MCP sessions",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "idle",
                "disconnected",
                "all"
              ],
              "default": "active"
            },
            "required": false,
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "serverId": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "active",
                              "idle",
                              "disconnected"
                            ]
                          },
                          "startedAt": {
                            "type": "string"
                          },
                          "lastActivity": {
                            "type": "string"
                          },
                          "metadata": {
                            "type": "object",
                            "properties": {
                              "clientInfo": {},
                              "serverInfo": {},
                              "capabilities": {}
                            }
                          }
                        },
                        "required": [
                          "id",
                          "serverId",
                          "status",
                          "startedAt",
                          "lastActivity"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}": {
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Get MCP session by ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "serverId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "idle",
                            "disconnected"
                          ]
                        },
                        "startedAt": {
                          "type": "string"
                        },
                        "lastActivity": {
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "clientInfo": {},
                            "serverInfo": {},
                            "capabilities": {}
                          }
                        }
                      },
                      "required": [
                        "id",
                        "serverId",
                        "status",
                        "startedAt",
                        "lastActivity"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/close": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Close an MCP session",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string"
                  },
                  "force": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/refresh": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Refresh/keep-alive an MCP session",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "serverId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "idle",
                            "disconnected"
                          ]
                        },
                        "startedAt": {
                          "type": "string"
                        },
                        "lastActivity": {
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "clientInfo": {},
                            "serverInfo": {},
                            "capabilities": {}
                          }
                        }
                      },
                      "required": [
                        "id",
                        "serverId",
                        "status",
                        "startedAt",
                        "lastActivity"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/history": {
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Get session command history",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "default": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionId": {
                          "type": "string"
                        },
                        "history": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "request",
                                  "response",
                                  "notification"
                                ]
                              },
                              "method": {
                                "type": "string"
                              },
                              "params": {},
                              "result": {},
                              "error": {}
                            },
                            "required": [
                              "timestamp",
                              "type"
                            ]
                          }
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "sessionId",
                        "history",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/cleanup": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Cleanup idle MCP sessions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "idleThresholdMinutes": {
                    "type": "integer",
                    "exclusiveMinimum": 0,
                    "default": 30
                  },
                  "dryRun": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionsChecked": {
                          "type": "number"
                        },
                        "sessionsClosed": {
                          "type": "number"
                        },
                        "sessionIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dryRun": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "sessionsChecked",
                        "sessionsClosed",
                        "sessionIds",
                        "dryRun"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/config/locations": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigLocationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/config/merged": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/config/expanded": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/config": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Update project MCP configuration",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mcpEnabled": {
                    "type": "boolean"
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated config",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "projectConfig": {
                          "type": "object",
                          "properties": {
                            "projectId": {
                              "type": "number"
                            },
                            "projectName": {
                              "type": "string"
                            },
                            "mcpEnabled": {
                              "type": "boolean"
                            },
                            "installedTools": {
                              "type": "array",
                              "items": {}
                            },
                            "customInstructions": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "projectId",
                            "projectName",
                            "mcpEnabled",
                            "installedTools"
                          ]
                        }
                      },
                      "required": [
                        "projectConfig"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/config/save-to-location": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "properties": {
                      "mcpServers": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "stdio",
                                "http"
                              ],
                              "default": "stdio"
                            },
                            "command": {
                              "type": "string"
                            },
                            "args": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "env": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "timeout": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "command"
                          ]
                        }
                      },
                      "inputs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "promptString",
                                "promptNumber",
                                "promptBoolean"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "default": {},
                            "password": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "type",
                            "id",
                            "description"
                          ]
                        }
                      },
                      "extends": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "location": {
                    "type": "string"
                  }
                },
                "required": [
                  "config",
                  "location"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/config/default-for-location": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "location",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/status": {
      "get": {
        "tags": [
          "Git",
          "Status"
        ],
        "summary": "Get git status for a project",
        "description": "Retrieves the current git status including staged, unstaged, and untracked files",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": false,
              "description": "Force refresh the git status (bypass cache)"
            },
            "required": false,
            "description": "Force refresh the git status (bypass cache)",
            "name": "refresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/stage": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Stage files for commit",
        "description": "Stages specified files or patterns for the next commit",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StageFilesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/unstage": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Unstage files from commit",
        "description": "Removes specified files from the staging area",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstageFilesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/stage-all": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Stage all changes",
        "description": "Stages all modified and untracked files for commit",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All changes staged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/unstage-all": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Unstage all changes",
        "description": "Removes all files from the staging area",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All changes unstaged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/commit": {
      "post": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Create a new commit",
        "description": "Creates a new commit with staged changes",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/log": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get commit history",
        "description": "Retrieves the commit history for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": [
                "number",
                "null"
              ],
              "default": 50
            },
            "required": false,
            "name": "maxCount",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "number",
                "null"
              ],
              "default": 0
            },
            "required": false,
            "name": "skip",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "author",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "since",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "until",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "grep",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitLogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/log-enhanced": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get enhanced commit history",
        "description": "Retrieves detailed commit history with additional metadata",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": [
                "number",
                "null"
              ],
              "default": 50
            },
            "required": false,
            "name": "maxCount",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "number",
                "null"
              ],
              "default": 0
            },
            "required": false,
            "name": "skip",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "author",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "since",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "until",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "grep",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitLogEnhancedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/commits/{commitHash}": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get commit details",
        "description": "Retrieves detailed information about a specific commit",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commitHash",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/diff": {
      "get": {
        "tags": [
          "Git",
          "Diff"
        ],
        "summary": "Get file diff",
        "description": "Retrieves the diff for a specific file",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Path to the file to diff"
            },
            "required": true,
            "description": "Path to the file to diff",
            "name": "filePath",
            "in": "query"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": false,
              "description": "Whether to get the cached/staged diff"
            },
            "required": false,
            "description": "Whether to get the cached/staged diff",
            "name": "cached",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitDiffResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/branches": {
      "get": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "List all branches",
        "description": "Retrieves all local and remote branches for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Create a new branch",
        "description": "Creates a new branch from the specified starting point",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitCreateBranchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "201": {
            "description": "Branch created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/branches-enhanced": {
      "get": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "List branches with enhanced information",
        "description": "Retrieves branches with additional metadata like ahead/behind counts",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchListEnhancedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/branches/switch": {
      "post": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Switch to a different branch",
        "description": "Switches the working directory to the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitSwitchBranchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/branches/{branchName}": {
      "delete": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Delete a branch",
        "description": "Deletes the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "branchName",
            "in": "path"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": false,
              "description": "Force delete even if branch has unmerged changes"
            },
            "required": false,
            "description": "Force delete even if branch has unmerged changes",
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/stash": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get list of all stashes",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StashListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Stash current changes",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Git",
          "Stash"
        ],
        "summary": "Drop a stash",
        "description": "Removes the specified stash from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stashRef": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/stash/apply": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Apply a stash without removing it from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/stash/pop": {
      "post": {
        "tags": [
          "Git",
          "Stash"
        ],
        "summary": "Pop a stash",
        "description": "Applies the specified stash and removes it from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stashRef": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/worktrees": {
      "get": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "List all worktrees",
        "description": "Retrieves the list of all worktrees for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorktreeListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Add a new worktree",
        "description": "Creates a new worktree for the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitWorktreeAddRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Worktree added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Remove a worktree",
        "description": "Removes the specified worktree",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitWorktreeRemoveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/worktrees/lock": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Lock a worktree",
        "description": "Locks the specified worktree to prevent deletion",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitWorktreeLockRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree locked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/worktrees/unlock": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Unlock a worktree",
        "description": "Unlocks the specified worktree",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "worktreePath": {
                    "type": "string"
                  }
                },
                "required": [
                  "worktreePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree unlocked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/worktrees/prune": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Prune worktrees",
        "description": "Removes worktree entries that no longer exist",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": false,
              "description": "Perform a dry run without actually pruning"
            },
            "required": false,
            "description": "Perform a dry run without actually pruning",
            "name": "dryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PruneWorktreesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/remotes": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get all configured remotes for a git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/push": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Push changes to a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitPushRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/fetch": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Fetch updates from a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remote": {
                    "type": "string",
                    "default": "origin"
                  },
                  "prune": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/pull": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Pull changes from a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remote": {
                    "type": "string",
                    "default": "origin"
                  },
                  "branch": {
                    "type": "string"
                  },
                  "rebase": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/tags": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get all tags for a git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Create a new tag in the git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "ref": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/git/reset": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Reset current HEAD to a specified state",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitResetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/project-tabs/{tabId}/generate-name": {
      "post": {
        "tags": [
          "Project Tabs"
        ],
        "operationId": "generateProjectTabName",
        "summary": "Generate an AI-powered name for a project tab",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "tabId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "tabData": {
                    "type": "object",
                    "properties": {
                      "selectedFiles": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "userPrompt": {
                        "type": "string"
                      }
                    }
                  },
                  "existingNames": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "projectId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "success",
                            "fallback"
                          ]
                        },
                        "generatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "status",
                        "generatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/agent-files/detect": {
      "get": {
        "tags": [
          "Agent Files"
        ],
        "description": "Detect agent instruction files for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "projectFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "global",
                                  "project"
                                ]
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "writable": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "metadata": {
                                "type": "object",
                                "additionalProperties": {}
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "path",
                              "scope",
                              "exists",
                              "writable"
                            ]
                          }
                        },
                        "globalFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "global",
                                  "project"
                                ]
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "writable": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "metadata": {
                                "type": "object",
                                "additionalProperties": {}
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "path",
                              "scope",
                              "exists",
                              "writable"
                            ]
                          }
                        },
                        "suggestedFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "suggestedPath": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "suggestedPath"
                            ]
                          }
                        }
                      },
                      "required": [
                        "projectFiles",
                        "globalFiles",
                        "suggestedFiles"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/agent-files/update": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Update an agent file with Promptliano instructions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string"
                  },
                  "includeExamples": {
                    "type": "boolean"
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "backedUp": {
                          "type": "boolean"
                        },
                        "filePath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "filePath"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/agent-files/remove-instructions": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Remove Promptliano instructions from an agent file",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/agent-files/status": {
      "get": {
        "tags": [
          "Agent Files"
        ],
        "description": "Check status of agent files and instruction versions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "string"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string"
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "isOutdated": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "path",
                              "exists",
                              "hasInstructions",
                              "isOutdated"
                            ]
                          }
                        }
                      },
                      "required": [
                        "currentVersion",
                        "files"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/agent-files/create": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Create a new agent file with instructions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "includeExamples": {
                    "type": "boolean"
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "filePath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "filePath"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/installation/detect": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Detect installed MCP-compatible tools",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectToolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/installation/status": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Get MCP installation and connection status for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstallationStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/installation/install": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install Promptliano MCP for a specific tool",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "debug": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstallResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/installation/uninstall": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Uninstall Promptliano MCP for a specific tool",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UninstallResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/status": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Get global MCP connection status",
        "responses": {
          "200": {
            "description": "Global MCP status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalSessions": {
                          "type": "number"
                        },
                        "projectSessions": {
                          "type": "number"
                        },
                        "projectStatuses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "projectId": {
                                "type": "number"
                              },
                              "connected": {
                                "type": "boolean"
                              },
                              "sessionId": {
                                "type": "string"
                              },
                              "lastActivity": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "projectId",
                              "connected"
                            ]
                          }
                        }
                      },
                      "required": [
                        "totalSessions",
                        "projectSessions",
                        "projectStatuses"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/installation/batch-install": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install Promptliano MCP for multiple tools at once",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tools": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "claude-desktop",
                        "vscode",
                        "cursor",
                        "continue",
                        "claude-code",
                        "windsurf"
                      ]
                    }
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "debug": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "tools"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Batch installation results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tool": {
                                "type": "string"
                              },
                              "success": {
                                "type": "boolean"
                              },
                              "message": {
                                "type": "string"
                              },
                              "configPath": {
                                "type": "string"
                              },
                              "backedUp": {
                                "type": "boolean"
                              },
                              "backupPath": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "tool",
                              "success",
                              "message"
                            ]
                          }
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number"
                            },
                            "succeeded": {
                              "type": "number"
                            },
                            "failed": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "total",
                            "succeeded",
                            "failed"
                          ]
                        }
                      },
                      "required": [
                        "results",
                        "summary"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/mcp/install-project-config": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install MCP configuration at the project level (.mcp.json)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1716537600000,
              "description": "Entity ID - coerces strings to positive integers for URL parameters"
            },
            "required": true,
            "description": "Entity ID - coerces strings to positive integers for URL parameters",
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverUrl": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project MCP configuration installed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "configPath": {
                          "type": "string"
                        },
                        "backedUp": {
                          "type": "boolean"
                        },
                        "backupPath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "configPath",
                        "backedUp"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes": {
      "get": {
        "tags": [
          "Processes"
        ],
        "operationId": "listProjectProcesses",
        "summary": "List processes for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/scripts": {
      "get": {
        "tags": [
          "Processes"
        ],
        "operationId": "listProjectScripts",
        "summary": "List package.json scripts in the project (root + workspaces)",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectScriptListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/start": {
      "post": {
        "tags": [
          "Processes"
        ],
        "operationId": "startProjectProcess",
        "summary": "Start a new process for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessStartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/{processId}/stop": {
      "post": {
        "tags": [
          "Processes"
        ],
        "operationId": "stopProjectProcess",
        "summary": "Stop a running process",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "processId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessStopResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/history": {
      "get": {
        "tags": [
          "Processes"
        ],
        "operationId": "getProcessHistory",
        "summary": "Get process execution history",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "default": 50
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessHistoryListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/{processId}/logs": {
      "get": {
        "tags": [
          "Processes"
        ],
        "operationId": "getProcessLogs",
        "summary": "Get logs for a process",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "processId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "default": 1000
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "stdout",
                "stderr",
                "system",
                "all"
              ],
              "default": "all"
            },
            "required": false,
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessLogsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/ports": {
      "get": {
        "tags": [
          "Processes"
        ],
        "operationId": "getProcessPorts",
        "summary": "Get ports used by processes",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "listening",
                "established",
                "closed",
                "all"
              ],
              "default": "listening"
            },
            "required": false,
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessPortsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/ports/{port}/kill": {
      "post": {
        "tags": [
          "Processes"
        ],
        "operationId": "killProcessByPort",
        "summary": "Kill process using a specific port",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "port",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KillByPortResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/ports/scan": {
      "post": {
        "tags": [
          "Processes"
        ],
        "operationId": "scanProcessPorts",
        "summary": "Scan and update port usage",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanPortsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}/processes/scripts/run": {
      "post": {
        "tags": [
          "Processes"
        ],
        "operationId": "runProjectScript",
        "summary": "Run a package.json script",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scriptName": {
                    "type": "string"
                  },
                  "packageManager": {
                    "type": "string",
                    "enum": [
                      "npm",
                      "bun",
                      "yarn",
                      "pnpm"
                    ],
                    "default": "bun"
                  },
                  "packagePath": {
                    "type": "string"
                  }
                },
                "required": [
                  "scriptName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/proxy/copilot/_health": {
      "get": {
        "operationId": "getCopilotProxyHealth",
        "summary": "Copilot proxy health",
        "description": "Returns basic health and configuration info and attempts a lightweight GET to the upstream /models endpoint.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CopilotProxyHealth"
                }
              }
            }
          }
        }
      }
    },
    "/api/copilot/embed/toggle": {
      "post": {
        "operationId": "postCopilotEmbedToggle",
        "summary": "Enable or disable embedded Copilot proxy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "enabled": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success",
                    "enabled"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/copilot/embed/settings": {
      "post": {
        "operationId": "postCopilotEmbedSettings",
        "summary": "Update embedded Copilot runtime settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountType": {
                    "type": "string",
                    "enum": [
                      "individual",
                      "business",
                      "enterprise"
                    ]
                  },
                  "rateLimitSeconds": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "rateLimitWait": {
                    "type": "boolean"
                  },
                  "manualApprove": {
                    "type": "boolean"
                  },
                  "showTokens": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "applied": {
                      "type": "object",
                      "properties": {
                        "accountType": {
                          "type": "string",
                          "enum": [
                            "individual",
                            "business",
                            "enterprise"
                          ]
                        },
                        "rateLimitSeconds": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "minimum": 0
                        },
                        "rateLimitWait": {
                          "type": "boolean"
                        },
                        "manualApprove": {
                          "type": "boolean"
                        },
                        "showTokens": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "accountType",
                        "rateLimitSeconds",
                        "rateLimitWait",
                        "manualApprove",
                        "showTokens"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "applied"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/copilot/embed/auth/start": {
      "post": {
        "operationId": "postCopilotEmbedAuthStart",
        "summary": "Start GitHub device authorization flow",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "userCode": {
                      "type": "string"
                    },
                    "verificationUri": {
                      "type": "string"
                    },
                    "expiresIn": {
                      "type": "number"
                    },
                    "interval": {
                      "type": "number"
                    },
                    "device": {
                      "type": "object",
                      "properties": {
                        "device_code": {
                          "type": "string"
                        },
                        "user_code": {
                          "type": "string"
                        },
                        "verification_uri": {
                          "type": "string"
                        },
                        "expires_in": {
                          "type": "number"
                        },
                        "interval": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "device_code",
                        "user_code",
                        "verification_uri",
                        "expires_in",
                        "interval"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "userCode",
                    "verificationUri",
                    "expiresIn",
                    "interval"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/copilot/embed/auth/complete": {
      "post": {
        "operationId": "postCopilotEmbedAuthComplete",
        "summary": "Complete device authorization and initialize Copilot tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "device": {
                    "type": "object",
                    "properties": {
                      "device_code": {
                        "type": "string"
                      },
                      "user_code": {
                        "type": "string"
                      },
                      "verification_uri": {
                        "type": "string"
                      },
                      "expires_in": {
                        "type": "number"
                      },
                      "interval": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "device_code",
                      "user_code",
                      "verification_uri",
                      "expires_in",
                      "interval"
                    ]
                  }
                },
                "required": [
                  "device"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "authorized": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success",
                    "authorized"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/copilot/embed/status": {
      "get": {
        "operationId": "getCopilotEmbedStatus",
        "summary": "Get embedded Copilot status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "authorized": {
                      "type": "boolean"
                    },
                    "accountType": {
                      "type": "string",
                      "enum": [
                        "individual",
                        "business",
                        "enterprise"
                      ]
                    },
                    "modelsCount": {
                      "type": "number"
                    },
                    "lastRefreshed": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "success",
                    "authorized",
                    "accountType"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs": {
      "get": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Get all model configurations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Create a new model configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModelConfig"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs/provider/{provider}": {
      "get": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Get model configurations by provider",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "provider",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs/provider/{provider}/default": {
      "get": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Get default configuration for a provider",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "provider",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs/name/{name}": {
      "get": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Get configuration by name",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs/{id}": {
      "get": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Get configuration by ID",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Update a model configuration",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateModelConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Delete a model configuration",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": false
            },
            "required": false,
            "name": "hard",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "deleted"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs/{id}/set-default": {
      "post": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Set configuration as default for its provider",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "updated": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "updated"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-presets": {
      "get": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Get all model presets with configurations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPresetsWithConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Create a new model preset",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModelPreset"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPresetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-presets/category/{category}": {
      "get": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Get presets by category",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "general",
                "coding",
                "creative",
                "analysis",
                "custom"
              ]
            },
            "required": true,
            "name": "category",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPresetListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-presets/most-used": {
      "get": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Get most used presets",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 20,
              "default": 5
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPresetListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-presets/recently-used": {
      "get": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Get recently used presets",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 20,
              "default": 5
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPresetListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-presets/{id}": {
      "get": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Get preset with its configuration",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPresetWithConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Update a model preset",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateModelPreset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPresetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Delete a model preset",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": [
                "boolean",
                "null"
              ],
              "default": false
            },
            "required": false,
            "name": "hard",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "deleted"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-presets/{id}/use": {
      "post": {
        "tags": [
          "Model Presets"
        ],
        "summary": "Mark preset as used (increments usage count)",
        "parameters": [
          {
            "schema": {
              "type": [
                "number",
                "null"
              ]
            },
            "required": false,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "updated": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "updated"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs/system/initialize": {
      "post": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Initialize system default configurations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs/export": {
      "get": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Export all configurations and presets",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/model-configs/import": {
      "post": {
        "tags": [
          "Model Configuration"
        ],
        "summary": "Import configurations and presets",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "configs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CreateModelConfig"
                    }
                  },
                  "presets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CreateModelPreset"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {},
  "x-doc-build": {
    "Projects": {
      "ok": true
    },
    "Tickets": {
      "ok": true
    },
    "Chats": {
      "ok": true
    },
    "Prompts": {
      "ok": true
    },
    "Queues": {
      "ok": true
    },
    "ProviderKeys": {
      "ok": true
    },
    "providerKeyLegacyRoutes": {
      "ok": true
    },
    "genAiRoutes": {
      "ok": true
    },
    "flowRoutes": {
      "ok": true
    },
    "browseDirectoryRoutes": {
      "ok": true
    },
    "mcpRoutes": {
      "ok": true
    },
    "mcpProjectConfigRoutes": {
      "ok": true
    },
    "gitRoutes": {
      "ok": true
    },
    "gitAdvancedRoutes": {
      "ok": true
    },
    "projectTabRoutes": {
      "ok": true
    },
    "agentFilesRoutes": {
      "ok": true
    },
    "mcpInstallationRoutes": {
      "ok": true
    },
    "processManagementRoutes": {
      "ok": true
    },
    "copilotProxyRoutes": {
      "ok": true
    },
    "copilotEmbedRoutes": {
      "ok": true
    },
    "modelConfigRoutes": {
      "ok": true
    }
  }
}
