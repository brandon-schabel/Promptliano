{
  "openapi": "3.1.1",
  "info": {
    "description": "Promptliano OpenAPI Server Spec",
    "version": "0.9.4",
    "title": "@promptliano/server"
  },
  "components": {
    "schemas": {
      "Chat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "title": {
            "type": "string"
          },
          "projectId": {
            "type": "integer",
            "description": "Optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "created",
          "updated",
          "title"
        ]
      },
      "ChatListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Chat"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "An error occurred"
              },
              "code": {
                "type": "string",
                "example": "ERROR_CODE"
              },
              "details": {
                "type": "object",
                "additionalProperties": {
                  "nullable": true
                }
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Chat"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateChat": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "projectId": {
            "type": "integer",
            "description": "Optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          }
        },
        "required": [
          "title"
        ]
      },
      "CreateChatRequestBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateChat"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "minLength": 1,
                "example": "New Chat Session"
              },
              "copyExisting": {
                "type": "boolean",
                "description": "Copy messages from currentChatId if true"
              },
              "currentChatId": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2524608000000,
                "description": "ID or Timestamp in unix timestamp (milliseconds)",
                "example": 1716537600000
              }
            }
          }
        ]
      },
      "ChatMessageAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "fileName": {
            "type": "string",
            "description": "Original name of the uploaded file."
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the file."
          },
          "size": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "File size in bytes."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to access/download the attachment."
          }
        },
        "required": [
          "id",
          "created",
          "updated",
          "fileName",
          "mimeType",
          "size",
          "url"
        ]
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "chatId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant",
              "user",
              "system"
            ],
            "description": "Role of the message sender",
            "example": "user"
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello, world!"
          },
          "type": {
            "type": "string",
            "description": "Message type for categorization"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessageAttachment"
            },
            "description": "Optional list of attachments for the message."
          }
        },
        "required": [
          "id",
          "created",
          "updated",
          "chatId",
          "role",
          "content"
        ]
      },
      "ChatMessageListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiSdkOptions": {
        "type": "object",
        "properties": {
          "ollamaUrl": {
            "type": "string",
            "format": "uri",
            "description": "Custom Ollama server URL to use instead of the default.",
            "example": "http://192.168.1.100:11434"
          },
          "lmstudioUrl": {
            "type": "string",
            "format": "uri",
            "description": "Custom LMStudio server URL to use instead of the default.",
            "example": "http://localhost:1234"
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "description": "Controls the randomness of the output. Lower values (e.g., 0.2) make the output more focused, deterministic, and suitable for factual tasks. Higher values (e.g., 0.8) increase randomness and creativity, useful for brainstorming or creative writing. A value of 0 typically means greedy decoding (always picking the most likely token).",
            "example": 0.7
          },
          "maxTokens": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "The maximum number of tokens (words or parts of words) the model is allowed to generate in the response. This limits the output length and can affect cost. Note: This limit usually applies only to the *generated* tokens, not the input prompt tokens.",
            "example": 4000
          },
          "topP": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Controls diversity via nucleus sampling. It defines a probability threshold (e.g., 0.9). The model considers only the smallest set of most probable tokens whose cumulative probability exceeds this threshold for the next token selection. Lower values (e.g., 0.5) restrict choices more, leading to less random outputs. A value of 1 considers all tokens. It's often recommended to alter *either* `temperature` *or* `topP`, not both.",
            "example": 1
          },
          "frequencyPenalty": {
            "type": "number",
            "minimum": -2,
            "maximum": 2,
            "description": "Applies a penalty to tokens based on how frequently they have already appeared in the generated text *and* the prompt. Positive values (e.g., 0.5) decrease the likelihood of the model repeating the same words or phrases verbatim, making the output less repetitive. Negative values encourage repetition.",
            "example": 0.2
          },
          "presencePenalty": {
            "type": "number",
            "minimum": -2,
            "maximum": 2,
            "description": "Applies a penalty to tokens based on whether they have appeared *at all* in the generated text *and* the prompt so far (regardless of frequency). Positive values (e.g., 0.5) encourage the model to introduce new concepts and topics, reducing the likelihood of repeating *any* previously mentioned word. Negative values encourage staying on topic.",
            "example": 0.1
          },
          "topK": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Restricts the model's choices for the next token to the `k` most likely candidates. For example, if `topK` is 40, the model will only consider the top 40 most probable tokens at each step. A lower value restricts choices more. Setting `topK` to 1 is equivalent to greedy decoding (same as `temperature: 0`). Less commonly used than `topP`.",
            "example": 40
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Specifies one or more sequences of text where the AI should stop generating. Once the model generates a stop sequence, it will halt output immediately, even if `maxTokens` hasn't been reached. Useful for structured output or controlling conversational turns.",
            "example": [
              "\nHuman:",
              "\n---"
            ]
          },
          "response_format": {
            "nullable": true,
            "description": "Specifies the desired format for the model's response. This is highly provider-specific. A common use case is enforcing JSON output, often requiring specific model versions.",
            "example": {
              "type": "json_object"
            }
          },
          "provider": {
            "type": "string",
            "description": "The provider to use for the AI request.",
            "example": "openai"
          },
          "model": {
            "type": "string",
            "description": "The model to use for the AI request.",
            "example": "gpt-4o-mini"
          }
        },
        "description": "Optional parameters for the AI model."
      },
      "AiChatStreamRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "userMessage": {
            "type": "string",
            "minLength": 1,
            "description": "The latest message content from the user.",
            "example": "Thanks! Can you elaborate on the E=mc^2 part?"
          },
          "currentMessageAttachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 2524608000000,
                  "description": "ID or Timestamp in unix timestamp (milliseconds)",
                  "example": 1716537600000
                },
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "Accessible URL of the attachment for the AI model."
                },
                "mimeType": {
                  "type": "string",
                  "description": "MIME type of the attachment."
                },
                "fileName": {
                  "type": "string",
                  "description": "Original filename, if helpful for context."
                }
              },
              "required": [
                "id",
                "url",
                "mimeType"
              ]
            },
            "description": "Attachments specifically for the current user message being sent to the AI."
          },
          "options": {
            "$ref": "#/components/schemas/AiSdkOptions"
          },
          "systemMessage": {
            "type": "string",
            "description": "Optional system message override for this specific request.",
            "example": "Respond concisely."
          },
          "tempId": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "debug": {
            "type": "boolean",
            "description": "Enable debug mode for detailed logging.",
            "example": true
          },
          "enableChatAutoNaming": {
            "type": "boolean",
            "description": "Enable automatic chat naming based on the first user message.",
            "example": true
          }
        },
        "required": [
          "chatId",
          "userMessage"
        ]
      },
      "ForkChatRequestBody": {
        "type": "object",
        "properties": {
          "excludedMessageIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2524608000000,
              "description": "ID or Timestamp in unix timestamp (milliseconds)",
              "example": 1716537600000
            },
            "description": "Array of IDs or Timestamps in unix timestamp (milliseconds)",
            "example": [
              1716537600000,
              1716537600001
            ]
          }
        },
        "required": [
          "excludedMessageIds"
        ]
      },
      "ForkChatFromMessageRequestBody": {
        "type": "object",
        "properties": {
          "excludedMessageIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2524608000000,
              "description": "ID or Timestamp in unix timestamp (milliseconds)",
              "example": 1716537600000
            },
            "description": "Array of IDs or Timestamps in unix timestamp (milliseconds)",
            "example": [
              1716537600000,
              1716537600001
            ]
          }
        },
        "required": [
          "excludedMessageIds"
        ]
      },
      "OperationSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "UpdateChat": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "projectId": {
            "type": "integer",
            "description": "Optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          }
        }
      },
      "UpdateChatRequestBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateChat"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "minLength": 1,
                "example": "Updated Chat Title"
              }
            },
            "required": [
              "title"
            ]
          }
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created",
          "updated",
          "name",
          "description",
          "path"
        ]
      },
      "ProjectResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectResponseMultiStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectResponse"
          },
          {
            "type": "object",
            "properties": {
              "warning": {
                "type": "string"
              },
              "error": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CreateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "path"
        ]
      },
      "CreateProjectRequestBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateProject"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "example": "My Awesome Project"
              },
              "description": {
                "type": "string",
                "example": "Optional project description"
              },
              "path": {
                "type": "string",
                "minLength": 1,
                "example": "/path/to/project"
              }
            }
          }
        ]
      },
      "ProjectListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "UpdateProjectRequestBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateProject"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "example": "Updated Project Name"
              },
              "description": {
                "type": "string",
                "example": "Updated description"
              },
              "path": {
                "type": "string",
                "minLength": 1,
                "example": "/new/path/to/project"
              }
            }
          }
        ]
      },
      "ImportInfo": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "specifiers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "default",
                    "named",
                    "namespace"
                  ]
                },
                "imported": {
                  "type": "string"
                },
                "local": {
                  "type": "string"
                }
              },
              "required": [
                "type",
                "local"
              ]
            }
          }
        },
        "required": [
          "source",
          "specifiers"
        ]
      },
      "ExportInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "default",
              "named",
              "all"
            ]
          },
          "source": {
            "type": "string"
          },
          "specifiers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "exported": {
                  "type": "string"
                },
                "local": {
                  "type": "string"
                }
              },
              "required": [
                "exported"
              ]
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "ProjectFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "projectId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "summaryLastUpdated": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "meta": {
            "type": "string",
            "nullable": true
          },
          "checksum": {
            "type": "string",
            "nullable": true
          },
          "imports": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ImportInfo"
            },
            "default": null
          },
          "exports": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExportInfo"
            },
            "default": null
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "path",
          "extension",
          "size",
          "content",
          "summary",
          "summaryLastUpdated",
          "meta",
          "checksum",
          "created",
          "updated"
        ]
      },
      "FileListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectFile"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectFileWithoutContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "projectId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "summaryLastUpdated": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "meta": {
            "type": "string",
            "nullable": true
          },
          "checksum": {
            "type": "string",
            "nullable": true
          },
          "imports": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ImportInfo"
            },
            "default": null
          },
          "exports": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ExportInfo"
            },
            "default": null
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "path",
          "extension",
          "size",
          "summary",
          "summaryLastUpdated",
          "meta",
          "checksum",
          "created",
          "updated"
        ]
      },
      "ProjectFileWithoutContentListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectFileWithoutContent"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ProjectFile"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectSummaryResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "summary": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "summary"
        ]
      },
      "OptimizePromptResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ],
            "description": "Indicates successful optimization"
          },
          "data": {
            "type": "object",
            "properties": {
              "optimizedPrompt": {
                "type": "string",
                "description": "The optimized prompt generated by the service.",
                "example": "Optimize the user experience for the login form, focusing on clarity, security, and accessibility. Suggest improvements for field labels, error handling, password requirements display, and button text."
              }
            },
            "required": [
              "optimizedPrompt"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "OptimizePromptRequest": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "userContext": {
            "type": "string",
            "minLength": 1,
            "description": "The user's initial prompt or context to be optimized.",
            "example": "Make my login form better."
          }
        },
        "required": [
          "projectId",
          "userContext"
        ]
      },
      "ProviderKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "name": {
            "type": "string",
            "description": "User-defined name for the key",
            "example": "My OpenAI Key"
          },
          "provider": {
            "type": "string",
            "description": "AI Provider identifier (e.g., openai, anthropic, custom)",
            "example": "openai"
          },
          "key": {
            "type": "string",
            "description": "The actual API Key (handle with care)",
            "example": "sk-xxxxxxxxxxxxxxxxxxxx"
          },
          "encrypted": {
            "type": "boolean",
            "default": false,
            "description": "Whether this key is encrypted",
            "example": true
          },
          "iv": {
            "type": "string",
            "nullable": true,
            "description": "Initialization vector for encryption",
            "example": "base64string"
          },
          "tag": {
            "type": "string",
            "nullable": true,
            "description": "Authentication tag for AES-GCM",
            "example": "base64string"
          },
          "salt": {
            "type": "string",
            "nullable": true,
            "description": "Salt for key derivation",
            "example": "base64string"
          },
          "baseUrl": {
            "type": "string",
            "format": "uri",
            "description": "Base URL for custom OpenAI-compatible providers",
            "example": "https://api.example.com/v1"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional custom headers for the provider",
            "example": {
              "X-Custom-Header": "value"
            }
          },
          "isDefault": {
            "type": "boolean",
            "default": false,
            "description": "Whether this key is the default for its provider",
            "example": false
          },
          "isActive": {
            "type": "boolean",
            "default": true,
            "description": "Whether this key is currently active",
            "example": true
          },
          "environment": {
            "type": "string",
            "default": "production",
            "description": "Environment this key is for (production, staging, etc.)",
            "example": "production"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the key",
            "example": "Main production key"
          },
          "expiresAt": {
            "type": "number",
            "description": "Optional expiration timestamp",
            "example": 1716537600000
          },
          "lastUsed": {
            "type": "number",
            "description": "Last time this key was used",
            "example": 1716537600000
          },
          "created": {
            "type": "number",
            "description": "Creation timestamp (ISO 8601)",
            "example": 1716537600000
          },
          "updated": {
            "type": "number",
            "description": "Last update timestamp (ISO 8601)",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "name",
          "provider",
          "key",
          "created",
          "updated"
        ]
      },
      "ProviderKeyWithSecret": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProviderKey"
          },
          {
            "type": "object",
            "properties": {}
          }
        ]
      },
      "ProviderKeyResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ProviderKeyWithSecret"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateProviderKeyRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "example": "My OpenAI Key"
          },
          "provider": {
            "type": "string",
            "minLength": 1,
            "example": "anthropic"
          },
          "key": {
            "type": "string",
            "minLength": 1,
            "example": "sk-ant-xxxxxxxx"
          },
          "baseUrl": {
            "type": "string",
            "format": "uri",
            "description": "Base URL for custom providers",
            "example": "https://api.example.com/v1"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom headers",
            "example": {
              "X-Custom-Header": "value"
            }
          },
          "isDefault": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "name",
          "provider",
          "key"
        ]
      },
      "ProviderKeyListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderKey"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateProviderKeyRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "example": "My Updated Key Name"
          },
          "provider": {
            "type": "string",
            "minLength": 1,
            "example": "google"
          },
          "key": {
            "type": "string",
            "minLength": 1,
            "example": "aizaxxxxxxxxxxxxx"
          },
          "baseUrl": {
            "type": "string",
            "format": "uri",
            "description": "Base URL for custom providers",
            "example": "https://api.example.com/v1"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom headers",
            "example": {
              "X-Custom-Header": "value"
            }
          },
          "isDefault": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "ProviderModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Model identifier",
            "example": "gpt-4o-mini"
          },
          "name": {
            "type": "string",
            "description": "Human-readable model name",
            "example": "GPT-4o Mini"
          },
          "description": {
            "type": "string",
            "description": "Model description",
            "example": "Fast and efficient GPT-4 model optimized for speed"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "TestProviderResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the provider test was successful",
            "example": true
          },
          "provider": {
            "type": "string",
            "description": "Provider identifier that was tested",
            "example": "openai"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "error"
            ],
            "description": "Provider connection status",
            "example": "connected"
          },
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderModel"
            },
            "description": "Available models from the provider",
            "example": [
              {
                "id": "gpt-4o-mini",
                "name": "GPT-4o Mini"
              }
            ]
          },
          "responseTime": {
            "type": "number",
            "minimum": 0,
            "description": "Response time in milliseconds",
            "example": 1250
          },
          "error": {
            "type": "string",
            "description": "Error message if the test failed",
            "example": "Invalid API key"
          },
          "testedAt": {
            "type": "number",
            "description": "Timestamp when the test was performed",
            "example": 1716537600000
          }
        },
        "required": [
          "success",
          "provider",
          "status",
          "models",
          "responseTime",
          "testedAt"
        ]
      },
      "TestProviderApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TestProviderResponse"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TestProviderRequest": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "minLength": 1,
            "description": "Provider identifier to test connection for",
            "example": "openai"
          },
          "apiKey": {
            "type": "string",
            "description": "API key for API-based providers (OpenAI, Anthropic)",
            "example": "sk-xxxxxxxxxxxxxxxxxxxx"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Base URL for local providers (Ollama, LMStudio)",
            "example": "http://localhost:11434"
          },
          "timeout": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "default": 10000,
            "description": "Timeout in milliseconds for the test request",
            "example": 10000
          }
        },
        "required": [
          "provider"
        ]
      },
      "BatchTestSummary": {
        "type": "object",
        "properties": {
          "connected": {
            "type": "number",
            "minimum": 0,
            "description": "Number of successfully connected providers",
            "example": 2
          },
          "disconnected": {
            "type": "number",
            "minimum": 0,
            "description": "Number of disconnected providers",
            "example": 0
          },
          "error": {
            "type": "number",
            "minimum": 0,
            "description": "Number of providers with errors",
            "example": 1
          }
        },
        "required": [
          "connected",
          "disconnected",
          "error"
        ]
      },
      "BatchTestProviderResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestProviderResponse"
            },
            "description": "Array of test results for each provider"
          },
          "summary": {
            "$ref": "#/components/schemas/BatchTestSummary"
          },
          "totalTime": {
            "type": "number",
            "minimum": 0,
            "description": "Total time taken for all tests in milliseconds",
            "example": 3500
          }
        },
        "required": [
          "results",
          "summary",
          "totalTime"
        ]
      },
      "BatchTestProviderApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BatchTestProviderResponse"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BatchTestProviderRequest": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestProviderRequest"
            },
            "minItems": 1,
            "description": "Array of provider test requests to execute"
          },
          "parallel": {
            "type": "boolean",
            "default": true,
            "description": "Whether to run tests in parallel or sequentially",
            "example": true
          }
        },
        "required": [
          "providers"
        ]
      },
      "ProviderHealthStatus": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Provider identifier",
            "example": "openai"
          },
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "degraded",
              "unhealthy",
              "unknown"
            ],
            "description": "Provider health status",
            "example": "healthy"
          },
          "lastChecked": {
            "type": "number",
            "description": "Timestamp of last health check",
            "example": 1716537600000
          },
          "uptime": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Uptime percentage over the monitoring period",
            "example": 99.8
          },
          "averageResponseTime": {
            "type": "number",
            "minimum": 0,
            "description": "Average response time in milliseconds",
            "example": 850
          },
          "modelCount": {
            "type": "number",
            "minimum": 0,
            "description": "Number of available models",
            "example": 12
          }
        },
        "required": [
          "provider",
          "status",
          "lastChecked",
          "uptime",
          "averageResponseTime",
          "modelCount"
        ]
      },
      "ProviderHealthStatusListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderHealthStatus"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CustomProviderFeatures": {
        "type": "object",
        "properties": {
          "streaming": {
            "type": "boolean",
            "description": "Supports streaming responses",
            "example": true
          },
          "functionCalling": {
            "type": "boolean",
            "description": "Supports function/tool calling",
            "example": false
          },
          "structuredOutput": {
            "type": "boolean",
            "description": "Supports structured JSON output",
            "example": true
          },
          "vision": {
            "type": "boolean",
            "description": "Supports image inputs",
            "example": false
          },
          "embeddings": {
            "type": "boolean",
            "description": "Provides embedding endpoints",
            "example": false
          }
        },
        "required": [
          "streaming",
          "functionCalling",
          "structuredOutput",
          "vision",
          "embeddings"
        ],
        "description": "Detected provider capabilities"
      },
      "ValidateCustomProviderResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "compatible": {
                "type": "boolean",
                "description": "Whether the endpoint is OpenAI-compatible",
                "example": true
              },
              "models": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProviderModel"
                },
                "description": "Available models from the provider"
              },
              "features": {
                "$ref": "#/components/schemas/CustomProviderFeatures"
              },
              "baseUrl": {
                "type": "string",
                "format": "uri",
                "description": "Validated base URL",
                "example": "https://api.example.com/v1"
              }
            },
            "required": [
              "compatible",
              "models",
              "features",
              "baseUrl"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ValidateCustomProviderRequest": {
        "type": "object",
        "properties": {
          "baseUrl": {
            "type": "string",
            "format": "uri",
            "description": "Base URL to validate",
            "example": "https://api.example.com/v1"
          },
          "apiKey": {
            "type": "string",
            "minLength": 1,
            "description": "API key for authentication",
            "example": "sk-xxxxxxxx"
          },
          "customHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional custom headers",
            "example": {
              "X-Custom-Header": "value"
            }
          }
        },
        "required": [
          "baseUrl",
          "apiKey"
        ]
      },
      "Prompt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "name": {
            "type": "string",
            "description": "Prompt name",
            "example": "Code Refactoring Prompt"
          },
          "content": {
            "type": "string",
            "description": "Prompt content template",
            "example": "Refactor the following code to be more efficient: {code}"
          },
          "projectId": {
            "type": "integer",
            "description": "Optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "name",
          "content",
          "created",
          "updated"
        ]
      },
      "PromptResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Prompt"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreatePromptRequestBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "Optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "example": "My New Prompt"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "example": "Translate this text: {text}"
          }
        },
        "required": [
          "name",
          "content"
        ]
      },
      "PromptListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Prompt"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestPromptsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "prompts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Prompt"
                },
                "description": "Array of suggested prompts ordered by relevance (most relevant first)"
              }
            },
            "required": [
              "prompts"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestPromptsRequest": {
        "type": "object",
        "properties": {
          "userInput": {
            "type": "string",
            "minLength": 1,
            "description": "The user input describing what they want to accomplish",
            "example": "help me implement authentication"
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "maximum": 10,
            "default": 5,
            "description": "Maximum number of prompts to suggest (default: 5, max: 10)",
            "example": 5
          }
        },
        "required": [
          "userInput"
        ]
      },
      "UpdatePromptRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "example": "Updated Prompt Name"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "example": "Updated content: {variable}"
          }
        }
      },
      "PromptImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether this individual prompt import succeeded"
          },
          "promptName": {
            "type": "string",
            "description": "The name of the prompt being imported",
            "example": "Code Refactoring Prompt"
          },
          "promptId": {
            "type": "integer",
            "description": "ID of the created/updated prompt (only present on success)",
            "format": "int64",
            "example": 1716537600000
          },
          "error": {
            "type": "string",
            "description": "Error message if import failed",
            "example": "Prompt with this name already exists"
          },
          "warning": {
            "type": "string",
            "description": "Warning message for non-fatal issues",
            "example": "Missing frontmatter field: created"
          },
          "action": {
            "type": "string",
            "enum": [
              "created",
              "updated",
              "skipped"
            ],
            "description": "Action taken for this prompt"
          }
        },
        "required": [
          "success",
          "promptName",
          "action"
        ]
      },
      "MarkdownImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Overall success status of the import operation"
          },
          "fileName": {
            "type": "string",
            "description": "Name of the imported file",
            "example": "my-prompts.md"
          },
          "promptsProcessed": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of prompts found in the file",
            "example": 3
          },
          "promptsImported": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of prompts successfully imported",
            "example": 2
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromptImportResult"
            },
            "description": "Detailed results for each prompt"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Global errors that affected the entire file",
            "example": [
              "Invalid frontmatter format"
            ]
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Global warnings for the import operation",
            "example": [
              "File contains no valid prompts"
            ]
          }
        },
        "required": [
          "success",
          "fileName",
          "promptsProcessed",
          "promptsImported",
          "results"
        ]
      },
      "BulkImportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Overall success status (true if at least one prompt imported)"
          },
          "totalFiles": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of files processed",
            "example": 5
          },
          "filesProcessed": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of files successfully processed",
            "example": 4
          },
          "totalPrompts": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of prompts found across all files",
            "example": 15
          },
          "promptsImported": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of prompts successfully imported",
            "example": 12
          },
          "fileResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkdownImportResult"
            },
            "description": "Results for each file processed"
          },
          "summary": {
            "type": "object",
            "properties": {
              "created": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of new prompts created",
                "example": 8
              },
              "updated": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of existing prompts updated",
                "example": 4
              },
              "skipped": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of prompts skipped",
                "example": 3
              },
              "failed": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of prompts that failed to import",
                "example": 0
              }
            },
            "required": [
              "created",
              "updated",
              "skipped",
              "failed"
            ]
          }
        },
        "required": [
          "success",
          "totalFiles",
          "filesProcessed",
          "totalPrompts",
          "promptsImported",
          "fileResults",
          "summary"
        ]
      },
      "BulkImportResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/BulkImportResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ExportedFile": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Generated filename for the exported prompt",
            "example": "code-refactoring-prompt.md"
          },
          "content": {
            "type": "string",
            "description": "The markdown content of the exported prompt"
          },
          "promptId": {
            "type": "integer",
            "description": "ID of the source prompt",
            "format": "int64",
            "example": 1716537600000
          },
          "promptName": {
            "type": "string",
            "description": "Name of the source prompt",
            "example": "Code Refactoring Prompt"
          }
        },
        "required": [
          "fileName",
          "content",
          "promptId",
          "promptName"
        ]
      },
      "MarkdownExportResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the export operation succeeded"
          },
          "format": {
            "type": "string",
            "enum": [
              "single-file",
              "multi-file"
            ],
            "description": "The export format used"
          },
          "promptCount": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of prompts exported",
            "example": 5
          },
          "fileName": {
            "type": "string",
            "description": "Filename for single-file export",
            "example": "exported-prompts.md"
          },
          "content": {
            "type": "string",
            "description": "The markdown content for single-file export"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportedFile"
            },
            "description": "Array of exported files for multi-file export"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "exportedAt": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 datetime when export was generated",
                "example": "2024-01-01T12:00:00Z"
              },
              "totalSize": {
                "type": "integer",
                "minimum": 0,
                "description": "Total size of exported content in bytes",
                "example": 15432
              },
              "settings": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "integer",
                    "description": "Optional project ID to filter prompts by project",
                    "format": "int64",
                    "example": 1716537600000
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "single-file",
                      "multi-file"
                    ],
                    "default": "single-file",
                    "description": "Export format: single file with all prompts or separate files per prompt",
                    "example": "single-file"
                  },
                  "includeFrontmatter": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include frontmatter with metadata",
                    "example": true
                  },
                  "includeCreatedDate": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include created date in frontmatter",
                    "example": true
                  },
                  "includeUpdatedDate": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include updated date in frontmatter",
                    "example": true
                  },
                  "includeTags": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to include tags in frontmatter (if available)",
                    "example": true
                  },
                  "sanitizeContent": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to sanitize content for safe markdown export",
                    "example": true
                  },
                  "sortBy": {
                    "type": "string",
                    "enum": [
                      "name",
                      "created",
                      "updated"
                    ],
                    "default": "name",
                    "description": "How to sort the exported prompts",
                    "example": "name"
                  },
                  "sortOrder": {
                    "type": "string",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "default": "asc",
                    "description": "Sort order for exported prompts",
                    "example": "asc"
                  }
                },
                "description": "Export settings used"
              }
            },
            "required": [
              "exportedAt",
              "totalSize",
              "settings"
            ],
            "description": "Export metadata and settings"
          }
        },
        "required": [
          "success",
          "format",
          "promptCount",
          "metadata"
        ]
      },
      "MarkdownExportResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MarkdownExportResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BatchExportRequest": {
        "type": "object",
        "properties": {
          "promptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            },
            "description": "Array of prompt IDs to export",
            "example": [
              1716537600000,
              1716537600001
            ]
          },
          "format": {
            "type": "string",
            "enum": [
              "single-file",
              "multi-file"
            ],
            "default": "single-file",
            "description": "Export format: single file with all prompts or separate files per prompt",
            "example": "single-file"
          },
          "includeFrontmatter": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include frontmatter with metadata",
            "example": true
          },
          "includeCreatedDate": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include created date in frontmatter",
            "example": true
          },
          "includeUpdatedDate": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include updated date in frontmatter",
            "example": true
          },
          "includeTags": {
            "type": "boolean",
            "default": true,
            "description": "Whether to include tags in frontmatter (if available)",
            "example": true
          },
          "sanitizeContent": {
            "type": "boolean",
            "default": true,
            "description": "Whether to sanitize content for safe markdown export",
            "example": true
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "name",
              "created",
              "updated"
            ],
            "default": "name",
            "description": "How to sort the exported prompts",
            "example": "name"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "asc",
            "description": "Sort order for exported prompts",
            "example": "asc"
          }
        },
        "required": [
          "promptIds"
        ]
      },
      "MarkdownContentValidation": {
        "type": "object",
        "properties": {
          "hasValidFrontmatter": {
            "type": "boolean",
            "description": "Whether the content has valid YAML frontmatter"
          },
          "hasRequiredFields": {
            "type": "boolean",
            "description": "Whether all required frontmatter fields are present"
          },
          "contentLength": {
            "type": "integer",
            "minimum": 0,
            "description": "Length of the content after frontmatter"
          },
          "estimatedPrompts": {
            "type": "integer",
            "minimum": 0,
            "description": "Estimated number of prompts based on content structure"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Content validation warnings"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Content validation errors"
          }
        },
        "required": [
          "hasValidFrontmatter",
          "hasRequiredFields",
          "contentLength",
          "estimatedPrompts"
        ]
      },
      "Ticket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "projectId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ]
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          },
          "queueId": {
            "type": "integer",
            "description": "Nullable optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "queuePosition": {
            "type": "number",
            "nullable": true
          },
          "queueStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "queuePriority": {
            "type": "number"
          },
          "queuedAt": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "Optional ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "queueStartedAt": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "Optional ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "queueCompletedAt": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "Optional ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "queueAgentId": {
            "type": "string",
            "nullable": true
          },
          "queueErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "estimatedProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "actualProcessingTime": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "id",
          "created",
          "updated",
          "projectId",
          "title"
        ]
      },
      "TicketResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/Ticket"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateTicketBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "title": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "type": "string",
            "default": ""
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ],
            "default": "open"
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ],
            "default": "normal"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          }
        },
        "required": [
          "projectId",
          "title"
        ]
      },
      "UpdateTicketBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1
          },
          "overview": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "closed"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "low",
              "normal",
              "high"
            ]
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedAgentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          }
        }
      },
      "TicketTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "ticketId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "done": {
            "type": "boolean",
            "default": false
          },
          "orderIndex": {
            "type": "number",
            "minimum": 0
          },
          "estimatedHours": {
            "type": "number",
            "nullable": true
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agentId": {
            "type": "string",
            "nullable": true
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          },
          "queueId": {
            "type": "integer",
            "description": "Nullable optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "queuePosition": {
            "type": "number",
            "nullable": true
          },
          "queueStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "queuePriority": {
            "type": "number"
          },
          "queuedAt": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "Optional ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "queueStartedAt": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "Optional ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "queueCompletedAt": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "Optional ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "queueAgentId": {
            "type": "string",
            "nullable": true
          },
          "queueErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "estimatedProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "actualProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "ticketId",
          "content",
          "orderIndex",
          "created",
          "updated"
        ]
      },
      "CompleteTicketResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "ticket": {
                "$ref": "#/components/schemas/Ticket"
              },
              "tasks": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketTask"
                }
              }
            },
            "required": [
              "ticket",
              "tasks"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "LinkedFilesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ticketId": {
                  "type": "string"
                },
                "fileId": {
                  "type": "string"
                }
              },
              "required": [
                "ticketId",
                "fileId"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "LinkFilesBody": {
        "type": "object",
        "properties": {
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "fileIds"
        ]
      },
      "SuggestedFilesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "recommendedFileIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "combinedSummaries": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "recommendedFileIds"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestFilesBody": {
        "type": "object",
        "properties": {
          "extraUserInput": {
            "type": "string"
          }
        }
      },
      "SuggestedTasksResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "suggestedTasks": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "suggestedTasks"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestTasksBody": {
        "type": "object",
        "properties": {
          "userContext": {
            "type": "string"
          }
        }
      },
      "TicketListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TicketWithTaskCount": {
        "type": "object",
        "properties": {
          "ticket": {
            "$ref": "#/components/schemas/Ticket"
          },
          "taskCount": {
            "type": "number"
          },
          "completedTaskCount": {
            "type": "number"
          }
        },
        "required": [
          "ticket",
          "taskCount",
          "completedTaskCount"
        ]
      },
      "TicketWithTaskCountListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketWithTaskCount"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TicketWithTasks": {
        "type": "object",
        "properties": {
          "ticket": {
            "$ref": "#/components/schemas/Ticket"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTask"
            }
          }
        },
        "required": [
          "ticket",
          "tasks"
        ]
      },
      "TicketWithTasksListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketWithTasks"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TicketTask"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateTaskBody": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimatedHours": {
            "type": "number",
            "nullable": true
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agentId": {
            "type": "string"
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          }
        },
        "required": [
          "content"
        ]
      },
      "TaskListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTask"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateTaskBody": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "suggestedFileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "done": {
            "type": "boolean"
          },
          "estimatedHours": {
            "type": "number",
            "nullable": true
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agentId": {
            "type": "string"
          },
          "suggestedPromptIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "description": "Entity ID - positive integer without timestamp conversion",
              "format": "int64",
              "example": 1716537600000
            }
          }
        }
      },
      "ReorderTasksBody": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "integer",
                  "description": "Entity ID - positive integer without timestamp conversion",
                  "format": "int64",
                  "example": 1716537600000
                },
                "orderIndex": {
                  "type": "number",
                  "minimum": 0
                }
              },
              "required": [
                "taskId",
                "orderIndex"
              ]
            }
          }
        },
        "required": [
          "tasks"
        ]
      },
      "BulkTasksResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TicketTask"
              }
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TaskQueue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "projectId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "default": ""
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused",
              "inactive"
            ],
            "default": "active"
          },
          "maxParallelItems": {
            "type": "number",
            "minimum": 1,
            "maximum": 10,
            "default": 1
          },
          "averageProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "totalCompletedItems": {
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "id",
          "created",
          "updated",
          "projectId",
          "name"
        ]
      },
      "UpdateQueueBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused",
              "inactive"
            ]
          },
          "maxParallelItems": {
            "type": "number",
            "minimum": 1,
            "maximum": 10
          }
        }
      },
      "QueueStats": {
        "type": "object",
        "properties": {
          "queueId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "queueName": {
            "type": "string"
          },
          "totalItems": {
            "type": "number"
          },
          "queuedItems": {
            "type": "number"
          },
          "inProgressItems": {
            "type": "number"
          },
          "completedItems": {
            "type": "number"
          },
          "failedItems": {
            "type": "number"
          },
          "cancelledItems": {
            "type": "number"
          },
          "averageProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "currentAgents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ticketCount": {
            "type": "number"
          },
          "taskCount": {
            "type": "number"
          },
          "uniqueTickets": {
            "type": "number"
          }
        },
        "required": [
          "queueId",
          "queueName",
          "totalItems",
          "queuedItems",
          "inProgressItems",
          "completedItems",
          "failedItems",
          "cancelledItems",
          "averageProcessingTime",
          "currentAgents"
        ]
      },
      "QueueWithStats": {
        "type": "object",
        "properties": {
          "queue": {
            "$ref": "#/components/schemas/TaskQueue"
          },
          "stats": {
            "$ref": "#/components/schemas/QueueStats"
          }
        },
        "required": [
          "queue",
          "stats"
        ]
      },
      "QueueItem": {
        "type": "object",
        "nullable": true,
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unix timestamp in milliseconds"
          },
          "queueId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "ticketId": {
            "type": "integer",
            "description": "Nullable optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "taskId": {
            "type": "integer",
            "description": "Nullable optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "in_progress",
              "completed",
              "failed",
              "cancelled",
              "timeout"
            ],
            "default": "queued"
          },
          "priority": {
            "type": "number",
            "default": 0
          },
          "position": {
            "type": "number",
            "nullable": true
          },
          "estimatedProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "actualProcessingTime": {
            "type": "number",
            "nullable": true
          },
          "agentId": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "retryCount": {
            "type": "number",
            "default": 0
          },
          "maxRetries": {
            "type": "number",
            "default": 3
          },
          "timeoutAt": {
            "type": "number",
            "nullable": true
          },
          "startedAt": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "Optional ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "completedAt": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "Optional ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "created",
          "updated",
          "queueId"
        ]
      },
      "GetNextTaskResponse": {
        "type": "object",
        "properties": {
          "queueItem": {
            "$ref": "#/components/schemas/QueueItem"
          },
          "ticket": {
            "nullable": true
          },
          "task": {
            "nullable": true
          }
        },
        "required": [
          "queueItem"
        ]
      },
      "EnqueueItemBody": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "description": "Optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "taskId": {
            "type": "integer",
            "description": "Optional entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "priority": {
            "type": "number"
          },
          "agentId": {
            "type": "string"
          }
        }
      },
      "BatchEnqueueBody": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnqueueItemBody"
            },
            "minItems": 1,
            "maxItems": 100
          }
        },
        "required": [
          "items"
        ]
      },
      "QueueTimeline": {
        "type": "object",
        "properties": {
          "queueId": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "currentTime": {
            "type": "number"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemId": {
                  "type": "integer",
                  "description": "Entity ID - positive integer without timestamp conversion",
                  "format": "int64",
                  "example": 1716537600000
                },
                "ticketId": {
                  "type": "integer",
                  "description": "Nullable optional entity ID - positive integer without timestamp conversion",
                  "format": "int64",
                  "example": 1716537600000
                },
                "taskId": {
                  "type": "integer",
                  "description": "Nullable optional entity ID - positive integer without timestamp conversion",
                  "format": "int64",
                  "example": 1716537600000
                },
                "title": {
                  "type": "string"
                },
                "estimatedStartTime": {
                  "type": "number"
                },
                "estimatedEndTime": {
                  "type": "number"
                },
                "estimatedProcessingTime": {
                  "type": "number"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "queued",
                    "in_progress",
                    "completed",
                    "failed",
                    "cancelled",
                    "timeout"
                  ]
                }
              },
              "required": [
                "itemId",
                "title",
                "estimatedStartTime",
                "estimatedEndTime",
                "estimatedProcessingTime",
                "status"
              ]
            }
          },
          "totalEstimatedTime": {
            "type": "number"
          },
          "estimatedCompletionTime": {
            "type": "number"
          }
        },
        "required": [
          "queueId",
          "currentTime",
          "items",
          "totalEstimatedTime",
          "estimatedCompletionTime"
        ]
      },
      "ProvidersListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "isCustom": {
                  "type": "boolean"
                },
                "baseUrl": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiGenerateTextRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "minLength": 1,
            "description": "The text prompt for the AI.",
            "example": "Suggest 5 suitable filenames for a typescript utility file containing helper functions for string manipulation."
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AiSdkOptions"
              },
              {
                "description": "Optional parameters to override default model behavior (temperature, maxTokens, etc.)."
              }
            ]
          },
          "systemMessage": {
            "type": "string",
            "description": "Optional system message to guide the AI behavior and persona.",
            "example": "You are an expert programmer. Provide concise and relevant suggestions."
          }
        },
        "required": [
          "prompt"
        ]
      },
      "AiGenerateTextResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "The generated text response from the AI."
              }
            },
            "required": [
              "text"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiGenerateStructuredResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "output": {
                "nullable": true,
                "description": "The generated structured data, validated against the schema defined by the 'schemaKey'."
              }
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "AiGenerateStructuredRequest": {
        "type": "object",
        "properties": {
          "schemaKey": {
            "type": "string",
            "minLength": 1,
            "description": "The key identifying the predefined structured task configuration.",
            "example": "filenameSuggestion"
          },
          "userInput": {
            "type": "string",
            "minLength": 1,
            "description": "The user's input or context for the structured generation task.",
            "example": "A react component for displaying user profiles"
          },
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AiSdkOptions"
              },
              {
                "description": "Optional: Override default model options (temperature, etc.) defined in the task configuration."
              }
            ]
          }
        },
        "required": [
          "schemaKey",
          "userInput"
        ]
      },
      "UnifiedModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Model identifier",
            "example": "gpt-4o-mini"
          },
          "name": {
            "type": "string",
            "description": "User-friendly model name",
            "example": "GPT-4o Mini"
          },
          "provider": {
            "type": "string",
            "description": "Provider ID",
            "example": "openai"
          },
          "context_length": {
            "type": "number",
            "description": "Context window size in tokens",
            "example": 128000
          }
        },
        "required": [
          "id",
          "name",
          "provider"
        ]
      },
      "ModelsListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnifiedModel"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateProviderSettings": {
        "type": "object",
        "properties": {
          "ollamaUrl": {
            "type": "string",
            "format": "uri"
          },
          "lmstudioUrl": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "MCPServerConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Unique identifier for the MCP server configuration",
            "example": 1234567890
          },
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the project this MCP server belongs to",
            "example": 1234567890
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name for the MCP server",
            "example": "File System Tools"
          },
          "command": {
            "type": "string",
            "minLength": 1,
            "description": "Command to start the MCP server",
            "example": "npx @modelcontextprotocol/server-filesystem"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Command line arguments for the server",
            "example": [
              "--root",
              "/path/to/project"
            ]
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Environment variables for the server",
            "example": {
              "NODE_ENV": "production"
            }
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the server is enabled",
            "example": true
          },
          "autoStart": {
            "type": "boolean",
            "default": false,
            "description": "Whether to auto-start the server when project opens",
            "example": false
          },
          "created": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "format": "int64",
            "example": 1755878562269
          },
          "updated": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "format": "int64",
            "example": 1755878562269
          }
        },
        "required": [
          "id",
          "projectId",
          "name",
          "command",
          "created",
          "updated"
        ]
      },
      "MCPServerConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/MCPServerConfig"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateMCPServerConfigBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the project this MCP server belongs to",
            "example": 1234567890
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name for the MCP server",
            "example": "File System Tools"
          },
          "command": {
            "type": "string",
            "minLength": 1,
            "description": "Command to start the MCP server",
            "example": "npx @modelcontextprotocol/server-filesystem"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Command line arguments for the server",
            "example": [
              "--root",
              "/path/to/project"
            ]
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Environment variables for the server",
            "example": {
              "NODE_ENV": "production"
            }
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the server is enabled",
            "example": true
          },
          "autoStart": {
            "type": "boolean",
            "default": false,
            "description": "Whether to auto-start the server when project opens",
            "example": false
          }
        },
        "required": [
          "projectId",
          "name",
          "command"
        ]
      },
      "MCPServerConfigListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCPServerConfig"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateMCPServerConfigBody": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the project this MCP server belongs to",
            "example": 1234567890
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Display name for the MCP server",
            "example": "File System Tools"
          },
          "command": {
            "type": "string",
            "minLength": 1,
            "description": "Command to start the MCP server",
            "example": "npx @modelcontextprotocol/server-filesystem"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Command line arguments for the server",
            "example": [
              "--root",
              "/path/to/project"
            ]
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Environment variables for the server",
            "example": {
              "NODE_ENV": "production"
            }
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the server is enabled",
            "example": true
          },
          "autoStart": {
            "type": "boolean",
            "default": false,
            "description": "Whether to auto-start the server when project opens",
            "example": false
          }
        }
      },
      "MCPToolExecutionResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for this execution",
            "example": "exec_123456"
          },
          "toolId": {
            "type": "string"
          },
          "serverId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "running",
              "success",
              "error"
            ],
            "description": "Status of the execution",
            "example": "success"
          },
          "result": {
            "nullable": true,
            "description": "Result from the tool execution"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if execution failed"
          },
          "startedAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "format": "int64",
            "example": 1755878562269
          },
          "completedAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds, between 1970 and 2050. Input can be string, number, or Date.",
            "format": "int64",
            "example": 1755878562269
          }
        },
        "required": [
          "id",
          "toolId",
          "serverId",
          "status",
          "error",
          "startedAt",
          "completedAt"
        ]
      },
      "MCPToolExecutionResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/MCPToolExecutionResult"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MCPToolExecutionRequest": {
        "type": "object",
        "properties": {
          "toolId": {
            "type": "string",
            "description": "ID of the tool to execute",
            "example": "read_file"
          },
          "serverId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the MCP server to execute the tool on"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "default": {},
            "description": "Parameters to pass to the tool",
            "example": {
              "path": "/path/to/file.txt"
            }
          }
        },
        "required": [
          "toolId",
          "serverId"
        ]
      },
      "MCPResource": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "URI of the resource",
            "example": "file:///path/to/file.txt"
          },
          "name": {
            "type": "string",
            "description": "Display name for the resource",
            "example": "file.txt"
          },
          "description": {
            "type": "string",
            "description": "Description of the resource"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the resource",
            "example": "text/plain"
          },
          "serverId": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "ID of the MCP server providing this resource"
          }
        },
        "required": [
          "uri",
          "name",
          "serverId"
        ]
      },
      "MCPResourceListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MCPResource"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GitStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "enum": [
                      true
                    ]
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "isRepo": {
                        "type": "boolean",
                        "description": "Whether the directory is a git repository"
                      },
                      "current": {
                        "type": "string",
                        "nullable": true,
                        "description": "The current branch name"
                      },
                      "tracking": {
                        "type": "string",
                        "nullable": true,
                        "description": "The tracking branch name"
                      },
                      "ahead": {
                        "type": "number",
                        "description": "Number of commits ahead of tracking branch"
                      },
                      "behind": {
                        "type": "number",
                        "description": "Number of commits behind tracking branch"
                      },
                      "files": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The file path relative to the repository root"
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "added",
                                "modified",
                                "deleted",
                                "renamed",
                                "copied",
                                "untracked",
                                "ignored",
                                "unchanged"
                              ],
                              "description": "The git status of the file"
                            },
                            "staged": {
                              "type": "boolean",
                              "description": "Whether the file is staged for commit"
                            },
                            "index": {
                              "type": "string",
                              "nullable": true,
                              "description": "The index status code from git"
                            },
                            "workingDir": {
                              "type": "string",
                              "nullable": true,
                              "description": "The working directory status code from git"
                            }
                          },
                          "required": [
                            "path",
                            "status",
                            "staged",
                            "index",
                            "workingDir"
                          ]
                        },
                        "description": "List of files with git status"
                      },
                      "staged": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of staged file paths"
                      },
                      "modified": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of modified file paths"
                      },
                      "created": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of created file paths"
                      },
                      "deleted": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of deleted file paths"
                      },
                      "renamed": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of renamed file paths"
                      },
                      "conflicted": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of conflicted file paths"
                      }
                    },
                    "required": [
                      "isRepo",
                      "current",
                      "tracking",
                      "ahead",
                      "behind",
                      "files",
                      "staged",
                      "modified",
                      "created",
                      "deleted",
                      "renamed",
                      "conflicted"
                    ]
                  }
                },
                "required": [
                  "success",
                  "data"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "enum": [
                      false
                    ]
                  },
                  "error": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "not_a_repo",
                          "git_not_installed",
                          "permission_denied",
                          "unknown"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type",
                      "message"
                    ]
                  }
                },
                "required": [
                  "success",
                  "error"
                ]
              }
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommitLogResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "hash": {
                  "type": "string",
                  "description": "Commit hash"
                },
                "message": {
                  "type": "string",
                  "description": "Commit message"
                },
                "author": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "description": "ISO date string"
                    }
                  },
                  "required": [
                    "name",
                    "email",
                    "date"
                  ]
                },
                "committer": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "description": "ISO date string"
                    }
                  },
                  "required": [
                    "name",
                    "email",
                    "date"
                  ]
                },
                "parents": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Parent commit hashes"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Files changed in this commit"
                }
              },
              "required": [
                "hash",
                "message",
                "author",
                "committer",
                "parents"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommitLogEnhancedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              },
              "data": {
                "type": "object",
                "properties": {
                  "commits": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "hash": {
                          "type": "string",
                          "description": "Full SHA-1 commit hash"
                        },
                        "abbreviatedHash": {
                          "type": "string",
                          "description": "Abbreviated commit hash (7-8 chars)"
                        },
                        "subject": {
                          "type": "string",
                          "description": "First line of commit message"
                        },
                        "body": {
                          "type": "string",
                          "description": "Full commit message including subject"
                        },
                        "author": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "avatarUrl": {
                              "type": "string",
                              "format": "uri",
                              "description": "Gravatar or other avatar URL"
                            }
                          },
                          "required": [
                            "name",
                            "email"
                          ],
                          "description": "Commit author information"
                        },
                        "committer": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "avatarUrl": {
                              "type": "string",
                              "format": "uri",
                              "description": "Gravatar or other avatar URL"
                            }
                          },
                          "required": [
                            "name",
                            "email"
                          ],
                          "description": "Committer information (may differ from author)"
                        },
                        "authoredDate": {
                          "type": "string",
                          "description": "ISO 8601 timestamp when authored"
                        },
                        "committedDate": {
                          "type": "string",
                          "description": "ISO 8601 timestamp when committed"
                        },
                        "relativeTime": {
                          "type": "string",
                          "description": "Human-readable relative time (e.g., \"2 hours ago\")"
                        },
                        "parents": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Parent commit hashes"
                        },
                        "refs": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Branch and tag references pointing to this commit"
                        },
                        "stats": {
                          "type": "object",
                          "properties": {
                            "filesChanged": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Total number of files changed"
                            },
                            "additions": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Total lines added"
                            },
                            "deletions": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Total lines removed"
                            }
                          },
                          "required": [
                            "filesChanged",
                            "additions",
                            "deletions"
                          ],
                          "description": "Summary statistics for the commit"
                        },
                        "fileStats": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "File path relative to repository root"
                              },
                              "additions": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Number of lines added"
                              },
                              "deletions": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Number of lines removed"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "added",
                                  "modified",
                                  "deleted",
                                  "renamed",
                                  "copied"
                                ],
                                "description": "Change type"
                              },
                              "oldPath": {
                                "type": "string",
                                "description": "Previous path for renamed/moved files"
                              }
                            },
                            "required": [
                              "path",
                              "additions",
                              "deletions",
                              "status"
                            ]
                          },
                          "description": "Per-file change statistics"
                        }
                      },
                      "required": [
                        "hash",
                        "abbreviatedHash",
                        "subject",
                        "body",
                        "author",
                        "committer",
                        "authoredDate",
                        "committedDate",
                        "relativeTime",
                        "parents",
                        "refs",
                        "stats"
                      ]
                    }
                  },
                  "pagination": {
                    "type": "object",
                    "properties": {
                      "page": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Current page number (1-based)"
                      },
                      "perPage": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "description": "Number of items per page"
                      },
                      "totalCount": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Total number of items if available"
                      },
                      "hasMore": {
                        "type": "boolean",
                        "description": "Whether more items are available"
                      },
                      "cursor": {
                        "type": "string",
                        "description": "Cursor for cursor-based pagination"
                      }
                    },
                    "required": [
                      "page",
                      "perPage",
                      "hasMore"
                    ]
                  },
                  "branch": {
                    "type": "string",
                    "description": "Branch name these commits are from"
                  }
                },
                "required": [
                  "commits",
                  "pagination",
                  "branch"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "success"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommitDetailResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              },
              "data": {
                "type": "object",
                "properties": {
                  "commit": {
                    "type": "object",
                    "properties": {
                      "hash": {
                        "type": "string",
                        "description": "Full SHA-1 commit hash"
                      },
                      "abbreviatedHash": {
                        "type": "string",
                        "description": "Abbreviated commit hash (7-8 chars)"
                      },
                      "subject": {
                        "type": "string",
                        "description": "First line of commit message"
                      },
                      "body": {
                        "type": "string",
                        "description": "Full commit message including subject"
                      },
                      "author": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "avatarUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "Gravatar or other avatar URL"
                          }
                        },
                        "required": [
                          "name",
                          "email"
                        ],
                        "description": "Commit author information"
                      },
                      "committer": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "avatarUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "Gravatar or other avatar URL"
                          }
                        },
                        "required": [
                          "name",
                          "email"
                        ],
                        "description": "Committer information (may differ from author)"
                      },
                      "authoredDate": {
                        "type": "string",
                        "description": "ISO 8601 timestamp when authored"
                      },
                      "committedDate": {
                        "type": "string",
                        "description": "ISO 8601 timestamp when committed"
                      },
                      "relativeTime": {
                        "type": "string",
                        "description": "Human-readable relative time (e.g., \"2 hours ago\")"
                      },
                      "parents": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Parent commit hashes"
                      },
                      "refs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Branch and tag references pointing to this commit"
                      },
                      "stats": {
                        "type": "object",
                        "properties": {
                          "filesChanged": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Total number of files changed"
                          },
                          "additions": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Total lines added"
                          },
                          "deletions": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "Total lines removed"
                          }
                        },
                        "required": [
                          "filesChanged",
                          "additions",
                          "deletions"
                        ],
                        "description": "Summary statistics for the commit"
                      },
                      "fileStats": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "File path relative to repository root"
                            },
                            "additions": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Number of lines added"
                            },
                            "deletions": {
                              "type": "integer",
                              "minimum": 0,
                              "description": "Number of lines removed"
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "added",
                                "modified",
                                "deleted",
                                "renamed",
                                "copied"
                              ],
                              "description": "Change type"
                            },
                            "oldPath": {
                              "type": "string",
                              "description": "Previous path for renamed/moved files"
                            }
                          },
                          "required": [
                            "path",
                            "additions",
                            "deletions",
                            "status"
                          ]
                        },
                        "description": "Per-file change statistics"
                      }
                    },
                    "required": [
                      "hash",
                      "abbreviatedHash",
                      "subject",
                      "body",
                      "author",
                      "committer",
                      "authoredDate",
                      "committedDate",
                      "relativeTime",
                      "parents",
                      "refs",
                      "stats"
                    ]
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "added",
                            "modified",
                            "deleted",
                            "renamed",
                            "copied"
                          ]
                        },
                        "additions": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "deletions": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "binary": {
                          "type": "boolean"
                        },
                        "oldPath": {
                          "type": "string"
                        },
                        "diff": {
                          "type": "string",
                          "description": "Unified diff content if requested"
                        }
                      },
                      "required": [
                        "path",
                        "status",
                        "additions",
                        "deletions",
                        "binary"
                      ]
                    },
                    "description": "Detailed file changes"
                  },
                  "totalDiff": {
                    "type": "string",
                    "description": "Full unified diff if requested"
                  }
                },
                "required": [
                  "commit",
                  "files"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "success"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "DiffResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "files": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "added",
                        "modified",
                        "deleted",
                        "renamed"
                      ]
                    },
                    "additions": {
                      "type": "number"
                    },
                    "deletions": {
                      "type": "number"
                    },
                    "binary": {
                      "type": "boolean"
                    },
                    "oldPath": {
                      "type": "string",
                      "description": "For renamed files"
                    }
                  },
                  "required": [
                    "path",
                    "type",
                    "additions",
                    "deletions",
                    "binary"
                  ]
                }
              },
              "additions": {
                "type": "number",
                "description": "Total additions"
              },
              "deletions": {
                "type": "number",
                "description": "Total deletions"
              },
              "content": {
                "type": "string",
                "description": "Diff content for single file"
              }
            },
            "required": [
              "files",
              "additions",
              "deletions"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BranchListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Branch name"
                },
                "current": {
                  "type": "boolean",
                  "description": "Whether this is the current branch"
                },
                "isRemote": {
                  "type": "boolean",
                  "description": "Whether this is a remote branch"
                },
                "commit": {
                  "type": "string",
                  "description": "Latest commit hash"
                },
                "tracking": {
                  "type": "string",
                  "nullable": true,
                  "description": "Tracking branch name"
                },
                "ahead": {
                  "type": "number",
                  "description": "Commits ahead of tracking branch"
                },
                "behind": {
                  "type": "number",
                  "description": "Commits behind tracking branch"
                }
              },
              "required": [
                "name",
                "current",
                "isRemote",
                "commit",
                "tracking",
                "ahead",
                "behind"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "BranchListEnhancedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              },
              "data": {
                "type": "object",
                "properties": {
                  "branches": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Branch name"
                        },
                        "current": {
                          "type": "boolean",
                          "description": "Whether this is the currently checked out branch"
                        },
                        "isRemote": {
                          "type": "boolean",
                          "description": "Whether this is a remote branch"
                        },
                        "isProtected": {
                          "type": "boolean",
                          "description": "Whether the branch is protected"
                        },
                        "latestCommit": {
                          "type": "object",
                          "properties": {
                            "hash": {
                              "type": "string"
                            },
                            "abbreviatedHash": {
                              "type": "string"
                            },
                            "subject": {
                              "type": "string"
                            },
                            "author": {
                              "type": "string",
                              "description": "Author name"
                            },
                            "relativeTime": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "hash",
                            "abbreviatedHash",
                            "subject",
                            "author",
                            "relativeTime"
                          ],
                          "description": "Summary of the latest commit on this branch"
                        },
                        "tracking": {
                          "type": "string",
                          "nullable": true,
                          "description": "Remote tracking branch"
                        },
                        "ahead": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Commits ahead of tracking/main branch"
                        },
                        "behind": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "Commits behind tracking/main branch"
                        },
                        "lastActivity": {
                          "type": "string",
                          "description": "ISO 8601 timestamp of last activity"
                        }
                      },
                      "required": [
                        "name",
                        "current",
                        "isRemote",
                        "latestCommit",
                        "tracking",
                        "ahead",
                        "behind"
                      ]
                    }
                  },
                  "current": {
                    "type": "string",
                    "nullable": true,
                    "description": "Name of current branch"
                  },
                  "defaultBranch": {
                    "type": "string",
                    "description": "Default branch name (e.g., main, master)"
                  }
                },
                "required": [
                  "branches",
                  "current",
                  "defaultBranch"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "success"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "StashListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "number"
                },
                "message": {
                  "type": "string"
                },
                "branch": {
                  "type": "string",
                  "description": "Branch where stash was created"
                },
                "date": {
                  "type": "string"
                }
              },
              "required": [
                "index",
                "message",
                "branch",
                "date"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "WorktreeListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Absolute path to the worktree"
                },
                "branch": {
                  "type": "string",
                  "description": "Branch checked out in this worktree"
                },
                "commit": {
                  "type": "string",
                  "description": "Current commit hash"
                },
                "isMain": {
                  "type": "boolean",
                  "description": "Whether this is the main worktree"
                },
                "isLocked": {
                  "type": "boolean",
                  "description": "Whether the worktree is locked"
                },
                "lockReason": {
                  "type": "string",
                  "description": "Reason for locking if locked"
                },
                "prunable": {
                  "type": "boolean",
                  "description": "Whether the worktree can be pruned"
                }
              },
              "required": [
                "path",
                "branch",
                "commit",
                "isMain",
                "isLocked"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "PruneWorktreesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "RemotesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "fetch": {
                  "type": "string",
                  "description": "Fetch URL"
                },
                "push": {
                  "type": "string",
                  "description": "Push URL"
                }
              },
              "required": [
                "name",
                "fetch",
                "push"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "TagsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "commit": {
                  "type": "string",
                  "description": "Commit hash"
                },
                "annotation": {
                  "type": "string",
                  "description": "Tag message for annotated tags"
                },
                "tagger": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string",
                      "description": "ISO date string"
                    }
                  },
                  "required": [
                    "name",
                    "email",
                    "date"
                  ],
                  "description": "Tagger info for annotated tags"
                }
              },
              "required": [
                "name",
                "commit"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ActiveTabData": {
        "type": "object",
        "nullable": true,
        "properties": {
          "activeTabId": {
            "type": "number"
          },
          "lastUpdated": {
            "type": "number"
          },
          "clientId": {
            "type": "string"
          },
          "tabMetadata": {
            "type": "object",
            "properties": {
              "displayName": {
                "type": "string"
              },
              "selectedFiles": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "selectedPrompts": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "userPrompt": {
                "type": "string"
              },
              "fileSearch": {
                "type": "string"
              },
              "contextLimit": {
                "type": "number"
              },
              "preferredEditor": {
                "type": "string",
                "enum": [
                  "vscode",
                  "cursor",
                  "webstorm"
                ]
              },
              "suggestedFileIds": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "ticketSearch": {
                "type": "string"
              },
              "ticketSort": {
                "type": "string",
                "enum": [
                  "created_asc",
                  "created_desc",
                  "status",
                  "priority"
                ]
              },
              "ticketStatusFilter": {
                "type": "string",
                "enum": [
                  "all",
                  "open",
                  "in_progress",
                  "closed",
                  "non_closed"
                ]
              }
            }
          }
        },
        "required": [
          "activeTabId",
          "lastUpdated"
        ]
      },
      "ActiveTabResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ActiveTabData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ActiveTabResponseRequired": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "activeTabId": {
                "type": "number"
              },
              "lastUpdated": {
                "type": "number"
              },
              "clientId": {
                "type": "string"
              },
              "tabMetadata": {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string"
                  },
                  "selectedFiles": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "selectedPrompts": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "userPrompt": {
                    "type": "string"
                  },
                  "fileSearch": {
                    "type": "string"
                  },
                  "contextLimit": {
                    "type": "number"
                  },
                  "preferredEditor": {
                    "type": "string",
                    "enum": [
                      "vscode",
                      "cursor",
                      "webstorm"
                    ]
                  },
                  "suggestedFileIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "ticketSearch": {
                    "type": "string"
                  },
                  "ticketSort": {
                    "type": "string",
                    "enum": [
                      "created_asc",
                      "created_desc",
                      "status",
                      "priority"
                    ]
                  },
                  "ticketStatusFilter": {
                    "type": "string",
                    "enum": [
                      "all",
                      "open",
                      "in_progress",
                      "closed",
                      "non_closed"
                    ]
                  }
                }
              }
            },
            "required": [
              "activeTabId",
              "lastUpdated"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeAgent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Agent ID (filename without .md extension)",
            "example": "frontend-expert"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Descriptive name for the agent",
            "example": "Frontend Expert"
          },
          "description": {
            "type": "string",
            "description": "Brief description of agent capabilities and specialization",
            "example": "Specializes in React, TypeScript, and modern frontend development"
          },
          "color": {
            "type": "string",
            "enum": [
              "blue",
              "green",
              "red",
              "yellow",
              "purple",
              "cyan",
              "orange",
              "pink"
            ],
            "description": "Color identifier for visual agent differentiation",
            "example": "blue"
          },
          "filePath": {
            "type": "string",
            "description": "Relative path to the agent markdown file",
            "example": "agents/frontend-expert.md"
          },
          "content": {
            "type": "string",
            "description": "Full markdown content of the agent definition",
            "example": "# Frontend Expert Agent\n\nSpecialized instructions for frontend development..."
          },
          "projectId": {
            "type": "number",
            "description": "Optional project association for project-specific agents"
          },
          "created": {
            "type": "number",
            "description": "Creation timestamp"
          },
          "updated": {
            "type": "number",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "color",
          "filePath",
          "content",
          "created",
          "updated"
        ]
      },
      "ClaudeAgentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ClaudeAgent"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateClaudeAgentBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Agent name (required)",
            "example": "Backend Architect"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "description": "Agent description (required)",
            "example": "Expert in API design, database architecture, and backend systems"
          },
          "color": {
            "type": "string",
            "enum": [
              "blue",
              "green",
              "red",
              "yellow",
              "purple",
              "cyan",
              "orange",
              "pink"
            ],
            "description": "Color identifier for visual agent differentiation",
            "example": "blue"
          },
          "filePath": {
            "type": "string",
            "description": "Optional custom file path (will be auto-generated if not provided)",
            "example": "agents/backend-architect.md"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "Initial agent markdown content",
            "example": "# Backend Architect\n\nYou are an expert backend developer..."
          },
          "projectId": {
            "type": "number",
            "description": "Optional project ID for project-specific agent"
          }
        },
        "required": [
          "name",
          "description",
          "color",
          "content"
        ]
      },
      "ClaudeAgentListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaudeAgent"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateClaudeAgentBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "New agent name",
            "example": "Updated Agent Name"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "description": "New agent description",
            "example": "Updated agent description with new capabilities"
          },
          "color": {
            "type": "string",
            "enum": [
              "blue",
              "green",
              "red",
              "yellow",
              "purple",
              "cyan",
              "orange",
              "pink"
            ],
            "description": "Color identifier for visual agent differentiation",
            "example": "blue"
          },
          "filePath": {
            "type": "string",
            "description": "New file path (will move the file if changed)",
            "example": "agents/updated-path.md"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "Updated markdown content",
            "example": "# Updated Agent Content\n\nNew instructions..."
          }
        }
      },
      "AgentSuggestions": {
        "type": "object",
        "properties": {
          "agents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Suggested agent name",
                  "example": "Testing Specialist"
                },
                "description": {
                  "type": "string",
                  "description": "Suggested agent description",
                  "example": "Expert in unit testing, integration testing, and TDD"
                },
                "color": {
                  "type": "string",
                  "enum": [
                    "blue",
                    "green",
                    "red",
                    "yellow",
                    "purple",
                    "cyan",
                    "orange",
                    "pink"
                  ],
                  "description": "Color identifier for visual agent differentiation",
                  "example": "blue"
                },
                "suggestedContent": {
                  "type": "string",
                  "description": "AI-generated agent content suggestion",
                  "example": "# Testing Specialist\n\nYou are an expert in testing..."
                },
                "relevanceScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "Relevance score based on project context (0-1)",
                  "example": 0.85
                },
                "rationale": {
                  "type": "string",
                  "description": "Explanation for why this agent is suggested",
                  "example": "Based on the presence of test files and testing frameworks in the project"
                }
              },
              "required": [
                "name",
                "description",
                "color",
                "suggestedContent",
                "relevanceScore",
                "rationale"
              ]
            }
          }
        },
        "required": [
          "agents"
        ]
      },
      "AgentSuggestionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/AgentSuggestions"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "SuggestAgentsRequest": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "number",
            "description": "Project ID to analyze for agent suggestions"
          },
          "userContext": {
            "type": "string",
            "description": "Optional user context to guide suggestions",
            "example": "I need help with performance optimization and database queries"
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "maximum": 10,
            "default": 5,
            "description": "Maximum number of agents to suggest (default: 5, max: 10)",
            "example": 5
          }
        },
        "required": [
          "projectId"
        ]
      },
      "ClaudeCommandFrontmatter": {
        "type": "object",
        "properties": {
          "allowed-tools": {
            "type": "string",
            "description": "Comma-separated list of allowed tools",
            "example": "Edit, Read, Bash(git:*)"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the command",
            "example": "Performs comprehensive code review"
          },
          "argument-hint": {
            "type": "string",
            "description": "Hint for expected arguments",
            "example": "[file-path]"
          },
          "model": {
            "type": "string",
            "description": "Preferred model for command execution",
            "example": "claude-3-5-sonnet-20241022"
          },
          "max-turns": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "Maximum conversation turns",
            "example": 10
          },
          "output-format": {
            "type": "string",
            "enum": [
              "text",
              "json"
            ],
            "description": "Preferred output format",
            "example": "json"
          }
        }
      },
      "ClaudeCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Entity ID - positive integer without timestamp conversion",
            "format": "int64",
            "example": 1716537600000
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Command name (derived from filename)",
            "example": "security-audit"
          },
          "namespace": {
            "type": "string",
            "description": "Command namespace (from subdirectory)",
            "example": "frontend"
          },
          "scope": {
            "type": "string",
            "enum": [
              "project",
              "user"
            ],
            "description": "Command scope - project-specific or user-global",
            "example": "project"
          },
          "description": {
            "type": "string",
            "description": "Command description from frontmatter",
            "example": "Comprehensive security audit for the codebase"
          },
          "filePath": {
            "type": "string",
            "description": "Relative path to command file",
            "example": ".claude/commands/security-audit.md"
          },
          "content": {
            "type": "string",
            "description": "Command markdown content (without frontmatter)",
            "example": "# Security Audit\n\nPerform comprehensive analysis..."
          },
          "frontmatter": {
            "$ref": "#/components/schemas/ClaudeCommandFrontmatter"
          },
          "created": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          },
          "updated": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2524608000000,
            "description": "ID or Timestamp in unix timestamp (milliseconds)",
            "example": 1716537600000
          }
        },
        "required": [
          "id",
          "name",
          "scope",
          "filePath",
          "content",
          "frontmatter",
          "created",
          "updated"
        ]
      },
      "ClaudeCommandResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ClaudeCommand"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CreateClaudeCommandBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-]+$",
            "description": "Command name (lowercase, alphanumeric with hyphens)",
            "example": "code-review"
          },
          "namespace": {
            "type": "string",
            "pattern": "^[a-z0-9-\\/]*$",
            "description": "Optional namespace/subdirectory",
            "example": "analysis"
          },
          "scope": {
            "type": "string",
            "enum": [
              "project",
              "user"
            ],
            "default": "project",
            "description": "Command scope - project-specific or user-global",
            "example": "project"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "Command content with optional $ARGUMENTS placeholder",
            "example": "Analyze code for: $ARGUMENTS\n\n## Steps\n1. Check syntax..."
          },
          "frontmatter": {
            "$ref": "#/components/schemas/ClaudeCommandFrontmatter"
          }
        },
        "required": [
          "name",
          "content"
        ]
      },
      "ClaudeCommandListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaudeCommand"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UpdateClaudeCommandBody": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "New command content",
            "example": "Updated command content..."
          },
          "frontmatter": {
            "$ref": "#/components/schemas/ClaudeCommandFrontmatter"
          },
          "namespace": {
            "type": "string",
            "pattern": "^[a-z0-9-\\/]*$",
            "description": "Move command to different namespace",
            "example": "utilities"
          }
        }
      },
      "CommandExecutionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "result": {
                "type": "string"
              },
              "usage": {
                "type": "object",
                "properties": {
                  "inputTokens": {
                    "type": "number"
                  },
                  "outputTokens": {
                    "type": "number"
                  },
                  "totalTokens": {
                    "type": "number"
                  }
                },
                "required": [
                  "inputTokens",
                  "outputTokens",
                  "totalTokens"
                ]
              },
              "model": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              }
            },
            "required": [
              "result"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ExecuteClaudeCommandBody": {
        "type": "object",
        "properties": {
          "arguments": {
            "type": "string",
            "description": "Arguments to substitute for $ARGUMENTS",
            "example": "src/auth"
          },
          "options": {
            "type": "object",
            "properties": {
              "maxTurns": {
                "type": "integer",
                "minimum": 0,
                "exclusiveMinimum": true
              },
              "outputFormat": {
                "type": "string",
                "enum": [
                  "text",
                  "json"
                ]
              },
              "model": {
                "type": "string"
              }
            }
          }
        }
      },
      "CommandGenerationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Generated command name",
                "example": "test-runner"
              },
              "namespace": {
                "type": "string",
                "description": "Suggested namespace",
                "example": "testing"
              },
              "content": {
                "type": "string",
                "description": "Generated command content with instructions",
                "example": "Run tests for: $ARGUMENTS\n\n1. Detect test framework...\n2. Run tests with coverage..."
              },
              "frontmatter": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClaudeCommandFrontmatter"
                  },
                  {
                    "description": "Generated frontmatter configuration"
                  }
                ]
              },
              "description": {
                "type": "string",
                "description": "Generated command description",
                "example": "Runs tests with coverage reporting and threshold checking"
              },
              "rationale": {
                "type": "string",
                "description": "Explanation of design choices made during generation",
                "example": "Based on Jest configuration found in the project, included coverage flags..."
              },
              "suggestedVariations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "test-watch"
                    },
                    "description": {
                      "type": "string",
                      "example": "Run tests in watch mode"
                    },
                    "changes": {
                      "type": "string",
                      "example": "Add --watch flag and interactive mode"
                    }
                  },
                  "required": [
                    "name",
                    "description",
                    "changes"
                  ]
                },
                "description": "Alternative command variations the user might want"
              }
            },
            "required": [
              "name",
              "content",
              "frontmatter",
              "description",
              "rationale"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "CommandGenerationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-z0-9-]+$",
            "description": "Command name (lowercase, alphanumeric with hyphens)",
            "example": "test-runner"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500,
            "description": "Brief description of what the command should do",
            "example": "Run all tests for the current file or directory"
          },
          "userIntent": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000,
            "description": "Detailed explanation of what the user wants the command to accomplish",
            "example": "I want a command that runs tests for the current file, shows coverage, and fails if coverage is below 80%"
          },
          "namespace": {
            "type": "string",
            "pattern": "^[a-z0-9-\\/]*$",
            "description": "Optional namespace/subdirectory for the command",
            "example": "testing"
          },
          "scope": {
            "type": "string",
            "enum": [
              "project",
              "user"
            ],
            "default": "project",
            "description": "Command scope - project-specific or user-global",
            "example": "project"
          },
          "context": {
            "type": "object",
            "properties": {
              "includeProjectSummary": {
                "type": "boolean",
                "default": true,
                "description": "Include project structure and tech stack in generation context"
              },
              "includeFileStructure": {
                "type": "boolean",
                "default": true,
                "description": "Include file tree structure in generation context"
              },
              "includeTechStack": {
                "type": "boolean",
                "default": true,
                "description": "Include detected technologies in generation context"
              },
              "selectedFiles": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific files to consider when generating the command",
                "example": [
                  "src/test-utils.ts",
                  "jest.config.js"
                ]
              },
              "additionalContext": {
                "type": "string",
                "description": "Additional context to help generate a better command",
                "example": "We use Jest for testing and have custom test utilities in src/test-utils.ts"
              }
            },
            "description": "Context options for command generation"
          }
        },
        "required": [
          "name",
          "description",
          "userIntent"
        ]
      },
      "CommandSuggestions": {
        "type": "object",
        "properties": {
          "commands": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Suggested command name",
                  "example": "performance-audit"
                },
                "namespace": {
                  "type": "string",
                  "description": "Suggested namespace",
                  "example": "analysis"
                },
                "description": {
                  "type": "string",
                  "description": "Command description",
                  "example": "Analyze performance bottlenecks"
                },
                "suggestedContent": {
                  "type": "string",
                  "description": "AI-generated command content",
                  "example": "Analyze performance for: $ARGUMENTS\n\n..."
                },
                "suggestedFrontmatter": {
                  "$ref": "#/components/schemas/ClaudeCommandFrontmatter"
                },
                "relevanceScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "Relevance score based on context",
                  "example": 0.92
                },
                "rationale": {
                  "type": "string",
                  "description": "Explanation for suggestion",
                  "example": "Based on the performance-critical nature of the project"
                }
              },
              "required": [
                "name",
                "description",
                "suggestedContent",
                "relevanceScore",
                "rationale"
              ]
            }
          }
        },
        "required": [
          "commands"
        ]
      },
      "CommandSuggestionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/CommandSuggestions"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MCPStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "claudeDesktop": {
                "type": "object",
                "properties": {
                  "installed": {
                    "type": "boolean"
                  },
                  "configExists": {
                    "type": "boolean"
                  },
                  "hasPromptliano": {
                    "type": "boolean"
                  },
                  "configPath": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  }
                },
                "required": [
                  "installed",
                  "configExists",
                  "hasPromptliano"
                ]
              },
              "claudeCode": {
                "type": "object",
                "properties": {
                  "globalConfigExists": {
                    "type": "boolean"
                  },
                  "globalHasPromptliano": {
                    "type": "boolean"
                  },
                  "globalConfigPath": {
                    "type": "string"
                  },
                  "projectConfigExists": {
                    "type": "boolean"
                  },
                  "projectHasPromptliano": {
                    "type": "boolean"
                  },
                  "projectConfigPath": {
                    "type": "string"
                  },
                  "localConfigExists": {
                    "type": "boolean"
                  },
                  "localHasPromptliano": {
                    "type": "boolean"
                  },
                  "localConfigPath": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  }
                },
                "required": [
                  "globalConfigExists",
                  "globalHasPromptliano",
                  "projectConfigExists",
                  "projectHasPromptliano",
                  "localConfigExists",
                  "localHasPromptliano"
                ]
              },
              "projectId": {
                "type": "string"
              },
              "installCommand": {
                "type": "string"
              }
            },
            "required": [
              "claudeDesktop",
              "claudeCode",
              "projectId",
              "installCommand"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeSessionsMetadataResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sessionId": {
                  "type": "string"
                },
                "projectPath": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "string"
                },
                "messageCount": {
                  "type": "number"
                },
                "fileSize": {
                  "type": "number"
                },
                "hasGitBranch": {
                  "type": "boolean"
                },
                "hasCwd": {
                  "type": "boolean"
                },
                "firstMessagePreview": {
                  "type": "string"
                },
                "lastMessagePreview": {
                  "type": "string"
                }
              },
              "required": [
                "sessionId",
                "projectPath",
                "startTime",
                "lastUpdate",
                "messageCount",
                "fileSize",
                "hasGitBranch",
                "hasCwd"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "hasMore": {
                "type": "boolean"
              },
              "nextCursor": {
                "type": "string"
              },
              "total": {
                "type": "number"
              }
            },
            "required": [
              "hasMore"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeSessionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sessionId": {
                  "type": "string"
                },
                "projectPath": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "string"
                },
                "messageCount": {
                  "type": "number"
                },
                "gitBranch": {
                  "type": "string"
                },
                "cwd": {
                  "type": "string"
                },
                "tokenUsage": {
                  "type": "object",
                  "properties": {
                    "totalInputTokens": {
                      "type": "number"
                    },
                    "totalCacheCreationTokens": {
                      "type": "number"
                    },
                    "totalCacheReadTokens": {
                      "type": "number"
                    },
                    "totalOutputTokens": {
                      "type": "number"
                    },
                    "totalTokens": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "totalInputTokens",
                    "totalCacheCreationTokens",
                    "totalCacheReadTokens",
                    "totalOutputTokens",
                    "totalTokens"
                  ]
                },
                "serviceTiers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "totalTokensUsed": {
                  "type": "number"
                },
                "totalCostUsd": {
                  "type": "number"
                }
              },
              "required": [
                "sessionId",
                "projectPath",
                "startTime",
                "lastUpdate",
                "messageCount"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeSessionsPaginatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sessionId": {
                  "type": "string"
                },
                "projectPath": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "string"
                },
                "messageCount": {
                  "type": "number"
                },
                "gitBranch": {
                  "type": "string"
                },
                "cwd": {
                  "type": "string"
                },
                "tokenUsage": {
                  "type": "object",
                  "properties": {
                    "totalInputTokens": {
                      "type": "number"
                    },
                    "totalCacheCreationTokens": {
                      "type": "number"
                    },
                    "totalCacheReadTokens": {
                      "type": "number"
                    },
                    "totalOutputTokens": {
                      "type": "number"
                    },
                    "totalTokens": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "totalInputTokens",
                    "totalCacheCreationTokens",
                    "totalCacheReadTokens",
                    "totalOutputTokens",
                    "totalTokens"
                  ]
                },
                "serviceTiers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "totalTokensUsed": {
                  "type": "number"
                },
                "totalCostUsd": {
                  "type": "number"
                }
              },
              "required": [
                "sessionId",
                "projectPath",
                "startTime",
                "lastUpdate",
                "messageCount"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "hasMore": {
                "type": "boolean"
              },
              "nextCursor": {
                "type": "string"
              },
              "total": {
                "type": "number"
              }
            },
            "required": [
              "hasMore"
            ]
          }
        },
        "required": [
          "success",
          "data",
          "pagination"
        ]
      },
      "ClaudeFullSessionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "nullable": true,
            "properties": {
              "sessionId": {
                "type": "string"
              },
              "projectPath": {
                "type": "string"
              },
              "startTime": {
                "type": "string"
              },
              "lastUpdate": {
                "type": "string"
              },
              "messageCount": {
                "type": "number"
              },
              "gitBranch": {
                "type": "string"
              },
              "cwd": {
                "type": "string"
              },
              "tokenUsage": {
                "type": "object",
                "properties": {
                  "totalInputTokens": {
                    "type": "number"
                  },
                  "totalCacheCreationTokens": {
                    "type": "number"
                  },
                  "totalCacheReadTokens": {
                    "type": "number"
                  },
                  "totalOutputTokens": {
                    "type": "number"
                  },
                  "totalTokens": {
                    "type": "number"
                  }
                },
                "required": [
                  "totalInputTokens",
                  "totalCacheCreationTokens",
                  "totalCacheReadTokens",
                  "totalOutputTokens",
                  "totalTokens"
                ]
              },
              "serviceTiers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "totalTokensUsed": {
                "type": "number"
              },
              "totalCostUsd": {
                "type": "number"
              }
            },
            "required": [
              "sessionId",
              "projectPath",
              "startTime",
              "lastUpdate",
              "messageCount"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeMessagesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "user",
                    "assistant",
                    "result",
                    "system",
                    "summary"
                  ]
                },
                "message": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "enum": [
                        "user",
                        "assistant",
                        "system"
                      ]
                    },
                    "content": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "text"
                                    ]
                                  },
                                  "text": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "text"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "image"
                                    ]
                                  },
                                  "source": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "base64"
                                        ]
                                      },
                                      "media_type": {
                                        "type": "string"
                                      },
                                      "data": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type",
                                      "media_type",
                                      "data"
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "source"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "tool_result"
                                    ]
                                  },
                                  "tool_use_id": {
                                    "type": "string"
                                  },
                                  "content": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "nullable": true
                                        }
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "tool_use_id",
                                  "content"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "tool_use"
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "input": {
                                    "nullable": true
                                  }
                                },
                                "required": [
                                  "type",
                                  "id",
                                  "name"
                                ]
                              },
                              {
                                "type": "string"
                              }
                            ]
                          }
                        },
                        {
                          "nullable": true
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "id": {
                      "type": "string",
                      "nullable": true
                    },
                    "model": {
                      "type": "string",
                      "nullable": true
                    },
                    "stop_reason": {
                      "type": "string",
                      "nullable": true
                    },
                    "stop_sequence": {
                      "type": "string",
                      "nullable": true
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "input_tokens": {
                          "type": "number",
                          "nullable": true
                        },
                        "cache_creation_input_tokens": {
                          "type": "number",
                          "nullable": true
                        },
                        "cache_read_input_tokens": {
                          "type": "number",
                          "nullable": true
                        },
                        "output_tokens": {
                          "type": "number",
                          "nullable": true
                        },
                        "service_tier": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "role",
                    "content"
                  ]
                },
                "timestamp": {
                  "type": "string"
                },
                "sessionId": {
                  "type": "string"
                },
                "uuid": {
                  "type": "string",
                  "nullable": true
                },
                "parentUuid": {
                  "type": "string",
                  "nullable": true
                },
                "requestId": {
                  "type": "string",
                  "nullable": true
                },
                "userType": {
                  "type": "string",
                  "nullable": true
                },
                "isSidechain": {
                  "type": "boolean"
                },
                "cwd": {
                  "type": "string",
                  "nullable": true
                },
                "version": {
                  "type": "string",
                  "nullable": true
                },
                "gitBranch": {
                  "type": "string",
                  "nullable": true
                },
                "toolUseResult": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "oldTodos": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        },
                        "newTodos": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        }
                      }
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    },
                    {
                      "nullable": true
                    },
                    {
                      "nullable": true
                    }
                  ]
                },
                "content": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "text"
                                ]
                              },
                              "text": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "text"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "image"
                                ]
                              },
                              "source": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "base64"
                                    ]
                                  },
                                  "media_type": {
                                    "type": "string"
                                  },
                                  "data": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "media_type",
                                  "data"
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "source"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "tool_result"
                                ]
                              },
                              "tool_use_id": {
                                "type": "string"
                              },
                              "content": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "nullable": true
                                    }
                                  }
                                ]
                              }
                            },
                            "required": [
                              "type",
                              "tool_use_id",
                              "content"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "tool_use"
                                ]
                              },
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "input": {
                                "nullable": true
                              }
                            },
                            "required": [
                              "type",
                              "id",
                              "name"
                            ]
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    {
                      "nullable": true
                    },
                    {
                      "nullable": true
                    }
                  ]
                },
                "isMeta": {
                  "type": "boolean"
                },
                "toolUseID": {
                  "type": "string",
                  "nullable": true
                },
                "level": {
                  "type": "string"
                },
                "tokensUsed": {
                  "type": "number",
                  "nullable": true
                },
                "costUsd": {
                  "type": "number",
                  "nullable": true
                },
                "durationMs": {
                  "type": "number",
                  "nullable": true
                },
                "model": {
                  "type": "string",
                  "nullable": true
                }
              },
              "required": [
                "type",
                "timestamp",
                "sessionId"
              ]
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ClaudeSessionsEnhancedResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClaudeSessionsResponse"
          },
          {
            "type": "object",
            "properties": {
              "pagination": {
                "type": "object",
                "properties": {
                  "hasMore": {
                    "type": "boolean"
                  },
                  "nextCursor": {
                    "type": "string"
                  },
                  "total": {
                    "type": "number"
                  }
                },
                "required": [
                  "hasMore"
                ]
              }
            }
          }
        ]
      },
      "ClaudeProjectDataResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "projectPath": {
                "type": "string"
              },
              "encodedPath": {
                "type": "string"
              },
              "sessions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "sessionId": {
                      "type": "string"
                    },
                    "projectPath": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string"
                    },
                    "lastUpdate": {
                      "type": "string"
                    },
                    "messageCount": {
                      "type": "number"
                    },
                    "gitBranch": {
                      "type": "string"
                    },
                    "cwd": {
                      "type": "string"
                    },
                    "tokenUsage": {
                      "type": "object",
                      "properties": {
                        "totalInputTokens": {
                          "type": "number"
                        },
                        "totalCacheCreationTokens": {
                          "type": "number"
                        },
                        "totalCacheReadTokens": {
                          "type": "number"
                        },
                        "totalOutputTokens": {
                          "type": "number"
                        },
                        "totalTokens": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "totalInputTokens",
                        "totalCacheCreationTokens",
                        "totalCacheReadTokens",
                        "totalOutputTokens",
                        "totalTokens"
                      ]
                    },
                    "serviceTiers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "totalTokensUsed": {
                      "type": "number"
                    },
                    "totalCostUsd": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "sessionId",
                    "projectPath",
                    "startTime",
                    "lastUpdate",
                    "messageCount"
                  ]
                }
              },
              "totalMessages": {
                "type": "number"
              },
              "firstMessageTime": {
                "type": "string"
              },
              "lastMessageTime": {
                "type": "string"
              },
              "branches": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "workingDirectories": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "projectPath",
              "encodedPath",
              "sessions",
              "totalMessages",
              "branches",
              "workingDirectories"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookListItem": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "PreToolUse",
              "PostToolUse",
              "UserPromptSubmit",
              "Notification",
              "Stop",
              "SubagentStop",
              "SessionStart",
              "PreCompact"
            ],
            "description": "Hook event type that triggers the hook execution",
            "example": "PreToolUse"
          },
          "matcherIndex": {
            "type": "number"
          },
          "matcher": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "timeout": {
            "type": "number"
          }
        },
        "required": [
          "event",
          "matcherIndex",
          "matcher",
          "command"
        ]
      },
      "HookListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HookListItem"
            }
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/HookListItem"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookGenerationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "PreToolUse",
                  "PostToolUse",
                  "UserPromptSubmit",
                  "Notification",
                  "Stop",
                  "SubagentStop",
                  "SessionStart",
                  "PreCompact"
                ],
                "description": "Hook event type that triggers the hook execution",
                "example": "PreToolUse"
              },
              "matcher": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "timeout": {
                "type": "number"
              },
              "description": {
                "type": "string"
              },
              "security_warnings": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "event",
              "matcher",
              "command",
              "description"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookGenerationRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "description": "Natural language description of what the hook should do",
            "example": "Run tests after editing source files"
          },
          "context": {
            "type": "object",
            "properties": {
              "suggestedEvent": {
                "type": "string",
                "enum": [
                  "PreToolUse",
                  "PostToolUse",
                  "UserPromptSubmit",
                  "Notification",
                  "Stop",
                  "SubagentStop",
                  "SessionStart",
                  "PreCompact"
                ],
                "description": "Hook event type that triggers the hook execution",
                "example": "PreToolUse"
              },
              "examples": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "description"
        ]
      },
      "HookTestResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Hook testing is not implemented. Claude Code handles hook execution."
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "HookTestRequest": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "PreToolUse",
              "PostToolUse",
              "UserPromptSubmit",
              "Notification",
              "Stop",
              "SubagentStop",
              "SessionStart",
              "PreCompact"
            ],
            "description": "Hook event type that triggers the hook execution",
            "example": "PreToolUse"
          },
          "matcher": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "timeout": {
            "type": "number"
          },
          "sampleToolName": {
            "type": "string"
          }
        },
        "required": [
          "event",
          "matcher",
          "command"
        ]
      },
      "DetectToolsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "tools": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "tool": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "installed": {
                      "type": "boolean"
                    },
                    "configPath": {
                      "type": "string"
                    },
                    "configExists": {
                      "type": "boolean"
                    },
                    "hasPromptliano": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "tool",
                    "name",
                    "installed"
                  ]
                }
              },
              "platform": {
                "type": "string"
              }
            },
            "required": [
              "tools",
              "platform"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "InstallationStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "projectConfig": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "projectName": {
                    "type": "string"
                  },
                  "mcpEnabled": {
                    "type": "boolean"
                  },
                  "installedTools": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "tool": {
                          "type": "string"
                        },
                        "installedAt": {
                          "type": "number"
                        },
                        "configPath": {
                          "type": "string"
                        },
                        "serverName": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "tool",
                        "installedAt",
                        "serverName"
                      ]
                    }
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "projectId",
                  "projectName",
                  "mcpEnabled",
                  "installedTools"
                ]
              },
              "connectionStatus": {
                "type": "object",
                "properties": {
                  "connected": {
                    "type": "boolean"
                  },
                  "sessionId": {
                    "type": "string"
                  },
                  "lastActivity": {
                    "type": "number"
                  },
                  "projectId": {
                    "type": "number"
                  }
                },
                "required": [
                  "connected"
                ]
              }
            },
            "required": [
              "projectConfig",
              "connectionStatus"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "InstallResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "configPath": {
                "type": "string"
              },
              "backedUp": {
                "type": "boolean"
              },
              "backupPath": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "UninstallResultResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ConfigLocationsData": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "exists": {
                  "type": "boolean"
                },
                "priority": {
                  "type": "number"
                }
              },
              "required": [
                "path",
                "exists",
                "priority"
              ]
            }
          }
        },
        "required": [
          "locations"
        ]
      },
      "ConfigLocationsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ConfigLocationsData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "MergedConfigData": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "properties": {
              "mcpServers": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "stdio",
                        "http"
                      ],
                      "default": "stdio"
                    },
                    "command": {
                      "type": "string"
                    },
                    "args": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "env": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "timeout": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "command"
                  ]
                }
              },
              "inputs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "promptString",
                        "promptNumber",
                        "promptBoolean"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "default": {
                      "nullable": true
                    },
                    "password": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "description"
                  ]
                }
              },
              "extends": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            }
          }
        },
        "required": [
          "config"
        ]
      },
      "MergedConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/MergedConfigData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "ProjectConfigData": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object",
            "nullable": true,
            "properties": {
              "mcpServers": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "stdio",
                        "http"
                      ],
                      "default": "stdio"
                    },
                    "command": {
                      "type": "string"
                    },
                    "args": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "env": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "timeout": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "command"
                  ]
                }
              },
              "inputs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "promptString",
                        "promptNumber",
                        "promptBoolean"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "default": {
                      "nullable": true
                    },
                    "password": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "type",
                    "id",
                    "description"
                  ]
                }
              },
              "extends": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            }
          },
          "source": {
            "type": "string"
          }
        },
        "required": [
          "config"
        ]
      },
      "ProjectConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "$ref": "#/components/schemas/ProjectConfigData"
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GlobalMCPConfigResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "servers": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "stdio",
                        "http"
                      ],
                      "default": "stdio"
                    },
                    "command": {
                      "type": "string"
                    },
                    "args": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "env": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "timeout": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "command"
                  ]
                }
              },
              "defaultServerUrl": {
                "type": "string",
                "default": "http://localhost:3147/api/mcp"
              },
              "debugMode": {
                "type": "boolean",
                "default": false
              },
              "defaultTimeout": {
                "type": "number"
              },
              "globalEnv": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "required": [
              "servers"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GlobalInstallationsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "installations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "tool": {
                      "type": "string"
                    },
                    "installedAt": {
                      "type": "number"
                    },
                    "configPath": {
                      "type": "string"
                    },
                    "serverName": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "tool",
                    "installedAt",
                    "configPath",
                    "serverName"
                  ]
                }
              },
              "toolStatuses": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "tool": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "installed": {
                      "type": "boolean"
                    },
                    "hasGlobalPromptliano": {
                      "type": "boolean"
                    },
                    "configPath": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "tool",
                    "name",
                    "installed",
                    "hasGlobalPromptliano"
                  ]
                }
              }
            },
            "required": [
              "installations",
              "toolStatuses"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GlobalInstallResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "configPath": {
                "type": "string"
              },
              "backedUp": {
                "type": "boolean"
              },
              "backupPath": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GlobalUninstallResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      },
      "GlobalStatusResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "configExists": {
                "type": "boolean"
              },
              "configPath": {
                "type": "string"
              },
              "lastModified": {
                "type": "number"
              },
              "totalInstallations": {
                "type": "number"
              },
              "installedTools": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "installation": {
                "type": "object",
                "properties": {
                  "supported": {
                    "type": "boolean"
                  },
                  "scriptPath": {
                    "type": "string"
                  },
                  "scriptExists": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "supported",
                  "scriptPath",
                  "scriptExists"
                ]
              }
            },
            "required": [
              "configExists",
              "configPath",
              "totalInstallations",
              "installedTools",
              "installation"
            ]
          }
        },
        "required": [
          "success",
          "data"
        ]
      }
    },
    "parameters": {}
  },
  "paths": {
    "/api/chats": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Get all chat sessions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Create a new chat session",
        "requestBody": {
          "required": true,
          "description": "Data for the new chat session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/messages": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Get messages for a specific chat",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/chat": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Chat completion (streaming, chat-associated)",
        "description": "Continues a chat session identified by chatId, streams response using Vercel AI SDK via UnifiedProviderService.",
        "requestBody": {
          "required": true,
          "description": "Chat ID, user message, provider, model, and options for the streaming AI chat completion.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiChatStreamRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated AI response stream.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Stream of response tokens (Vercel AI SDK format)"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing API key for provider, invalid provider/model)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Chat session (chatId) not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error or AI provider communication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/fork": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Fork a chat session",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Optional message IDs to exclude from the fork",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForkChatRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat forked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/fork/{messageId}": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Fork a chat session from a specific message",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2524608000000,
              "description": "ID or Timestamp in unix timestamp (milliseconds)",
              "example": 1716537600000
            },
            "required": true,
            "name": "messageId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Optional message IDs to exclude from the fork",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForkChatFromMessageRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat forked successfully from message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}/messages/{messageId}": {
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Delete a specific message",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2524608000000,
              "description": "ID or Timestamp in unix timestamp (milliseconds)",
              "example": 1716537600000
            },
            "required": true,
            "name": "messageId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/chats/{chatId}": {
      "patch": {
        "tags": [
          "Chats"
        ],
        "summary": "Update chat properties (e.g., title)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Data to update for the chat",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChatRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Chats"
        ],
        "summary": "Delete a chat session and its messages",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "chatId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a new project and sync its files",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created and initial sync started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "207": {
            "description": "Project created, but post-creation steps encountered issues",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseMultiStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List all projects",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a specific project by ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a project's details",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project and its associated data",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/sync": {
      "post": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Manually trigger a full file sync for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/sync-stream": {
      "get": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Trigger a file sync with real-time progress updates via SSE",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync progress stream",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-sent events stream with sync progress updates"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/files": {
      "get": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Get the list of files associated with a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            },
            "required": false,
            "name": "includeAllVersions",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "description": "Maximum number of files to return"
            },
            "required": false,
            "description": "Maximum number of files to return",
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "default": 0,
              "description": "Number of files to skip"
            },
            "required": false,
            "description": "Number of files to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/files/metadata": {
      "get": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Get project files metadata without content (for performance)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "description": "Maximum number of files to return"
            },
            "required": false,
            "description": "Maximum number of files to return",
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "default": 0,
              "description": "Number of files to skip"
            },
            "required": false,
            "description": "Number of files to skip",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectFileWithoutContentListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/files/bulk": {
      "put": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Update content of multiple files in a project (creates new versions)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fileId": {
                          "type": "integer",
                          "minimum": 0,
                          "exclusiveMinimum": true
                        },
                        "content": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "fileId",
                        "content"
                      ]
                    }
                  }
                },
                "required": [
                  "updates"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectFile"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/files/{fileId}": {
      "put": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Update the content of a specific file (creates new version)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "fileId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/refresh": {
      "post": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Refresh project files (sync) optionally limited to a folder",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Optional folder path to limit the refresh scope",
              "example": "src/components"
            },
            "required": false,
            "name": "folder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/summary": {
      "get": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Get a combined summary of all files in the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSummaryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/summary/advanced": {
      "post": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Get an advanced project summary with customizable options",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "Summary generation options",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "depth": {
                    "type": "string",
                    "enum": [
                      "minimal",
                      "standard",
                      "detailed"
                    ]
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "xml",
                      "json",
                      "markdown"
                    ]
                  },
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "fast",
                      "balanced",
                      "thorough"
                    ]
                  },
                  "focus": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "includeImports": {
                    "type": "boolean"
                  },
                  "includeExports": {
                    "type": "boolean"
                  },
                  "maxTokens": {
                    "type": "number",
                    "minimum": 100,
                    "maximum": 100000
                  },
                  "progressive": {
                    "type": "boolean"
                  },
                  "expand": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "includeMetrics": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/summary/metrics": {
      "get": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Get metrics about project summary generation",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/summary/invalidate": {
      "post": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Invalidate the project summary cache",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompt/optimize": {
      "post": {
        "tags": [
          "Prompts",
          "AI"
        ],
        "summary": "Optimize a user-provided prompt using an AI model",
        "requestBody": {
          "required": true,
          "description": "The user prompt context to optimize",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizePromptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizePromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/suggest-files": {
      "post": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Suggest relevant files based on user input and project context",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The prompt to analyze for file suggestions"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "default": 10,
                    "description": "Maximum number of files to suggest"
                  }
                },
                "required": [
                  "prompt"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectFile"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/files/summarize": {
      "post": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Summarize specified files in a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "minItems": 1,
                    "description": "Array of file IDs to summarize"
                  },
                  "force": {
                    "type": "boolean",
                    "default": false,
                    "description": "Force re-summarization of already summarized files"
                  }
                },
                "required": [
                  "fileIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "included": {
                          "type": "number"
                        },
                        "skipped": {
                          "type": "number"
                        },
                        "updatedFiles": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProjectFile"
                          }
                        },
                        "skippedReasons": {
                          "type": "object",
                          "properties": {
                            "empty": {
                              "type": "number"
                            },
                            "tooLarge": {
                              "type": "number"
                            },
                            "errors": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "empty",
                            "tooLarge",
                            "errors"
                          ]
                        }
                      },
                      "required": [
                        "included",
                        "skipped",
                        "updatedFiles"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/files/remove-summaries": {
      "post": {
        "tags": [
          "Projects",
          "Files"
        ],
        "summary": "Remove summaries from specified files",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "minItems": 1,
                    "description": "Array of file IDs to remove summaries from"
                  }
                },
                "required": [
                  "fileIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "removedCount": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "removedCount",
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/statistics": {
      "get": {
        "tags": [
          "Projects",
          "Statistics"
        ],
        "summary": "Get comprehensive statistics for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fileStats": {
                          "type": "object",
                          "properties": {
                            "totalFiles": {
                              "type": "number"
                            },
                            "totalSize": {
                              "type": "number"
                            },
                            "filesByType": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "sizeByType": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            },
                            "filesByCategory": {
                              "type": "object",
                              "properties": {
                                "source": {
                                  "type": "number"
                                },
                                "tests": {
                                  "type": "number"
                                },
                                "docs": {
                                  "type": "number"
                                },
                                "config": {
                                  "type": "number"
                                },
                                "other": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "source",
                                "tests",
                                "docs",
                                "config",
                                "other"
                              ]
                            },
                            "filesWithSummaries": {
                              "type": "number"
                            },
                            "averageSummaryLength": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "totalFiles",
                            "totalSize",
                            "filesByType",
                            "sizeByType",
                            "filesByCategory",
                            "filesWithSummaries",
                            "averageSummaryLength"
                          ]
                        },
                        "ticketStats": {
                          "type": "object",
                          "properties": {
                            "totalTickets": {
                              "type": "number"
                            },
                            "ticketsByStatus": {
                              "type": "object",
                              "properties": {
                                "open": {
                                  "type": "number"
                                },
                                "in_progress": {
                                  "type": "number"
                                },
                                "closed": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "open",
                                "in_progress",
                                "closed"
                              ]
                            },
                            "ticketsByPriority": {
                              "type": "object",
                              "properties": {
                                "low": {
                                  "type": "number"
                                },
                                "normal": {
                                  "type": "number"
                                },
                                "high": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "low",
                                "normal",
                                "high"
                              ]
                            },
                            "averageTasksPerTicket": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "totalTickets",
                            "ticketsByStatus",
                            "ticketsByPriority",
                            "averageTasksPerTicket"
                          ]
                        },
                        "taskStats": {
                          "type": "object",
                          "properties": {
                            "totalTasks": {
                              "type": "number"
                            },
                            "completedTasks": {
                              "type": "number"
                            },
                            "completionRate": {
                              "type": "number"
                            },
                            "tasksByTicket": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "ticketId": {
                                    "type": "number"
                                  },
                                  "ticketTitle": {
                                    "type": "string"
                                  },
                                  "totalTasks": {
                                    "type": "number"
                                  },
                                  "completedTasks": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "ticketId",
                                  "ticketTitle",
                                  "totalTasks",
                                  "completedTasks"
                                ]
                              }
                            }
                          },
                          "required": [
                            "totalTasks",
                            "completedTasks",
                            "completionRate",
                            "tasksByTicket"
                          ]
                        },
                        "promptStats": {
                          "type": "object",
                          "properties": {
                            "totalPrompts": {
                              "type": "number"
                            },
                            "totalTokens": {
                              "type": "number"
                            },
                            "averagePromptLength": {
                              "type": "number"
                            },
                            "promptTypes": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "number"
                              }
                            }
                          },
                          "required": [
                            "totalPrompts",
                            "totalTokens",
                            "averagePromptLength",
                            "promptTypes"
                          ]
                        },
                        "activityStats": {
                          "type": "object",
                          "properties": {
                            "recentUpdates": {
                              "type": "number"
                            },
                            "lastUpdateTime": {
                              "type": "number"
                            },
                            "creationTrend": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "date": {
                                    "type": "string"
                                  },
                                  "files": {
                                    "type": "number"
                                  },
                                  "tickets": {
                                    "type": "number"
                                  },
                                  "tasks": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "date",
                                  "files",
                                  "tickets",
                                  "tasks"
                                ]
                              }
                            }
                          },
                          "required": [
                            "recentUpdates",
                            "lastUpdateTime",
                            "creationTrend"
                          ]
                        }
                      },
                      "required": [
                        "fileStats",
                        "ticketStats",
                        "taskStats",
                        "promptStats",
                        "activityStats"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/batch-summarize": {
      "post": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Start batch summarization of unsummarized files",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "imports",
                      "directory",
                      "semantic",
                      "mixed"
                    ],
                    "default": "mixed"
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "maxGroupSize": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 50
                      },
                      "maxTokensPerGroup": {
                        "type": "number",
                        "minimum": 1000,
                        "maximum": 100000
                      },
                      "priorityThreshold": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 10
                      },
                      "maxConcurrentGroups": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 10
                      },
                      "staleThresholdDays": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 365
                      },
                      "includeStaleFiles": {
                        "type": "boolean"
                      },
                      "retryFailedFiles": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "batchId": {
                          "type": "string"
                        },
                        "currentGroup": {
                          "type": "string"
                        },
                        "groupIndex": {
                          "type": "number"
                        },
                        "totalGroups": {
                          "type": "number"
                        },
                        "filesProcessed": {
                          "type": "number"
                        },
                        "totalFiles": {
                          "type": "number"
                        },
                        "tokensUsed": {
                          "type": "number"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "batchId",
                        "currentGroup",
                        "groupIndex",
                        "totalGroups",
                        "filesProcessed",
                        "totalFiles",
                        "tokensUsed",
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/batch-summarize/{batchId}": {
      "get": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Get progress of a batch summarization operation",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "batchId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "batchId": {
                          "type": "string"
                        },
                        "currentGroup": {
                          "type": "string"
                        },
                        "groupIndex": {
                          "type": "number"
                        },
                        "totalGroups": {
                          "type": "number"
                        },
                        "filesProcessed": {
                          "type": "number"
                        },
                        "totalFiles": {
                          "type": "number"
                        },
                        "tokensUsed": {
                          "type": "number"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "batchId",
                        "currentGroup",
                        "groupIndex",
                        "totalGroups",
                        "filesProcessed",
                        "totalFiles",
                        "tokensUsed",
                        "errors"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Cancel a running batch summarization",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "batchId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/summarization-stats": {
      "get": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Get file summarization statistics for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "projectId": {
                          "type": "number"
                        },
                        "totalFiles": {
                          "type": "number"
                        },
                        "summarizedFiles": {
                          "type": "number"
                        },
                        "unsummarizedFiles": {
                          "type": "number"
                        },
                        "staleFiles": {
                          "type": "number"
                        },
                        "failedFiles": {
                          "type": "number"
                        },
                        "averageTokensPerFile": {
                          "type": "number"
                        },
                        "lastBatchRun": {
                          "type": "number"
                        },
                        "filesByStatus": {
                          "type": "object",
                          "properties": {
                            "pending": {
                              "type": "number"
                            },
                            "in_progress": {
                              "type": "number"
                            },
                            "completed": {
                              "type": "number"
                            },
                            "failed": {
                              "type": "number"
                            },
                            "skipped": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "pending",
                            "in_progress",
                            "completed",
                            "failed",
                            "skipped"
                          ]
                        }
                      },
                      "required": [
                        "projectId",
                        "totalFiles",
                        "summarizedFiles",
                        "unsummarizedFiles",
                        "staleFiles",
                        "failedFiles",
                        "averageTokensPerFile",
                        "filesByStatus"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/preview-file-groups": {
      "post": {
        "tags": [
          "Projects",
          "Files",
          "AI"
        ],
        "summary": "Preview how files would be grouped for summarization",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "strategy": {
                    "type": "string",
                    "enum": [
                      "imports",
                      "directory",
                      "semantic",
                      "mixed"
                    ],
                    "default": "mixed"
                  },
                  "maxGroupSize": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 50
                  },
                  "includeStaleFiles": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "groups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "strategy": {
                                "type": "string",
                                "enum": [
                                  "imports",
                                  "directory",
                                  "semantic",
                                  "mixed"
                                ]
                              },
                              "fileIds": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              },
                              "estimatedTokens": {
                                "type": "number"
                              },
                              "priority": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "id",
                              "name",
                              "strategy",
                              "fileIds",
                              "priority"
                            ]
                          }
                        },
                        "totalFiles": {
                          "type": "number"
                        },
                        "totalGroups": {
                          "type": "number"
                        },
                        "estimatedTotalTokens": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "groups",
                        "totalFiles",
                        "totalGroups",
                        "estimatedTotalTokens"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/keys": {
      "post": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Add a new API key for an AI provider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderKeyRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider key created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "List all configured provider keys (excluding secrets)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/keys/{keyId}": {
      "get": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Get a specific provider key by ID (including secret)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2524608000000,
              "description": "ID or Timestamp in unix timestamp (milliseconds)",
              "example": 1716537600000
            },
            "required": true,
            "name": "keyId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Update a provider key's details",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2524608000000,
              "description": "ID or Timestamp in unix timestamp (milliseconds)",
              "example": 1716537600000
            },
            "required": true,
            "name": "keyId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderKeyRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Delete a provider key",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 2524608000000,
              "description": "ID or Timestamp in unix timestamp (milliseconds)",
              "example": 1716537600000
            },
            "required": true,
            "name": "keyId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/test": {
      "post": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Test a single provider connection",
        "description": "Test the connection to a specific AI provider and retrieve available models",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestProviderApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/batch-test": {
      "post": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Test multiple providers at once",
        "description": "Test connections to multiple AI providers in parallel or sequentially",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchTestProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchTestProviderApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/health": {
      "get": {
        "tags": [
          "Provider Testing"
        ],
        "summary": "Get health status of all configured providers",
        "description": "Retrieve health status information for all configured AI providers",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "true"
            },
            "required": false,
            "description": "Force fresh health check instead of using cached data",
            "name": "refresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderHealthStatusListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers/settings": {
      "put": {
        "tags": [
          "Provider Settings"
        ],
        "summary": "Update provider settings (URLs for local providers)",
        "description": "Update custom URLs for local AI providers like Ollama and LMStudio",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ollamaUrl": {
                    "type": "string"
                  },
                  "lmstudioUrl": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/keys/validate-custom": {
      "post": {
        "tags": [
          "Provider Keys"
        ],
        "summary": "Validate a custom OpenAI-compatible provider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateCustomProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateCustomProviderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts": {
      "post": {
        "tags": [
          "Prompts"
        ],
        "summary": "Create a new prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePromptRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Prompt created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Prompts"
        ],
        "summary": "List all available prompts",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/prompts": {
      "get": {
        "tags": [
          "Projects",
          "Prompts"
        ],
        "summary": "List prompts associated with a specific project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/suggest-prompts": {
      "post": {
        "tags": [
          "Projects",
          "Prompts",
          "AI"
        ],
        "summary": "Get AI-suggested prompts based on user input",
        "description": "Uses AI to analyze user input and suggest the most relevant prompts from the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestPromptsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestPromptsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/prompts/{promptId}": {
      "post": {
        "tags": [
          "Projects",
          "Prompts"
        ],
        "summary": "Associate a prompt with a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects",
          "Prompts"
        ],
        "summary": "Disassociate a prompt from a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/{promptId}": {
      "get": {
        "tags": [
          "Prompts"
        ],
        "summary": "Get a specific prompt by its ID",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Prompts"
        ],
        "summary": "Update a prompt's details",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Prompts"
        ],
        "summary": "Delete a prompt",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/import": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Import prompts from markdown files",
        "description": "Upload and import one or more markdown files containing prompts with frontmatter",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "binary"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "binary"
                        }
                      },
                      {
                        "nullable": true
                      }
                    ],
                    "description": "Markdown file(s) to import (max 10MB per file)"
                  },
                  "projectId": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "description": "Optional project ID to associate imported prompts with"
                  },
                  "overwriteExisting": {
                    "type": "boolean",
                    "nullable": true,
                    "default": false,
                    "description": "Whether to overwrite existing prompts with the same name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/{promptId}/export": {
      "get": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Export a single prompt as markdown",
        "description": "Download a prompt as a markdown file with frontmatter",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "promptId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Prompt exported successfully",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "default": "text/plain; charset=utf-8"
                },
                "required": false
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "description": "Markdown file content",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Prompt not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/export-batch": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Export multiple prompts as markdown",
        "description": "Export multiple prompts to markdown format",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkdownExportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/prompts/import": {
      "post": {
        "tags": [
          "Projects",
          "Prompts",
          "Import/Export"
        ],
        "summary": "Import prompts to a specific project",
        "description": "Upload and import markdown files with prompts directly to a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "binary"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "binary"
                        }
                      },
                      {
                        "nullable": true
                      }
                    ],
                    "description": "Markdown file(s) to import (max 10MB per file)"
                  },
                  "overwriteExisting": {
                    "type": "boolean",
                    "nullable": true,
                    "default": false,
                    "description": "Whether to overwrite existing prompts with the same name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkImportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/prompts/export": {
      "get": {
        "tags": [
          "Projects",
          "Prompts",
          "Import/Export"
        ],
        "summary": "Export all prompts from a project",
        "description": "Download all prompts from a project as markdown file(s)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "single-file",
                "multi-file"
              ],
              "default": "single-file",
              "description": "Export format"
            },
            "required": false,
            "name": "format",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "created",
                "updated"
              ],
              "default": "name",
              "description": "Sort order for prompts"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc",
              "description": "Sort direction"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarkdownExportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/prompts/validate-markdown": {
      "post": {
        "tags": [
          "Prompts",
          "Import/Export"
        ],
        "summary": "Validate markdown content for prompt import",
        "description": "Validates markdown content structure and frontmatter for prompt import",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Markdown content to validate"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/MarkdownContentValidation"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Create a new ticket",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTicketBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ticket created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Get a ticket by ID",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tickets"
        ],
        "summary": "Update a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Delete a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/complete": {
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Complete a ticket and mark all tasks as done",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteTicketResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/link-files": {
      "post": {
        "tags": [
          "Tickets",
          "Files"
        ],
        "summary": "Link files to a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkFilesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedFilesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/suggest-files": {
      "post": {
        "tags": [
          "Tickets",
          "Files",
          "AI"
        ],
        "summary": "Get AI suggestions for relevant files",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestFilesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestedFilesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/suggest-tasks": {
      "post": {
        "tags": [
          "Tickets",
          "AI"
        ],
        "summary": "Get AI suggestions for tasks",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestTasksBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestedTasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/tickets": {
      "get": {
        "tags": [
          "Projects",
          "Tickets"
        ],
        "summary": "List all tickets for a project",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project identifier"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter tickets by status"
            },
            "required": false,
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/tickets-with-count": {
      "get": {
        "tags": [
          "Projects",
          "Tickets"
        ],
        "summary": "List tickets with task counts",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project identifier"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter tickets by status"
            },
            "required": false,
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketWithTaskCountListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/tickets-with-tasks": {
      "get": {
        "tags": [
          "Projects",
          "Tickets",
          "Tasks"
        ],
        "summary": "List tickets with their tasks",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project identifier"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter tickets by status"
            },
            "required": false,
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketWithTasksListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/tasks": {
      "post": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Create a new task for a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Get all tasks for a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/tasks/{taskId}": {
      "patch": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Update a task",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Task identifier"
            },
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Delete a task",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Task identifier"
            },
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/tasks/reorder": {
      "patch": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Reorder tasks within a ticket",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderTasksBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/{ticketId}/auto-generate-tasks": {
      "post": {
        "tags": [
          "Tickets",
          "Tasks",
          "AI"
        ],
        "summary": "Auto-generate tasks from ticket overview",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Ticket identifier"
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/bulk-tasks": {
      "get": {
        "tags": [
          "Tickets",
          "Tasks"
        ],
        "summary": "Get tasks for multiple tickets",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Comma-separated list of ticket IDs"
            },
            "required": true,
            "name": "ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/:projectId/queues": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "description": {
                    "type": "string"
                  },
                  "maxParallelItems": {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 10
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskQueue"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQueueBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "deleted"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/:ticketId/enqueue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number"
                  },
                  "priority": {
                    "type": "number"
                  },
                  "includeTasks": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Ticket"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/:ticketId/tasks/:taskId/enqueue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number"
                  },
                  "priority": {
                    "type": "number"
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TicketTask"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/:ticketId/dequeue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Ticket"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tickets/:ticketId/tasks/:taskId/dequeue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TicketTask"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/stats": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/QueueStats"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/:projectId/queues-with-stats": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QueueWithStats"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/next-task": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agentId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/GetNextTaskResponse"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/:projectId/unqueued-items": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tickets": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Ticket"
                          }
                        },
                        "tasks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TicketTask"
                          }
                        }
                      },
                      "required": [
                        "tickets",
                        "tasks"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/pause": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/resume": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskQueue"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/:itemType/:itemId/complete": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "ticket",
                "task"
              ]
            },
            "required": true,
            "name": "itemType",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "itemId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticketId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "completed": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "completed"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/:itemType/:itemId/fail": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "ticket",
                "task"
              ]
            },
            "required": true,
            "name": "itemType",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "itemId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "errorMessage": {
                    "type": "string"
                  },
                  "ticketId": {
                    "type": "number"
                  }
                },
                "required": [
                  "errorMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "failed": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "failed"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queue/:itemType/:itemId/move": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "ticket",
                "task"
              ]
            },
            "required": true,
            "name": "itemType",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "itemId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "targetQueueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "ticketId": {
                    "type": "number"
                  }
                },
                "required": [
                  "targetQueueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "moved": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "moved"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/enqueue-ticket": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticketId": {
                    "type": "number"
                  },
                  "priority": {
                    "type": "number"
                  }
                },
                "required": [
                  "ticketId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QueueItem"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/items": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "queueItem": {
                            "$ref": "#/components/schemas/QueueItem"
                          },
                          "ticket": {
                            "nullable": true
                          },
                          "task": {
                            "nullable": true
                          }
                        },
                        "required": [
                          "queueItem"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticketId": {
                    "type": "number"
                  },
                  "taskId": {
                    "type": "number"
                  },
                  "priority": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/QueueItem"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/batch-enqueue": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchEnqueueBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/QueueItem"
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/queues/:queueId/timeline": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "queueId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/QueueTimeline"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/flow": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get complete flow data for a project",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unqueued": {
                      "type": "object",
                      "properties": {
                        "tickets": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Ticket"
                          }
                        },
                        "tasks": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TicketTask"
                          }
                        }
                      },
                      "required": [
                        "tickets",
                        "tasks"
                      ]
                    },
                    "queues": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "queue": {
                            "$ref": "#/components/schemas/TaskQueue"
                          },
                          "tickets": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Ticket"
                            }
                          },
                          "tasks": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/TicketTask"
                            }
                          }
                        },
                        "required": [
                          "queue",
                          "tickets",
                          "tasks"
                        ]
                      }
                    }
                  },
                  "required": [
                    "unqueued",
                    "queues"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/flow/items": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get all flow items as a flat list",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "ticket",
                          "task"
                        ]
                      },
                      "title": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "ticket": {
                        "$ref": "#/components/schemas/Ticket"
                      },
                      "task": {
                        "$ref": "#/components/schemas/TicketTask"
                      },
                      "queueId": {
                        "type": "number",
                        "nullable": true
                      },
                      "queuePosition": {
                        "type": "number",
                        "nullable": true
                      },
                      "queueStatus": {
                        "type": "string",
                        "nullable": true
                      },
                      "queuePriority": {
                        "type": "number"
                      },
                      "created": {
                        "type": "number"
                      },
                      "updated": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "id",
                      "type",
                      "title",
                      "created",
                      "updated"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/flow/unqueued": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get all unqueued tickets and tasks",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tickets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ticket"
                      }
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TicketTask"
                      }
                    }
                  },
                  "required": [
                    "tickets",
                    "tasks"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tickets/{ticketId}/enqueue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Enqueue a ticket to a queue",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "ticketId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  },
                  "includeTasks": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tasks/{taskId}/enqueue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Enqueue a task to a queue",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "taskId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  }
                },
                "required": [
                  "queueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTask"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tickets/{ticketId}/dequeue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Remove a ticket from its queue",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "ticketId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "includeTasks",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/tasks/{taskId}/dequeue": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Remove a task from its queue",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "taskId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketTask"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/move": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Move an item between queues or to unqueued",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": "number",
                    "nullable": true
                  },
                  "targetQueueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  },
                  "includeTasks": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "targetQueueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "ticket",
                        "task"
                      ]
                    },
                    "title": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "ticket": {
                      "$ref": "#/components/schemas/Ticket"
                    },
                    "task": {
                      "$ref": "#/components/schemas/TicketTask"
                    },
                    "queueId": {
                      "type": "number",
                      "nullable": true
                    },
                    "queuePosition": {
                      "type": "number",
                      "nullable": true
                    },
                    "queueStatus": {
                      "type": "string",
                      "nullable": true
                    },
                    "queuePriority": {
                      "type": "number"
                    },
                    "created": {
                      "type": "number"
                    },
                    "updated": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "type",
                    "title",
                    "created",
                    "updated"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/reorder": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Persist new order for items in a queue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "queueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "itemType": {
                          "type": "string",
                          "enum": [
                            "ticket",
                            "task"
                          ]
                        },
                        "itemId": {
                          "type": "number",
                          "nullable": true
                        },
                        "ticketId": {
                          "type": "number",
                          "nullable": true
                        }
                      },
                      "required": [
                        "itemType",
                        "itemId"
                      ]
                    }
                  }
                },
                "required": [
                  "queueId",
                  "items"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/start": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as being processed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": "number",
                    "nullable": true
                  },
                  "agentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "agentId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/complete": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as completed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": "number",
                    "nullable": true
                  },
                  "processingTime": {
                    "type": "number"
                  }
                },
                "required": [
                  "itemType",
                  "itemId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/process/fail": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Mark an item as failed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemType": {
                    "type": "string",
                    "enum": [
                      "ticket",
                      "task"
                    ]
                  },
                  "itemId": {
                    "type": "number",
                    "nullable": true
                  },
                  "errorMessage": {
                    "type": "string"
                  }
                },
                "required": [
                  "itemType",
                  "itemId",
                  "errorMessage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/flow/bulk-move": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Move multiple items to a queue or unqueued",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "itemType": {
                          "type": "string",
                          "enum": [
                            "ticket",
                            "task"
                          ]
                        },
                        "itemId": {
                          "type": "number",
                          "nullable": true
                        }
                      },
                      "required": [
                        "itemType",
                        "itemId"
                      ]
                    }
                  },
                  "targetQueueId": {
                    "type": "number",
                    "nullable": true
                  },
                  "priority": {
                    "type": "number",
                    "default": 0
                  }
                },
                "required": [
                  "items",
                  "targetQueueId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "movedCount": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "success",
                    "movedCount"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/providers": {
      "get": {
        "tags": [
          "AI"
        ],
        "summary": "Get all available providers including custom ones",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvidersListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/stream": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate text using a specified model and prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated AI response stream.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Stream of response tokens (Vercel AI SDK format)"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/text": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate text using a specified model and prompt",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateTextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/gen-ai/structured": {
      "post": {
        "tags": [
          "GenAI"
        ],
        "summary": "Generate structured data based on a predefined schema key and user input",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateStructuredRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateStructuredResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/models": {
      "get": {
        "tags": [
          "AI"
        ],
        "summary": "List available AI models for a provider",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The provider to filter models by",
              "example": "openai"
            },
            "required": true,
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/generate/text": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Generate text (one-off, non-streaming)",
        "description": "Generates text based on a prompt using the specified provider and model. Does not use chat history or save messages.",
        "requestBody": {
          "required": true,
          "description": "Prompt, provider, model, and options for text generation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AiGenerateTextRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AiGenerateTextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/provider-settings": {
      "post": {
        "tags": [
          "AI"
        ],
        "summary": "Update provider settings",
        "description": "Updates custom URLs for local AI providers like Ollama and LMStudio",
        "requestBody": {
          "required": true,
          "description": "Provider settings to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/OperationSuccessResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/UpdateProviderSettings"
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/browse-directory": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Browse directories on the file system",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The directory path to browse. If not provided, defaults to home directory"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "currentPath": {
                          "type": "string"
                        },
                        "parentPath": {
                          "type": "string",
                          "nullable": true
                        },
                        "entries": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "isDirectory": {
                                "type": "boolean"
                              },
                              "isHidden": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "name",
                              "path",
                              "isDirectory",
                              "isHidden"
                            ]
                          }
                        }
                      },
                      "required": [
                        "currentPath",
                        "parentPath",
                        "entries"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers": {
      "post": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Create MCP server configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMCPServerConfigBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "201": {
            "description": "MCP server configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "List all MCP server configurations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}": {
      "get": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Get MCP server configuration by ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Update MCP server configuration",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMCPServerConfigBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPServerConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "MCP",
          "Configuration"
        ],
        "summary": "Delete MCP server configuration",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools": {
      "get": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "List available MCP tools",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "serverId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "description"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools/execute": {
      "post": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "Execute an MCP tool",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MCPToolExecutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPToolExecutionResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources": {
      "get": {
        "tags": [
          "MCP",
          "Resources"
        ],
        "summary": "List available MCP resources",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPResourceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources/read": {
      "post": {
        "tags": [
          "MCP",
          "Resources"
        ],
        "summary": "Read MCP resource content",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uri": {
                    "type": "string"
                  },
                  "serverId": {
                    "type": "string"
                  }
                },
                "required": [
                  "uri"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "uri": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "mimeType": {
                          "type": "string"
                        },
                        "content": {
                          "nullable": true
                        }
                      },
                      "required": [
                        "uri",
                        "name",
                        "description",
                        "mimeType"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/builtin-tools": {
      "get": {
        "tags": [
          "MCP",
          "Tools"
        ],
        "summary": "Get list of built-in MCP tools",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "category": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "description",
                          "category"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/start": {
      "post": {
        "tags": [
          "MCP",
          "Execution"
        ],
        "summary": "Start an MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/stop": {
      "post": {
        "tags": [
          "MCP",
          "Execution"
        ],
        "summary": "Stop an MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP usage analytics",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "start",
                            "end"
                          ]
                        },
                        "servers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "serverId": {
                                "type": "string"
                              },
                              "totalRequests": {
                                "type": "number"
                              },
                              "successRate": {
                                "type": "number"
                              },
                              "avgResponseTime": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "serverId",
                              "totalRequests",
                              "successRate",
                              "avgResponseTime"
                            ]
                          }
                        },
                        "tools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "executions": {
                                "type": "number"
                              },
                              "avgDuration": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "name",
                              "executions",
                              "avgDuration"
                            ]
                          }
                        },
                        "totalRequests": {
                          "type": "number"
                        },
                        "totalErrors": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "servers",
                        "tools",
                        "totalRequests",
                        "totalErrors"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/servers/{serverId}/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get statistics for a specific MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "serverId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "serverId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "connected",
                            "disconnected",
                            "error"
                          ]
                        },
                        "uptime": {
                          "type": "number"
                        },
                        "totalRequests": {
                          "type": "number"
                        },
                        "successRate": {
                          "type": "number"
                        },
                        "avgResponseTime": {
                          "type": "number"
                        },
                        "lastActivity": {
                          "type": "string"
                        },
                        "capabilities": {
                          "nullable": true
                        }
                      },
                      "required": [
                        "serverId",
                        "status",
                        "uptime",
                        "totalRequests",
                        "successRate",
                        "avgResponseTime",
                        "lastActivity"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/tools/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get tool usage statistics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ],
              "default": "day"
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "string"
                        },
                        "topTools": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "count": {
                                "type": "number"
                              },
                              "avgExecutionTime": {
                                "type": "number"
                              },
                              "successRate": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "name",
                              "count",
                              "avgExecutionTime",
                              "successRate"
                            ]
                          }
                        },
                        "totalExecutions": {
                          "type": "number"
                        },
                        "totalErrors": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "topTools",
                        "totalExecutions",
                        "totalErrors"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/resources/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get resource access statistics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ],
              "default": "day"
            },
            "required": false,
            "name": "period",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "period": {
                          "type": "string"
                        },
                        "topResources": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "uri": {
                                "type": "string"
                              },
                              "accessCount": {
                                "type": "number"
                              },
                              "avgResponseTime": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "uri",
                              "accessCount",
                              "avgResponseTime"
                            ]
                          }
                        },
                        "totalAccesses": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "period",
                        "topResources",
                        "totalAccesses"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics/report": {
      "post": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Generate MCP usage report",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "json",
                      "csv",
                      "pdf"
                    ],
                    "default": "json"
                  },
                  "includeServerDetails": {
                    "type": "boolean",
                    "default": true
                  },
                  "includeToolDetails": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": [
                  "startDate",
                  "endDate"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "reportId": {
                          "type": "string"
                        },
                        "generatedAt": {
                          "type": "string"
                        },
                        "period": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "start",
                            "end"
                          ]
                        },
                        "format": {
                          "type": "string"
                        },
                        "content": {
                          "nullable": true
                        },
                        "downloadUrl": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "reportId",
                        "generatedAt",
                        "period",
                        "format"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/stats": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP session statistics",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activeSessions": {
                          "type": "number"
                        },
                        "totalSessionsToday": {
                          "type": "number"
                        },
                        "avgSessionDuration": {
                          "type": "number"
                        },
                        "peakConcurrentSessions": {
                          "type": "number"
                        },
                        "sessionsByServer": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "activeSessions",
                        "totalSessionsToday",
                        "avgSessionDuration",
                        "peakConcurrentSessions",
                        "sessionsByServer"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/analytics/performance": {
      "get": {
        "tags": [
          "MCP",
          "Analytics"
        ],
        "summary": "Get MCP performance metrics",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "latency",
                "throughput",
                "error_rate"
              ]
            },
            "required": false,
            "name": "metricType",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "avg",
                "min",
                "max",
                "p50",
                "p95",
                "p99"
              ],
              "default": "avg"
            },
            "required": false,
            "name": "aggregation",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "metrics": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string"
                              },
                              "value": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "timestamp",
                              "value",
                              "type"
                            ]
                          }
                        },
                        "aggregation": {
                          "type": "string"
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "current": {
                              "type": "number"
                            },
                            "trend": {
                              "type": "string",
                              "enum": [
                                "up",
                                "down",
                                "stable"
                              ]
                            },
                            "changePercent": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "current",
                            "trend",
                            "changePercent"
                          ]
                        }
                      },
                      "required": [
                        "metrics",
                        "aggregation",
                        "summary"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/overview": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP analytics overview for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalExecutions": {
                          "type": "number"
                        },
                        "uniqueTools": {
                          "type": "number"
                        },
                        "overallSuccessRate": {
                          "type": "number"
                        },
                        "avgExecutionTime": {
                          "type": "number"
                        },
                        "topTools": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        },
                        "recentErrors": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        },
                        "executionTrend": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        }
                      },
                      "required": [
                        "totalExecutions",
                        "uniqueTools",
                        "overallSuccessRate",
                        "avgExecutionTime",
                        "topTools",
                        "recentErrors",
                        "executionTrend"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/statistics": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP tool statistics for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/timeline": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP execution timeline for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/error-patterns": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP error patterns for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month"
              ]
            },
            "required": false,
            "name": "period",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "nullable": true
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/analytics/executions": {
      "get": {
        "tags": [
          "MCP",
          "Analytics",
          "Projects"
        ],
        "summary": "Get MCP tool executions for a project",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "toolName",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "success",
                "error",
                "timeout"
              ]
            },
            "required": false,
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "startedAt",
                "duration",
                "toolName"
              ]
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "executions": {
                          "type": "array",
                          "items": {
                            "nullable": true
                          }
                        },
                        "total": {
                          "type": "number"
                        },
                        "page": {
                          "type": "number"
                        },
                        "pageSize": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "executions",
                        "total",
                        "page",
                        "pageSize"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/connection": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP server connection",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "MCP server URL to test"
                  },
                  "timeout": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "default": 5000
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "connected": {
                          "type": "boolean"
                        },
                        "responseTime": {
                          "type": "number"
                        },
                        "error": {
                          "type": "string"
                        },
                        "serverInfo": {
                          "nullable": true
                        }
                      },
                      "required": [
                        "connected",
                        "responseTime"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/initialize": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP initialize handshake",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "MCP server URL to test"
                  },
                  "capabilities": {
                    "type": "object",
                    "properties": {
                      "tools": {
                        "type": "boolean",
                        "default": true
                      },
                      "resources": {
                        "type": "boolean",
                        "default": true
                      },
                      "prompts": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "initialized": {
                          "type": "boolean"
                        },
                        "sessionId": {
                          "type": "string"
                        },
                        "capabilities": {
                          "nullable": true
                        },
                        "serverInfo": {
                          "nullable": true
                        },
                        "error": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "initialized"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/tool": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Test MCP tool execution",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "toolName": {
                    "type": "string"
                  },
                  "arguments": {
                    "type": "object",
                    "additionalProperties": {
                      "nullable": true
                    },
                    "default": {}
                  },
                  "validateOnly": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "toolName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "executed": {
                          "type": "boolean"
                        },
                        "result": {
                          "nullable": true
                        },
                        "executionTime": {
                          "type": "number"
                        },
                        "error": {
                          "type": "string"
                        },
                        "validationErrors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "executed",
                        "executionTime"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/validate-config": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Validate MCP server configuration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "checkConnectivity": {
                    "type": "boolean",
                    "default": true
                  },
                  "checkCapabilities": {
                    "type": "boolean",
                    "default": true
                  },
                  "checkTools": {
                    "type": "boolean",
                    "default": true
                  }
                },
                "required": [
                  "serverId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "valid": {
                          "type": "boolean"
                        },
                        "checks": {
                          "type": "object",
                          "properties": {
                            "connectivity": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "passed"
                              ]
                            },
                            "capabilities": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "details": {
                                  "nullable": true
                                }
                              },
                              "required": [
                                "passed"
                              ]
                            },
                            "tools": {
                              "type": "object",
                              "properties": {
                                "passed": {
                                  "type": "boolean"
                                },
                                "message": {
                                  "type": "string"
                                },
                                "availableTools": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "passed"
                              ]
                            }
                          }
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "warnings": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "valid",
                        "checks"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/test/debug": {
      "post": {
        "tags": [
          "MCP",
          "Testing"
        ],
        "summary": "Debug MCP communication",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "list-tools",
                      "list-resources",
                      "get-capabilities",
                      "raw-request"
                    ]
                  },
                  "rawRequest": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string"
                      },
                      "params": {
                        "nullable": true
                      }
                    },
                    "required": [
                      "method"
                    ]
                  }
                },
                "required": [
                  "serverId",
                  "action"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "request": {
                          "nullable": true
                        },
                        "response": {
                          "nullable": true
                        },
                        "timing": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string"
                            },
                            "end": {
                              "type": "string"
                            },
                            "duration": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "start",
                            "end",
                            "duration"
                          ]
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "serverId": {
                              "type": "string"
                            },
                            "action": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "serverId",
                            "action"
                          ]
                        }
                      },
                      "required": [
                        "timing",
                        "metadata"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Create a new MCP session",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverId": {
                    "type": "string"
                  },
                  "clientInfo": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "version"
                    ]
                  },
                  "capabilities": {
                    "type": "object",
                    "properties": {
                      "tools": {
                        "type": "boolean"
                      },
                      "resources": {
                        "type": "boolean"
                      },
                      "prompts": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "required": [
                  "serverId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "serverId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "idle",
                        "disconnected"
                      ]
                    },
                    "startedAt": {
                      "type": "string"
                    },
                    "lastActivity": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "clientInfo": {
                          "nullable": true
                        },
                        "serverInfo": {
                          "nullable": true
                        },
                        "capabilities": {
                          "nullable": true
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "serverId",
                    "status",
                    "startedAt",
                    "lastActivity"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "serverId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "active",
                            "idle",
                            "disconnected"
                          ]
                        },
                        "startedAt": {
                          "type": "string"
                        },
                        "lastActivity": {
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "clientInfo": {
                              "nullable": true
                            },
                            "serverInfo": {
                              "nullable": true
                            },
                            "capabilities": {
                              "nullable": true
                            }
                          }
                        }
                      },
                      "required": [
                        "id",
                        "serverId",
                        "status",
                        "startedAt",
                        "lastActivity"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "List all MCP sessions",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "idle",
                "disconnected",
                "all"
              ],
              "default": "active"
            },
            "required": false,
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "serverId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "serverId": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "active",
                              "idle",
                              "disconnected"
                            ]
                          },
                          "startedAt": {
                            "type": "string"
                          },
                          "lastActivity": {
                            "type": "string"
                          },
                          "metadata": {
                            "type": "object",
                            "properties": {
                              "clientInfo": {
                                "nullable": true
                              },
                              "serverInfo": {
                                "nullable": true
                              },
                              "capabilities": {
                                "nullable": true
                              }
                            }
                          }
                        },
                        "required": [
                          "id",
                          "serverId",
                          "status",
                          "startedAt",
                          "lastActivity"
                        ]
                      }
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}": {
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Get MCP session by ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "serverId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "idle",
                        "disconnected"
                      ]
                    },
                    "startedAt": {
                      "type": "string"
                    },
                    "lastActivity": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "clientInfo": {
                          "nullable": true
                        },
                        "serverInfo": {
                          "nullable": true
                        },
                        "capabilities": {
                          "nullable": true
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "serverId",
                    "status",
                    "startedAt",
                    "lastActivity"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/close": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Close an MCP session",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string"
                  },
                  "force": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/refresh": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Refresh/keep-alive an MCP session",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "serverId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "idle",
                        "disconnected"
                      ]
                    },
                    "startedAt": {
                      "type": "string"
                    },
                    "lastActivity": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "clientInfo": {
                          "nullable": true
                        },
                        "serverInfo": {
                          "nullable": true
                        },
                        "capabilities": {
                          "nullable": true
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "serverId",
                    "status",
                    "startedAt",
                    "lastActivity"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/{sessionId}/history": {
      "get": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Get session command history",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionId": {
                          "type": "string"
                        },
                        "history": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "request",
                                  "response",
                                  "notification"
                                ]
                              },
                              "method": {
                                "type": "string"
                              },
                              "params": {
                                "nullable": true
                              },
                              "result": {
                                "nullable": true
                              },
                              "error": {
                                "nullable": true
                              }
                            },
                            "required": [
                              "timestamp",
                              "type"
                            ]
                          }
                        },
                        "total": {
                          "type": "number"
                        },
                        "hasMore": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "sessionId",
                        "history",
                        "total",
                        "hasMore"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/sessions/cleanup": {
      "post": {
        "tags": [
          "MCP",
          "Sessions"
        ],
        "summary": "Cleanup idle MCP sessions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "idleThresholdMinutes": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "default": 30
                  },
                  "dryRun": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sessionsChecked": {
                          "type": "number"
                        },
                        "sessionsClosed": {
                          "type": "number"
                        },
                        "sessionIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "dryRun": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "sessionsChecked",
                        "sessionsClosed",
                        "sessionIds",
                        "dryRun"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/status": {
      "get": {
        "tags": [
          "Git",
          "Status"
        ],
        "summary": "Get git status for a project",
        "description": "Retrieves the current git status including staged, unstaged, and untracked files",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Force refresh the git status (bypass cache)"
            },
            "required": false,
            "name": "refresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stage": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Stage files for commit",
        "description": "Stages specified files or patterns for the next commit",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of file paths to stage"
                  }
                },
                "required": [
                  "filePaths"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/unstage": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Unstage files from commit",
        "description": "Removes specified files from the staging area",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of file paths to unstage"
                  }
                },
                "required": [
                  "filePaths"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stage-all": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Stage all changes",
        "description": "Stages all modified and untracked files for commit",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All changes staged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/unstage-all": {
      "post": {
        "tags": [
          "Git",
          "Staging"
        ],
        "summary": "Unstage all changes",
        "description": "Removes all files from the staging area",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All changes unstaged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/commit": {
      "post": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Create a new commit",
        "description": "Creates a new commit with staged changes",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/log": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get commit history",
        "description": "Retrieves the commit history for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 50
            },
            "required": false,
            "name": "maxCount",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 0
            },
            "required": false,
            "name": "skip",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "author",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "since",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "until",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "grep",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitLogResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/log-enhanced": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get enhanced commit history",
        "description": "Retrieves detailed commit history with additional metadata",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 50
            },
            "required": false,
            "name": "maxCount",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 0
            },
            "required": false,
            "name": "skip",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "author",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "since",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "until",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "grep",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitLogEnhancedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/commits/{commitHash}": {
      "get": {
        "tags": [
          "Git",
          "Commits"
        ],
        "summary": "Get commit details",
        "description": "Retrieves detailed information about a specific commit",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commitHash",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/diff": {
      "get": {
        "tags": [
          "Git",
          "Diff"
        ],
        "summary": "Get file diff",
        "description": "Retrieves the diff for a specific file",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Path to the file to diff"
            },
            "required": true,
            "name": "filePath",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Whether to get the cached/staged diff"
            },
            "required": false,
            "name": "cached",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiffResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/branches": {
      "get": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "List all branches",
        "description": "Retrieves all local and remote branches for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Create a new branch",
        "description": "Creates a new branch from the specified starting point",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "startPoint": {
                    "type": "string",
                    "description": "Branch or commit to start from"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "201": {
            "description": "Branch created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/branches-enhanced": {
      "get": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "List branches with enhanced information",
        "description": "Retrieves branches with additional metadata like ahead/behind counts",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchListEnhancedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/branches/switch": {
      "post": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Switch to a different branch",
        "description": "Switches the working directory to the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "createIfNotExists": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/branches/{branchName}": {
      "delete": {
        "tags": [
          "Git",
          "Branches"
        ],
        "summary": "Delete a branch",
        "description": "Deletes the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "branchName",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Force delete even if branch has unmerged changes"
            },
            "required": false,
            "name": "force",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stash": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get list of all stashes",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StashListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Stash current changes",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changes stashed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Git",
          "Stash"
        ],
        "summary": "Drop a stash",
        "description": "Removes the specified stash from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stashRef": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stash/apply": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Apply a stash without removing it from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stash applied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/stash/pop": {
      "post": {
        "tags": [
          "Git",
          "Stash"
        ],
        "summary": "Pop a stash",
        "description": "Applies the specified stash and removes it from the stash list",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stashRef": {
                    "type": "string",
                    "default": "stash@{0}"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/worktrees": {
      "get": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "List all worktrees",
        "description": "Retrieves the list of all worktrees for the project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorktreeListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Add a new worktree",
        "description": "Creates a new worktree for the specified branch",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Path where to create the worktree"
                  },
                  "branch": {
                    "type": "string",
                    "description": "Branch to check out"
                  },
                  "newBranch": {
                    "type": "string",
                    "description": "Create new branch with this name"
                  },
                  "commitish": {
                    "type": "string",
                    "description": "Commit/tag to check out"
                  },
                  "detach": {
                    "type": "boolean",
                    "description": "Detach HEAD at specified commit"
                  }
                },
                "required": [
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Worktree added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Remove a worktree",
        "description": "Removes the specified worktree",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Path of the worktree to remove"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Force removal even with uncommitted changes"
                  }
                },
                "required": [
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/worktrees/lock": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Lock a worktree",
        "description": "Locks the specified worktree to prevent deletion",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Path of the worktree to lock"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for locking"
                  }
                },
                "required": [
                  "path"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree locked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/worktrees/unlock": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Unlock a worktree",
        "description": "Unlocks the specified worktree",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "worktreePath": {
                    "type": "string"
                  }
                },
                "required": [
                  "worktreePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Worktree unlocked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/worktrees/prune": {
      "post": {
        "tags": [
          "Git",
          "Worktrees"
        ],
        "summary": "Prune worktrees",
        "description": "Removes worktree entries that no longer exist",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Perform a dry run without actually pruning"
            },
            "required": false,
            "name": "dryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PruneWorktreesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/remotes": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get all configured remotes for a git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/push": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Push changes to a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remote": {
                    "type": "string",
                    "default": "origin"
                  },
                  "branch": {
                    "type": "string",
                    "description": "Current branch if not specified"
                  },
                  "force": {
                    "type": "boolean"
                  },
                  "setUpstream": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/fetch": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Fetch updates from a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remote": {
                    "type": "string",
                    "default": "origin"
                  },
                  "prune": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/pull": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Pull changes from a remote repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remote": {
                    "type": "string",
                    "default": "origin"
                  },
                  "branch": {
                    "type": "string"
                  },
                  "rebase": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pulled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/tags": {
      "get": {
        "tags": [
          "Git"
        ],
        "description": "Get all tags for a git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Create a new tag in the git repository",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "ref": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/git/reset": {
      "post": {
        "tags": [
          "Git"
        ],
        "description": "Reset current HEAD to a specified state",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": {
                    "type": "string",
                    "description": "Commit reference to reset to"
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "soft",
                      "mixed",
                      "hard"
                    ],
                    "default": "mixed"
                  }
                },
                "required": [
                  "ref"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/active-tab": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "clientId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveTabResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tabId": {
                    "type": "number",
                    "minimum": 0
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "tabMetadata": {
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string"
                      },
                      "selectedFiles": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "selectedFilePaths": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "selectedPrompts": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "userPrompt": {
                        "type": "string"
                      },
                      "fileSearch": {
                        "type": "string"
                      },
                      "contextLimit": {
                        "type": "number"
                      },
                      "preferredEditor": {
                        "type": "string",
                        "enum": [
                          "vscode",
                          "cursor",
                          "webstorm"
                        ]
                      },
                      "suggestedFileIds": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "ticketSearch": {
                        "type": "string"
                      },
                      "ticketSort": {
                        "type": "string",
                        "enum": [
                          "created_asc",
                          "created_desc",
                          "status",
                          "priority"
                        ]
                      },
                      "ticketStatusFilter": {
                        "type": "string",
                        "enum": [
                          "all",
                          "open",
                          "in_progress",
                          "closed",
                          "non_closed"
                        ]
                      },
                      "searchByContent": {
                        "type": "boolean"
                      },
                      "resolveImports": {
                        "type": "boolean"
                      },
                      "bookmarkedFileGroups": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "sortOrder": {
                        "type": "number"
                      },
                      "promptsPanelCollapsed": {
                        "type": "boolean"
                      },
                      "selectedFilesCollapsed": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "required": [
                  "tabId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveTabResponseRequired"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "clientId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/project-tabs/{tabId}/generate-name": {
      "post": {
        "tags": [
          "Project Tabs"
        ],
        "operationId": "generateProjectTabName",
        "summary": "Generate an AI-powered name for a project tab",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "tabId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectId": {
                    "type": "number"
                  },
                  "tabData": {
                    "type": "object",
                    "properties": {
                      "selectedFiles": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "userPrompt": {
                        "type": "string"
                      }
                    }
                  },
                  "existingNames": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "projectId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "success"
                          ]
                        },
                        "generatedAt": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "status",
                        "generatedAt"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/detect": {
      "get": {
        "tags": [
          "Agent Files"
        ],
        "description": "Detect agent instruction files for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "projectFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "global",
                                  "project"
                                ]
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "writable": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "metadata": {
                                "type": "object",
                                "additionalProperties": {
                                  "nullable": true
                                }
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "path",
                              "scope",
                              "exists",
                              "writable"
                            ]
                          }
                        },
                        "globalFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              },
                              "scope": {
                                "type": "string",
                                "enum": [
                                  "global",
                                  "project"
                                ]
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "writable": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "metadata": {
                                "type": "object",
                                "additionalProperties": {
                                  "nullable": true
                                }
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "path",
                              "scope",
                              "exists",
                              "writable"
                            ]
                          }
                        },
                        "suggestedFiles": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "suggestedPath": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "suggestedPath"
                            ]
                          }
                        }
                      },
                      "required": [
                        "projectFiles",
                        "globalFiles",
                        "suggestedFiles"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/update": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Update an agent file with Promptliano instructions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string"
                  },
                  "includeExamples": {
                    "type": "boolean"
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "backedUp": {
                          "type": "boolean"
                        },
                        "filePath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "filePath"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/remove-instructions": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Remove Promptliano instructions from an agent file",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/status": {
      "get": {
        "tags": [
          "Agent Files"
        ],
        "description": "Check status of agent files and instruction versions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "string"
                        },
                        "files": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string"
                              },
                              "exists": {
                                "type": "boolean"
                              },
                              "hasInstructions": {
                                "type": "boolean"
                              },
                              "instructionVersion": {
                                "type": "string"
                              },
                              "isOutdated": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "path",
                              "exists",
                              "hasInstructions",
                              "isOutdated"
                            ]
                          }
                        }
                      },
                      "required": [
                        "currentVersion",
                        "files"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agent-files/create": {
      "post": {
        "tags": [
          "Agent Files"
        ],
        "description": "Create a new agent file with instructions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "includeExamples": {
                    "type": "boolean"
                  },
                  "customInstructions": {
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "filePath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "filePath"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents": {
      "post": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "Create a new Claude agent",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "query"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClaudeAgentBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "List all available Claude agents",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeAgentListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/agents/{agentId}": {
      "get": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "Get a specific Claude agent by its ID",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Agent ID (filename without .md extension)",
              "example": "code-reviewer"
            },
            "required": true,
            "name": "agentId",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "Update a Claude agent's details",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Agent ID (filename without .md extension)",
              "example": "code-reviewer"
            },
            "required": true,
            "name": "agentId",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "query"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClaudeAgentBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Claude Agents"
        ],
        "summary": "Delete a Claude agent",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Agent ID (filename without .md extension)",
              "example": "code-reviewer"
            },
            "required": true,
            "name": "agentId",
            "in": "path"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/agents": {
      "get": {
        "tags": [
          "Projects",
          "Claude Agents"
        ],
        "summary": "List Claude agents associated with a specific project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeAgentListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/suggest-agents": {
      "post": {
        "tags": [
          "Projects",
          "Claude Agents",
          "AI"
        ],
        "summary": "Get AI-suggested Claude agents based on user input",
        "description": "Uses AI to analyze user input and suggest the most relevant agents for the task",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestAgentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSuggestionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands": {
      "post": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Create a new Claude command",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClaudeCommandBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Command created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "List Claude commands for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Search query for command name, description, or content",
              "example": "security"
            },
            "required": false,
            "name": "query",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "project",
                "user"
              ],
              "description": "Filter by command scope",
              "example": "project"
            },
            "required": false,
            "name": "scope",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Filter by namespace",
              "example": "frontend"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Include user-global commands in results",
              "example": true
            },
            "required": false,
            "name": "includeGlobal",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20,
              "description": "Maximum results to return",
              "example": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "description": "Pagination offset",
              "example": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeCommandListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands/{commandName}": {
      "get": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Get a specific Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commandName",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Update a Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commandName",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClaudeCommandBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Delete a Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commandName",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands/{commandName}/execute": {
      "post": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Execute a Claude command",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "nullable": true
            },
            "required": false,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "commandName",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "namespace",
            "in": "query"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteClaudeCommandBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandExecutionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands/generate": {
      "post": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Generate a new Claude command using AI",
        "description": "Uses AI to generate a complete slash command based on user requirements and project context",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandGenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/commands/suggest": {
      "post": {
        "tags": [
          "Claude Commands"
        ],
        "summary": "Get AI-powered command suggestions",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "string"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true,
                    "maximum": 10,
                    "default": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandSuggestionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/mcp-status/{projectId}": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get MCP installation status for Claude Code and Claude Desktop",
        "description": "Checks MCP configuration status across Claude Desktop and Claude Code CLI",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/metadata": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get lightweight session metadata for a project",
        "description": "Retrieves session metadata without full message content for fast loading",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeSessionsMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/recent": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get recent Claude Code sessions",
        "description": "Retrieves the most recent sessions for fast access (default 10 sessions)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 50,
              "default": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeSessionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/paginated": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get sessions with cursor-based pagination",
        "description": "Retrieves sessions with efficient cursor-based pagination for large datasets",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "cursor",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "lastUpdate",
                "startTime",
                "messageCount",
                "fileSize"
              ],
              "default": "lastUpdate"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeSessionsPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/{sessionId}/full": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get complete Claude Code session with full message data",
        "description": "Retrieves a complete session including all messages and token usage data",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeFullSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}/{sessionId}": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get messages for a specific Claude Code session",
        "description": "Retrieves all messages from a specific chat session",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "assistant",
                "all"
              ],
              "default": "all"
            },
            "required": false,
            "name": "role",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 100
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/sessions/{projectId}": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get all Claude Code chat sessions for a project",
        "description": "Retrieves all chat sessions from Claude Code local storage with optional cursor-based pagination",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "search",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "branch",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "endDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true,
              "default": 50
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            },
            "required": false,
            "name": "useCursor",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "cursor",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "lastUpdate",
                "startTime",
                "messageCount"
              ],
              "default": "lastUpdate"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeSessionsEnhancedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/project-data/{projectId}": {
      "get": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Get Claude Code project metadata",
        "description": "Retrieves project-level data including branches, working directories, and statistics",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "description": "Entity ID - coerces strings to positive integers for URL parameters",
              "format": "int64",
              "example": 1716537600000
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaudeProjectDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-code/import-session/{projectId}/{sessionId}": {
      "post": {
        "tags": [
          "Claude Code"
        ],
        "summary": "Import a Claude Code session into a Promptliano chat",
        "description": "Imports all messages from a Claude Code session into a new Promptliano chat",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "sessionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}": {
      "get": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "List all hooks for a project",
        "description": "Retrieves all Claude Code hooks configured for the specified project path",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Create new hook",
        "description": "Creates a new Claude Code hook configuration",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "enum": [
                      "PreToolUse",
                      "PostToolUse",
                      "UserPromptSubmit",
                      "Notification",
                      "Stop",
                      "SubagentStop",
                      "SessionStart",
                      "PreCompact"
                    ],
                    "description": "Hook event type that triggers the hook execution",
                    "example": "PreToolUse"
                  },
                  "matcher": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Pattern to match tool names",
                    "example": "Edit|Write"
                  },
                  "command": {
                    "type": "string",
                    "minLength": 1
                  },
                  "timeout": {
                    "type": "number"
                  }
                },
                "required": [
                  "event",
                  "matcher",
                  "command"
                ],
                "example": {
                  "event": "PostToolUse",
                  "matcher": "Edit",
                  "command": "npm test",
                  "timeout": 30
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Hook created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}/{eventName}/{matcherIndex}": {
      "get": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Get specific hook configuration",
        "description": "Retrieves a specific hook by its event name and matcher index",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "PreToolUse",
                "PostToolUse",
                "UserPromptSubmit",
                "Notification",
                "Stop",
                "SubagentStop",
                "SessionStart",
                "PreCompact"
              ],
              "description": "Hook event name",
              "example": "PreToolUse"
            },
            "required": true,
            "name": "eventName",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "description": "Index of the matcher group"
            },
            "required": false,
            "name": "matcherIndex",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Update hook configuration",
        "description": "Updates an existing Claude Code hook configuration",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "PreToolUse",
                "PostToolUse",
                "UserPromptSubmit",
                "Notification",
                "Stop",
                "SubagentStop",
                "SessionStart",
                "PreCompact"
              ],
              "description": "Hook event name",
              "example": "PreToolUse"
            },
            "required": true,
            "name": "eventName",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "description": "Index of the matcher group"
            },
            "required": false,
            "name": "matcherIndex",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "enum": [
                      "PreToolUse",
                      "PostToolUse",
                      "UserPromptSubmit",
                      "Notification",
                      "Stop",
                      "SubagentStop",
                      "SessionStart",
                      "PreCompact"
                    ],
                    "description": "Hook event type that triggers the hook execution",
                    "example": "PreToolUse"
                  },
                  "matcherIndex": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "matcher": {
                    "type": "string",
                    "minLength": 1
                  },
                  "command": {
                    "type": "string",
                    "minLength": 1
                  },
                  "timeout": {
                    "type": "number"
                  }
                },
                "example": {
                  "event": "PostToolUse",
                  "matcherIndex": 0,
                  "command": "npm run test:watch"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Delete hook configuration",
        "description": "Deletes an existing Claude Code hook configuration",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "PreToolUse",
                "PostToolUse",
                "UserPromptSubmit",
                "Notification",
                "Stop",
                "SubagentStop",
                "SessionStart",
                "PreCompact"
              ],
              "description": "Hook event name",
              "example": "PreToolUse"
            },
            "required": true,
            "name": "eventName",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "nullable": true,
              "minimum": 0,
              "description": "Index of the matcher group"
            },
            "required": false,
            "name": "matcherIndex",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}/generate": {
      "post": {
        "tags": [
          "Claude Hooks",
          "AI"
        ],
        "summary": "Generate hook from description",
        "description": "Uses AI to generate a hook configuration from a natural language description",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HookGenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}/test": {
      "post": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Test hook (placeholder)",
        "description": "Note: Claude Code handles actual hook execution. This endpoint returns a message.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HookTestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookTestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/claude-hooks/{projectPath}/search": {
      "get": {
        "tags": [
          "Claude Hooks"
        ],
        "summary": "Search hooks",
        "description": "Searches hooks by command, matcher, event name",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Project directory path (URL encoded)"
            },
            "required": true,
            "name": "projectPath",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Search query for hooks"
            },
            "required": false,
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/installation/detect": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Detect installed MCP-compatible tools",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetectToolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/installation/status": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Get MCP installation and connection status for a project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstallationStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/installation/install": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install Promptliano MCP for a specific tool",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "debug": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstallResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/installation/uninstall": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Uninstall Promptliano MCP for a specific tool",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UninstallResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/status": {
      "get": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Get global MCP connection status",
        "responses": {
          "200": {
            "description": "Global MCP status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalSessions": {
                          "type": "number"
                        },
                        "projectSessions": {
                          "type": "number"
                        },
                        "projectStatuses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "projectId": {
                                "type": "number"
                              },
                              "connected": {
                                "type": "boolean"
                              },
                              "sessionId": {
                                "type": "string"
                              },
                              "lastActivity": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "projectId",
                              "connected"
                            ]
                          }
                        }
                      },
                      "required": [
                        "totalSessions",
                        "projectSessions",
                        "projectStatuses"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "properties": {
                      "mcpServers": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "stdio",
                                "http"
                              ],
                              "default": "stdio"
                            },
                            "command": {
                              "type": "string"
                            },
                            "args": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "env": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "timeout": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "command"
                          ]
                        }
                      },
                      "inputs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "promptString",
                                "promptNumber",
                                "promptBoolean"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "default": {
                              "nullable": true
                            },
                            "password": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "type",
                            "id",
                            "description"
                          ]
                        }
                      },
                      "extends": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "required": [
                  "config"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/installation/batch-install": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install Promptliano MCP for multiple tools at once",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tools": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "claude-desktop",
                        "vscode",
                        "cursor",
                        "continue",
                        "claude-code",
                        "windsurf"
                      ]
                    }
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "debug": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "tools"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Batch installation results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tool": {
                                "type": "string"
                              },
                              "success": {
                                "type": "boolean"
                              },
                              "message": {
                                "type": "string"
                              },
                              "configPath": {
                                "type": "string"
                              },
                              "backedUp": {
                                "type": "boolean"
                              },
                              "backupPath": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "tool",
                              "success",
                              "message"
                            ]
                          }
                        },
                        "summary": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "number"
                            },
                            "succeeded": {
                              "type": "number"
                            },
                            "failed": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "total",
                            "succeeded",
                            "failed"
                          ]
                        }
                      },
                      "required": [
                        "results",
                        "summary"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/install-project-config": {
      "post": {
        "tags": [
          "MCP Installation"
        ],
        "description": "Install MCP configuration at the project level (.mcp.json)",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "serverUrl": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project MCP configuration installed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "configPath": {
                          "type": "string"
                        },
                        "backedUp": {
                          "type": "boolean"
                        },
                        "backupPath": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "message",
                        "configPath",
                        "backedUp"
                      ]
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config/locations": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigLocationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config/merged": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config/expanded": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config/save-to-location": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "properties": {
                      "mcpServers": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "stdio",
                                "http"
                              ],
                              "default": "stdio"
                            },
                            "command": {
                              "type": "string"
                            },
                            "args": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "env": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "timeout": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "command"
                          ]
                        }
                      },
                      "inputs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "promptString",
                                "promptNumber",
                                "promptBoolean"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "default": {
                              "nullable": true
                            },
                            "password": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "type",
                            "id",
                            "description"
                          ]
                        }
                      },
                      "extends": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "location": {
                    "type": "string"
                  }
                },
                "required": [
                  "config",
                  "location"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/mcp/config/default-for-location": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "required": true,
            "name": "projectId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": true,
            "name": "location",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/config": {
      "get": {
        "tags": [
          "MCP Global"
        ],
        "description": "Get global MCP configuration",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalMCPConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "MCP Global"
        ],
        "description": "Update global MCP configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "defaultServerUrl": {
                    "type": "string"
                  },
                  "debugMode": {
                    "type": "boolean"
                  },
                  "defaultTimeout": {
                    "type": "number"
                  },
                  "globalEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalMCPConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/installations": {
      "get": {
        "tags": [
          "MCP Global"
        ],
        "description": "Get all global MCP installations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalInstallationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/install": {
      "post": {
        "tags": [
          "MCP Global"
        ],
        "description": "Install Promptliano MCP globally for a tool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  },
                  "serverUrl": {
                    "type": "string"
                  },
                  "debug": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalInstallResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/uninstall": {
      "post": {
        "tags": [
          "MCP Global"
        ],
        "description": "Uninstall global Promptliano MCP for a tool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tool": {
                    "type": "string",
                    "enum": [
                      "claude-desktop",
                      "vscode",
                      "cursor",
                      "continue",
                      "claude-code",
                      "windsurf"
                    ]
                  }
                },
                "required": [
                  "tool"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalUninstallResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp/global/status": {
      "get": {
        "tags": [
          "MCP Global"
        ],
        "description": "Get global MCP installation status",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}